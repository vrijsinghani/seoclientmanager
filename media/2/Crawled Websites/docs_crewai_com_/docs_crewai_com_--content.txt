Website URL: https://docs.crewai.com/

Links Visited:
/, /core-concepts/Agents/, /core-concepts/Cli/, /core-concepts/Collaboration/, /core-concepts/Crews/, /core-concepts/Flows/, /core-concepts/LLMs/, /core-concepts/Memory/, /core-concepts/Pipeline/, /core-concepts/Planning/, /core-concepts/Processes/, /core-concepts/Tasks/, /core-concepts/Testing/, /core-concepts/Tools/, /core-concepts/Training-Crew/, /core-concepts/Using-LangChain-Tools/, /core-concepts/Using-LlamaIndex-Tools/, /getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/, /getting-started/Installing-CrewAI/, /getting-started/Start-a-New-CrewAI-Project-Template-Method/, /how-to/AgentOps-Observability/, /how-to/Coding-Agents/, /how-to/Conditional-Tasks/, /how-to/Create-Custom-Tools/, /how-to/Customize-Prompts/, /how-to/Customizing-Agents/, /how-to/Force-Tool-Ouput-as-Result/, /how-to/Hierarchical/, /how-to/Human-Input-on-Execution/, /how-to/Kickoff-async/, /how-to/Kickoff-for-each/, /how-to/LLM-Connections/, /how-to/Langtrace-Observability/, /how-to/Replay-tasks-from-latest-Crew-Kickoff/, /how-to/Sequential/, /how-to/Your-Own-Manager-Agent/, /telemetry/Telemetry/, /tools/BrowserbaseLoadTool/, /tools/CSVSearchTool/, /tools/CodeDocsSearchTool/, /tools/CodeInterpreterTool/, /tools/ComposioTool/, /tools/DALL-ETool/, /tools/DOCXSearchTool/, /tools/DirectoryReadTool/, /tools/DirectorySearchTool/, /tools/EXASearchTool/, /tools/FileReadTool/, /tools/FileWriteTool/, /tools/FirecrawlCrawlWebsiteTool/, /tools/FirecrawlScrapeWebsiteTool/, /tools/FirecrawlSearchTool/, /tools/GitHubSearchTool/, /tools/JSONSearchTool/, /tools/MDXSearchTool/, /tools/MySQLTool/, /tools/NL2SQLTool/, /tools/PDFSearchTool/, /tools/PGSearchTool/, /tools/ScrapeWebsiteTool/, /tools/SeleniumScrapingTool/, /tools/SerperDevTool/, /tools/SpiderTool/, /tools/TXTSearchTool/, /tools/VisionTool/, /tools/WebsiteSearchTool/, /tools/XMLSearchTool/, /tools/YoutubeChannelSearchTool/, /tools/YoutubeVideoSearchTool/, /, /core-concepts/Agents/, /core-concepts/Cli/, /core-concepts/Collaboration/, /core-concepts/Crews/, /core-concepts/Flows/, /core-concepts/LLMs/, /core-concepts/Memory/, /core-concepts/Pipeline/, /core-concepts/Planning/, /core-concepts/Processes/, /core-concepts/Tasks/, /core-concepts/Testing/, /core-concepts/Tools/, /core-concepts/Training-Crew/, /core-concepts/Using-LangChain-Tools/, /core-concepts/Using-LlamaIndex-Tools/, /getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/, /getting-started/Installing-CrewAI/, /getting-started/Start-a-New-CrewAI-Project-Template-Method/, /how-to/AgentOps-Observability/, /how-to/Coding-Agents/, /how-to/Conditional-Tasks/, /how-to/Create-Custom-Tools/, /how-to/Customize-Prompts/, /how-to/Customizing-Agents/, /how-to/Force-Tool-Ouput-as-Result/, /how-to/Hierarchical/, /how-to/Human-Input-on-Execution/, /how-to/Kickoff-async/, /how-to/Kickoff-for-each/, /how-to/LLM-Connections/, /how-to/Langtrace-Observability/, /how-to/Replay-tasks-from-latest-Crew-Kickoff/, /how-to/Sequential/, /how-to/Your-Own-Manager-Agent/, /telemetry/Telemetry/, /tools/BrowserbaseLoadTool/, /tools/CSVSearchTool/, /tools/CodeDocsSearchTool/, /tools/CodeInterpreterTool/, /tools/ComposioTool/, /tools/DALL-ETool/, /tools/DOCXSearchTool/, /tools/DirectoryReadTool/, /tools/DirectorySearchTool/, /tools/EXASearchTool/, /tools/FileReadTool/, /tools/FileWriteTool/, /tools/FirecrawlCrawlWebsiteTool/, /tools/FirecrawlScrapeWebsiteTool/, /tools/FirecrawlSearchTool/, /tools/GitHubSearchTool/, /tools/JSONSearchTool/, /tools/MDXSearchTool/, /tools/MySQLTool/, /tools/NL2SQLTool/, /tools/PDFSearchTool/, /tools/PGSearchTool/, /tools/ScrapeWebsiteTool/, /tools/SeleniumScrapingTool/, /tools/SerperDevTool/, /tools/SpiderTool/, /tools/TXTSearchTool/, /tools/VisionTool/, /tools/WebsiteSearchTool/, /tools/XMLSearchTool/, /tools/YoutubeChannelSearchTool/, /tools/YoutubeVideoSearchTool/, /, /core-concepts/Agents/, /core-concepts/Cli/, /core-concepts/Collaboration/, /core-concepts/Crews/, /core-concepts/Flows/, /core-concepts/LLMs/, /core-concepts/Memory/, /core-concepts/Pipeline/, /core-concepts/Planning/, /core-concepts/Processes/, /core-concepts/Tasks/, /core-concepts/Testing/, /core-concepts/Tools/, /core-concepts/Training-Crew/, /core-concepts/Using-LangChain-Tools/, /core-concepts/Using-LlamaIndex-Tools/, /getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/, /getting-started/Installing-CrewAI/, /getting-started/Start-a-New-CrewAI-Project-Template-Method/, /how-to/AgentOps-Observability/, /how-to/Coding-Agents/, /how-to/Conditional-Tasks/, /how-to/Create-Custom-Tools/, /how-to/Customize-Prompts/, /how-to/Customizing-Agents/, /how-to/Force-Tool-Ouput-as-Result/, /how-to/Hierarchical/, /how-to/Human-Input-on-Execution/, /how-to/Kickoff-async/, /how-to/Kickoff-for-each/, /how-to/LLM-Connections/, /how-to/Langtrace-Observability/, /how-to/Replay-tasks-from-latest-Crew-Kickoff/, /how-to/Sequential/, /how-to/Your-Own-Manager-Agent/, /telemetry/Telemetry/, /tools/BrowserbaseLoadTool/, /tools/CSVSearchTool/, /tools/CodeDocsSearchTool/, /tools/CodeInterpreterTool/, /tools/ComposioTool/, /tools/DALL-ETool/, /tools/DOCXSearchTool/, /tools/DirectoryReadTool/, /tools/DirectorySearchTool/, /tools/EXASearchTool/, /tools/FileReadTool/, /tools/FileWriteTool/, /tools/FirecrawlCrawlWebsiteTool/, /tools/FirecrawlScrapeWebsiteTool/, /tools/FirecrawlSearchTool/, /tools/GitHubSearchTool/, /tools/JSONSearchTool/, /tools/MDXSearchTool/, /tools/MySQLTool/, /tools/NL2SQLTool/, /tools/PDFSearchTool/, /tools/PGSearchTool/, /tools/ScrapeWebsiteTool/, /tools/SeleniumScrapingTool/, /tools/SerperDevTool/, /tools/SpiderTool/, /tools/TXTSearchTool/, /tools/VisionTool/, /tools/WebsiteSearchTool/, /tools/XMLSearchTool/, /tools/YoutubeChannelSearchTool/, /tools/YoutubeVideoSearchTool/

Total Links: 207

Content:
---link: https://docs.crewai.com
crewAI Documentation¶
Cutting-edge framework for orchestrating role-playing, autonomous AI agents. By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
Getting Started
How-To Guides
- Create Custom Tools
- Using Sequential Process
- Using Hierarchical Process
- Connecting to LLMs
- Customizing Agents
- Coding Agents
- Forcing Tool Output as Result
- Human Input on Execution
- Kickoff a Crew Asynchronously
- Kickoff a Crew for a List
- Replay from a Task
- Conditional Tasks
- Agent Monitoring with AgentOps
- Agent Monitoring with LangTrace
---page-end---
---link: https://docs.crewai.com/core-concepts/Agents/
Agents
What is an Agent?¶
What is an Agent?
An agent is an autonomous unit programmed to:
- Perform tasks
- Make decisions
- Communicate with other agents
Think of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like 'Researcher', 'Writer', or 'Customer Support', each contributing to the overall goal of the crew.
Agent Attributes¶
Attribute | Parameter | Description |
---|---|---|
Role | role |
Defines the agent's function within the crew. It determines the kind of tasks the agent is best suited for. |
Goal | goal |
The individual objective that the agent aims to achieve. It guides the agent's decision-making process. |
Backstory | backstory |
Provides context to the agent's role and goal, enriching the interaction and collaboration dynamics. |
LLM (optional) | llm |
Represents the language model that will run the agent. It dynamically fetches the model name from the OPENAI_MODEL_NAME environment variable, defaulting to "gpt-4" if not specified. |
Tools (optional) | tools |
Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent's execution environment. Tools are initialized with a default value of an empty list. |
Function Calling LLM (optional) | function_calling_llm |
Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is None . |
Max Iter (optional) | max_iter |
Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is 25 . |
Max RPM (optional) | max_rpm |
Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It's optional and can be left unspecified, with a default value of None . |
Max Execution Time (optional) | max_execution_time |
Max Execution Time is the maximum execution time for an agent to execute a task. It's optional and can be left unspecified, with a default value of None , meaning no max execution time. |
Verbose (optional) | verbose |
Setting this to True configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is False . |
Allow Delegation (optional) | allow_delegation |
Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is False . |
Step Callback (optional) | step_callback |
A function that is called after each step of the agent. This can be used to log the agent's actions or to perform other operations. It will overwrite the crew step_callback . |
Cache (optional) | cache |
Indicates if the agent should use a cache for tool usage. Default is True . |
System Template (optional) | system_template |
Specifies the system format for the agent. Default is None . |
Prompt Template (optional) | prompt_template |
Specifies the prompt format for the agent. Default is None . |
Response Template (optional) | response_template |
Specifies the response format for the agent. Default is None . |
Allow Code Execution (optional) | allow_code_execution |
Enable code execution for the agent. Default is False . |
Max Retry Limit (optional) | max_retry_limit |
Maximum number of retries for an agent to execute a task when an error occurs. Default is 2 . |
Use System Prompt (optional) | use_system_prompt |
Adds the ability to not use system prompt (to support o1 models). Default is True . |
Respect Context Window (optional) | respect_context_window |
Summary strategy to avoid overflowing the context window. Default is True . |
Creating an Agent¶
Agent Interaction
Agents can interact with each other using crewAI's built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.
To create an agent, you would typically initialize an instance of the Agent
class with the desired properties. Here's a conceptual example including all attributes:
# Example: Creating an agent with all attributes
from crewai import Agent
agent = Agent(
role='Data Analyst',
goal='Extract actionable insights',
backstory="""You're a data analyst at a large company.
You're responsible for analyzing data and providing insights
to the business.
You're currently working on a project to analyze the
performance of our marketing campaigns.""",
tools=[my_tool1, my_tool2], # Optional, defaults to an empty list
llm=my_llm, # Optional
function_calling_llm=my_llm, # Optional
max_iter=15, # Optional
max_rpm=None, # Optional
max_execution_time=None, # Optional
verbose=True, # Optional
allow_delegation=False, # Optional
step_callback=my_intermediate_step_callback, # Optional
cache=True, # Optional
system_template=my_system_template, # Optional
prompt_template=my_prompt_template, # Optional
response_template=my_response_template, # Optional
config=my_config, # Optional
crew=my_crew, # Optional
tools_handler=my_tools_handler, # Optional
cache_handler=my_cache_handler, # Optional
callbacks=[callback1, callback2], # Optional
allow_code_execution=True, # Optional
max_retry_limit=2, # Optional
use_system_prompt=True, # Optional
respect_context_window=True, # Optional
)
Setting prompt templates¶
Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here's an example of how to set prompt templates:
agent = Agent(
role="{topic} specialist",
goal="Figure {goal} out",
backstory="I am the master of {role}",
system_template="""<|start_header_id|>system<|end_header_id|>
{{ .System }}<|eot_id|>""",
prompt_template="""<|start_header_id|>user<|end_header_id|>
{{ .Prompt }}<|eot_id|>""",
response_template="""<|start_header_id|>assistant<|end_header_id|>
{{ .Response }}<|eot_id|>""",
)
Bring your Third Party Agents¶
Extend your Third Party Agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the crewai's BaseAgent class.
BaseAgent includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.
CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.
from crewai import Agent, Task, Crew
from custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.
from langchain.agents import load_tools
langchain_tools = load_tools(["google-serper"], llm=llm)
agent1 = CustomAgent(
role="agent role",
goal="who is {input}?",
backstory="agent backstory",
verbose=True,
)
task1 = Task(
expected_output="a short biography of {input}",
description="a short biography of {input}",
agent=agent1,
)
agent2 = Agent(
role="agent role",
goal="summarize the short bio for {input} and if needed do more research",
backstory="agent backstory",
verbose=True,
)
task2 = Task(
description="a tldr summary of the short biography",
expected_output="5 bullet point summary of the biography",
agent=agent2,
context=[task1],
)
my_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew = my_crew.kickoff(inputs={"input": "Mark Twain"})
Conclusion¶
Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents, you can create sophisticated AI systems that leverage the power of collaborative intelligence.
---page-end---
---link: https://docs.crewai.com/core-concepts/Cli/
CrewAI CLI Documentation¶
The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews and pipelines.
Installation¶
To use the CrewAI CLI, make sure you have CrewAI & Poetry installed:
Basic Usage¶
The basic structure of a CrewAI CLI command is:
Available Commands¶
1. create¶
Create a new crew or pipeline.
TYPE
: Choose between "crew" or "pipeline"NAME
: Name of the crew or pipeline--router
: (Optional) Create a pipeline with router functionality
Example:
2. version¶
Show the installed version of CrewAI.
--tools
: (Optional) Show the installed version of CrewAI tools
Example:
3. train¶
Train the crew for a specified number of iterations.
-n, --n_iterations INTEGER
: Number of iterations to train the crew (default: 5)-f, --filename TEXT
: Path to a custom file for training (default: "trained_agents_data.pkl")
Example:
4. replay¶
Replay the crew execution from a specific task.
-t, --task_id TEXT
: Replay the crew from this task ID, including all subsequent tasks
Example:
5. log_tasks_outputs¶
Retrieve your latest crew.kickoff() task outputs.
6. reset_memories¶
Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).
-l, --long
: Reset LONG TERM memory-s, --short
: Reset SHORT TERM memory-e, --entities
: Reset ENTITIES memory-k, --kickoff-outputs
: Reset LATEST KICKOFF TASK OUTPUTS-a, --all
: Reset ALL memories
Example:
7. test¶
Test the crew and evaluate the results.
-n, --n_iterations INTEGER
: Number of iterations to test the crew (default: 3)-m, --model TEXT
: LLM Model to run the tests on the Crew (default: "gpt-4o-mini")
Example:
8. run¶
Run the crew.
Note¶
Make sure to run these commands from the directory where your CrewAI project is set up. Some commands may require additional configuration or setup within your project structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Collaboration/
Collaboration
Collaboration Fundamentals¶
Core of Agent Interaction
Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem.
- Information Sharing: Ensures all agents are well-informed and can contribute effectively by sharing data and findings.
- Task Assistance: Allows agents to seek help from peers with the required expertise for specific tasks.
- Resource Allocation: Optimizes task execution through the efficient distribution and sharing of resources among agents.
Enhanced Attributes for Improved Collaboration¶
The Crew
class has been enriched with several attributes to support advanced functionalities:
- Language Model Management (
manager_llm
,function_calling_llm
): Manages language models for executing tasks and tools, facilitating sophisticated agent-tool interactions. Note that whilemanager_llm
is mandatory for hierarchical processes to ensure proper execution flow,function_calling_llm
is optional, with a default value provided for streamlined tool interaction. - Custom Manager Agent (
manager_agent
): Allows specifying a custom agent as the manager instead of using the default manager provided by CrewAI. - Process Flow (
process
): Defines the execution logic (e.g., sequential, hierarchical) to streamline task distribution and execution. - Verbose Logging (
verbose
): Offers detailed logging capabilities for monitoring and debugging purposes. It supports both integer and boolean types to indicate the verbosity level. For example, settingverbose
to 1 might enable basic logging, whereas setting it to True enables more detailed logs. - Rate Limiting (
max_rpm
): Ensures efficient utilization of resources by limiting requests per minute. Guidelines for settingmax_rpm
should consider the complexity of tasks and the expected load on resources. - Internationalization / Customization Support (
language
,prompt_file
): Facilitates full customization of the inner prompts, enhancing global usability. Supported languages and the process for utilizing theprompt_file
attribute for customization should be clearly documented. Example of file - Execution and Output Handling (
full_output
): Distinguishes between full and final outputs for nuanced control over task results. Examples showcasing the difference in outputs can aid in understanding the practical implications of this attribute. - Callback and Telemetry (
step_callback
,task_callback
): Integrates callbacks for step-wise and task-level execution monitoring, alongside telemetry for performance analytics. The purpose and usage oftask_callback
alongsidestep_callback
for granular monitoring should be clearly explained. - Crew Sharing (
share_crew
): Enables sharing of crew information with CrewAI for continuous improvement and training models. The privacy implications and benefits of this feature, including how it contributes to model improvement, should be outlined. - Usage Metrics (
usage_metrics
): Stores all metrics for the language model (LLM) usage during all tasks' execution, providing insights into operational efficiency and areas for improvement. Detailed information on accessing and interpreting these metrics for performance analysis should be provided. - Memory Usage (
memory
): Indicates whether the crew should use memory to store memories of its execution, enhancing task execution and agent learning. - Embedder Configuration (
embedder
): Specifies the configuration for the embedder to be used by the crew for understanding and generating language. This attribute supports customization of the language model provider. - Cache Management (
cache
): Determines whether the crew should use a cache to store the results of tool executions, optimizing performance. - Output Logging (
output_log_file
): Specifies the file path for logging the output of the crew's execution. - Planning Mode (
planning
): Allows crews to plan their actions before executing tasks by settingplanning=True
when creating theCrew
instance. This feature enhances coordination and efficiency. - Replay Feature: Introduces a new CLI for listing tasks from the last run and replaying from a specific task, enhancing task management and troubleshooting.
Delegation: Dividing to Conquer¶
Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew's overall capability.
Implementing Collaboration and Delegation¶
Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs.
Example Scenario¶
Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow.
Conclusion¶
The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation.
---page-end---
---link: https://docs.crewai.com/core-concepts/Crews/
Crews
What is a Crew?¶
A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow.
Crew Attributes¶
Attribute | Parameters | Description |
---|---|---|
Tasks | tasks |
A list of tasks assigned to the crew. |
Agents | agents |
A list of agents that are part of the crew. |
Process (optional) | process |
The process flow (e.g., sequential, hierarchical) the crew follows. Default is sequential . |
Verbose (optional) | verbose |
The verbosity level for logging during execution. Defaults to False . |
Manager LLM (optional) | manager_llm |
The language model used by the manager agent in a hierarchical process. Required when using a hierarchical process. |
Function Calling LLM (optional) | function_calling_llm |
If passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew's LLM for function calling. |
Config (optional) | config |
Optional configuration settings for the crew, in Json or Dict[str, Any] format. |
Max RPM (optional) | max_rpm |
Maximum requests per minute the crew adheres to during execution. Defaults to None . |
Language (optional) | language |
Language used for the crew, defaults to English. |
Language File (optional) | language_file |
Path to the language file to be used for the crew. |
Memory (optional) | memory |
Utilized for storing execution memories (short-term, long-term, entity memory). Defaults to False . |
Cache (optional) | cache |
Specifies whether to use a cache for storing the results of tools' execution. Defaults to True . |
Embedder (optional) | embedder |
Configuration for the embedder to be used by the crew. Mostly used by memory for now. Default is {"provider": "openai"} . |
Full Output (optional) | full_output |
Whether the crew should return the full output with all tasks outputs or just the final output. Defaults to False . |
Step Callback (optional) | step_callback |
A function that is called after each step of every agent. This can be used to log the agent's actions or to perform other operations; it won't override the agent-specific step_callback . |
Task Callback (optional) | task_callback |
A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution. |
Share Crew (optional) | share_crew |
Whether you want to share the complete crew information and execution with the crewAI team to make the library better, and allow us to train models. |
Output Log File (optional) | output_log_file |
Whether you want to have a file with the complete crew output and execution. You can set it using True and it will default to the folder you are currently in and it will be called logs.txt or passing a string with the full path and name of the file. |
Manager Agent (optional) | manager_agent |
manager sets a custom agent that will be used as a manager. |
Manager Callbacks (optional) | manager_callbacks |
manager_callbacks takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used. |
Prompt File (optional) | prompt_file |
Path to the prompt JSON file to be used for the crew. |
Planning (optional) | planning |
Adds planning ability to the Crew. When activated before each Crew iteration, all Crew data is sent to an AgentPlanner that will plan the tasks and this plan will be added to each task description. |
Planning LLM (optional) | planning_llm |
The language model used by the AgentPlanner in a planning process. |
Crew Max RPM
The max_rpm
attribute sets the maximum number of requests per minute the crew can perform to avoid rate limits and will override individual agents' max_rpm
settings if you set it.
Crew Output¶
Understanding Crew Outputs
The output of a crew in the crewAI framework is encapsulated within the CrewOutput
class.
This class provides a structured way to access results of the crew's execution, including various formats such as raw strings, JSON, and Pydantic models.
The CrewOutput
includes the results from the final task output, token usage, and individual task outputs.
Crew Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Raw | raw |
str |
The raw output of the crew. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the crew. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the crew. |
Tasks Output | tasks_output |
List[TaskOutput] |
A list of TaskOutput objects, each representing the output of a task in the crew. |
Token Usage | token_usage |
Dict[str, Any] |
A summary of token usage, providing insights into the language model's performance during execution. |
Crew Output Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the crew output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
**str** | Returns the string representation of the crew output, prioritizing Pydantic, then JSON, then raw. |
Accessing Crew Outputs¶
Once a crew has been executed, its output can be accessed through the output
attribute of the Crew
object. The CrewOutput
class provides various ways to interact with and present this output.
Example¶
# Example crew execution
crew = Crew(
agents=[research_agent, writer_agent],
tasks=[research_task, write_article_task],
verbose=True
)
crew_output = crew.kickoff()
# Accessing the crew output
print(f"Raw Output: {crew_output.raw}")
if crew_output.json_dict:
print(f"JSON Output: {json.dumps(crew_output.json_dict, indent=2)}")
if crew_output.pydantic:
print(f"Pydantic Output: {crew_output.pydantic}")
print(f"Tasks Output: {crew_output.tasks_output}")
print(f"Token Usage: {crew_output.token_usage}")
Memory Utilization¶
Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies.
Cache Utilization¶
Caches can be employed to store the results of tools' execution, making the process more efficient by reducing the need to re-execute identical tasks.
Crew Usage Metrics¶
After the crew execution, you can access the usage_metrics
attribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement.
# Access the crew's usage metrics
crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew.kickoff()
print(crew.usage_metrics)
Crew Execution Process¶
- Sequential Process: Tasks are executed one after another, allowing for a linear flow of work.
- Hierarchical Process: A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. Note: A
manager_llm
ormanager_agent
is required for this process and it's essential for validating the process flow.
Kicking Off a Crew¶
Once your crew is assembled, initiate the workflow with the kickoff()
method. This starts the execution process according to the defined process flow.
Different Ways to Kick Off a Crew¶
Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process: kickoff()
, kickoff_for_each()
, kickoff_async()
, and kickoff_for_each_async()
.
kickoff()
: Starts the execution process according to the defined process flow.kickoff_for_each()
: Executes tasks for each agent individually.kickoff_async()
: Initiates the workflow asynchronously.kickoff_for_each_async()
: Executes tasks for each agent individually in an asynchronous manner.
# Start the crew's task execution
result = my_crew.kickoff()
print(result)
# Example of using kickoff_for_each
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
results = my_crew.kickoff_for_each(inputs=inputs_array)
for result in results:
print(result)
# Example of using kickoff_async
inputs = {'topic': 'AI in healthcare'}
async_result = my_crew.kickoff_async(inputs=inputs)
print(async_result)
# Example of using kickoff_for_each_async
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
async_results = my_crew.kickoff_for_each_async(inputs=inputs_array)
for async_result in async_results:
print(async_result)
These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs.
Replaying from a Specific Task¶
You can now replay from a specific task using our CLI command replay
.
The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the command crewai replay -t <task_id>
, you can specify the task_id
for the replay process.
Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from.
Replaying from a Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
To view the latest kickoff task IDs, use:
Then, to replay from a specific task, use:
These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks.
---page-end---
---link: https://docs.crewai.com/core-concepts/Flows/
CrewAI Flows¶
Introduction¶
CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.
Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI's capabilities.
-
Simplified Workflow Creation: Easily chain together multiple Crews and tasks to create complex AI workflows.
-
State Management: Flows make it super easy to manage and share state between different tasks in your workflow.
-
Event-Driven Architecture: Built on an event-driven model, allowing for dynamic and responsive workflows.
-
Flexible Control Flow: Implement conditional logic, loops, and branching within your workflows.
Getting Started¶
Let's create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task.
import asyncio
from crewai.flow.flow import Flow, listen, start
from litellm import completion
class ExampleFlow(Flow):
model = "gpt-4o-mini"
@start()
def generate_city(self):
print("Starting flow")
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": "Return the name of a random city in the world.",
},
],
)
random_city = response["choices"][0]["message"]["content"]
print(f"Random City: {random_city}")
return random_city
@listen(generate_city)
def generate_fun_fact(self, random_city):
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": f"Tell me a fun fact about {random_city}",
},
],
)
fun_fact = response["choices"][0]["message"]["content"]
return fun_fact
async def main():
flow = ExampleFlow()
result = await flow.kickoff()
print(f"Generated fun fact: {result}")
asyncio.run(main())
In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks: generate_city
and generate_fun_fact
. The generate_city
task is the starting point of the Flow, and the generate_fun_fact
task listens for the output of the generate_city
task.
When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.
@start()¶
The @start()
decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with @start()
are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started.
@listen()¶
The @listen()
decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with @listen()
will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument.
Usage¶
The @listen()
decorator can be used in several ways:
- Listening to a Method by Name: You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.
- Listening to a Method Directly: You can pass the method itself. When that method completes, the listener method will be triggered.
Flow Output¶
Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow.
Retrieving the Final Output¶
When you run a Flow, the final output is determined by the last method that completes. The kickoff()
method returns the output of this final method.
Here's how you can access the final output:
import asyncio
from crewai.flow.flow import Flow, listen, start
class OutputExampleFlow(Flow):
@start()
def first_method(self):
return "Output from first_method"
@listen(first_method)
def second_method(self, first_output):
return f"Second method received: {first_output}"
async def main():
flow = OutputExampleFlow()
final_output = await flow.kickoff()
print("---- Final Output ----")
print(final_output)
asyncio.run(main())
In this example, the second_method
is the last method to complete, so its output will be the final output of the Flow. The kickoff()
method will return this final output, which is then printed to the console.
The output of the Flow will be:
Accessing and Updating State¶
In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.
Here's an example of how to update and access the state:
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StateExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from first_method"
self.state.counter += 1
@listen(first_method)
def second_method(self):
self.state.message += " - updated by second_method"
self.state.counter += 1
return self.state.message
async def main():
flow = StateExampleFlow()
final_output = await flow.kickoff()
print(f"Final Output: {final_output}")
print("Final State:")
print(flow.state)
asyncio.run(main())
In this example, the state is updated by both first_method
and second_method
. After the Flow has run, you can access the final state to see the updates made by these methods.
The output of the Flow will be:
Final Output: Hello from first_method - updated by second_method
Final State:
counter=2 message='Hello from first_method - updated by second_method'
By ensuring that the final method's output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems, while also maintaining and accessing the state throughout the Flow's execution.
Flow State Management¶
Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management, allowing developers to choose the approach that best fits their application's needs.
Unstructured State Management¶
In unstructured state management, all state is stored in the state
attribute of the Flow
class. This approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.
import asyncio
from crewai.flow.flow import Flow, listen, start
class UntructuredExampleFlow(Flow):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
self.state.counter = 0
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = UntructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Flexibility: You can dynamically add attributes to
self.state
without predefined constraints. - Simplicity: Ideal for straightforward workflows where state structure is minimal or varies significantly.
Structured State Management¶
Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow. By using models like Pydantic's BaseModel
, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StructuredExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = StructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Defined Schema:
ExampleState
clearly outlines the state structure, enhancing code readability and maintainability. - Type Safety: Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.
- Auto-Completion: IDEs can provide better auto-completion and error checking based on the defined state model.
Choosing Between Unstructured and Structured State Management¶
-
Use Unstructured State Management when:
-
The workflow's state is simple or highly dynamic.
- Flexibility is prioritized over strict state definitions.
-
Rapid prototyping is required without the overhead of defining schemas.
-
Use Structured State Management when:
- The workflow requires a well-defined and consistent state structure.
- Type safety and validation are important for your application's reliability.
- You want to leverage IDE features like auto-completion and type checking for better developer experience.
By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements.
Flow Control¶
Conditional Logic¶
or¶
The or_
function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, listen, or_, start
class OrExampleFlow(Flow):
@start()
def start_method(self):
return "Hello from the start method"
@listen(start_method)
def second_method(self):
return "Hello from the second method"
@listen(or_(start_method, second_method))
def logger(self, result):
print(f"Logger: {result}")
async def main():
flow = OrExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered by the output of either the start_method
or the second_method
. The or_
function is to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
The output of the Flow will be:
and¶
The and_
function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, and_, listen, start
class AndExampleFlow(Flow):
@start()
def start_method(self):
self.state["greeting"] = "Hello from the start method"
@listen(start_method)
def second_method(self):
self.state["joke"] = "What do computers eat? Microchips."
@listen(and_(start_method, second_method))
def logger(self):
print("---- Logger ----")
print(self.state)
async def main():
flow = AndExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered only when both the start_method
and the second_method
emit an output. The and_
function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
The output of the Flow will be:
---- Logger ----
{'greeting': 'Hello from the start method', 'joke': 'What do computers eat? Microchips.'}
Router¶
The @router()
decorator in Flows allows you to define conditional routing logic based on the output of a method. You can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.
import asyncio
import random
from crewai.flow.flow import Flow, listen, router, start
from pydantic import BaseModel
class ExampleState(BaseModel):
success_flag: bool = False
class RouterFlow(Flow[ExampleState]):
@start()
def start_method(self):
print("Starting the structured flow")
random_boolean = random.choice([True, False])
self.state.success_flag = random_boolean
@router(start_method)
def second_method(self):
if self.state.success_flag:
return "success"
else:
return "failed"
@listen("success")
def third_method(self):
print("Third method running")
@listen("failed")
def fourth_method(self):
print("Fourth method running")
async def main():
flow = RouterFlow()
await flow.kickoff()
asyncio.run(main())
In the above example, the start_method
generates a random boolean value and sets it in the state. The second_method
uses the @router()
decorator to define conditional routing logic based on the value of the boolean. If the boolean is True
, the method returns "success"
, and if it is False
, the method returns "failed"
. The third_method
and fourth_method
listen to the output of the second_method
and execute based on the returned value.
When you run this Flow, the output will change based on the random boolean value generated by the start_method
, but you should see an output similar to the following:
Adding Crews to Flows¶
Creating a flow with multiple crews in CrewAI is straightforward. You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:
This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew called poem_crew
that is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews.
Folder Structure¶
After running the crewai create flow name_of_flow
command, you will see a folder structure similar to the following:
name_of_flow/
├── crews/
│ └── poem_crew/
│ ├── config/
│ │ ├── agents.yaml
│ │ └── tasks.yaml
│ ├── poem_crew.py
├── tools/
│ └── custom_tool.py
├── main.py
├── README.md
├── pyproject.toml
└── .gitignore
Building Your Crews¶
In the crews
folder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, the poem_crew
folder contains:
config/agents.yaml
: Defines the agents for the crew.config/tasks.yaml
: Defines the tasks for the crew.poem_crew.py
: Contains the crew definition, including agents, tasks, and the crew itself.
You can copy, paste, and edit the poem_crew
to create other crews.
Connecting Crews in main.py
¶
The main.py
file is where you create your flow and connect the crews together. You can define your flow by using the Flow
class and the decorators @start
and @listen
to specify the flow of execution.
Here's an example of how you can connect the poem_crew
in the main.py
file:
#!/usr/bin/env python
import asyncio
from random import randint
from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start
from .crews.poem_crew.poem_crew import PoemCrew
class PoemState(BaseModel):
sentence_count: int = 1
poem: str = ""
class PoemFlow(Flow[PoemState]):
@start()
def generate_sentence_count(self):
print("Generating sentence count")
# Generate a number between 1 and 5
self.state.sentence_count = randint(1, 5)
@listen(generate_sentence_count)
def generate_poem(self):
print("Generating poem")
poem_crew = PoemCrew().crew()
result = poem_crew.kickoff(inputs={"sentence_count": self.state.sentence_count})
print("Poem generated", result.raw)
self.state.poem = result.raw
@listen(generate_poem)
def save_poem(self):
print("Saving poem")
with open("poem.txt", "w") as f:
f.write(self.state.poem)
async def run():
"""
Run the flow.
"""
poem_flow = PoemFlow()
await poem_flow.kickoff()
def main():
asyncio.run(run())
if __name__ == "__main__":
main()
In this example, the PoemFlow
class defines a flow that generates a sentence count, uses the PoemCrew
to generate a poem, and then saves the poem to a file. The flow is kicked off by calling the kickoff()
method.
Next Steps¶
If you're interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are four specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:
-
Email Auto Responder Flow: This example demonstrates an infinite loop where a background job continually runs to automate email responses. It's a great use case for tasks that need to be performed repeatedly without manual intervention. View Example
-
Lead Score Flow: This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It's an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. View Example
-
Write a Book Flow: This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. View Example
-
Meeting Assistant Flow: This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It's a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. View Example
By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.
---page-end---
---link: https://docs.crewai.com/core-concepts/LLMs/
Large Language Models (LLMs) in crewAI¶
Introduction¶
Large Language Models (LLMs) are the backbone of intelligent agents in the crewAI framework. This guide will help you understand, configure, and optimize LLM usage for your crewAI projects.
Table of Contents¶
- Key Concepts
- Configuring LLMs for Agents
- 1. Default Configuration
- 2. String Identifier
- 3. LLM Instance
- 4. Custom LLM Objects
- Connecting to OpenAI-Compatible LLMs
- LLM Configuration Options
- Using Ollama (Local LLMs)
- Changing the Base API URL
- Best Practices
- Troubleshooting
Key Concepts¶
- LLM: Large Language Model, the AI powering agent intelligence
- Agent: A crewAI entity that uses an LLM to perform tasks
- Provider: A service that offers LLM capabilities (e.g., OpenAI, Anthropic, Ollama, more providers)
Configuring LLMs for Agents¶
crewAI offers flexible options for setting up LLMs:
1. Default Configuration¶
By default, crewAI uses the gpt-4o-mini
model. It uses environment variables if no LLM is specified:
- OPENAI_MODEL_NAME
(defaults to "gpt-4o-mini" if not set)
- OPENAI_API_BASE
- OPENAI_API_KEY
2. String Identifier¶
3. LLM Instance¶
List of more providers.
4. Custom LLM Objects¶
Pass a custom LLM implementation or object from another library.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
-
Using environment variables:
-
Using LLM class attributes:
LLM Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "gpt-3.5-turbo", "ollama/llama3.1", more providers) |
timeout |
float, int | Maximum time (in seconds) to wait for a response |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
n |
int | Number of completions to generate |
stop |
str, List[str] | Sequence(s) to stop generation |
max_tokens |
int | Maximum number of tokens to generate |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
logit_bias |
Dict[int, float] | Modifies likelihood of specified tokens appearing in the completion |
response_format |
Dict[str, Any] | Specifies the format of the response (e.g., {"type": "json_object"}) |
seed |
int | Sets a random seed for deterministic results |
logprobs |
bool | Whether to return log probabilities of the output tokens |
top_logprobs |
int | Number of most likely tokens to return the log probabilities for |
base_url |
str | The base URL for the API endpoint |
api_version |
str | The version of the API to use |
api_key |
str | Your API key for authentication |
Example:
llm = LLM(
model="gpt-4",
temperature=0.8,
max_tokens=150,
top_p=0.9,
frequency_penalty=0.1,
presence_penalty=0.1,
stop=["END"],
seed=42,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(llm=llm, ...)
Using Ollama (Local LLMs)¶
crewAI supports using Ollama for running open-source models locally:
- Install Ollama: ollama.ai
- Run a model:
ollama run llama2
- Configure agent:
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Best Practices¶
- Choose the right model: Balance capability and cost.
- Optimize prompts: Clear, concise instructions improve output.
- Manage tokens: Monitor and limit token usage for efficiency.
- Use appropriate temperature: Lower for factual tasks, higher for creative ones.
- Implement error handling: Gracefully manage API errors and rate limits.
Troubleshooting¶
- API Errors: Check your API key, network connection, and rate limits.
- Unexpected Outputs: Refine your prompts and adjust temperature or top_p.
- Performance Issues: Consider using a more powerful model or optimizing your queries.
- Timeout Errors: Increase the
timeout
parameter or optimize your input.
---page-end---
---link: https://docs.crewai.com/core-concepts/Memory/
Memory
Introduction to Memory Systems in crewAI¶
Enhancing Agent Intelligence
The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents. This system comprises short-term memory, long-term memory, entity memory, and contextual memory, each serving a unique purpose in aiding agents to remember, reason, and learn from past interactions.
Memory System Components¶
Component | Description |
---|---|
Short-Term Memory | Temporarily stores recent interactions and outcomes using RAG , enabling agents to recall and utilize information relevant to their current context during the current executions. |
Long-Term Memory | Preserves valuable insights and learnings from past executions, allowing agents to build and refine their knowledge over time. |
Entity Memory | Captures and organizes information about entities (people, places, concepts) encountered during tasks, facilitating deeper understanding and relationship mapping. Uses RAG for storing entity information. |
Contextual Memory | Maintains the context of interactions by combining ShortTermMemory , LongTermMemory , and EntityMemory , aiding in the coherence and relevance of agent responses over a sequence of tasks or a conversation. |
How Memory Systems Empower Agents¶
-
Contextual Awareness: With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.
-
Experience Accumulation: Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.
-
Entity Understanding: By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.
Implementing Memory in Your Crew¶
When configuring a crew, you can enable and customize each memory component to suit the crew's objectives and the nature of tasks it will perform.
By default, the memory system is disabled, and you can ensure it is active by setting memory=True
in the crew configuration. The memory will use OpenAI embeddings by default, but you can change it by setting embedder
to a different model. It's also possible to initialize the memory instance with your own instance.
The 'embedder' only applies to Short-Term Memory which uses Chroma for RAG using the EmbedChain package. The Long-Term Memory uses SQLite3 to store task results. Currently, there is no way to override these storage implementations. The data storage files are saved into a platform-specific location found using the appdirs package, and the name of the project can be overridden using the CREWAI_STORAGE_DIR environment variable.
Example: Configuring Memory for a Crew¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True
)
Example: Use Custom Memory Instances e.g FAISS as the VectorDB¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process="Process.sequential",
memory=True,
long_term_memory=EnhanceLongTermMemory(
storage=LTMSQLiteStorage(
db_path="/my_data_dir/my_crew1/long_term_memory_storage.db"
)
),
short_term_memory=EnhanceShortTermMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="short_term",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
entity_memory=EnhanceEntityMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="entities",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
verbose=True,
)
Additional Embedding Providers¶
Using OpenAI embeddings (already default)¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "openai",
"config": {
"model": 'text-embedding-3-small'
}
}
)
Using Google AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "google",
"config": {
"model": 'models/embedding-001',
"task_type": "retrieval_document",
"title": "Embeddings for Embedchain"
}
}
)
Using Azure OpenAI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "azure_openai",
"config": {
"model": 'text-embedding-ada-002',
"deployment_name": "your_embedding_model_deployment_name"
}
}
)
Using GPT4ALL embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "gpt4all"
}
)
Using Vertex AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "vertexai",
"config": {
"model": 'textembedding-gecko'
}
}
)
Using Cohere embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "cohere",
"config": {
"model": "embed-english-v3.0",
"vector_dimension": 1024
}
}
)
Resetting Memory¶
Resetting Memory Options¶
-l, --long
- Description: Reset LONG TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-s, --short
- Description: Reset SHORT TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-e, --entities
- Description: Reset ENTITIES memory.
- Type: Flag (boolean)
-
Default: False
-
-k, --kickoff-outputs
- Description: Reset LATEST KICKOFF TASK OUTPUTS.
- Type: Flag (boolean)
-
Default: False
-
-a, --all
- Description: Reset ALL memories.
- Type: Flag (boolean)
- Default: False
Benefits of Using crewAI's Memory System¶
- Adaptive Learning: Crews become more efficient over time, adapting to new information and refining their approach to tasks.
- Enhanced Personalization: Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.
- Improved Problem Solving: Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.
Getting Started¶
Integrating crewAI's memory system into your projects is straightforward. By leveraging the provided memory components and configurations, you can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.
---page-end---
---link: https://docs.crewai.com/core-concepts/Pipeline/
Pipeline
What is a Pipeline?¶
A pipeline in crewAI represents a structured workflow that allows for the sequential or parallel execution of multiple crews. It provides a way to organize complex processes involving multiple stages, where the output of one stage can serve as input for subsequent stages.
Key Terminology¶
Understanding the following terms is crucial for working effectively with pipelines:
- Stage: A distinct part of the pipeline, which can be either sequential (a single crew) or parallel (multiple crews executing concurrently).
- Kickoff: A specific execution of the pipeline for a given set of inputs, representing a single instance of processing through the pipeline.
- Branch: Parallel executions within a stage (e.g., concurrent crew operations).
- Trace: The journey of an individual input through the entire pipeline, capturing the path and transformations it undergoes.
Example pipeline structure:
This represents a pipeline with three stages:
- A sequential stage (crew1)
- A parallel stage with two branches (crew2 and crew3 executing concurrently)
- Another sequential stage (crew4)
Each input creates its own kickoff, flowing through all stages of the pipeline. Multiple kickoffs can be processed concurrently, each following the defined pipeline structure.
Pipeline Attributes¶
Attribute | Parameters | Description |
---|---|---|
Stages | stages |
A list of PipelineStage (crews, lists of crews, or routers) representing the stages to be executed in sequence. |
Creating a Pipeline¶
When creating a pipeline, you define a series of stages, each consisting of either a single crew or a list of crews for parallel execution. The pipeline ensures that each stage is executed in order, with the output of one stage feeding into the next.
Example: Assembling a Pipeline¶
from crewai import Crew, Process, Pipeline
# Define your crews
research_crew = Crew(
agents=[researcher],
tasks=[research_task],
process=Process.sequential
)
analysis_crew = Crew(
agents=[analyst],
tasks=[analysis_task],
process=Process.sequential
)
writing_crew = Crew(
agents=[writer],
tasks=[writing_task],
process=Process.sequential
)
# Assemble the pipeline
my_pipeline = Pipeline(
stages=[research_crew, analysis_crew, writing_crew]
)
Pipeline Methods¶
Method | Description |
---|---|
kickoff | Executes the pipeline, processing all stages and returning the results. This method initiates one or more kickoffs through the pipeline, handling the flow of data between stages. |
process_runs | Runs the pipeline for each input provided, handling the flow and transformation of data between stages. |
Pipeline Output¶
Understanding Pipeline Outputs
The output of a pipeline in the crewAI framework is encapsulated within the PipelineKickoffResult
class. This class provides a structured way to access the results of the pipeline's execution, including various formats such as raw strings, JSON, and Pydantic models.
Pipeline Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the pipeline output. |
Run Results | run_results |
List[PipelineRunResult] |
A list of PipelineRunResult objects, each representing the output of a single run through the pipeline. |
Pipeline Output Methods¶
Method/Property | Description |
---|---|
add_run_result | Adds a PipelineRunResult to the list of run results. |
Pipeline Run Result Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the run result. |
Raw | raw |
str |
The raw output of the final stage in the pipeline kickoff. |
Pydantic | pydantic |
Any |
A Pydantic model object representing the structured output of the final stage, if applicable. |
JSON Dict | json_dict |
Union[Dict[str, Any], None] |
A dictionary representing the JSON output of the final stage, if applicable. |
Token Usage | token_usage |
Dict[str, UsageMetrics] |
A summary of token usage across all stages of the pipeline kickoff. |
Trace | trace |
List[Any] |
A trace of the journey of inputs through the pipeline kickoff. |
Crews Outputs | crews_outputs |
List[CrewOutput] |
A list of CrewOutput objects, representing the outputs from each crew in the pipeline kickoff. |
Pipeline Run Result Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the run result if the output format of the final task is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the run result, prioritizing Pydantic, then JSON, then raw. |
Accessing Pipeline Outputs¶
Once a pipeline has been executed, its output can be accessed through the PipelineOutput
object returned by the process_runs
method. The PipelineOutput
class provides access to individual PipelineRunResult
objects, each representing a single run through the pipeline.
Example¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}, {"initial_query": "Future of robotics"}]
# Execute the pipeline
pipeline_output = await my_pipeline.process_runs(input_data)
# Access the results
for run_result in pipeline_output.run_results:
print(f"Run ID: {run_result.id}")
print(f"Final Raw Output: {run_result.raw}")
if run_result.json_dict:
print(f"JSON Output: {json.dumps(run_result.json_dict, indent=2)}")
if run_result.pydantic:
print(f"Pydantic Output: {run_result.pydantic}")
print(f"Token Usage: {run_result.token_usage}")
print(f"Trace: {run_result.trace}")
print("Crew Outputs:")
for crew_output in run_result.crews_outputs:
print(f" Crew: {crew_output.raw}")
print("\n")
This example demonstrates how to access and work with the pipeline output, including individual run results and their associated data.
Using Pipelines¶
Pipelines are particularly useful for complex workflows that involve multiple stages of processing, analysis, or content generation. They allow you to:
- Sequence Operations: Execute crews in a specific order, ensuring that the output of one crew is available as input to the next.
- Parallel Processing: Run multiple crews concurrently within a stage for increased efficiency.
- Manage Complex Workflows: Break down large tasks into smaller, manageable steps executed by specialized crews.
Example: Running a Pipeline¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}]
# Execute the pipeline, initiating a run for each input
results = await my_pipeline.process_runs(input_data)
# Access the results
for result in results:
print(f"Final Output: {result.raw}")
print(f"Token Usage: {result.token_usage}")
print(f"Trace: {result.trace}") # Shows the path of the input through all stages
Advanced Features¶
Parallel Execution within Stages¶
You can define parallel execution within a stage by providing a list of crews, creating multiple branches:
parallel_analysis_crew = Crew(agents=[financial_analyst], tasks=[financial_analysis_task])
market_analysis_crew = Crew(agents=[market_analyst], tasks=[market_analysis_task])
my_pipeline = Pipeline(
stages=[
research_crew,
[parallel_analysis_crew, market_analysis_crew], # Parallel execution (branching)
writing_crew
]
)
Routers in Pipelines¶
Routers are a powerful feature in crewAI pipelines that allow for dynamic decision-making and branching within your workflow. They enable you to direct the flow of execution based on specific conditions or criteria, making your pipelines more flexible and adaptive.
What is a Router?¶
A router in crewAI is a special component that can be included as a stage in your pipeline. It evaluates the input data and determines which path the execution should take next. This allows for conditional branching in your pipeline, where different crews or sub-pipelines can be executed based on the router's decision.
Key Components of a Router¶
- Routes: A dictionary of named routes, each associated with a condition and a pipeline to execute if the condition is met.
- Default Route: A fallback pipeline that is executed if none of the defined route conditions are met.
Creating a Router¶
Here's an example of how to create a router:
from crewai import Router, Route, Pipeline, Crew, Agent, Task
# Define your agents
classifier = Agent(name="Classifier", role="Email Classifier")
urgent_handler = Agent(name="Urgent Handler", role="Urgent Email Processor")
normal_handler = Agent(name="Normal Handler", role="Normal Email Processor")
# Define your tasks
classify_task = Task(description="Classify the email based on its content and metadata.")
urgent_task = Task(description="Process and respond to urgent email quickly.")
normal_task = Task(description="Process and respond to normal email thoroughly.")
# Define your crews
classification_crew = Crew(agents=[classifier], tasks=[classify_task]) # classify email between high and low urgency 1-10
urgent_crew = Crew(agents=[urgent_handler], tasks=[urgent_task])
normal_crew = Crew(agents=[normal_handler], tasks=[normal_task])
# Create pipelines for different urgency levels
urgent_pipeline = Pipeline(stages=[urgent_crew])
normal_pipeline = Pipeline(stages=[normal_crew])
# Create a router
email_router = Router(
routes={
"high_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) > 7,
pipeline=urgent_pipeline
),
"low_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) <= 7,
pipeline=normal_pipeline
)
},
default=Pipeline(stages=[normal_pipeline]) # Default to just normal if no urgency score
)
# Use the router in a main pipeline
main_pipeline = Pipeline(stages=[classification_crew, email_router])
inputs = [{"email": "..."}, {"email": "..."}] # List of email data
main_pipeline.kickoff(inputs=inputs=inputs)
In this example, the router decides between an urgent pipeline and a normal pipeline based on the urgency score of the email. If the urgency score is greater than 7, it routes to the urgent pipeline; otherwise, it uses the normal pipeline. If the input doesn't include an urgency score, it defaults to just the classification crew.
Benefits of Using Routers¶
- Dynamic Workflow: Adapt your pipeline's behavior based on input characteristics or intermediate results.
- Efficiency: Route urgent tasks to quicker processes, reserving more thorough pipelines for less time-sensitive inputs.
- Flexibility: Easily modify or extend your pipeline's logic without changing the core structure.
- Scalability: Handle a wide range of email types and urgency levels with a single pipeline structure.
Error Handling and Validation¶
The Pipeline
class includes validation mechanisms to ensure the robustness of the pipeline structure:
- Validates that stages contain only Crew instances or lists of Crew instances.
- Prevents double nesting of stages to maintain a clear structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Planning/
Planning
Introduction¶
The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration, all Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.
Using the Planning Feature¶
Getting started with the planning feature is very easy, the only step required is to add planning=True
to your Crew:
from crewai import Crew, Agent, Task, Process
# Assemble your crew with planning capabilities
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
)
From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.
Planning LLM¶
Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.
from crewai import Crew, Agent, Task, Process
from langchain_openai import ChatOpenAI
# Assemble your crew with planning capabilities and custom LLM
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
planning_llm=ChatOpenAI(model="gpt-4o")
)
Example¶
When running the base case example, you will see something like the following output, which represents the output of the AgentPlanner responsible for creating the step-by-step logic to add to the Agents' tasks.
``` [2024-07-15 16:49:11][INFO]: Planning the crew execution Step-by-Step Plan for Task Execution
Task Number 1: Conduct a thorough research about AI LLMs
Agent: AI LLMs Senior Data Researcher
Agent Goal: Uncover cutting-edge developments in AI LLMs
Task Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Define Research Scope:
-
Determine the specific areas of AI LLMs to focus on, such as advancements in architecture, use cases, ethical considerations, and performance metrics.
-
Identify Reliable Sources:
-
List reputable sources for AI research, including academic journals, industry reports, conferences (e.g., NeurIPS, ACL), AI research labs (e.g., OpenAI, Google AI), and online databases (e.g., IEEE Xplore, arXiv).
-
Collect Data:
- Search for the latest papers, articles, and reports published in 2023 and early 2024.
-
Use keywords like "Large Language Models 2024", "AI LLM advancements", "AI ethics 2024", etc.
-
Analyze Findings:
- Read and summarize the key points from each source.
-
Highlight new techniques, models, and applications introduced in the past year.
-
Organize Information:
- Categorize the information into relevant topics (e.g., new architectures, ethical implications, real-world applications).
-
Ensure each bullet point is concise but informative.
-
Create the List:
- Compile the 10 most relevant pieces of information into a bullet point list.
- Review the list to ensure clarity and relevance.
Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs.
Task Number 2: Review the context you got and expand each topic into a full section for a report
Agent: AI LLMs Reporting Analyst
Agent Goal: Create detailed reports based on AI LLMs data analysis and research findings
Task Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Review the Bullet Points:
-
Carefully read through the list of 10 bullet points provided by the AI LLMs Senior Data Researcher.
-
Outline the Report:
- Create an outline with each bullet point as a main section heading.
-
Plan sub-sections under each main heading to cover different aspects of the topic.
-
Research Further Details:
- For each bullet point, conduct additional research if necessary to gather more detailed information.
-
Look for case studies, examples, and statistical data to support each section.
-
Write Detailed Sections:
- Expand each bullet point into a comprehensive section.
- Ensure each section includes an introduction, detailed explanation, examples, and a conclusion.
-
Use markdown formatting for headings, subheadings, lists, and emphasis.
-
Review and Edit:
- Proofread the report for clarity, coherence, and correctness.
- Make sure the report flows logically from one section to the next.
-
Format the report according to markdown standards.
-
Finalize the Report:
- Ensure the report is complete with all sections expanded and detailed.
- Double-check formatting and make any necessary adjustments.
Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'.
---page-end---
---link: https://docs.crewai.com/core-concepts/Processes/
Processes
Understanding Processes¶
Core Concept
In CrewAI, processes orchestrate the execution of tasks by agents, akin to project management in human teams. These processes ensure tasks are distributed and executed efficiently, in alignment with a predefined strategy.
Process Implementations¶
- Sequential: Executes tasks sequentially, ensuring tasks are completed in an orderly progression.
- Hierarchical: Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model (
manager_llm
) or a custom manager agent (manager_agent
) must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager. - Consensual Process (Planned): Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.
The Role of Processes in Teamwork¶
Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence.
Assigning Processes to a Crew¶
To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to define manager_llm
or manager_agent
for the manager agent.
from crewai import Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI
# Example: Creating a crew with a sequential process
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.sequential
)
# Example: Creating a crew with a hierarchical process
# Ensure to provide a manager_llm or manager_agent
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.hierarchical,
manager_llm=ChatOpenAI(model="gpt-4")
# or
# manager_agent=my_manager_agent
)
my_agents
and my_tasks
are defined prior to creating a Crew
object, and for the hierarchical process, either manager_llm
or manager_agent
is also required.
Sequential Process¶
This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.
To customize task context, utilize the context
parameter in the Task
class to specify outputs that should be used as context for subsequent tasks.
Hierarchical Process¶
Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm
). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion.
Process Class: Detailed Overview¶
The Process
class is implemented as an enumeration (Enum
), ensuring type safety and restricting process values to the defined types (sequential
, hierarchical
). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation.
Conclusion¶
The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents. This documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tasks/
Tasks
Overview of a Task¶
What is a Task?
In the crewAI framework, tasks are specific assignments completed by agents. They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.
Tasks within crewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew's process, enhancing teamwork and efficiency.
Task Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
A clear, concise statement of what the task entails. |
Agent | agent |
Optional[BaseAgent] |
The agent responsible for the task, assigned either directly or by the crew's process. |
Expected Output | expected_output |
str |
A detailed description of what the task's completion looks like. |
Tools (optional) | tools |
Optional[List[Any]] |
The functions or capabilities the agent can utilize to perform the task. Defaults to an empty list. |
Async Execution (optional) | async_execution |
Optional[bool] |
If set, the task executes asynchronously, allowing progression without waiting for completion. Defaults to False. |
Context (optional) | context |
Optional[List["Task"]] |
Specifies tasks whose outputs are used as context for this task. |
Config (optional) | config |
Optional[Dict[str, Any]] |
Additional configuration details for the agent executing the task, allowing further customization. Defaults to None. |
Output JSON (optional) | output_json |
Optional[Type[BaseModel]] |
Outputs a JSON object, requiring an OpenAI client. Only one output format can be set. |
Output Pydantic (optional) | output_pydantic |
Optional[Type[BaseModel]] |
Outputs a Pydantic model object, requiring an OpenAI client. Only one output format can be set. |
Output File (optional) | output_file |
Optional[str] |
Saves the task output to a file. If used with Output JSON or Output Pydantic , specifies how the output is saved. |
Output (optional) | output |
Optional[TaskOutput] |
An instance of TaskOutput , containing the raw, JSON, and Pydantic output plus additional details. |
Callback (optional) | callback |
Optional[Any] |
A callable that is executed with the task's output upon completion. |
Human Input (optional) | human_input |
Optional[bool] |
Indicates if the task should involve human review at the end, useful for tasks needing human oversight. Defaults to False. |
Converter Class (optional) | converter_cls |
Optional[Type[Converter]] |
A converter class used to export structured output. Defaults to None. |
Creating a Task¶
Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:
from crewai import Task
task = Task(
description='Find and summarize the latest and most relevant news on AI',
agent=sales_agent,
expected_output='A bullet list summary of the top 5 most important AI news',
)
Task Assignment
Directly specify an agent
for assignment or let the hierarchical
CrewAI's process decide based on roles, availability, etc.
Task Output¶
Understanding Task Outputs
The output of a task in the crewAI framework is encapsulated within the TaskOutput
class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.
By default, the TaskOutput
will only include the raw
output. A TaskOutput
will only include the pydantic
or json_dict
output if the original Task
object was configured with output_pydantic
or output_json
, respectively.
Task Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
Description of the task. |
Summary | summary |
Optional[str] |
Summary of the task, auto-generated from the first 10 words of the description. |
Raw | raw |
str |
The raw output of the task. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the task. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the task. |
Agent | agent |
str |
The agent that executed the task. |
Output Format | output_format |
OutputFormat |
The format of the task output, with options including RAW, JSON, and Pydantic. The default is RAW. |
Task Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the task output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the task output, prioritizing Pydantic, then JSON, then raw. |
Accessing Task Outputs¶
Once a task has been executed, its output can be accessed through the output
attribute of the Task
object. The TaskOutput
class provides various ways to interact with and present this output.
Example¶
# Example task
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
# Execute the crew
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
# Accessing the task output
task_output = task.output
print(f"Task Description: {task_output.description}")
print(f"Task Summary: {task_output.summary}")
print(f"Raw Output: {task_output.raw}")
if task_output.json_dict:
print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
if task_output.pydantic:
print(f"Pydantic Output: {task_output.pydantic}")
Integrating Tools with Tasks¶
Leverage tools from the crewAI Toolkit and LangChain Tools for enhanced task performance and agent interaction.
Creating a Task with Tools¶
import os
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
research_agent = Agent(
role='Researcher',
goal='Find and summarize the latest AI news',
backstory="""You're a researcher at a large company.
You're responsible for analyzing data and providing insights
to the business.""",
verbose=True
)
# to perform a semantic search for a specified query from a text's content across the internet
search_tool = SerperDevTool()
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
print(result)
This demonstrates how tasks with specific tools can override an agent's default set for tailored task execution.
Referring to Other Tasks¶
In crewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks' output, including multiple, should be used as context for another task.
This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the context
attribute of the task:
# ...
research_ai_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
research_ops_task = Task(
description='Find and summarize the latest AI Ops news',
expected_output='A bullet list summary of the top 5 most important AI Ops news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
write_blog_task = Task(
description="Write a full blog post about the importance of AI and its latest news",
expected_output='Full blog post that is 4 paragraphs long',
agent=writer_agent,
context=[research_ai_task, research_ops_task]
)
#...
Asynchronous Execution¶
You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.
You can then use the context
attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.
#...
list_ideas = Task(
description="List of 5 interesting ideas to explore for an article about AI.",
expected_output="Bullet point list of 5 ideas for an article.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
list_important_history = Task(
description="Research the history of AI and give me the 5 most important events.",
expected_output="Bullet point list of 5 important events.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
write_article = Task(
description="Write an article about AI, its history, and interesting ideas.",
expected_output="A 4 paragraph article about AI.",
agent=writer,
context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed
)
#...
Callback Mechanism¶
The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task's outcome.
# ...
def callback_function(output: TaskOutput):
# Do something after the task is completed
# Example: Send an email to the manager
print(f"""
Task completed!
Task: {output.description}
Output: {output.raw}
""")
research_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool],
callback=callback_function
)
#...
Accessing a Specific Task Output¶
Once a crew finishes running, you can access the output of a specific task by using the output
attribute of the task object:
# ...
task1 = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
#...
crew = Crew(
agents=[research_agent],
tasks=[task1, task2, task3],
verbose=True
)
result = crew.kickoff()
# Returns a TaskOutput object with the description and results of the task
print(f"""
Task completed!
Task: {task1.output.description}
Output: {task1.output.raw}
""")
Tool Override Mechanism¶
Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI's flexibility.
Error Handling and Validation Mechanisms¶
While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:
- Ensuring only one output type is set per task to maintain clear output expectations.
- Preventing the manual assignment of the
id
attribute to uphold the integrity of the unique identifier system.
These validations help in maintaining the consistency and reliability of task executions within the crewAI framework.
Creating Directories when Saving Files¶
You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.
# ...
save_output_task = Task(
description='Save the summarized AI news to a file',
expected_output='File saved successfully',
agent=research_agent,
tools=[file_save_tool],
output_file='outputs/ai_news_summary.txt',
create_directory=True
)
#...
Conclusion¶
Tasks are the driving force behind the actions of agents in crewAI. By properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit. Equipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI's potential, ensuring agents are effectively prepared for their assignments and that tasks are executed as intended.
---page-end---
---link: https://docs.crewai.com/core-concepts/Testing/
Testing
Introduction¶
Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.
Using the Testing Feature¶
We added the CLI command crewai test
to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are n_iterations
and model
, which are optional and default to 2 and gpt-4o-mini
respectively. For now, the only provider available is OpenAI.
If you want to run more iterations or use a different model, you can specify the parameters like this:
or using the short forms:
When you run the crewai test
command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.
A table of scores at the end will show the performance of the crew in terms of the following metrics:
Tasks Scores
(1-10 Higher is better)
┏━━━━━━━━━━━━━━━━━━━━┯━━━━━━━┯━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Tasks/Crew/Agents │ Run 1 │ Run 2 │ Avg. Total │ Agents │ ┃
┠────────────────────┼───────┼───────┼────────────┼────────────────────────────────┼─────────────────────────────────┨
┃ Task 1 │ 9.0 │ 9.5 │ 9.2 │ - Professional Insights │ ┃
┃ │ │ │ │ Researcher │ ┃
┃ │ │ │ │ │ ┃
┃ Task 2 │ 9.0 │ 10.0 │ 9.5 │ - Company Profile Investigator │ ┃
┃ │ │ │ │ │ ┃
┃ Task 3 │ 9.0 │ 9.0 │ 9.0 │ - Automation Insights │ ┃
┃ │ │ │ │ Specialist │ ┃
┃ │ │ │ │ │ ┃
┃ Task 4 │ 9.0 │ 9.0 │ 9.0 │ - Final Report Compiler │ ┃
┃ │ │ │ │ │ - Automation Insights ┃
┃ │ │ │ │ │ Specialist ┃
┃ Crew │ 9.00 │ 9.38 │ 9.2 │ │ ┃
┃ Execution Time (s) │ 126 │ 145 │ 135 │ │ ┃
┗━━━━━━━━━━━━━━━━━━━━┷━━━━━━━┷━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tools/
Tools
Introduction¶
CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers. This documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools.
What is a Tool?¶
Definition
A tool in CrewAI is a skill or function that agents can utilize to perform various actions. This includes tools from the crewAI Toolkit and LangChain Tools, enabling everything from simple searches to complex interactions and effective teamwork among agents.
Key Characteristics of Tools¶
- Utility: Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.
- Integration: Boosts agent capabilities by seamlessly integrating tools into their workflow.
- Customizability: Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.
- Error Handling: Incorporates robust error handling mechanisms to ensure smooth operation.
- Caching Mechanism: Features intelligent caching to optimize performance and reduce redundant operations.
Using crewAI Tools¶
To enhance your agents' capabilities with crewAI tools, begin by installing our extra tools package:
Here's an example demonstrating their use:
import os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
DirectoryReadTool,
FileReadTool,
SerperDevTool,
WebsiteSearchTool
)
# Set up API keys
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()
web_rag_tool = WebsiteSearchTool()
# Create agents
researcher = Agent(
role='Market Research Analyst',
goal='Provide up-to-date market analysis of the AI industry',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool, web_rag_tool],
verbose=True
)
writer = Agent(
role='Content Writer',
goal='Craft engaging blog posts about the AI industry',
backstory='A skilled writer with a passion for technology.',
tools=[docs_tool, file_tool],
verbose=True
)
# Define tasks
research = Task(
description='Research the latest trends in the AI industry and provide a summary.',
expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',
agent=researcher
)
write = Task(
description='Write an engaging blog post about the AI industry, based on the research analyst’s summary. Draw inspiration from the latest blog posts in the directory.',
expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
agent=writer,
output_file='blog-posts/new_post.md' # The final blog post will be saved here
)
# Assemble a crew with planning enabled
crew = Crew(
agents=[researcher, writer],
tasks=[research, write],
verbose=True,
planning=True, # Enable planning feature
)
# Execute tasks
crew.kickoff()
Available crewAI Tools¶
- Error Handling: All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.
- Caching Mechanism: All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the
cache_function
attribute on the tool.
Here is a list of the available tools and their descriptions:
Tool | Description |
---|---|
BrowserbaseLoadTool | A tool for interacting with and extracting data from web browsers. |
CodeDocsSearchTool | A RAG tool optimized for searching through code documentation and related technical documents. |
CodeInterpreterTool | A tool for interpreting python code. |
ComposioTool | Enables use of Composio tools. |
CSVSearchTool | A RAG tool designed for searching within CSV files, tailored to handle structured data. |
DALL-E Tool | A tool for generating images using the DALL-E API. |
DirectorySearchTool | A RAG tool for searching within directories, useful for navigating through file systems. |
DOCXSearchTool | A RAG tool aimed at searching within DOCX documents, ideal for processing Word files. |
DirectoryReadTool | Facilitates reading and processing of directory structures and their contents. |
EXASearchTool | A tool designed for performing exhaustive searches across various data sources. |
FileReadTool | Enables reading and extracting data from files, supporting various file formats. |
FirecrawlSearchTool | A tool to search webpages using Firecrawl and return the results. |
FirecrawlCrawlWebsiteTool | A tool for crawling webpages using Firecrawl. |
FirecrawlScrapeWebsiteTool | A tool for scraping webpages URL using Firecrawl and returning its contents. |
GithubSearchTool | A RAG tool for searching within GitHub repositories, useful for code and documentation search. |
SerperDevTool | A specialized tool for development purposes, with specific functionalities under development. |
TXTSearchTool | A RAG tool focused on searching within text (.txt) files, suitable for unstructured data. |
JSONSearchTool | A RAG tool designed for searching within JSON files, catering to structured data handling. |
LlamaIndexTool | Enables the use of LlamaIndex tools. |
MDXSearchTool | A RAG tool tailored for searching within Markdown (MDX) files, useful for documentation. |
PDFSearchTool | A RAG tool aimed at searching within PDF documents, ideal for processing scanned documents. |
PGSearchTool | A RAG tool optimized for searching within PostgreSQL databases, suitable for database queries. |
Vision Tool | A tool for generating images using the DALL-E API. |
RagTool | A general-purpose RAG tool capable of handling various data sources and types. |
ScrapeElementFromWebsiteTool | Enables scraping specific elements from websites, useful for targeted data extraction. |
ScrapeWebsiteTool | Facilitates scraping entire websites, ideal for comprehensive data collection. |
WebsiteSearchTool | A RAG tool for searching website content, optimized for web data extraction. |
XMLSearchTool | A RAG tool designed for searching within XML files, suitable for structured data formats. |
YoutubeChannelSearchTool | A RAG tool for searching within YouTube channels, useful for video content analysis. |
YoutubeVideoSearchTool | A RAG tool aimed at searching within YouTube videos, ideal for video data extraction. |
Creating your own Tools¶
Custom Tool Creation
Developers can craft custom tools tailored for their agent’s needs or utilize pre-built options:
To create your own crewAI tools you will need to install our extra tools package:
Once you do that there are two main ways for one to create a crewAI tool:
Subclassing BaseTool
¶
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "Clear description for what this tool is useful for, your agent will need this information to use it."
def _run(self, argument: str) -> str:
# Implementation goes here
return "Result from custom tool"
Utilizing the tool
Decorator¶
from crewai_tools import tool
@tool("Name of my tool")
def my_tool(question: str) -> str:
"""Clear description for what this tool is useful for, your agent will need this information to use it."""
# Function logic here
return "Result from your custom tool"
Custom Caching Mechanism¶
Caching
Tools can optionally implement a cache_function
to fine-tune caching behavior. This function determines when to cache results based on specific conditions, offering granular control over caching logic.
from crewai_tools import tool
@tool
def multiplication_tool(first_number: int, second_number: int) -> str:
"""Useful for when you need to multiply two numbers together."""
return first_number * second_number
def cache_func(args, result):
# In this case, we only cache the result if it's a multiple of 2
cache = result % 2 == 0
return cache
multiplication_tool.cache_function = cache_func
writer1 = Agent(
role="Writer",
goal="You write lessons of math for kids.",
backstory="You're an expert in writing and you love to teach kids but you know nothing of math.",
tools=[multiplication_tool],
allow_delegation=False,
)
#...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Training-Crew/
Training
Introduction¶
The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI). By running the command crewai train -n <n_iterations>
, you can specify the number of iterations for the training process.
During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback. This helps the agents improve their understanding, decision-making, and problem-solving abilities.
Training Your Crew Using the CLI¶
To use the training feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
Replace <n_iterations>
with the desired number of training iterations and <filename>
with the appropriate filename ending with .pkl
.
Training Your Crew Programmatically¶
To train your crew programmatically, use the following steps:
- Define the number of iterations for training.
- Specify the input parameters for the training process.
- Execute the training command within a try-except block to handle potential errors.
n_iterations = 2
inputs = {"topic": "CrewAI Training"}
filename = "your_model.pkl"
try:
YourCrewName_Crew().crew().train(n_iterations=n_iterations, inputs=inputs, filename=filename)
except Exception as e:
raise Exception(f"An error occurred while training the crew: {e}")
Key Points to Note:¶
- Positive Integer Requirement: Ensure that the number of iterations (
n_iterations
) is a positive integer. The code will raise aValueError
if this condition is not met. - Filename Requirement: Ensure that the filename ends with
.pkl
. The code will raise aValueError
if this condition is not met. - Error Handling: The code handles subprocess errors and unexpected exceptions, providing error messages to the user.
It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.
Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.
Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.
Happy training with CrewAI!
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LangChain-Tools/
Using LangChain Tools
Using LangChain Tools¶
LangChain Integration
CrewAI seamlessly integrates with LangChain’s comprehensive list of tools, all of which can be used with crewAI.
import os
from crewai import Agent
from langchain.agents import Tool
from langchain.utilities import GoogleSerperAPIWrapper
# Setup API keys
os.environ["SERPER_API_KEY"] = "Your Key"
search = GoogleSerperAPIWrapper()
# Create and assign the search tool to an agent
serper_tool = Tool(
name="Intermediate Answer",
func=search.run,
description="Useful for search-based queries",
)
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[serper_tool]
)
# rest of the code ...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LlamaIndex-Tools/
Using LlamaIndex Tools
Using LlamaIndex Tools¶
LlamaIndex Integration
CrewAI seamlessly integrates with LlamaIndex’s comprehensive toolkit for RAG (Retrieval-Augmented Generation) and agentic pipelines, enabling advanced search-based queries and more. Here are the available built-in tools offered by LlamaIndex.
from crewai import Agent
from crewai_tools import LlamaIndexTool
# Example 1: Initialize from FunctionTool
from llama_index.core.tools import FunctionTool
your_python_function = lambda ...: ...
og_tool = FunctionTool.from_defaults(your_python_function, name="<name>", description='<description>')
tool = LlamaIndexTool.from_tool(og_tool)
# Example 2: Initialize from LlamaHub Tools
from llama_index.tools.wolfram_alpha import WolframAlphaToolSpec
wolfram_spec = WolframAlphaToolSpec(app_id="<app_id>")
wolfram_tools = wolfram_spec.to_tool_list()
tools = [LlamaIndexTool.from_tool(t) for t in wolfram_tools]
# Example 3: Initialize Tool from a LlamaIndex Query Engine
query_engine = index.as_query_engine()
query_tool = LlamaIndexTool.from_query_engine(
query_engine,
name="Uber 2019 10K Query Tool",
description="Use this tool to lookup the 2019 Uber 10K Annual Report"
)
# Create and assign the tools to an agent
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[tool, *tools, query_tool]
)
# rest of the code ...
Steps to Get Started¶
To effectively use the LlamaIndexTool, follow these steps:
-
Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. -
Install and Use LlamaIndex: Follow the LlamaIndex documentation LlamaIndex Documentation to set up a RAG/agent pipeline.
---page-end---
---link: https://docs.crewai.com/getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/
Creating a CrewAI Pipeline Project¶
Welcome to the comprehensive guide for creating a new CrewAI pipeline project. This document will walk you through the steps to create, customize, and run your CrewAI pipeline project, ensuring you have everything you need to get started.
To learn more about CrewAI pipelines, visit the CrewAI documentation.
Prerequisites¶
Before getting started with CrewAI pipelines, make sure that you have installed CrewAI via pip:
The same prerequisites for virtual environments and Code IDEs apply as in regular CrewAI projects.
Creating a New Pipeline Project¶
To create a new CrewAI pipeline project, you have two options:
- For a basic pipeline template:
- For a pipeline example that includes a router:
These commands will create a new project folder with the following structure:
<project_name>/
├── README.md
├── poetry.lock
├── pyproject.toml
├── src/
│ └── <project_name>/
│ ├── __init__.py
│ ├── main.py
│ ├── crews/
│ │ ├── crew1/
│ │ │ ├── crew1.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ │ ├── crew2/
│ │ │ ├── crew2.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ ├── pipelines/
│ │ ├── __init__.py
│ │ ├── pipeline1.py
│ │ └── pipeline2.py
│ └── tools/
│ ├── __init__.py
│ └── custom_tool.py
└── tests/
Customizing Your Pipeline Project¶
To customize your pipeline project, you can:
- Modify the crew files in
src/<project_name>/crews/
to define your agents and tasks for each crew. - Modify the pipeline files in
src/<project_name>/pipelines/
to define your pipeline structure. - Modify
src/<project_name>/main.py
to set up and run your pipelines. - Add your environment variables into the
.env
file.
Example 1: Defining a Two-Stage Sequential Pipeline¶
Here's an example of how to define a pipeline with sequential stages in src/<project_name>/pipelines/pipeline.py
:
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
@PipelineBase
class SequentialPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
self.write_x_crew
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Example 2: Defining a Two-Stage Pipeline with Parallel Execution¶
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
from ..crews.write_linkedin_crew.write_linkedin_crew import WriteLinkedInCrew
@PipelineBase
class ParallelExecutionPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
self.write_linkedin_crew = WriteLinkedInCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
[self.write_x_crew, self.write_linkedin_crew] # Parallel execution
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Annotations¶
The main annotation you'll use for pipelines is @PipelineBase
. This annotation is used to decorate your pipeline classes, similar to how @CrewBase
is used for crews.
Installing Dependencies¶
To install the dependencies for your project, use Poetry:
Running Your Pipeline Project¶
To run your pipeline project, use the following command:
This will initialize your pipeline and begin task execution as defined in your main.py
file.
Deploying Your Pipeline Project¶
Pipelines can be deployed in the same way as regular CrewAI projects. The easiest way is through CrewAI+, where you can deploy your pipeline in a few clicks.
Remember, when working with pipelines, you're orchestrating multiple crews to work together in a sequence or parallel fashion. This allows for more complex workflows and information processing tasks.
---page-end---
---link: https://docs.crewai.com/getting-started/Installing-CrewAI/
Installing crewAI¶
Welcome to crewAI! This guide will walk you through the installation process for crewAI and its dependencies. crewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently. Let's get started!
Installation¶
To install crewAI, you need to have Python >=3.10 and <=3.13 installed on your system:
---page-end---
---link: https://docs.crewai.com/getting-started/Start-a-New-CrewAI-Project-Template-Method/
Starting Your CrewAI Project¶
Welcome to the ultimate guide for starting a new CrewAI project. This document will walk you through the steps to create, customize, and run your CrewAI project, ensuring you have everything you need to get started.
Before we start, there are a couple of things to note:
- CrewAI is a Python package and requires Python >=3.10 and <=3.13 to run.
- The preferred way of setting up CrewAI is using the
crewai create crew
command. This will create a new project folder and install a skeleton template for you to work on.
Prerequisites¶
Before getting started with CrewAI, make sure that you have installed it via pip:
Creating a New Project¶
In this example, we will be using poetry as our virtual environment manager.
To create a new CrewAI project, run the following CLI command:
This command will create a new project folder with the following structure:
my_project/
├── .gitignore
├── pyproject.toml
├── README.md
└── src/
└── my_project/
├── __init__.py
├── main.py
├── crew.py
├── tools/
│ ├── custom_tool.py
│ └── __init__.py
└── config/
├── agents.yaml
└── tasks.yaml
You can now start developing your project by editing the files in the src/my_project
folder. The main.py
file is the entry point of your project, and the crew.py
file is where you define your agents and tasks.
Customizing Your Project¶
To customize your project, you can:
- Modify src/my_project/config/agents.yaml
to define your agents.
- Modify src/my_project/config/tasks.yaml
to define your tasks.
- Modify src/my_project/crew.py
to add your own logic, tools, and specific arguments.
- Modify src/my_project/main.py
to add custom inputs for your agents and tasks.
- Add your environment variables into the .env
file.
Example: Defining Agents and Tasks¶
agents.yaml¶
researcher:
role: >
Job Candidate Researcher
goal: >
Find potential candidates for the job
backstory: >
You are adept at finding the right candidates by exploring various online
resources. Your skill in identifying suitable candidates ensures the best
match for job positions.
tasks.yaml¶
research_candidates_task:
description: >
Conduct thorough research to find potential candidates for the specified job.
Utilize various online resources and databases to gather a comprehensive list of potential candidates.
Ensure that the candidates meet the job requirements provided.
Job Requirements:
{job_requirements}
expected_output: >
A list of 10 potential candidates with their contact information and brief profiles highlighting their suitability.
agent: researcher # THIS NEEDS TO MATCH THE AGENT NAME IN THE AGENTS.YAML FILE AND THE AGENT DEFINED IN THE crew.py FILE
context: # THESE NEED TO MATCH THE TASK NAMES DEFINED ABOVE AND THE TASKS.YAML FILE AND THE TASK DEFINED IN THE crew.py FILE
- researcher
Referencing Variables:¶
Your defined functions with the same name will be used. For example, you can reference the agent for specific tasks from tasks.yaml
file. Ensure your annotated agent and function name are the same; otherwise, your task won't recognize the reference properly.
Example References¶
agents.yaml
email_summarizer:
role: >
Email Summarizer
goal: >
Summarize emails into a concise and clear summary
backstory: >
You will create a 5 bullet point summary of the report
llm: mixtal_llm
tasks.yaml
email_summarizer_task:
description: >
Summarize the email into a 5 bullet point summary
expected_output: >
A 5 bullet point summary of the email
agent: email_summarizer
context:
- reporting_task
- research_task
Use the annotations to properly reference the agent and task in the crew.py
file.
Annotations include:¶
@agent
@task
@crew
@tool
@callback
@output_json
@output_pydantic
@cache_handler
crew.py
# ...
@agent
def email_summarizer(self) -> Agent:
return Agent(
config=self.agents_config["email_summarizer"],
)
@task
def email_summarizer_task(self) -> Task:
return Task(
config=self.tasks_config["email_summarizer_task"],
)
# ...
Installing Dependencies¶
To install the dependencies for your project, you can use Poetry. First, navigate to your project directory:
This will install the dependencies specified in the pyproject.toml
file.
Interpolating Variables¶
Any variable interpolated in your agents.yaml
and tasks.yaml
files like {variable}
will be replaced by the value of the variable in the main.py
file.
tasks.yaml¶
research_task:
description: >
Conduct a thorough research about the customer and competitors in the context
of {customer_domain}.
Make sure you find any interesting and relevant information given the
current year is 2024.
expected_output: >
A complete report on the customer and their customers and competitors,
including their demographics, preferences, market positioning and audience engagement.
main.py¶
# main.py
def run():
inputs = {
"customer_domain": "crewai.com"
}
MyProjectCrew(inputs).crew().kickoff(inputs=inputs)
Running Your Project¶
To run your project, use the following command:
This will initialize your crew of AI agents and begin task execution as defined in your configuration in the main.py
file.
Replay Tasks from Latest Crew Kickoff¶
CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run:
Replace <task_id>
with the ID of the task you want to replay.
Reset Crew Memory¶
If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:
This will clear the crew's memory, allowing for a fresh start.
Deploying Your Project¶
The easiest way to deploy your crew is through CrewAI+, where you can deploy your crew in a few clicks.
---page-end---
---link: https://docs.crewai.com/how-to/AgentOps-Observability/
Intro¶
Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing, how their agents are interacting with users, and how their agents use external tools and APIs. AgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.
AgentOps¶
AgentOps provides session replays, metrics, and monitoring for agents.
At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more. For more info, check out the AgentOps Repo.
Overview¶
AgentOps provides monitoring for agents in development and production. It provides a dashboard for tracking agent performance, session replays, and custom reporting.
Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time. This feature is useful for debugging and understanding how agents interact with users as well as other agents.
Features¶
- LLM Cost Management and Tracking: Track spend with foundation model providers.
- Replay Analytics: Watch step-by-step agent execution graphs.
- Recursive Thought Detection: Identify when agents fall into infinite loops.
- Custom Reporting: Create custom analytics on agent performance.
- Analytics Dashboard: Monitor high-level statistics about agents in development and production.
- Public Model Testing: Test your agents against benchmarks and leaderboards.
- Custom Tests: Run your agents against domain-specific tests.
- Time Travel Debugging: Restart your sessions from checkpoints.
- Compliance and Security: Create audit logs and detect potential threats such as profanity and PII leaks.
- Prompt Injection Detection: Identify potential code injection and secret leaks.
Using AgentOps¶
-
Create an API Key: Create a user API key here: Create API Key
-
Configure Your Environment: Add your API key to your environment variables
- Install AgentOps: Install AgentOps with: or
Before using Crew
in your script, include these lines:
This will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems, check out the AgentOps documentation or join the Discord.
Crew + AgentOps Examples¶
Further Information¶
To get started, create an AgentOps account.
For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo.
Extra links¶
🐦 Twitter • 📢 Discord • 🖇️ AgentOps Dashboard • 📙 Documentation
---page-end---
---link: https://docs.crewai.com/how-to/Coding-Agents/
Coding Agents
Introduction¶
crewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions.
Enabling Code Execution¶
To enable code execution for an agent, set the allow_code_execution
parameter to True
when creating the agent. Here's an example:
from crewai import Agent
coding_agent = Agent(
role="Senior Python Developer",
goal="Craft well-designed and thought-out code",
backstory="You are a senior Python developer with extensive experience in software architecture and best practices.",
allow_code_execution=True
)
Note: The allow_code_execution
parameter defaults to False
.
Important Considerations¶
-
Model Selection: It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution. These models have a better understanding of programming concepts and are more likely to generate correct and efficient code.
-
Error Handling: The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or provide alternative solutions. The
max_retry_limit
parameter, which defaults to 2, controls the maximum number of retries for a task. -
Dependencies: To use the code execution feature, you need to install the
crewai_tools
package. If not installed, the agent will log an info message: "Coding tools not available. Install crewai_tools."
Code Execution Process¶
When an agent with code execution enabled encounters a task requiring programming:
- The agent analyzes the task and determines that code execution is necessary.
- It formulates the Python code needed to solve the problem.
- The code is sent to the internal code execution tool (
CodeInterpreterTool
). - The tool executes the code in a controlled environment and returns the result.
- The agent interprets the result and incorporates it into its response or uses it for further problem-solving.
Example Usage¶
Here's a detailed example of creating an agent with code execution capabilities and using it in a task:
from crewai import Agent, Task, Crew
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants.",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Execute the crew
result = analysis_crew.kickoff()
print(result)
In this example, the coding_agent
can write and execute Python code to perform data analysis tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Conditional-Tasks/
Conditional Tasks
Introduction¶
Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks. This powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes.
Example Usage¶
from typing import List
from pydantic import BaseModel
from crewai import Agent, Crew
from crewai.tasks.conditional_task import ConditionalTask
from crewai.tasks.task_output import TaskOutput
from crewai.task import Task
from crewai_tools import SerperDevTool
# Define a condition function for the conditional task
# If false, the task will be skipped, if true, then execute the task.
def is_data_missing(output: TaskOutput) -> bool:
return len(output.pydantic.events) < 10 # this will skip this task
# Define the agents
data_fetcher_agent = Agent(
role="Data Fetcher",
goal="Fetch data online using Serper tool",
backstory="Backstory 1",
verbose=True,
tools=[SerperDevTool()]
)
data_processor_agent = Agent(
role="Data Processor",
goal="Process fetched data",
backstory="Backstory 2",
verbose=True
)
summary_generator_agent = Agent(
role="Summary Generator",
goal="Generate summary from fetched data",
backstory="Backstory 3",
verbose=True
)
class EventOutput(BaseModel):
events: List[str]
task1 = Task(
description="Fetch data about events in San Francisco using Serper tool",
expected_output="List of 10 things to do in SF this week",
agent=data_fetcher_agent,
output_pydantic=EventOutput,
)
conditional_task = ConditionalTask(
description="""
Check if data is missing. If we have less than 10 events,
fetch more events using Serper tool so that
we have a total of 10 events in SF this week..
""",
expected_output="List of 10 Things to do in SF this week",
condition=is_data_missing,
agent=data_processor_agent,
)
task3 = Task(
description="Generate summary of events in San Francisco from fetched data",
expected_output="A complete report on the customer and their customers and competitors, including their demographics, preferences, market positioning and audience engagement.",
agent=summary_generator_agent,
)
# Create a crew with the tasks
crew = Crew(
agents=[data_fetcher_agent, data_processor_agent, summary_generator_agent],
tasks=[task1, conditional_task, task3],
verbose=True,
planning=True
)
# Run the crew
result = crew.kickoff()
print("results", result)
---page-end---
---link: https://docs.crewai.com/how-to/Create-Custom-Tools/
Create Custom Tools
Creating and Utilizing Tools in crewAI¶
This guide provides detailed instructions on creating custom tools for the crewAI framework and how to efficiently manage and utilize these tools, incorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools, enabling agents to perform a wide range of actions.
Prerequisites¶
Before creating your own tools, ensure you have the crewAI extra tools package installed:
Subclassing BaseTool
¶
To create a personalized tool, inherit from BaseTool
and define the necessary attributes and the _run
method.
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "What this tool does. It's vital for effective utilization."
def _run(self, argument: str) -> str:
# Your tool's logic here
return "Tool's result"
Using the tool
Decorator¶
Alternatively, you can use the tool decorator @tool
. This approach allows you to define the tool's attributes and functionality directly within a function, offering a concise and efficient way to create specialized tools tailored to your needs.
from crewai_tools import tool
@tool("Tool Name")
def my_simple_tool(question: str) -> str:
"""Tool description for clarity."""
# Tool logic here
return "Tool output"
Defining a Cache Function for the Tool¶
To optimize tool performance with caching, define custom caching strategies using the cache_function
attribute.
@tool("Tool with Caching")
def cached_tool(argument: str) -> str:
"""Tool functionality description."""
return "Cacheable result"
def my_cache_strategy(arguments: dict, result: str) -> bool:
# Define custom caching logic
return True if some_condition else False
cached_tool.cache_function = my_cache_strategy
By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes, you can leverage the full capabilities of the crewAI framework, enhancing both the development experience and the efficiency of your AI agents.
---page-end---
---link: https://docs.crewai.com/how-to/Customize-Prompts/
Initial Support to Bring Your Own Prompts in CrewAI¶
CrewAI now supports the ability to bring your own prompts, enabling extensive customization and internationalization. This feature allows users to tailor the inner workings of their agents to better suit specific needs, including support for multiple languages.
Internationalization and Customization Support¶
Custom Prompts with prompt_file
¶
The prompt_file
attribute facilitates full customization of the agent prompts, enhancing the global usability of CrewAI. Users can specify their prompt templates, ensuring that the agents communicate in a manner that aligns with specific project requirements or language preferences.
Example of a Custom Prompt File¶
The custom prompts can be defined in a JSON file, similar to the example provided here.
Supported Languages¶
CrewAI's custom prompt support includes internationalization, allowing prompts to be written in different languages. This is particularly useful for global teams or projects that require multilingual support.
How to Use the prompt_file
Attribute¶
To utilize the prompt_file
attribute, include it in your crew definition. Below is an example demonstrating how to set up agents and tasks with custom prompts.
Example¶
import os
from crewai import Agent, Task, Crew
# Define your agents
researcher = Agent(
role="Researcher",
goal="Make the best research and analysis on content about AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Write the best content about AI and AI agents.",
backstory="You're a senior writer, specialized in technology, software engineering, AI and startups. You work as a freelancer and are now working on writing content for a new customer.",
allow_delegation=False,
)
# Define your tasks
tasks = [
Task(
description="Say Hi",
expected_output="The word: Hi",
agent=researcher,
)
]
# Instantiate your crew with custom prompts
crew = Crew(
agents=[researcher],
tasks=tasks,
prompt_file="prompt.json", # Path to your custom prompt file
)
# Get your crew to work!
crew.kickoff()
Advanced Customization Features¶
language
Attribute¶
In addition to prompt_file
, the language
attribute can be used to specify the language for the agent's prompts. This ensures that the prompts are generated in the desired language, further enhancing the internationalization capabilities of CrewAI.
Creating Custom Prompt Files¶
Custom prompt files should be structured in JSON format and include all necessary prompt templates. Below is a simplified example of a prompt JSON file:
{
"system": "You are a system template.",
"prompt": "Here is your prompt template.",
"response": "Here is your response template."
}
Benefits of Custom Prompts¶
- Enhanced Flexibility: Tailor agent communication to specific project needs.
- Improved Usability: Supports multiple languages, making it suitable for global projects.
- Consistency: Ensures uniform prompt structures across different agents and tasks.
By incorporating these updates, CrewAI provides users with the ability to fully customize and internationalize their agent prompts, making the platform more versatile and user-friendly.
---page-end---
---link: https://docs.crewai.com/how-to/Customizing-Agents/
Customizing Agents
Customizable Attributes¶
Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize.
Key Attributes for Customization¶
- Role: Specifies the agent's job within the crew, such as 'Analyst' or 'Customer Service Rep'.
- Goal: Defines what the agent aims to achieve, in alignment with its role and the overarching objectives of the crew.
- Backstory: Provides depth to the agent's persona, enriching its motivations and engagements within the crew.
- Tools (Optional): Represents the capabilities or methods the agent uses to perform tasks, from simple functions to intricate integrations.
- Cache (Optional): Determines whether the agent should use a cache for tool usage.
- Max RPM: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed. - Verbose (Optional): Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- Allow Delegation (Optional):
allow_delegation
controls whether the agent is allowed to delegate tasks to other agents. This attribute is now set toFalse
by default. - Max Iter (Optional): The
max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. - Max Execution Time (Optional):
max_execution_time
Sets the maximum execution time for an agent to complete a task. - System Template (Optional):
system_template
defines the system format for the agent. - Prompt Template (Optional):
prompt_template
defines the prompt format for the agent. - Response Template (Optional):
response_template
defines the response format for the agent. - Use System Prompt (Optional):
use_system_prompt
controls whether the agent will use a system prompt for task execution. Agents can now operate without system prompts. - Respect Context Window:
respect_context_window
renames the sliding context window attribute and enables it by default to maintain context size. - Max Retry Limit:
max_retry_limit
defines the maximum number of retries for an agent to execute a task when an error occurs.
Advanced Customization Options¶
Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent's behavior and capabilities significantly.
Language Model Customization¶
Agents can be customized with specific language models (llm
) and function-calling language models (function_calling_llm
), offering advanced control over their processing and decision-making abilities. It's important to note that setting the function_calling_llm
allows for overriding the default crew function-calling language model, providing a greater degree of customization.
Performance and Debugging Settings¶
Adjusting an agent's performance and monitoring its operations are crucial for efficient task execution.
Verbose Mode and RPM Limit¶
- Verbose Mode: Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- RPM Limit: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed.
Maximum Iterations for Task Execution¶
The max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer.
Customizing Agents and Tools¶
Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent's functionality, enabling them to perform specialized tasks. The tools
attribute should be an array of tools the agent can utilize, and it's initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements.
Example: Assigning Tools to an Agent¶
import os
from crewai import Agent
from crewai_tools import SerperDevTool
# Set API keys for tool initialization
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key"
# Initialize a search tool
search_tool = SerperDevTool()
# Initialize the agent with advanced options
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool],
memory=True, # Enable memory
verbose=True,
max_rpm=None, # No limit on requests per minute
max_iter=25, # Default value for maximum iterations
)
Delegation and Autonomy¶
Controlling an agent's ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default, the allow_delegation
attribute is now set to False
, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and efficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements.
Example: Disabling Delegation for an Agent¶
agent = Agent(
role='Content Writer',
goal='Write engaging content on market trends',
backstory='A seasoned writer with expertise in market analysis.',
allow_delegation=True # Enabling delegation
)
Conclusion¶
Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences, equips a nuanced and capable AI team ready for complex challenges.
---page-end---
---link: https://docs.crewai.com/how-to/Force-Tool-Ouput-as-Result/
Forcing Tool Output as Result
Introduction¶
In CrewAI, you can force the output of a tool as the result of an agent's task. This feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution.
Forcing Tool Output as Result¶
To force the tool output as the result of an agent's task, you need to set the result_as_answer
parameter to True
when adding a tool to the agent. This parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.
Here's an example of how to force the tool output as the result of an agent's task:
# ...
from crewai.agent import Agent
from my_tool import MyCustomTool
# Create a coding agent with the custom tool
coding_agent = Agent(
role="Data Scientist",
goal="Produce amazing reports on AI",
backstory="You work with data and AI",
tools=[MyCustomTool(result_as_answer=True)],
)
# Assuming the tool's execution and result population occurs within the system
task_result = coding_agent.execute_task(task)
Workflow in Action¶
- Task Execution: The agent executes the task using the tool provided.
- Tool Output: The tool generates the output, which is captured as the task result.
- Agent Interaction: The agent may reflect and take learnings from the tool but the output is not modified.
- Result Return: The tool output is returned as the task result without any modifications.
---page-end---
---link: https://docs.crewai.com/how-to/Hierarchical/
Using Hierarchical Process
Introduction¶
The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution. This systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.
Complexity and Efficiency
The hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.
Hierarchical Process Overview¶
By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management, where a 'manager' agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either automatically created by CrewAI or explicitly set by the user.
Key Features¶
- Task Delegation: A manager agent allocates tasks among crew members based on their roles and capabilities.
- Result Validation: The manager evaluates outcomes to ensure they meet the required standards.
- Efficient Workflow: Emulates corporate structures, providing an organized approach to task management.
- System Prompt Handling: Optionally specify whether the system should use predefined prompts.
- Stop Words Control: Optionally specify whether stop words should be used, supporting various models including the o1 models.
- Context Window Respect: Prioritize important context by enabling respect of the context window, which is now the default behavior.
- Delegation Control: Delegation is now disabled by default to give users explicit control.
- Max Requests Per Minute: Configurable option to set the maximum number of requests per minute.
- Max Iterations: Limit the maximum number of iterations for obtaining a final answer.
Implementing the Hierarchical Process¶
To utilize the hierarchical process, it's essential to explicitly set the process attribute to Process.hierarchical
, as the default behavior is Process.sequential
. Define a crew with a designated manager and establish a clear chain of command.
Tools and Agent Assignment
Assign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager's guidance. Tools can also be specified at the task level for precise control over tool availability during task execution.
Manager LLM Requirement
Configuring the manager_llm
parameter is crucial for the hierarchical process. The system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.
from langchain_openai import ChatOpenAI
from crewai import Crew, Process, Agent
# Agents are defined with attributes for backstory, cache, and verbose mode
researcher = Agent(
role='Researcher',
goal='Conduct in-depth analysis',
backstory='Experienced data analyst with a knack for uncovering hidden trends.',
cache=True,
verbose=False,
# tools=[] # This can be optionally specified; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
writer = Agent(
role='Writer',
goal='Create engaging content',
backstory='Creative writer passionate about storytelling in technical domains.',
cache=True,
verbose=False,
# tools=[] # Optionally specify tools; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
# Establishing the crew with a hierarchical process and additional configurations
project_crew = Crew(
tasks=[...], # Tasks to be delegated and executed under the manager's supervision
agents=[researcher, writer],
manager_llm=ChatOpenAI(temperature=0, model="gpt-4"), # Mandatory if manager_agent is not set
process=Process.hierarchical, # Specifies the hierarchical management approach
respect_context_window=True, # Enable respect of the context window for tasks
memory=True, # Enable memory usage for enhanced task execution
manager_agent=None, # Optional: explicitly set a specific agent as manager instead of the manager_llm
planning=True, # Enable planning feature for pre-execution strategy
)
Workflow in Action¶
- Task Assignment: The manager assigns tasks strategically, considering each agent's capabilities and available tools.
- Execution and Review: Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.
- Sequential Task Progression: Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager's oversight.
Conclusion¶
Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system's capabilities, facilitates an organized and efficient approach to project management. Utilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.
---page-end---
---link: https://docs.crewai.com/how-to/Human-Input-on-Execution/
Human Input in Agent Execution¶
Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary. This feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively.
Using Human Input with CrewAI¶
To integrate human input into agent execution, set the human_input
flag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer. This input can provide extra context, clarify ambiguities, or validate the agent's output.
Example:¶
import os
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Loading Tools
search_tool = SerperDevTool()
# Define your agents with roles, goals, tools, and additional attributes
researcher = Agent(
role='Senior Research Analyst',
goal='Uncover cutting-edge developments in AI and data science',
backstory=(
"You are a Senior Research Analyst at a leading tech think tank. "
"Your expertise lies in identifying emerging trends and technologies in AI and data science. "
"You have a knack for dissecting complex data and presenting actionable insights."
),
verbose=True,
allow_delegation=False,
tools=[search_tool]
)
writer = Agent(
role='Tech Content Strategist',
goal='Craft compelling content on tech advancements',
backstory=(
"You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. "
"With a deep understanding of the tech industry, you transform complex concepts into compelling narratives."
),
verbose=True,
allow_delegation=True,
tools=[search_tool],
cache=False, # Disable cache for this agent
)
# Create tasks for your agents
task1 = Task(
description=(
"Conduct a comprehensive analysis of the latest advancements in AI in 2024. "
"Identify key trends, breakthrough technologies, and potential industry impacts. "
"Compile your findings in a detailed report. "
"Make sure to check with a human if the draft is good before finalizing your answer."
),
expected_output='A comprehensive full report on the latest AI advancements in 2024, leave nothing out',
agent=researcher,
human_input=True
)
task2 = Task(
description=(
"Using the insights from the researcher\'s report, develop an engaging blog post that highlights the most significant AI advancements. "
"Your post should be informative yet accessible, catering to a tech-savvy audience. "
"Aim for a narrative that captures the essence of these breakthroughs and their implications for the future."
),
expected_output='A compelling 3 paragraphs blog post formatted as markdown about the latest AI advancements in 2024',
agent=writer,
human_input=True
)
# Instantiate your crew with a sequential process
crew = Crew(
agents=[researcher, writer],
tasks=[task1, task2],
verbose=True,
memory=True,
planning=True # Enable planning feature for the crew
)
# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-async/
Kickoff a Crew Asynchronously
Introduction¶
CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner. This feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing.
Asynchronous Crew Execution¶
To kickoff a crew asynchronously, use the kickoff_async()
method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks.
Method Signature¶
Parameters¶
inputs
(dict): A dictionary containing the input data required for the tasks.
Returns¶
CrewOutput
: An object representing the result of the crew execution.
Potential Use Cases¶
-
Parallel Content Generation: Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.
-
Concurrent Market Research Tasks: Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.
-
Independent Travel Planning Modules: Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.
Example: Single Asynchronous Crew Execution¶
Here's an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Async function to kickoff the crew asynchronously
async def async_crew_execution():
result = await analysis_crew.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
print("Crew Result:", result)
# Run the async function
asyncio.run(async_crew_execution())
Example: Multiple Asynchronous Crew Executions¶
In this example, we'll show how to kickoff multiple crews asynchronously and wait for all of them to complete using asyncio.gather()
:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create tasks that require code execution
task_1 = Task(
description="Analyze the first dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
task_2 = Task(
description="Analyze the second dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create two crews and add tasks
crew_1 = Crew(agents=[coding_agent], tasks=[task_1])
crew_2 = Crew(agents=[coding_agent], tasks=[task_2])
# Async function to kickoff multiple crews asynchronously and wait for all to finish
async def async_multiple_crews():
result_1 = crew_1.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
result_2 = crew_2.kickoff_async(inputs={"ages": [20, 22, 24, 28, 30]})
# Wait for both crews to finish
results = await asyncio.gather(result_1, result_2)
for i, result in enumerate(results, 1):
print(f"Crew {i} Result:", result)
# Run the async function
asyncio.run(async_multiple_crews())
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-for-each/
Kickoff a Crew for a List
Introduction¶
CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list. This feature is particularly useful when you need to perform the same set of tasks for multiple items.
Kicking Off a Crew for Each Item¶
To kickoff a crew for each item in a list, use the kickoff_for_each()
method. This method executes the crew for each item in the list, allowing you to process multiple items efficiently.
Here's an example of how to kickoff a crew for each item in a list:
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent,
expected_output="The average age calculated from the dataset"
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task],
verbose=True,
memory=False,
respect_context_window=True # enable by default
)
datasets = [
{ "ages": [25, 30, 35, 40, 45] },
{ "ages": [20, 25, 30, 35, 40] },
{ "ages": [30, 35, 40, 45, 50] }
]
# Execute the crew
result = analysis_crew.kickoff_for_each(inputs=datasets)
---page-end---
---link: https://docs.crewai.com/how-to/LLM-Connections/
Connecting to any LLM
Connect CrewAI to LLMs¶
CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface.
Default LLM
By default, CrewAI uses the gpt-4o-mini
model. This is determined by the OPENAI_MODEL_NAME
environment variable, which defaults to "gpt-4o-mini" if not set. You can easily configure your agents to use a different model or provider as described in this guide.
Supported Providers¶
LiteLLM supports a wide range of providers, including but not limited to:
- OpenAI
- Anthropic
- Google (Vertex AI, Gemini)
- Azure OpenAI
- AWS (Bedrock, SageMaker)
- Cohere
- Hugging Face
- Ollama
- Mistral AI
- Replicate
- Together AI
- AI21
- Cloudflare Workers AI
- DeepInfra
- Groq
- And many more!
For a complete and up-to-date list of supported providers, please refer to the LiteLLM Providers documentation.
Changing the LLM¶
To use a different LLM with your CrewAI agents, you have several options:
1. Using a String Identifier¶
Pass the model name as a string when initializing the agent:
from crewai import Agent
# Using OpenAI's GPT-4
openai_agent = Agent(
role='OpenAI Expert',
goal='Provide insights using GPT-4',
backstory="An AI assistant powered by OpenAI's latest model.",
llm='gpt-4'
)
# Using Anthropic's Claude
claude_agent = Agent(
role='Anthropic Expert',
goal='Analyze data using Claude',
backstory="An AI assistant leveraging Anthropic's language model.",
llm='claude-2'
)
2. Using the LLM Class¶
For more detailed configuration, use the LLM class:
from crewai import Agent, LLM
llm = LLM(
model="gpt-4",
temperature=0.7,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(
role='Customized LLM Expert',
goal='Provide tailored responses',
backstory="An AI assistant with custom LLM settings.",
llm=llm
)
Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "claude-2") |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
max_tokens |
int | Maximum number of tokens to generate |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
stop |
str, List[str] | Sequence(s) to stop generation |
base_url |
str | The base URL for the API endpoint |
api_key |
str | Your API key for authentication |
For a complete list of parameters and their descriptions, refer to the LLM class documentation.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
Using Environment Variables¶
import os
os.environ["OPENAI_API_KEY"] = "your-api-key"
os.environ["OPENAI_API_BASE"] = "https://api.your-provider.com/v1"
os.environ["OPENAI_MODEL_NAME"] = "your-model-name"
Using LLM Class Attributes¶
llm = LLM(
model="custom-model-name",
api_key="your-api-key",
base_url="https://api.your-provider.com/v1"
)
agent = Agent(llm=llm, ...)
Using Local Models with Ollama¶
For local models like those provided by Ollama:
- Download and install Ollama
- Pull the desired model (e.g.,
ollama pull llama2
) - Configure your agent:
agent = Agent(
role='Local AI Expert',
goal='Process information using a local model',
backstory="An AI assistant running on local hardware.",
llm=LLM(model="ollama/llama2", base_url="http://localhost:11434")
)
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Conclusion¶
By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult the LiteLLM documentation for the most up-to-date information on supported models and configuration options.
---page-end---
---link: https://docs.crewai.com/how-to/Langtrace-Observability/
Langtrace Overview¶
Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases. While not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents. This integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.
Setup Instructions¶
- Sign up for Langtrace by visiting https://langtrace.ai/signup.
- Create a project, set the project type to crewAI & generate an API key.
- Install Langtrace in your CrewAI project using the following commands:
Using Langtrace with CrewAI¶
To integrate Langtrace with your CrewAI project, follow these steps:
- Import and initialize Langtrace at the beginning of your script, before any CrewAI imports:
from langtrace_python_sdk import langtrace
langtrace.init(api_key='<LANGTRACE_API_KEY>')
# Now import CrewAI modules
from crewai import Agent, Task, Crew
Features and Their Application to CrewAI¶
-
LLM Token and Cost Tracking
-
Monitor the token usage and associated costs for each CrewAI agent interaction.
-
Trace Graph for Execution Steps
-
Visualize the execution flow of your CrewAI tasks, including latency and logs.
-
Useful for identifying bottlenecks in your agent workflows.
-
Dataset Curation with Manual Annotation
-
Create datasets from your CrewAI task outputs for future training or evaluation.
-
Prompt Versioning and Management
-
Keep track of different versions of prompts used in your CrewAI agents.
-
Useful for A/B testing and optimizing agent performance.
-
Prompt Playground with Model Comparisons
-
Test and compare different prompts and models for your CrewAI agents before deployment.
-
Testing and Evaluations
- Set up automated tests for your CrewAI agents and tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Replay-tasks-from-latest-Crew-Kickoff/
Replay from a specific task from a kickoff
Introduction¶
CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you've finished a kickoff and may want to retry certain tasks or don't need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.
Note:¶
You must run crew.kickoff()
before you can replay a task. Currently, only the latest kickoff is supported, so if you use kickoff_for_each
, it will only allow you to replay from the most recent crew run.
Here's an example of how to replay from a task:
Replaying from Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following commands:
To view the latest kickoff task_ids use:
Once you have your task_id
to replay, use:
Note: Ensure crewai
is installed and configured correctly in your development environment.
Replaying from a Task Programmatically¶
To replay from a task programmatically, use the following steps:
- Specify the
task_id
and input parameters for the replay process. - Execute the replay command within a try-except block to handle potential errors.
def replay():
"""
Replay the crew execution from a specific task.
"""
task_id = '<task_id>'
inputs = {"topic": "CrewAI Training"} # This is optional; you can pass in the inputs you want to replay; otherwise, it uses the previous kickoff's inputs.
try:
YourCrewName_Crew().crew().replay(task_id=task_id, inputs=inputs)
except subprocess.CalledProcessError as e:
raise Exception(f"An error occurred while replaying the crew: {e}")
except Exception as e:
raise Exception(f"An unexpected error occurred: {e}")
Conclusion¶
With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust. Ensure you follow the commands and steps precisely to make the most of these features.
---page-end---
---link: https://docs.crewai.com/how-to/Sequential/
Using Sequential Process
Introduction¶
CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes. This guide outlines how to effectively implement these processes to ensure efficient task execution and project completion.
Sequential Process Overview¶
The sequential process ensures tasks are executed one after the other, following a linear progression. This approach is ideal for projects requiring tasks to be completed in a specific order.
Key Features¶
- Linear Task Flow: Ensures orderly progression by handling tasks in a predetermined sequence.
- Simplicity: Best suited for projects with clear, step-by-step tasks.
- Easy Monitoring: Facilitates easy tracking of task completion and project progress.
Implementing the Sequential Process¶
To use the sequential process, assemble your crew and define tasks in the order they need to be executed.
from crewai import Crew, Process, Agent, Task, TaskOutput, CrewOutput
# Define your agents
researcher = Agent(
role='Researcher',
goal='Conduct foundational research',
backstory='An experienced researcher with a passion for uncovering insights'
)
analyst = Agent(
role='Data Analyst',
goal='Analyze research findings',
backstory='A meticulous analyst with a knack for uncovering patterns'
)
writer = Agent(
role='Writer',
goal='Draft the final report',
backstory='A skilled writer with a talent for crafting compelling narratives'
)
# Define your tasks
research_task = Task(description='Gather relevant data...', agent=researcher, expected_output='Raw Data')
analysis_task = Task(description='Analyze the data...', agent=analyst, expected_output='Data Insights')
writing_task = Task(description='Compose the report...', agent=writer, expected_output='Final Report')
# Form the crew with a sequential process
report_crew = Crew(
agents=[researcher, analyst, writer],
tasks=[research_task, analysis_task, writing_task],
process=Process.sequential
)
# Execute the crew
result = report_crew.kickoff()
# Accessing the type-safe output
task_output: TaskOutput = result.tasks[0].output
crew_output: CrewOutput = result.output
Note:¶
Each task in a sequential process must have an agent assigned. Ensure that every Task
includes an agent
parameter.
Workflow in Action¶
- Initial Task: In a sequential process, the first agent completes their task and signals completion.
- Subsequent Tasks: Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.
- Completion: The process concludes once the final task is executed, leading to project completion.
Advanced Features¶
Task Delegation¶
In sequential processes, if an agent has allow_delegation
set to True
, they can delegate tasks to other agents in the crew. This feature is automatically set up when there are multiple agents in the crew.
Asynchronous Execution¶
Tasks can be executed asynchronously, allowing for parallel processing when appropriate. To create an asynchronous task, set async_execution=True
when defining the task.
Memory and Caching¶
CrewAI supports both memory and caching features:
- Memory: Enable by setting memory=True
when creating the Crew. This allows agents to retain information across tasks.
- Caching: By default, caching is enabled. Set cache=False
to disable it.
Callbacks¶
You can set callbacks at both the task and step level:
- task_callback
: Executed after each task completion.
- step_callback
: Executed after each step in an agent's execution.
Usage Metrics¶
CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution.
Best Practices for Sequential Processes¶
- Order Matters: Arrange tasks in a logical sequence where each task builds upon the previous one.
- Clear Task Descriptions: Provide detailed descriptions for each task to guide the agents effectively.
- Appropriate Agent Selection: Match agents' skills and roles to the requirements of each task.
- Use Context: Leverage the context from previous tasks to inform subsequent ones.
This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations. The content is kept simple and direct to ensure easy understanding.
---page-end---
---link: https://docs.crewai.com/how-to/Your-Own-Manager-Agent/
Setting a Specific Agent as Manager in CrewAI¶
CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks. This feature enables the customization of the managerial role to better fit your project's requirements.
Using the manager_agent
Attribute¶
Custom Manager Agent¶
The manager_agent
attribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard.
Example¶
import os
from crewai import Agent, Task, Crew, Process
# Define your agents
researcher = Agent(
role="Researcher",
goal="Conduct thorough research and analysis on AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently researching for a new client.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Create compelling content about AI and AI agents",
backstory="You're a senior writer, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently writing content for a new client.",
allow_delegation=False,
)
# Define your task
task = Task(
description="Generate a list of 5 interesting ideas for an article, then write one captivating paragraph for each idea that showcases the potential of a full article on this topic. Return the list of ideas with their paragraphs and your notes.",
expected_output="5 bullet points, each with a paragraph and accompanying notes.",
)
# Define the manager agent
manager = Agent(
role="Project Manager",
goal="Efficiently manage the crew and ensure high-quality task completion",
backstory="You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success. Your role is to coordinate the efforts of the crew members, ensuring that each task is completed on time and to the highest standard.",
allow_delegation=True,
)
# Instantiate your crew with a custom manager
crew = Crew(
agents=[researcher, writer],
tasks=[task],
manager_agent=manager,
process=Process.hierarchical,
)
# Start the crew's work
result = crew.kickoff()
Benefits of a Custom Manager Agent¶
- Enhanced Control: Tailor the management approach to fit the specific needs of your project.
- Improved Coordination: Ensure efficient task coordination and management by an experienced agent.
- Customizable Management: Define managerial roles and responsibilities that align with your project's goals.
Setting a Manager LLM¶
If you're using the hierarchical process and don't want to set a custom manager agent, you can specify the language model for the manager:
from langchain_openai import ChatOpenAI
manager_llm = ChatOpenAI(model_name="gpt-4")
crew = Crew(
agents=[researcher, writer],
tasks=[task],
process=Process.hierarchical,
manager_llm=manager_llm
)
Note: Either manager_agent
or manager_llm
must be set when using the hierarchical process.
---page-end---
---link: https://docs.crewai.com/telemetry/Telemetry/
Telemetry
Telemetry¶
Personal Information
By default, we collect no data that would be considered personal information under GDPR and other privacy regulations.
We do collect Tool's names and Agent's roles, so be advised not to include any personal information in the tool's names or the Agent's roles.
Because no personal information is collected, it's not necessary to worry about data residency.
When share_crew
is enabled, additional data is collected which may contain personal information if included by the user. Users should exercise caution when enabling this feature to ensure compliance with privacy regulations.
CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library. Our focus is on improving and developing the features, integrations, and tools most utilized by our users.
It's pivotal to understand that by default, NO personal data is collected concerning prompts, task descriptions, agents' backstories or goals, usage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.
When the share_crew
feature is enabled, detailed data including task descriptions, agents' backstories or goals, and other specific attributes are collected to provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks. Users should carefully consider the content of their crews and tasks before enabling share_crew
. Users can disable telemetry by setting the environment variable OTEL_SDK_DISABLED to true.
Data Explanation:¶
Defaulted | Data | Reason and Specifics |
---|---|---|
Yes | CrewAI and Python Version | Tracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal data. |
Yes | Crew Metadata | Includes: randomly generated key and ID, process type (e.g., 'sequential', 'parallel'), boolean flag for memory usage (true/false), count of tasks, count of agents. All non-personal. |
Yes | Agent Data | Includes: randomly generated key and ID, role name (should not include personal info), boolean settings (verbose, delegation enabled, code execution allowed), max iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of tool names (should not include personal info). No personal data. |
Yes | Task Metadata | Includes: randomly generated key and ID, boolean execution settings (async_execution, human_input), associated agent's role and key, list of tool names. All non-personal. |
Yes | Tool Usage Statistics | Includes: tool name (should not include personal info), number of usage attempts (integer), LLM attributes used. No personal data. |
Yes | Test Execution Data | Includes: crew's randomly generated key and ID, number of iterations, model name used, quality score (float), execution time (in seconds). All non-personal. |
Yes | Task Lifecycle Data | Includes: creation and execution start/end times, crew and task identifiers. Stored as spans with timestamps. No personal data. |
Yes | LLM Attributes | Includes: name, model_name, model, top_k, temperature, and class name of the LLM. All technical, non-personal data. |
Yes | Crew Deployment attempt using crewAI CLI | Includes: The fact a deploy is being made and crew id, and if it's trying to pull logs, no other data. |
No | Agent's Expanded Data | Includes: goal description, backstory text, i18n prompt file identifier. Users should ensure no personal info is included in text fields. |
No | Detailed Task Information | Includes: task description, expected output description, context references. Users should ensure no personal info is included in these fields. |
No | Environment Information | Includes: platform, release, system, version, and CPU count. Example: 'Windows 10', 'x86_64'. No personal data. |
No | Crew and Task Inputs and Outputs | Includes: input parameters and output results as non-identifiable data. Users should ensure no personal info is included. |
No | Comprehensive Crew Execution Data | Includes: detailed logs of crew operations, all agents and tasks data, final output. All non-personal and technical in nature. |
Note: "No" in the "Defaulted" column indicates that this data is only collected when share_crew
is set to true
.
Opt-In Further Telemetry Sharing¶
Users can choose to share their complete telemetry data by enabling the share_crew
attribute to True
in their crew configurations. Enabling share_crew
results in the collection of detailed crew and task execution data, including goal
, backstory
, context
, and output
of tasks. This enables a deeper insight into usage patterns.
Potential Personal Information
If you enable share_crew
, the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs. Users should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.
---page-end---
---link: https://docs.crewai.com/tools/BrowserbaseLoadTool/
BrowserbaseLoadTool¶
Description¶
Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.
Power your AI data retrievals with: - Serverless Infrastructure providing reliable browsers to extract data from complex UIs - Stealth Mode with included fingerprinting tactics and automatic captcha solving - Session Debugger to inspect your Browser Session with networks timeline and logs - Live Debug to quickly debug your automation
Installation¶
- Get an API key and Project ID from browserbase.com and set it in environment variables (
BROWSERBASE_API_KEY
,BROWSERBASE_PROJECT_ID
). - Install the Browserbase SDK along with
crewai[tools]
package:
Example¶
Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:
Arguments¶
api_key
Optional. Browserbase API key. Default isBROWSERBASE_API_KEY
env variable.project_id
Optional. Browserbase Project ID. Default isBROWSERBASE_PROJECT_ID
env variable.text_content
Retrieve only text content. Default isFalse
.session_id
Optional. Provide an existing Session ID.proxy
Optional. Enable/Disable Proxies."
---page-end---
---link: https://docs.crewai.com/tools/CSVSearchTool/
CSVSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file's content. It allows users to semantically search for queries in the content of a specified CSV file. This feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with "Search" in their name, including CSVSearchTool, are RAG tools designed for searching different sources of data.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import CSVSearchTool
# Initialize the tool with a specific CSV file. This setup allows the agent to only search the given CSV file.
tool = CSVSearchTool(csv='path/to/your/csvfile.csv')
# OR
# Initialize the tool without a specific CSV file. Agent will need to provide the CSV path at runtime.
tool = CSVSearchTool()
Arguments¶
csv
: The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CSVSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeDocsSearchTool/
CodeDocsSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation. It enables users to efficiently find specific information or topics within code documentation. By providing a docs_url
during initialization, the tool narrows down the search to that particular documentation site. Alternatively, without a specific docs_url
, it searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs.
Installation¶
To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:
Example¶
Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:
from crewai_tools import CodeDocsSearchTool
# To search any code documentation content if the URL is known or discovered during its execution:
tool = CodeDocsSearchTool()
# OR
# To specifically focus your search on a given documentation site by providing its URL:
tool = CodeDocsSearchTool(docs_url='https://docs.example.com/reference')
Arguments¶
docs_url
: Optional. Specifies the URL of the code documentation to be searched. Providing this during the tool's initialization focuses the search on the specified documentation content.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CodeDocsSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeInterpreterTool/
CodeInterpreterTool¶
Description¶
This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.
This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem, obtain the results, and utilize that information to inform subsequent decisions and actions.
Requirements¶
- Docker
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the code must be generated by the Agent itself. The code must be a Python3 code. And it will take some time for the first time to run because it needs to build the Docker image.
from crewai import Agent
from crewai_tools import CodeInterpreterTool
Agent(
...
tools=[CodeInterpreterTool()],
)
We also provide a simple way to use it directly from the Agent.
---page-end---
---link: https://docs.crewai.com/tools/ComposioTool/
ComposioTool Documentation¶
Description¶
This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the composio SDK.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
after the installation is complete, either run composio login
or export your composio API key as COMPOSIO_API_KEY
.
Example¶
The following example demonstrates how to initialize the tool and execute a github action:
- Initialize Composio tools
from composio import App
from crewai_tools import ComposioTool
from crewai import Agent, Task
tools = [ComposioTool.from_action(action=Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER)]
If you don't know what action you want to use, use from_app
and tags
filter to get relevant actions
or use use_case
to search relevant actions
- Define agent
crewai_agent = Agent(
role="Github Agent",
goal="You take action on Github using Github APIs",
backstory=(
"You are AI agent that is responsible for taking actions on Github "
"on users behalf. You need to take action on Github using Github APIs"
),
verbose=True,
tools=tools,
)
- Execute task
task = Task(
description="Star a repo ComposioHQ/composio on GitHub",
agent=crewai_agent,
expected_output="if the star happened",
)
task.execute()
- More detailed list of tools can be found here
---page-end---
---link: https://docs.crewai.com/tools/DALL-ETool/
DALL-E Tool¶
Description¶
This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions. This tool allows the Agent to generate images based on the text input provided by the user.
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.
If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to the DallETool
class. For example:
from crewai_tools import DallETool
dalle_tool = DallETool(model="dall-e-3",
size="1024x1024",
quality="standard",
n=1)
Agent(
...
tools=[dalle_tool]
)
The parameters are based on the client.images.generate
method from the OpenAI API. For more information on the parameters, please refer to the OpenAI API documentation.
---page-end---
---link: https://docs.crewai.com/tools/DOCXSearchTool/
DOCXSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents. It enables users to effectively search and extract relevant information from DOCX files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Install the crewai_tools package by running the following command in your terminal:
Example¶
The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file's content or with a specific DOCX file path.
from crewai_tools import DOCXSearchTool
# Initialize the tool to search within any DOCX file's content
tool = DOCXSearchTool()
# OR
# Initialize the tool with a specific DOCX file, so the agent can only search the content of the specified DOCX file
tool = DOCXSearchTool(docx='path/to/your/document.docx')
Arguments¶
docx
: An optional file path to a specific DOCX document you wish to search. If not provided during initialization, the tool allows for later specification of any DOCX file's content path for searching.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = DOCXSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/DirectoryReadTool/
Directory Read
# DirectoryReadTool
!!! note "Experimental"
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
## Description
The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents. It can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories. This tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories.
## Installation
To utilize the DirectoryReadTool in your project, install the `crewai_tools` package. If this package is not yet part of your environment, you can install it using pip with the command below:
```shell
pip install 'crewai[tools]'
This command installs the latest version of the crewai_tools
package, granting access to the DirectoryReadTool among other utilities.
Example¶
Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:
from crewai_tools import DirectoryReadTool
# Initialize the tool so the agent can read any directory's content it learns about during execution
tool = DirectoryReadTool()
# OR
# Initialize the tool with a specific directory, so the agent can only read the content of the specified directory
tool = DirectoryReadTool(directory='/path/to/your/directory')
Arguments¶
The DirectoryReadTool requires minimal configuration for use. The essential argument for this tool is as follows:
directory
: Optional. An argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing.
---page-end---
---link: https://docs.crewai.com/tools/DirectorySearchTool/
DirectorySearchTool¶
Experimental
The DirectorySearchTool is under continuous development. Features and functionalities might evolve, and unexpected behavior may occur as we refine the tool.
Description¶
The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup.
Installation¶
To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:
Initialization and Usage¶
Import the DirectorySearchTool from the crewai_tools
package to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory.
from crewai_tools import DirectorySearchTool
# For dynamic directory specification at runtime
tool = DirectorySearchTool()
# For fixed directory searches
tool = DirectorySearchTool(directory='/path/to/directory')
Arguments¶
directory
: A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.
Custom Model and Embeddings¶
The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users.
tool = DirectorySearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include ollama, google, anthropic, llama2, and more
config=dict(
model="llama2",
# Additional configurations here
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/EXASearchTool/
EXASearchTool Documentation¶
Description¶
The EXASearchTool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the exa.ai API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import EXASearchTool
# Initialize the tool for internet searching capabilities
tool = EXASearchTool()
Steps to Get Started¶
To effectively use the EXASearchTool, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a exa.ai API key by registering for a free account at exa.ai.
- Environment Configuration: Store your obtained API key in an environment variable named
EXA_API_KEY
to facilitate its use by the tool.
Conclusion¶
By integrating the EXASearchTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/FileReadTool/
FileReadTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval. This suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics. It supports a variety of text-based file formats such as .txt
, .csv
, .json
, and more. Depending on the file type, the suite offers specialized functionality, such as converting JSON content into a Python dictionary for ease of use.
Installation¶
To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:
Usage Example¶
To get started with the FileReadTool:
from crewai_tools import FileReadTool
# Initialize the tool to read any files the agents knows or lean the path for
file_read_tool = FileReadTool()
# OR
# Initialize the tool with a specific file path, so the agent can only read the content of the specified file
file_read_tool = FileReadTool(file_path='path/to/your/file.txt')
Arguments¶
file_path
: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.
---page-end---
---link: https://docs.crewai.com/tools/FileWriteTool/
FileWriterTool Documentation¶
Description¶
The FileWriterTool
is a component of the crewai_tools package, designed to simplify the process of writing content to files. It is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more. This tool supports creating new directories if they don't exist, making it easier to organize your output.
Installation¶
Install the crewai_tools package to use the FileWriterTool
in your projects:
Example¶
To get started with the FileWriterTool
:
from crewai_tools import FileWriterTool
# Initialize the tool
file_writer_tool = FileWriterTool()
# Write content to a file in a specified directory
result = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')
print(result)
Arguments¶
filename
: The name of the file you want to create or overwrite.content
: The content to write into the file.directory
(optional): The path to the directory where the file will be created. Defaults to the current directory (.
). If the directory does not exist, it will be created.
Conclusion¶
By integrating the FileWriterTool
into your crews, the agents can execute the process of writing content to files and creating directories. This tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is straightforward and efficient.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlCrawlWebsiteTool/
FirecrawlCrawlWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlCrawlWebsiteTool
tool = FirecrawlCrawlWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The base URL to start crawling from.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.crawler_options
: Optional. Options for controlling the crawling behavior.includes
: Optional. URL patterns to include in the crawl.exclude
: Optional. URL patterns to exclude from the crawl.generateImgAltText
: Optional. Generate alt text for images using LLMs (requires a paid plan).returnOnlyUrls
: Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.maxDepth
: Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.mode
: Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn't be used on heavily JavaScript-rendered websites.limit
: Optional. Maximum number of pages to crawl.timeout
: Optional. Timeout in milliseconds for the crawling operation.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlScrapeWebsiteTool/
FirecrawlScrapeWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlScrapeWebsiteTool
tool = FirecrawlScrapeWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The URL to scrape.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.extractor_options
: Optional. Options for LLM-based extraction of structured information from the page contentmode
: The extraction mode to use, currently supports 'llm-extraction'extractionPrompt
: Optional. A prompt describing what information to extract from the pageextractionSchema
: Optional. The schema for the data to be extractedtimeout
: Optional. Timeout in milliseconds for the request
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlSearchTool/
FirecrawlSearchTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.query
: The search query string to be used for searching.page_options
: Optional. Options for result formatting.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.fetchPageContent
: Optional. Fetch the full content of the page.search_options
: Optional. Options for controlling the crawling behavior.limit
: Optional. Maximum number of pages to crawl.
---page-end---
---link: https://docs.crewai.com/tools/GitHubSearchTool/
GithubSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub.
Installation¶
To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:
This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package.
Example¶
Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:
from crewai_tools import GithubSearchTool
# Initialize the tool for semantic searches within a specific GitHub repository
tool = GithubSearchTool(
github_repo='https://github.com/example/repo',
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
# OR
# Initialize the tool for semantic searches within a specific GitHub repository, so the agent can search any repository if it learns about during its execution
tool = GithubSearchTool(
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
Arguments¶
github_repo
: The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.content_types
: Specifies the types of content to include in your search. You must provide a list of content types from the following options:code
for searching within the code,repo
for searching within the repository's general information,pr
for searching within pull requests, andissue
for searching within issues. This field is mandatory and allows tailoring the search to specific content types within the GitHub repository.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = GithubSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/JSONSearchTool/
JSONSearchTool¶
Experimental Status
The JSONSearchTool is currently in an experimental phase. This means the tool is under active development, and users might encounter unexpected behavior or changes. We highly encourage feedback on any issues or suggestions for improvements.
Description¶
The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results.
Installation¶
To install the JSONSearchTool, use the following pip command:
Usage Examples¶
Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase.
from crewai.json_tools import JSONSearchTool # Updated import path
# General JSON content search
# This approach is suitable when the JSON path is either known beforehand or can be dynamically identified.
tool = JSONSearchTool()
# Restricting search to a specific JSON file
# Use this initialization method when you want to limit the search scope to a specific JSON file.
tool = JSONSearchTool(json_path='./path/to/your/file.json')
Arguments¶
json_path
(str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.
Configuration Options¶
The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements.
tool = JSONSearchTool(
config={
"llm": {
"provider": "ollama", # Other options include google, openai, anthropic, llama2, etc.
"config": {
"model": "llama2",
# Additional optional configurations can be specified here.
# temperature=0.5,
# top_p=1,
# stream=true,
},
},
"embedder": {
"provider": "google", # or openai, ollama, ...
"config": {
"model": "models/embedding-001",
"task_type": "retrieval_document",
# Further customization options can be added here.
},
},
}
)
---page-end---
---link: https://docs.crewai.com/tools/MDXSearchTool/
MDXSearchTool¶
Experimental
The MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.
Description¶
The MDX Search Tool is a component of the crewai_tools
package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Before using the MDX Search Tool, ensure the crewai_tools
package is installed. If it is not, you can install it with the following command:
Usage Example¶
To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:
from crewai_tools import MDXSearchTool
# Initialize the tool to search any MDX content it learns about during execution
tool = MDXSearchTool()
# OR
# Initialize the tool with a specific MDX file path for an exclusive search within that document
tool = MDXSearchTool(mdx='path/to/your/document.mdx')
Parameters¶
- mdx: Optional. Specifies the MDX file path for the search. It can be provided during initialization.
Customization of Model and Embeddings¶
The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:
tool = MDXSearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include google, openai, anthropic, llama2, etc.
config=dict(
model="llama2",
# Optional parameters can be included here.
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# Optional title for the embeddings can be added here.
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/MySQLTool/
MySQLSearchTool¶
Description¶
This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology, the MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases. It simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing to perform advanced queries on extensive datasets within a MySQL database.
Installation¶
To install the crewai_tools
package and utilize the MySQLSearchTool, execute the following command in your terminal:
Example¶
Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:
from crewai_tools import MySQLSearchTool
# Initialize the tool with the database URI and the target table name
tool = MySQLSearchTool(db_uri='mysql://user:password@localhost:3306/mydatabase', table_name='employees')
Arguments¶
The MySQLSearchTool requires the following arguments for its operation:
db_uri
: A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = MySQLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google",
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/NL2SQLTool/
NL2SQL Tool¶
Description¶
This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.
This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output. Along with that proivdes the ability for the Agent to update the database based on its goal.
Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database.
Requirements¶
- SqlAlchemy
- Any DB compatible library (e.g. psycopg2, mysql-connector-python)
Installation¶
Install the crewai_tools package
Usage¶
In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the format dialect+driver://username:password@host:port/database
.
from crewai_tools import NL2SQLTool
# psycopg2 was installed to run this example with PostgreSQL
nl2sql = NL2SQLTool(db_uri="postgresql://example@localhost:5432/test_db")
@agent
def researcher(self) -> Agent:
return Agent(
config=self.agents_config["researcher"],
allow_delegation=False,
tools=[nl2sql]
)
Example¶
The primary task goal was:
"Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and sort the results by the average monthly revenue in descending order"
So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.
The second task goal was:
"Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided. Include information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order."
Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.
This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.
The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database.
---page-end---
---link: https://docs.crewai.com/tools/PDFSearchTool/
PDFSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently. This capability makes it especially useful for extracting specific information from large PDF files quickly.
Installation¶
To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:
Example¶
Here's how to use the PDFSearchTool to search within a PDF document:
from crewai_tools import PDFSearchTool
# Initialize the tool allowing for any PDF content search if the path is provided during execution
tool = PDFSearchTool()
# OR
# Initialize the tool with a specific PDF path for exclusive search within that document
tool = PDFSearchTool(pdf='path/to/your/document.pdf')
Arguments¶
pdf
: Optional The PDF path for the search. Can be provided at initialization or within therun
method's arguments. If provided at initialization, the tool confines its search to the specified document.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = PDFSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/PGSearchTool/
PGSearchTool¶
Under Development
The PGSearchTool is currently under development. This document outlines the intended functionality and interface. As development progresses, please be aware that some features may not be available or could change.
Description¶
The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology, it aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases. The tool's goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on extensive datasets within a PostgreSQL environment.
Installation¶
The crewai_tools
package, which will include the PGSearchTool upon its release, can be installed using the following command:
(Note: The PGSearchTool is not yet available in the current version of the crewai_tools
package. This installation command will be updated once the tool is released.)
Example Usage¶
Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:
from crewai_tools import PGSearchTool
# Initialize the tool with the database URI and the target table name
tool = PGSearchTool(db_uri='postgresql://user:password@localhost:5432/mydatabase', table_name='employees')
Arguments¶
The PGSearchTool is designed to require the following arguments for its operation:
db_uri
: A string representing the URI of the PostgreSQL database to be queried. This argument will be mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument will also be mandatory.
Custom Model and Embeddings¶
The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:
tool = PGSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/ScrapeWebsiteTool/
ScrapeWebsiteTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content. This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import ScrapeWebsiteTool
# To enable scrapping any website it finds during it's execution
tool = ScrapeWebsiteTool()
# Initialize the tool with the website URL, so the agent can only scrap the content of the specified website
tool = ScrapeWebsiteTool(website_url='https://www.example.com')
# Extract the text from the site
text = tool.run()
print(text)
Arguments¶
website_url
: Mandatory website URL to read the file. This is the primary input for the tool, specifying which website's content should be scraped and read.
---page-end---
---link: https://docs.crewai.com/tools/SeleniumScrapingTool/
SeleniumScrapingTool¶
Experimental
This tool is currently in development. As we refine its capabilities, users may encounter unexpected behavior. Your feedback is invaluable to us for making improvements.
Description¶
The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks. It allows for precise extraction of content from web pages by using CSS selectors to target specific elements. Its design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL.
Installation¶
To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:
Usage Examples¶
Below are some scenarios where the SeleniumScrapingTool can be utilized:
from crewai_tools import SeleniumScrapingTool
# Example 1: Initialize the tool without any parameters to scrape the current page it navigates to
tool = SeleniumScrapingTool()
# Example 2: Scrape the entire webpage of a given URL
tool = SeleniumScrapingTool(website_url='https://example.com')
# Example 3: Target and scrape a specific CSS element from a webpage
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content')
# Example 4: Perform scraping with additional parameters for a customized experience
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content', cookie={'name': 'user', 'value': 'John Doe'}, wait_time=10)
Arguments¶
The following parameters can be used to customize the SeleniumScrapingTool's scraping process:
website_url
: Mandatory. Specifies the URL of the website from which content is to be scraped.css_element
: Mandatory. The CSS selector for a specific element to target on the website. This enables focused scraping of a particular part of a webpage.cookie
: Optional. A dictionary that contains cookie information. Useful for simulating a logged-in session, thereby providing access to content that might be restricted to non-logged-in users.wait_time
: Optional. Specifies the delay (in seconds) before the content is scraped. This delay allows for the website and any dynamic content to fully load, ensuring a successful scrape.
Attention
Since the SeleniumScrapingTool is under active development, the parameters and functionality may evolve over time. Users are encouraged to keep the tool updated and report any issues or suggestions for enhancements.
---page-end---
---link: https://docs.crewai.com/tools/SerperDevTool/
SerperDevTool Documentation¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the serper.dev API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import SerperDevTool
# Initialize the tool for internet searching capabilities
tool = SerperDevTool()
Steps to Get Started¶
To effectively use the SerperDevTool
, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a
serper.dev
API key by registering for a free account atserper.dev
. - Environment Configuration: Store your obtained API key in an environment variable named
SERPER_API_KEY
to facilitate its use by the tool.
Parameters¶
The SerperDevTool
comes with several parameters that will be passed to the API :
-
search_url: The URL endpoint for the search API. (Default is
https://google.serper.dev/search
) -
country: Optional. Specify the country for the search results.
- location: Optional. Specify the location for the search results.
- locale: Optional. Specify the locale for the search results.
- n_results: Number of search results to return. Default is
10
.
The values for country
, location
, locale
and search_url
can be found on the Serper Playground.
Example with Parameters¶
Here is an example demonstrating how to use the tool with additional parameters:
from crewai_tools import SerperDevTool
tool = SerperDevTool(
search_url="https://google.serper.dev/scholar",
n_results=2,
)
print(tool.run(search_query="ChatGPT"))
# Using Tool: Search the internet
# Search results: Title: Role of chat gpt in public health
# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7
# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in
# ---
# Title: Potential use of chat gpt in global warming
# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8
# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate
# ---
from crewai_tools import SerperDevTool
tool = SerperDevTool(
country="fr",
locale="fr",
location="Paris, Paris, Ile-de-France, France",
n_results=2,
)
print(tool.run(search_query="Jeux Olympiques"))
# Using Tool: Search the internet
# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats
# Link: https://olympics.com/fr/paris-2024
# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...
# ---
# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques
# Link: https://tickets.paris2024.org/
# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.
# ---
Conclusion¶
By integrating the SerperDevTool
into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. The updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/SpiderTool/
SpiderTool¶
Description¶
Spider is the fastest open source scraper and crawler that returns LLM-ready data. It converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI.
Installation¶
To use the Spider API you need to download the Spider SDK and the crewai[tools] SDK too:
Example¶
This example shows you how you can use the Spider tool to enable your agent to scrape and crawl websites. The data returned from the Spider API is already LLM-ready, so no need to do any cleaning there.
from crewai_tools import SpiderTool
def main():
spider_tool = SpiderTool()
searcher = Agent(
role="Web Research Expert",
goal="Find related information from specific URL's",
backstory="An expert web researcher that uses the web extremely well",
tools=[spider_tool],
verbose=True,
)
return_metadata = Task(
description="Scrape https://spider.cloud with a limit of 1 and enable metadata",
expected_output="Metadata and 10 word summary of spider.cloud",
agent=searcher
)
crew = Crew(
agents=[searcher],
tasks=[
return_metadata,
],
verbose=2
)
crew.kickoff()
if __name__ == "__main__":
main()
Arguments¶
api_key
(string, optional): Specifies Spider API key. If not specified, it looks forSPIDER_API_KEY
in environment variables.params
(object, optional): Optional parameters for the request. Defaults to{"return_format": "markdown"}
to return the website's content in a format that fits LLMs better.request
(string): The request type to perform. Possible values arehttp
,chrome
, andsmart
. Usesmart
to perform an HTTP request by default until JavaScript rendering is needed for the HTML.limit
(int): The maximum number of pages allowed to crawl per website. Remove the value or set it to0
to crawl all pages.depth
(int): The crawl limit for maximum depth. If0
, no limit will be applied.cache
(bool): Use HTTP caching for the crawl to speed up repeated runs. Default istrue
.budget
(object): Object that has paths with a counter for limiting the amount of pages example{"*":1}
for only crawling the root page.locale
(string): The locale to use for request, exampleen-US
.cookies
(string): Add HTTP cookies to use for request.stealth
(bool): Use stealth mode for headless chrome request to help prevent being blocked. The default istrue
on chrome.headers
(object): Forward HTTP headers to use for all request. The object is expected to be a map of key value pairs.metadata
(bool): Boolean to store metadata about the pages and content found. This could help improve AI interopt. Defaults tofalse
unless you have the website already stored with the configuration enabled.viewport
(object): Configure the viewport for chrome. Defaults to800x600
.encoding
(string): The type of encoding to use likeUTF-8
,SHIFT_JIS
, or etc.subdomains
(bool): Allow subdomains to be included. Default isfalse
.user_agent
(string): Add a custom HTTP user agent to the request. By default this is set to a random agent.store_data
(bool): Boolean to determine if storage should be used. If set this takes precedence overstorageless
. Defaults tofalse
.gpt_config
(object): Use AI to generate actions to perform during the crawl. You can pass an array for the"prompt"
to chain steps.fingerprint
(bool): Use advanced fingerprint for chrome.storageless
(bool): Boolean to prevent storing any type of data for the request including storage and AI vectors embedding. Defaults tofalse
unless you have the website already stored.readability
(bool): Use readability to pre-process the content for reading. This may drastically improve the content for LLM usage.return_format
(string): The format to return the data in. Possible values aremarkdown
,raw
,text
, andhtml2text
. Useraw
to return the default format of the page like HTML etc.proxy_enabled
(bool): Enable high performance premium proxies for the request to prevent being blocked at the network level.query_selector
(string): The CSS query selector to use when extracting content from the markup.full_resources
(bool): Crawl and download all the resources for a website.request_timeout
(int): The timeout to use for request. Timeouts can be from5-60
. The default is30
seconds.run_in_background
(bool): Run the request in the background. Useful if storing data and wanting to trigger crawls to the dashboard. This has no effect if storageless is set.
---page-end---
---link: https://docs.crewai.com/tools/TXTSearchTool/
TXTSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file. It allows for semantic searching of a query within a specified text file's content, making it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided.
Installation¶
To use the TXTSearchTool, you first need to install the crewai_tools package. This can be done using pip, a package manager for Python. Open your terminal or command prompt and enter the following command:
This command will download and install the TXTSearchTool along with any necessary dependencies.
Example¶
The following example demonstrates how to use the TXTSearchTool to search within a text file. This example shows both the initialization of the tool with a specific text file and the subsequent search within that file's content.
from crewai_tools import TXTSearchTool
# Initialize the tool to search within any text file's content the agent learns about during its execution
tool = TXTSearchTool()
# OR
# Initialize the tool with a specific text file, so the agent can search within the given text file's content
tool = TXTSearchTool(txt='path/to/text/file.txt')
Arguments¶
txt
(str): Optional. The path to the text file you want to search. This argument is only required if the tool was not initialized with a specific text file; otherwise, the search will be conducted within the initially provided text file.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = TXTSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/VisionTool/
Vision Tool¶
Description¶
This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output. The URL or the PATH of the image should be passed to the Agent.
Installation¶
Install the crewai_tools package
Usage¶
In order to use the VisionTool, the OpenAI API key should be set in the environment variable OPENAI_API_KEY
.
---page-end---
---link: https://docs.crewai.com/tools/WebsiteSearchTool/
WebsiteSearchTool¶
Experimental Status
The WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.
Description¶
The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites. It aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently. This tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest. Please note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.
Installation¶
To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:
This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.
Example Usage¶
Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:
from crewai_tools import WebsiteSearchTool
# Example of initiating tool that agents can use to search across any discovered websites
tool = WebsiteSearchTool()
# Example of limiting the search to the content of a specific website, so now agents can only search within that website
tool = WebsiteSearchTool(website='https://example.com')
Arguments¶
website
: An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool's flexibility by allowing targeted searches when necessary.
Customization Options¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = WebsiteSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/XMLSearchTool/
XMLSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files. Ideal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path. By specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes.
Installation¶
To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:
Example¶
Here are two examples demonstrating how to use the XMLSearchTool. The first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope.
from crewai_tools import XMLSearchTool
# Allow agents to search within any XML file's content as it learns about their paths during execution
tool = XMLSearchTool()
# OR
# Initialize the tool with a specific XML file path for exclusive search within that document
tool = XMLSearchTool(xml='path/to/your/xmlfile.xml')
Arguments¶
xml
: This is the path to the XML file you wish to search. It is an optional parameter during the tool's initialization but must be provided either at initialization or as part of therun
method's arguments to execute a search.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = XMLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeChannelSearchTool/
YoutubeChannelSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform semantic searches within a specific Youtube channel's content. Leveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results, making it invaluable for extracting information or finding specific content without the need to manually sift through videos. It streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.
Installation¶
To utilize the YoutubeChannelSearchTool, the crewai_tools
package must be installed. Execute the following command in your shell to install:
Example¶
To begin using the YoutubeChannelSearchTool, follow the example below. This demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel's content.
from crewai_tools import YoutubeChannelSearchTool
# Initialize the tool to search within any Youtube channel's content the agent learns about during its execution
tool = YoutubeChannelSearchTool()
# OR
# Initialize the tool with a specific Youtube channel handle to target your search
tool = YoutubeChannelSearchTool(youtube_channel_handle='@exampleChannel')
Arguments¶
youtube_channel_handle
: A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeChannelSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeVideoSearchTool/
YoutubeVideoSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is part of the crewai_tools
package and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques. It is one of several "Search" tools in the package that leverage RAG for different sources. The YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL, or they can target their search to a specific Youtube video by providing its URL.
Installation¶
To utilize the YoutubeVideoSearchTool, you must first install the crewai_tools
package. This package contains the YoutubeVideoSearchTool among other utilities designed to enhance your data analysis and processing tasks. Install the package by executing the following command in your terminal:
Example¶
To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below. This demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video's content.
from crewai_tools import YoutubeVideoSearchTool
# General search across Youtube content without specifying a video URL, so the agent can search within any Youtube video content it learns about irs url during its operation
tool = YoutubeVideoSearchTool()
# Targeted search within a specific Youtube video's content
tool = YoutubeVideoSearchTool(youtube_video_url='https://youtube.com/watch?v=example')
Arguments¶
The YoutubeVideoSearchTool accepts the following initialization arguments:
youtube_video_url
: An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeVideoSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com
crewAI Documentation¶
Cutting-edge framework for orchestrating role-playing, autonomous AI agents. By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
Getting Started
How-To Guides
- Create Custom Tools
- Using Sequential Process
- Using Hierarchical Process
- Connecting to LLMs
- Customizing Agents
- Coding Agents
- Forcing Tool Output as Result
- Human Input on Execution
- Kickoff a Crew Asynchronously
- Kickoff a Crew for a List
- Replay from a Task
- Conditional Tasks
- Agent Monitoring with AgentOps
- Agent Monitoring with LangTrace
---page-end---
---link: https://docs.crewai.com/core-concepts/Agents/
Agents
What is an Agent?¶
What is an Agent?
An agent is an autonomous unit programmed to:
- Perform tasks
- Make decisions
- Communicate with other agents
Think of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like 'Researcher', 'Writer', or 'Customer Support', each contributing to the overall goal of the crew.
Agent Attributes¶
Attribute | Parameter | Description |
---|---|---|
Role | role |
Defines the agent's function within the crew. It determines the kind of tasks the agent is best suited for. |
Goal | goal |
The individual objective that the agent aims to achieve. It guides the agent's decision-making process. |
Backstory | backstory |
Provides context to the agent's role and goal, enriching the interaction and collaboration dynamics. |
LLM (optional) | llm |
Represents the language model that will run the agent. It dynamically fetches the model name from the OPENAI_MODEL_NAME environment variable, defaulting to "gpt-4" if not specified. |
Tools (optional) | tools |
Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent's execution environment. Tools are initialized with a default value of an empty list. |
Function Calling LLM (optional) | function_calling_llm |
Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is None . |
Max Iter (optional) | max_iter |
Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is 25 . |
Max RPM (optional) | max_rpm |
Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It's optional and can be left unspecified, with a default value of None . |
Max Execution Time (optional) | max_execution_time |
Max Execution Time is the maximum execution time for an agent to execute a task. It's optional and can be left unspecified, with a default value of None , meaning no max execution time. |
Verbose (optional) | verbose |
Setting this to True configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is False . |
Allow Delegation (optional) | allow_delegation |
Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is False . |
Step Callback (optional) | step_callback |
A function that is called after each step of the agent. This can be used to log the agent's actions or to perform other operations. It will overwrite the crew step_callback . |
Cache (optional) | cache |
Indicates if the agent should use a cache for tool usage. Default is True . |
System Template (optional) | system_template |
Specifies the system format for the agent. Default is None . |
Prompt Template (optional) | prompt_template |
Specifies the prompt format for the agent. Default is None . |
Response Template (optional) | response_template |
Specifies the response format for the agent. Default is None . |
Allow Code Execution (optional) | allow_code_execution |
Enable code execution for the agent. Default is False . |
Max Retry Limit (optional) | max_retry_limit |
Maximum number of retries for an agent to execute a task when an error occurs. Default is 2 . |
Use System Prompt (optional) | use_system_prompt |
Adds the ability to not use system prompt (to support o1 models). Default is True . |
Respect Context Window (optional) | respect_context_window |
Summary strategy to avoid overflowing the context window. Default is True . |
Creating an Agent¶
Agent Interaction
Agents can interact with each other using crewAI's built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.
To create an agent, you would typically initialize an instance of the Agent
class with the desired properties. Here's a conceptual example including all attributes:
# Example: Creating an agent with all attributes
from crewai import Agent
agent = Agent(
role='Data Analyst',
goal='Extract actionable insights',
backstory="""You're a data analyst at a large company.
You're responsible for analyzing data and providing insights
to the business.
You're currently working on a project to analyze the
performance of our marketing campaigns.""",
tools=[my_tool1, my_tool2], # Optional, defaults to an empty list
llm=my_llm, # Optional
function_calling_llm=my_llm, # Optional
max_iter=15, # Optional
max_rpm=None, # Optional
max_execution_time=None, # Optional
verbose=True, # Optional
allow_delegation=False, # Optional
step_callback=my_intermediate_step_callback, # Optional
cache=True, # Optional
system_template=my_system_template, # Optional
prompt_template=my_prompt_template, # Optional
response_template=my_response_template, # Optional
config=my_config, # Optional
crew=my_crew, # Optional
tools_handler=my_tools_handler, # Optional
cache_handler=my_cache_handler, # Optional
callbacks=[callback1, callback2], # Optional
allow_code_execution=True, # Optional
max_retry_limit=2, # Optional
use_system_prompt=True, # Optional
respect_context_window=True, # Optional
)
Setting prompt templates¶
Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here's an example of how to set prompt templates:
agent = Agent(
role="{topic} specialist",
goal="Figure {goal} out",
backstory="I am the master of {role}",
system_template="""<|start_header_id|>system<|end_header_id|>
{{ .System }}<|eot_id|>""",
prompt_template="""<|start_header_id|>user<|end_header_id|>
{{ .Prompt }}<|eot_id|>""",
response_template="""<|start_header_id|>assistant<|end_header_id|>
{{ .Response }}<|eot_id|>""",
)
Bring your Third Party Agents¶
Extend your Third Party Agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the crewai's BaseAgent class.
BaseAgent includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.
CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.
from crewai import Agent, Task, Crew
from custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.
from langchain.agents import load_tools
langchain_tools = load_tools(["google-serper"], llm=llm)
agent1 = CustomAgent(
role="agent role",
goal="who is {input}?",
backstory="agent backstory",
verbose=True,
)
task1 = Task(
expected_output="a short biography of {input}",
description="a short biography of {input}",
agent=agent1,
)
agent2 = Agent(
role="agent role",
goal="summarize the short bio for {input} and if needed do more research",
backstory="agent backstory",
verbose=True,
)
task2 = Task(
description="a tldr summary of the short biography",
expected_output="5 bullet point summary of the biography",
agent=agent2,
context=[task1],
)
my_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew = my_crew.kickoff(inputs={"input": "Mark Twain"})
Conclusion¶
Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents, you can create sophisticated AI systems that leverage the power of collaborative intelligence.
---page-end---
---link: https://docs.crewai.com/core-concepts/Cli/
CrewAI CLI Documentation¶
The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews and pipelines.
Installation¶
To use the CrewAI CLI, make sure you have CrewAI & Poetry installed:
Basic Usage¶
The basic structure of a CrewAI CLI command is:
Available Commands¶
1. create¶
Create a new crew or pipeline.
TYPE
: Choose between "crew" or "pipeline"NAME
: Name of the crew or pipeline--router
: (Optional) Create a pipeline with router functionality
Example:
2. version¶
Show the installed version of CrewAI.
--tools
: (Optional) Show the installed version of CrewAI tools
Example:
3. train¶
Train the crew for a specified number of iterations.
-n, --n_iterations INTEGER
: Number of iterations to train the crew (default: 5)-f, --filename TEXT
: Path to a custom file for training (default: "trained_agents_data.pkl")
Example:
4. replay¶
Replay the crew execution from a specific task.
-t, --task_id TEXT
: Replay the crew from this task ID, including all subsequent tasks
Example:
5. log_tasks_outputs¶
Retrieve your latest crew.kickoff() task outputs.
6. reset_memories¶
Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).
-l, --long
: Reset LONG TERM memory-s, --short
: Reset SHORT TERM memory-e, --entities
: Reset ENTITIES memory-k, --kickoff-outputs
: Reset LATEST KICKOFF TASK OUTPUTS-a, --all
: Reset ALL memories
Example:
7. test¶
Test the crew and evaluate the results.
-n, --n_iterations INTEGER
: Number of iterations to test the crew (default: 3)-m, --model TEXT
: LLM Model to run the tests on the Crew (default: "gpt-4o-mini")
Example:
8. run¶
Run the crew.
Note¶
Make sure to run these commands from the directory where your CrewAI project is set up. Some commands may require additional configuration or setup within your project structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Collaboration/
Collaboration
Collaboration Fundamentals¶
Core of Agent Interaction
Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem.
- Information Sharing: Ensures all agents are well-informed and can contribute effectively by sharing data and findings.
- Task Assistance: Allows agents to seek help from peers with the required expertise for specific tasks.
- Resource Allocation: Optimizes task execution through the efficient distribution and sharing of resources among agents.
Enhanced Attributes for Improved Collaboration¶
The Crew
class has been enriched with several attributes to support advanced functionalities:
- Language Model Management (
manager_llm
,function_calling_llm
): Manages language models for executing tasks and tools, facilitating sophisticated agent-tool interactions. Note that whilemanager_llm
is mandatory for hierarchical processes to ensure proper execution flow,function_calling_llm
is optional, with a default value provided for streamlined tool interaction. - Custom Manager Agent (
manager_agent
): Allows specifying a custom agent as the manager instead of using the default manager provided by CrewAI. - Process Flow (
process
): Defines the execution logic (e.g., sequential, hierarchical) to streamline task distribution and execution. - Verbose Logging (
verbose
): Offers detailed logging capabilities for monitoring and debugging purposes. It supports both integer and boolean types to indicate the verbosity level. For example, settingverbose
to 1 might enable basic logging, whereas setting it to True enables more detailed logs. - Rate Limiting (
max_rpm
): Ensures efficient utilization of resources by limiting requests per minute. Guidelines for settingmax_rpm
should consider the complexity of tasks and the expected load on resources. - Internationalization / Customization Support (
language
,prompt_file
): Facilitates full customization of the inner prompts, enhancing global usability. Supported languages and the process for utilizing theprompt_file
attribute for customization should be clearly documented. Example of file - Execution and Output Handling (
full_output
): Distinguishes between full and final outputs for nuanced control over task results. Examples showcasing the difference in outputs can aid in understanding the practical implications of this attribute. - Callback and Telemetry (
step_callback
,task_callback
): Integrates callbacks for step-wise and task-level execution monitoring, alongside telemetry for performance analytics. The purpose and usage oftask_callback
alongsidestep_callback
for granular monitoring should be clearly explained. - Crew Sharing (
share_crew
): Enables sharing of crew information with CrewAI for continuous improvement and training models. The privacy implications and benefits of this feature, including how it contributes to model improvement, should be outlined. - Usage Metrics (
usage_metrics
): Stores all metrics for the language model (LLM) usage during all tasks' execution, providing insights into operational efficiency and areas for improvement. Detailed information on accessing and interpreting these metrics for performance analysis should be provided. - Memory Usage (
memory
): Indicates whether the crew should use memory to store memories of its execution, enhancing task execution and agent learning. - Embedder Configuration (
embedder
): Specifies the configuration for the embedder to be used by the crew for understanding and generating language. This attribute supports customization of the language model provider. - Cache Management (
cache
): Determines whether the crew should use a cache to store the results of tool executions, optimizing performance. - Output Logging (
output_log_file
): Specifies the file path for logging the output of the crew's execution. - Planning Mode (
planning
): Allows crews to plan their actions before executing tasks by settingplanning=True
when creating theCrew
instance. This feature enhances coordination and efficiency. - Replay Feature: Introduces a new CLI for listing tasks from the last run and replaying from a specific task, enhancing task management and troubleshooting.
Delegation: Dividing to Conquer¶
Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew's overall capability.
Implementing Collaboration and Delegation¶
Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs.
Example Scenario¶
Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow.
Conclusion¶
The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation.
---page-end---
---link: https://docs.crewai.com/core-concepts/Crews/
Crews
What is a Crew?¶
A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow.
Crew Attributes¶
Attribute | Parameters | Description |
---|---|---|
Tasks | tasks |
A list of tasks assigned to the crew. |
Agents | agents |
A list of agents that are part of the crew. |
Process (optional) | process |
The process flow (e.g., sequential, hierarchical) the crew follows. Default is sequential . |
Verbose (optional) | verbose |
The verbosity level for logging during execution. Defaults to False . |
Manager LLM (optional) | manager_llm |
The language model used by the manager agent in a hierarchical process. Required when using a hierarchical process. |
Function Calling LLM (optional) | function_calling_llm |
If passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew's LLM for function calling. |
Config (optional) | config |
Optional configuration settings for the crew, in Json or Dict[str, Any] format. |
Max RPM (optional) | max_rpm |
Maximum requests per minute the crew adheres to during execution. Defaults to None . |
Language (optional) | language |
Language used for the crew, defaults to English. |
Language File (optional) | language_file |
Path to the language file to be used for the crew. |
Memory (optional) | memory |
Utilized for storing execution memories (short-term, long-term, entity memory). Defaults to False . |
Cache (optional) | cache |
Specifies whether to use a cache for storing the results of tools' execution. Defaults to True . |
Embedder (optional) | embedder |
Configuration for the embedder to be used by the crew. Mostly used by memory for now. Default is {"provider": "openai"} . |
Full Output (optional) | full_output |
Whether the crew should return the full output with all tasks outputs or just the final output. Defaults to False . |
Step Callback (optional) | step_callback |
A function that is called after each step of every agent. This can be used to log the agent's actions or to perform other operations; it won't override the agent-specific step_callback . |
Task Callback (optional) | task_callback |
A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution. |
Share Crew (optional) | share_crew |
Whether you want to share the complete crew information and execution with the crewAI team to make the library better, and allow us to train models. |
Output Log File (optional) | output_log_file |
Whether you want to have a file with the complete crew output and execution. You can set it using True and it will default to the folder you are currently in and it will be called logs.txt or passing a string with the full path and name of the file. |
Manager Agent (optional) | manager_agent |
manager sets a custom agent that will be used as a manager. |
Manager Callbacks (optional) | manager_callbacks |
manager_callbacks takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used. |
Prompt File (optional) | prompt_file |
Path to the prompt JSON file to be used for the crew. |
Planning (optional) | planning |
Adds planning ability to the Crew. When activated before each Crew iteration, all Crew data is sent to an AgentPlanner that will plan the tasks and this plan will be added to each task description. |
Planning LLM (optional) | planning_llm |
The language model used by the AgentPlanner in a planning process. |
Crew Max RPM
The max_rpm
attribute sets the maximum number of requests per minute the crew can perform to avoid rate limits and will override individual agents' max_rpm
settings if you set it.
Crew Output¶
Understanding Crew Outputs
The output of a crew in the crewAI framework is encapsulated within the CrewOutput
class.
This class provides a structured way to access results of the crew's execution, including various formats such as raw strings, JSON, and Pydantic models.
The CrewOutput
includes the results from the final task output, token usage, and individual task outputs.
Crew Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Raw | raw |
str |
The raw output of the crew. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the crew. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the crew. |
Tasks Output | tasks_output |
List[TaskOutput] |
A list of TaskOutput objects, each representing the output of a task in the crew. |
Token Usage | token_usage |
Dict[str, Any] |
A summary of token usage, providing insights into the language model's performance during execution. |
Crew Output Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the crew output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
**str** | Returns the string representation of the crew output, prioritizing Pydantic, then JSON, then raw. |
Accessing Crew Outputs¶
Once a crew has been executed, its output can be accessed through the output
attribute of the Crew
object. The CrewOutput
class provides various ways to interact with and present this output.
Example¶
# Example crew execution
crew = Crew(
agents=[research_agent, writer_agent],
tasks=[research_task, write_article_task],
verbose=True
)
crew_output = crew.kickoff()
# Accessing the crew output
print(f"Raw Output: {crew_output.raw}")
if crew_output.json_dict:
print(f"JSON Output: {json.dumps(crew_output.json_dict, indent=2)}")
if crew_output.pydantic:
print(f"Pydantic Output: {crew_output.pydantic}")
print(f"Tasks Output: {crew_output.tasks_output}")
print(f"Token Usage: {crew_output.token_usage}")
Memory Utilization¶
Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies.
Cache Utilization¶
Caches can be employed to store the results of tools' execution, making the process more efficient by reducing the need to re-execute identical tasks.
Crew Usage Metrics¶
After the crew execution, you can access the usage_metrics
attribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement.
# Access the crew's usage metrics
crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew.kickoff()
print(crew.usage_metrics)
Crew Execution Process¶
- Sequential Process: Tasks are executed one after another, allowing for a linear flow of work.
- Hierarchical Process: A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. Note: A
manager_llm
ormanager_agent
is required for this process and it's essential for validating the process flow.
Kicking Off a Crew¶
Once your crew is assembled, initiate the workflow with the kickoff()
method. This starts the execution process according to the defined process flow.
Different Ways to Kick Off a Crew¶
Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process: kickoff()
, kickoff_for_each()
, kickoff_async()
, and kickoff_for_each_async()
.
kickoff()
: Starts the execution process according to the defined process flow.kickoff_for_each()
: Executes tasks for each agent individually.kickoff_async()
: Initiates the workflow asynchronously.kickoff_for_each_async()
: Executes tasks for each agent individually in an asynchronous manner.
# Start the crew's task execution
result = my_crew.kickoff()
print(result)
# Example of using kickoff_for_each
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
results = my_crew.kickoff_for_each(inputs=inputs_array)
for result in results:
print(result)
# Example of using kickoff_async
inputs = {'topic': 'AI in healthcare'}
async_result = my_crew.kickoff_async(inputs=inputs)
print(async_result)
# Example of using kickoff_for_each_async
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
async_results = my_crew.kickoff_for_each_async(inputs=inputs_array)
for async_result in async_results:
print(async_result)
These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs.
Replaying from a Specific Task¶
You can now replay from a specific task using our CLI command replay
.
The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the command crewai replay -t <task_id>
, you can specify the task_id
for the replay process.
Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from.
Replaying from a Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
To view the latest kickoff task IDs, use:
Then, to replay from a specific task, use:
These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks.
---page-end---
---link: https://docs.crewai.com/core-concepts/Flows/
CrewAI Flows¶
Introduction¶
CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.
Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI's capabilities.
-
Simplified Workflow Creation: Easily chain together multiple Crews and tasks to create complex AI workflows.
-
State Management: Flows make it super easy to manage and share state between different tasks in your workflow.
-
Event-Driven Architecture: Built on an event-driven model, allowing for dynamic and responsive workflows.
-
Flexible Control Flow: Implement conditional logic, loops, and branching within your workflows.
Getting Started¶
Let's create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task.
import asyncio
from crewai.flow.flow import Flow, listen, start
from litellm import completion
class ExampleFlow(Flow):
model = "gpt-4o-mini"
@start()
def generate_city(self):
print("Starting flow")
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": "Return the name of a random city in the world.",
},
],
)
random_city = response["choices"][0]["message"]["content"]
print(f"Random City: {random_city}")
return random_city
@listen(generate_city)
def generate_fun_fact(self, random_city):
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": f"Tell me a fun fact about {random_city}",
},
],
)
fun_fact = response["choices"][0]["message"]["content"]
return fun_fact
async def main():
flow = ExampleFlow()
result = await flow.kickoff()
print(f"Generated fun fact: {result}")
asyncio.run(main())
In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks: generate_city
and generate_fun_fact
. The generate_city
task is the starting point of the Flow, and the generate_fun_fact
task listens for the output of the generate_city
task.
When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.
@start()¶
The @start()
decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with @start()
are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started.
@listen()¶
The @listen()
decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with @listen()
will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument.
Usage¶
The @listen()
decorator can be used in several ways:
- Listening to a Method by Name: You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.
- Listening to a Method Directly: You can pass the method itself. When that method completes, the listener method will be triggered.
Flow Output¶
Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow.
Retrieving the Final Output¶
When you run a Flow, the final output is determined by the last method that completes. The kickoff()
method returns the output of this final method.
Here's how you can access the final output:
import asyncio
from crewai.flow.flow import Flow, listen, start
class OutputExampleFlow(Flow):
@start()
def first_method(self):
return "Output from first_method"
@listen(first_method)
def second_method(self, first_output):
return f"Second method received: {first_output}"
async def main():
flow = OutputExampleFlow()
final_output = await flow.kickoff()
print("---- Final Output ----")
print(final_output)
asyncio.run(main())
In this example, the second_method
is the last method to complete, so its output will be the final output of the Flow. The kickoff()
method will return this final output, which is then printed to the console.
The output of the Flow will be:
Accessing and Updating State¶
In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.
Here's an example of how to update and access the state:
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StateExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from first_method"
self.state.counter += 1
@listen(first_method)
def second_method(self):
self.state.message += " - updated by second_method"
self.state.counter += 1
return self.state.message
async def main():
flow = StateExampleFlow()
final_output = await flow.kickoff()
print(f"Final Output: {final_output}")
print("Final State:")
print(flow.state)
asyncio.run(main())
In this example, the state is updated by both first_method
and second_method
. After the Flow has run, you can access the final state to see the updates made by these methods.
The output of the Flow will be:
Final Output: Hello from first_method - updated by second_method
Final State:
counter=2 message='Hello from first_method - updated by second_method'
By ensuring that the final method's output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems, while also maintaining and accessing the state throughout the Flow's execution.
Flow State Management¶
Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management, allowing developers to choose the approach that best fits their application's needs.
Unstructured State Management¶
In unstructured state management, all state is stored in the state
attribute of the Flow
class. This approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.
import asyncio
from crewai.flow.flow import Flow, listen, start
class UntructuredExampleFlow(Flow):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
self.state.counter = 0
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = UntructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Flexibility: You can dynamically add attributes to
self.state
without predefined constraints. - Simplicity: Ideal for straightforward workflows where state structure is minimal or varies significantly.
Structured State Management¶
Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow. By using models like Pydantic's BaseModel
, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StructuredExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = StructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Defined Schema:
ExampleState
clearly outlines the state structure, enhancing code readability and maintainability. - Type Safety: Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.
- Auto-Completion: IDEs can provide better auto-completion and error checking based on the defined state model.
Choosing Between Unstructured and Structured State Management¶
-
Use Unstructured State Management when:
-
The workflow's state is simple or highly dynamic.
- Flexibility is prioritized over strict state definitions.
-
Rapid prototyping is required without the overhead of defining schemas.
-
Use Structured State Management when:
- The workflow requires a well-defined and consistent state structure.
- Type safety and validation are important for your application's reliability.
- You want to leverage IDE features like auto-completion and type checking for better developer experience.
By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements.
Flow Control¶
Conditional Logic¶
or¶
The or_
function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, listen, or_, start
class OrExampleFlow(Flow):
@start()
def start_method(self):
return "Hello from the start method"
@listen(start_method)
def second_method(self):
return "Hello from the second method"
@listen(or_(start_method, second_method))
def logger(self, result):
print(f"Logger: {result}")
async def main():
flow = OrExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered by the output of either the start_method
or the second_method
. The or_
function is to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
The output of the Flow will be:
and¶
The and_
function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, and_, listen, start
class AndExampleFlow(Flow):
@start()
def start_method(self):
self.state["greeting"] = "Hello from the start method"
@listen(start_method)
def second_method(self):
self.state["joke"] = "What do computers eat? Microchips."
@listen(and_(start_method, second_method))
def logger(self):
print("---- Logger ----")
print(self.state)
async def main():
flow = AndExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered only when both the start_method
and the second_method
emit an output. The and_
function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
The output of the Flow will be:
---- Logger ----
{'greeting': 'Hello from the start method', 'joke': 'What do computers eat? Microchips.'}
Router¶
The @router()
decorator in Flows allows you to define conditional routing logic based on the output of a method. You can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.
import asyncio
import random
from crewai.flow.flow import Flow, listen, router, start
from pydantic import BaseModel
class ExampleState(BaseModel):
success_flag: bool = False
class RouterFlow(Flow[ExampleState]):
@start()
def start_method(self):
print("Starting the structured flow")
random_boolean = random.choice([True, False])
self.state.success_flag = random_boolean
@router(start_method)
def second_method(self):
if self.state.success_flag:
return "success"
else:
return "failed"
@listen("success")
def third_method(self):
print("Third method running")
@listen("failed")
def fourth_method(self):
print("Fourth method running")
async def main():
flow = RouterFlow()
await flow.kickoff()
asyncio.run(main())
In the above example, the start_method
generates a random boolean value and sets it in the state. The second_method
uses the @router()
decorator to define conditional routing logic based on the value of the boolean. If the boolean is True
, the method returns "success"
, and if it is False
, the method returns "failed"
. The third_method
and fourth_method
listen to the output of the second_method
and execute based on the returned value.
When you run this Flow, the output will change based on the random boolean value generated by the start_method
, but you should see an output similar to the following:
Adding Crews to Flows¶
Creating a flow with multiple crews in CrewAI is straightforward. You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:
This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew called poem_crew
that is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews.
Folder Structure¶
After running the crewai create flow name_of_flow
command, you will see a folder structure similar to the following:
name_of_flow/
├── crews/
│ └── poem_crew/
│ ├── config/
│ │ ├── agents.yaml
│ │ └── tasks.yaml
│ ├── poem_crew.py
├── tools/
│ └── custom_tool.py
├── main.py
├── README.md
├── pyproject.toml
└── .gitignore
Building Your Crews¶
In the crews
folder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, the poem_crew
folder contains:
config/agents.yaml
: Defines the agents for the crew.config/tasks.yaml
: Defines the tasks for the crew.poem_crew.py
: Contains the crew definition, including agents, tasks, and the crew itself.
You can copy, paste, and edit the poem_crew
to create other crews.
Connecting Crews in main.py
¶
The main.py
file is where you create your flow and connect the crews together. You can define your flow by using the Flow
class and the decorators @start
and @listen
to specify the flow of execution.
Here's an example of how you can connect the poem_crew
in the main.py
file:
#!/usr/bin/env python
import asyncio
from random import randint
from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start
from .crews.poem_crew.poem_crew import PoemCrew
class PoemState(BaseModel):
sentence_count: int = 1
poem: str = ""
class PoemFlow(Flow[PoemState]):
@start()
def generate_sentence_count(self):
print("Generating sentence count")
# Generate a number between 1 and 5
self.state.sentence_count = randint(1, 5)
@listen(generate_sentence_count)
def generate_poem(self):
print("Generating poem")
poem_crew = PoemCrew().crew()
result = poem_crew.kickoff(inputs={"sentence_count": self.state.sentence_count})
print("Poem generated", result.raw)
self.state.poem = result.raw
@listen(generate_poem)
def save_poem(self):
print("Saving poem")
with open("poem.txt", "w") as f:
f.write(self.state.poem)
async def run():
"""
Run the flow.
"""
poem_flow = PoemFlow()
await poem_flow.kickoff()
def main():
asyncio.run(run())
if __name__ == "__main__":
main()
In this example, the PoemFlow
class defines a flow that generates a sentence count, uses the PoemCrew
to generate a poem, and then saves the poem to a file. The flow is kicked off by calling the kickoff()
method.
Next Steps¶
If you're interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are four specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:
-
Email Auto Responder Flow: This example demonstrates an infinite loop where a background job continually runs to automate email responses. It's a great use case for tasks that need to be performed repeatedly without manual intervention. View Example
-
Lead Score Flow: This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It's an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. View Example
-
Write a Book Flow: This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. View Example
-
Meeting Assistant Flow: This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It's a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. View Example
By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.
---page-end---
---link: https://docs.crewai.com/core-concepts/LLMs/
Large Language Models (LLMs) in crewAI¶
Introduction¶
Large Language Models (LLMs) are the backbone of intelligent agents in the crewAI framework. This guide will help you understand, configure, and optimize LLM usage for your crewAI projects.
Table of Contents¶
- Key Concepts
- Configuring LLMs for Agents
- 1. Default Configuration
- 2. String Identifier
- 3. LLM Instance
- 4. Custom LLM Objects
- Connecting to OpenAI-Compatible LLMs
- LLM Configuration Options
- Using Ollama (Local LLMs)
- Changing the Base API URL
- Best Practices
- Troubleshooting
Key Concepts¶
- LLM: Large Language Model, the AI powering agent intelligence
- Agent: A crewAI entity that uses an LLM to perform tasks
- Provider: A service that offers LLM capabilities (e.g., OpenAI, Anthropic, Ollama, more providers)
Configuring LLMs for Agents¶
crewAI offers flexible options for setting up LLMs:
1. Default Configuration¶
By default, crewAI uses the gpt-4o-mini
model. It uses environment variables if no LLM is specified:
- OPENAI_MODEL_NAME
(defaults to "gpt-4o-mini" if not set)
- OPENAI_API_BASE
- OPENAI_API_KEY
2. String Identifier¶
3. LLM Instance¶
List of more providers.
4. Custom LLM Objects¶
Pass a custom LLM implementation or object from another library.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
-
Using environment variables:
-
Using LLM class attributes:
LLM Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "gpt-3.5-turbo", "ollama/llama3.1", more providers) |
timeout |
float, int | Maximum time (in seconds) to wait for a response |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
n |
int | Number of completions to generate |
stop |
str, List[str] | Sequence(s) to stop generation |
max_tokens |
int | Maximum number of tokens to generate |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
logit_bias |
Dict[int, float] | Modifies likelihood of specified tokens appearing in the completion |
response_format |
Dict[str, Any] | Specifies the format of the response (e.g., {"type": "json_object"}) |
seed |
int | Sets a random seed for deterministic results |
logprobs |
bool | Whether to return log probabilities of the output tokens |
top_logprobs |
int | Number of most likely tokens to return the log probabilities for |
base_url |
str | The base URL for the API endpoint |
api_version |
str | The version of the API to use |
api_key |
str | Your API key for authentication |
Example:
llm = LLM(
model="gpt-4",
temperature=0.8,
max_tokens=150,
top_p=0.9,
frequency_penalty=0.1,
presence_penalty=0.1,
stop=["END"],
seed=42,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(llm=llm, ...)
Using Ollama (Local LLMs)¶
crewAI supports using Ollama for running open-source models locally:
- Install Ollama: ollama.ai
- Run a model:
ollama run llama2
- Configure agent:
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Best Practices¶
- Choose the right model: Balance capability and cost.
- Optimize prompts: Clear, concise instructions improve output.
- Manage tokens: Monitor and limit token usage for efficiency.
- Use appropriate temperature: Lower for factual tasks, higher for creative ones.
- Implement error handling: Gracefully manage API errors and rate limits.
Troubleshooting¶
- API Errors: Check your API key, network connection, and rate limits.
- Unexpected Outputs: Refine your prompts and adjust temperature or top_p.
- Performance Issues: Consider using a more powerful model or optimizing your queries.
- Timeout Errors: Increase the
timeout
parameter or optimize your input.
---page-end---
---link: https://docs.crewai.com/core-concepts/Memory/
Memory
Introduction to Memory Systems in crewAI¶
Enhancing Agent Intelligence
The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents. This system comprises short-term memory, long-term memory, entity memory, and contextual memory, each serving a unique purpose in aiding agents to remember, reason, and learn from past interactions.
Memory System Components¶
Component | Description |
---|---|
Short-Term Memory | Temporarily stores recent interactions and outcomes using RAG , enabling agents to recall and utilize information relevant to their current context during the current executions. |
Long-Term Memory | Preserves valuable insights and learnings from past executions, allowing agents to build and refine their knowledge over time. |
Entity Memory | Captures and organizes information about entities (people, places, concepts) encountered during tasks, facilitating deeper understanding and relationship mapping. Uses RAG for storing entity information. |
Contextual Memory | Maintains the context of interactions by combining ShortTermMemory , LongTermMemory , and EntityMemory , aiding in the coherence and relevance of agent responses over a sequence of tasks or a conversation. |
How Memory Systems Empower Agents¶
-
Contextual Awareness: With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.
-
Experience Accumulation: Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.
-
Entity Understanding: By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.
Implementing Memory in Your Crew¶
When configuring a crew, you can enable and customize each memory component to suit the crew's objectives and the nature of tasks it will perform.
By default, the memory system is disabled, and you can ensure it is active by setting memory=True
in the crew configuration. The memory will use OpenAI embeddings by default, but you can change it by setting embedder
to a different model. It's also possible to initialize the memory instance with your own instance.
The 'embedder' only applies to Short-Term Memory which uses Chroma for RAG using the EmbedChain package. The Long-Term Memory uses SQLite3 to store task results. Currently, there is no way to override these storage implementations. The data storage files are saved into a platform-specific location found using the appdirs package, and the name of the project can be overridden using the CREWAI_STORAGE_DIR environment variable.
Example: Configuring Memory for a Crew¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True
)
Example: Use Custom Memory Instances e.g FAISS as the VectorDB¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process="Process.sequential",
memory=True,
long_term_memory=EnhanceLongTermMemory(
storage=LTMSQLiteStorage(
db_path="/my_data_dir/my_crew1/long_term_memory_storage.db"
)
),
short_term_memory=EnhanceShortTermMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="short_term",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
entity_memory=EnhanceEntityMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="entities",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
verbose=True,
)
Additional Embedding Providers¶
Using OpenAI embeddings (already default)¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "openai",
"config": {
"model": 'text-embedding-3-small'
}
}
)
Using Google AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "google",
"config": {
"model": 'models/embedding-001',
"task_type": "retrieval_document",
"title": "Embeddings for Embedchain"
}
}
)
Using Azure OpenAI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "azure_openai",
"config": {
"model": 'text-embedding-ada-002',
"deployment_name": "your_embedding_model_deployment_name"
}
}
)
Using GPT4ALL embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "gpt4all"
}
)
Using Vertex AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "vertexai",
"config": {
"model": 'textembedding-gecko'
}
}
)
Using Cohere embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "cohere",
"config": {
"model": "embed-english-v3.0",
"vector_dimension": 1024
}
}
)
Resetting Memory¶
Resetting Memory Options¶
-l, --long
- Description: Reset LONG TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-s, --short
- Description: Reset SHORT TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-e, --entities
- Description: Reset ENTITIES memory.
- Type: Flag (boolean)
-
Default: False
-
-k, --kickoff-outputs
- Description: Reset LATEST KICKOFF TASK OUTPUTS.
- Type: Flag (boolean)
-
Default: False
-
-a, --all
- Description: Reset ALL memories.
- Type: Flag (boolean)
- Default: False
Benefits of Using crewAI's Memory System¶
- Adaptive Learning: Crews become more efficient over time, adapting to new information and refining their approach to tasks.
- Enhanced Personalization: Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.
- Improved Problem Solving: Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.
Getting Started¶
Integrating crewAI's memory system into your projects is straightforward. By leveraging the provided memory components and configurations, you can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.
---page-end---
---link: https://docs.crewai.com/core-concepts/Pipeline/
Pipeline
What is a Pipeline?¶
A pipeline in crewAI represents a structured workflow that allows for the sequential or parallel execution of multiple crews. It provides a way to organize complex processes involving multiple stages, where the output of one stage can serve as input for subsequent stages.
Key Terminology¶
Understanding the following terms is crucial for working effectively with pipelines:
- Stage: A distinct part of the pipeline, which can be either sequential (a single crew) or parallel (multiple crews executing concurrently).
- Kickoff: A specific execution of the pipeline for a given set of inputs, representing a single instance of processing through the pipeline.
- Branch: Parallel executions within a stage (e.g., concurrent crew operations).
- Trace: The journey of an individual input through the entire pipeline, capturing the path and transformations it undergoes.
Example pipeline structure:
This represents a pipeline with three stages:
- A sequential stage (crew1)
- A parallel stage with two branches (crew2 and crew3 executing concurrently)
- Another sequential stage (crew4)
Each input creates its own kickoff, flowing through all stages of the pipeline. Multiple kickoffs can be processed concurrently, each following the defined pipeline structure.
Pipeline Attributes¶
Attribute | Parameters | Description |
---|---|---|
Stages | stages |
A list of PipelineStage (crews, lists of crews, or routers) representing the stages to be executed in sequence. |
Creating a Pipeline¶
When creating a pipeline, you define a series of stages, each consisting of either a single crew or a list of crews for parallel execution. The pipeline ensures that each stage is executed in order, with the output of one stage feeding into the next.
Example: Assembling a Pipeline¶
from crewai import Crew, Process, Pipeline
# Define your crews
research_crew = Crew(
agents=[researcher],
tasks=[research_task],
process=Process.sequential
)
analysis_crew = Crew(
agents=[analyst],
tasks=[analysis_task],
process=Process.sequential
)
writing_crew = Crew(
agents=[writer],
tasks=[writing_task],
process=Process.sequential
)
# Assemble the pipeline
my_pipeline = Pipeline(
stages=[research_crew, analysis_crew, writing_crew]
)
Pipeline Methods¶
Method | Description |
---|---|
kickoff | Executes the pipeline, processing all stages and returning the results. This method initiates one or more kickoffs through the pipeline, handling the flow of data between stages. |
process_runs | Runs the pipeline for each input provided, handling the flow and transformation of data between stages. |
Pipeline Output¶
Understanding Pipeline Outputs
The output of a pipeline in the crewAI framework is encapsulated within the PipelineKickoffResult
class. This class provides a structured way to access the results of the pipeline's execution, including various formats such as raw strings, JSON, and Pydantic models.
Pipeline Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the pipeline output. |
Run Results | run_results |
List[PipelineRunResult] |
A list of PipelineRunResult objects, each representing the output of a single run through the pipeline. |
Pipeline Output Methods¶
Method/Property | Description |
---|---|
add_run_result | Adds a PipelineRunResult to the list of run results. |
Pipeline Run Result Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the run result. |
Raw | raw |
str |
The raw output of the final stage in the pipeline kickoff. |
Pydantic | pydantic |
Any |
A Pydantic model object representing the structured output of the final stage, if applicable. |
JSON Dict | json_dict |
Union[Dict[str, Any], None] |
A dictionary representing the JSON output of the final stage, if applicable. |
Token Usage | token_usage |
Dict[str, UsageMetrics] |
A summary of token usage across all stages of the pipeline kickoff. |
Trace | trace |
List[Any] |
A trace of the journey of inputs through the pipeline kickoff. |
Crews Outputs | crews_outputs |
List[CrewOutput] |
A list of CrewOutput objects, representing the outputs from each crew in the pipeline kickoff. |
Pipeline Run Result Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the run result if the output format of the final task is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the run result, prioritizing Pydantic, then JSON, then raw. |
Accessing Pipeline Outputs¶
Once a pipeline has been executed, its output can be accessed through the PipelineOutput
object returned by the process_runs
method. The PipelineOutput
class provides access to individual PipelineRunResult
objects, each representing a single run through the pipeline.
Example¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}, {"initial_query": "Future of robotics"}]
# Execute the pipeline
pipeline_output = await my_pipeline.process_runs(input_data)
# Access the results
for run_result in pipeline_output.run_results:
print(f"Run ID: {run_result.id}")
print(f"Final Raw Output: {run_result.raw}")
if run_result.json_dict:
print(f"JSON Output: {json.dumps(run_result.json_dict, indent=2)}")
if run_result.pydantic:
print(f"Pydantic Output: {run_result.pydantic}")
print(f"Token Usage: {run_result.token_usage}")
print(f"Trace: {run_result.trace}")
print("Crew Outputs:")
for crew_output in run_result.crews_outputs:
print(f" Crew: {crew_output.raw}")
print("\n")
This example demonstrates how to access and work with the pipeline output, including individual run results and their associated data.
Using Pipelines¶
Pipelines are particularly useful for complex workflows that involve multiple stages of processing, analysis, or content generation. They allow you to:
- Sequence Operations: Execute crews in a specific order, ensuring that the output of one crew is available as input to the next.
- Parallel Processing: Run multiple crews concurrently within a stage for increased efficiency.
- Manage Complex Workflows: Break down large tasks into smaller, manageable steps executed by specialized crews.
Example: Running a Pipeline¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}]
# Execute the pipeline, initiating a run for each input
results = await my_pipeline.process_runs(input_data)
# Access the results
for result in results:
print(f"Final Output: {result.raw}")
print(f"Token Usage: {result.token_usage}")
print(f"Trace: {result.trace}") # Shows the path of the input through all stages
Advanced Features¶
Parallel Execution within Stages¶
You can define parallel execution within a stage by providing a list of crews, creating multiple branches:
parallel_analysis_crew = Crew(agents=[financial_analyst], tasks=[financial_analysis_task])
market_analysis_crew = Crew(agents=[market_analyst], tasks=[market_analysis_task])
my_pipeline = Pipeline(
stages=[
research_crew,
[parallel_analysis_crew, market_analysis_crew], # Parallel execution (branching)
writing_crew
]
)
Routers in Pipelines¶
Routers are a powerful feature in crewAI pipelines that allow for dynamic decision-making and branching within your workflow. They enable you to direct the flow of execution based on specific conditions or criteria, making your pipelines more flexible and adaptive.
What is a Router?¶
A router in crewAI is a special component that can be included as a stage in your pipeline. It evaluates the input data and determines which path the execution should take next. This allows for conditional branching in your pipeline, where different crews or sub-pipelines can be executed based on the router's decision.
Key Components of a Router¶
- Routes: A dictionary of named routes, each associated with a condition and a pipeline to execute if the condition is met.
- Default Route: A fallback pipeline that is executed if none of the defined route conditions are met.
Creating a Router¶
Here's an example of how to create a router:
from crewai import Router, Route, Pipeline, Crew, Agent, Task
# Define your agents
classifier = Agent(name="Classifier", role="Email Classifier")
urgent_handler = Agent(name="Urgent Handler", role="Urgent Email Processor")
normal_handler = Agent(name="Normal Handler", role="Normal Email Processor")
# Define your tasks
classify_task = Task(description="Classify the email based on its content and metadata.")
urgent_task = Task(description="Process and respond to urgent email quickly.")
normal_task = Task(description="Process and respond to normal email thoroughly.")
# Define your crews
classification_crew = Crew(agents=[classifier], tasks=[classify_task]) # classify email between high and low urgency 1-10
urgent_crew = Crew(agents=[urgent_handler], tasks=[urgent_task])
normal_crew = Crew(agents=[normal_handler], tasks=[normal_task])
# Create pipelines for different urgency levels
urgent_pipeline = Pipeline(stages=[urgent_crew])
normal_pipeline = Pipeline(stages=[normal_crew])
# Create a router
email_router = Router(
routes={
"high_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) > 7,
pipeline=urgent_pipeline
),
"low_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) <= 7,
pipeline=normal_pipeline
)
},
default=Pipeline(stages=[normal_pipeline]) # Default to just normal if no urgency score
)
# Use the router in a main pipeline
main_pipeline = Pipeline(stages=[classification_crew, email_router])
inputs = [{"email": "..."}, {"email": "..."}] # List of email data
main_pipeline.kickoff(inputs=inputs=inputs)
In this example, the router decides between an urgent pipeline and a normal pipeline based on the urgency score of the email. If the urgency score is greater than 7, it routes to the urgent pipeline; otherwise, it uses the normal pipeline. If the input doesn't include an urgency score, it defaults to just the classification crew.
Benefits of Using Routers¶
- Dynamic Workflow: Adapt your pipeline's behavior based on input characteristics or intermediate results.
- Efficiency: Route urgent tasks to quicker processes, reserving more thorough pipelines for less time-sensitive inputs.
- Flexibility: Easily modify or extend your pipeline's logic without changing the core structure.
- Scalability: Handle a wide range of email types and urgency levels with a single pipeline structure.
Error Handling and Validation¶
The Pipeline
class includes validation mechanisms to ensure the robustness of the pipeline structure:
- Validates that stages contain only Crew instances or lists of Crew instances.
- Prevents double nesting of stages to maintain a clear structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Planning/
Planning
Introduction¶
The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration, all Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.
Using the Planning Feature¶
Getting started with the planning feature is very easy, the only step required is to add planning=True
to your Crew:
from crewai import Crew, Agent, Task, Process
# Assemble your crew with planning capabilities
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
)
From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.
Planning LLM¶
Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.
from crewai import Crew, Agent, Task, Process
from langchain_openai import ChatOpenAI
# Assemble your crew with planning capabilities and custom LLM
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
planning_llm=ChatOpenAI(model="gpt-4o")
)
Example¶
When running the base case example, you will see something like the following output, which represents the output of the AgentPlanner responsible for creating the step-by-step logic to add to the Agents' tasks.
``` [2024-07-15 16:49:11][INFO]: Planning the crew execution Step-by-Step Plan for Task Execution
Task Number 1: Conduct a thorough research about AI LLMs
Agent: AI LLMs Senior Data Researcher
Agent Goal: Uncover cutting-edge developments in AI LLMs
Task Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Define Research Scope:
-
Determine the specific areas of AI LLMs to focus on, such as advancements in architecture, use cases, ethical considerations, and performance metrics.
-
Identify Reliable Sources:
-
List reputable sources for AI research, including academic journals, industry reports, conferences (e.g., NeurIPS, ACL), AI research labs (e.g., OpenAI, Google AI), and online databases (e.g., IEEE Xplore, arXiv).
-
Collect Data:
- Search for the latest papers, articles, and reports published in 2023 and early 2024.
-
Use keywords like "Large Language Models 2024", "AI LLM advancements", "AI ethics 2024", etc.
-
Analyze Findings:
- Read and summarize the key points from each source.
-
Highlight new techniques, models, and applications introduced in the past year.
-
Organize Information:
- Categorize the information into relevant topics (e.g., new architectures, ethical implications, real-world applications).
-
Ensure each bullet point is concise but informative.
-
Create the List:
- Compile the 10 most relevant pieces of information into a bullet point list.
- Review the list to ensure clarity and relevance.
Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs.
Task Number 2: Review the context you got and expand each topic into a full section for a report
Agent: AI LLMs Reporting Analyst
Agent Goal: Create detailed reports based on AI LLMs data analysis and research findings
Task Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Review the Bullet Points:
-
Carefully read through the list of 10 bullet points provided by the AI LLMs Senior Data Researcher.
-
Outline the Report:
- Create an outline with each bullet point as a main section heading.
-
Plan sub-sections under each main heading to cover different aspects of the topic.
-
Research Further Details:
- For each bullet point, conduct additional research if necessary to gather more detailed information.
-
Look for case studies, examples, and statistical data to support each section.
-
Write Detailed Sections:
- Expand each bullet point into a comprehensive section.
- Ensure each section includes an introduction, detailed explanation, examples, and a conclusion.
-
Use markdown formatting for headings, subheadings, lists, and emphasis.
-
Review and Edit:
- Proofread the report for clarity, coherence, and correctness.
- Make sure the report flows logically from one section to the next.
-
Format the report according to markdown standards.
-
Finalize the Report:
- Ensure the report is complete with all sections expanded and detailed.
- Double-check formatting and make any necessary adjustments.
Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'.
---page-end---
---link: https://docs.crewai.com/core-concepts/Processes/
Processes
Understanding Processes¶
Core Concept
In CrewAI, processes orchestrate the execution of tasks by agents, akin to project management in human teams. These processes ensure tasks are distributed and executed efficiently, in alignment with a predefined strategy.
Process Implementations¶
- Sequential: Executes tasks sequentially, ensuring tasks are completed in an orderly progression.
- Hierarchical: Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model (
manager_llm
) or a custom manager agent (manager_agent
) must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager. - Consensual Process (Planned): Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.
The Role of Processes in Teamwork¶
Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence.
Assigning Processes to a Crew¶
To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to define manager_llm
or manager_agent
for the manager agent.
from crewai import Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI
# Example: Creating a crew with a sequential process
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.sequential
)
# Example: Creating a crew with a hierarchical process
# Ensure to provide a manager_llm or manager_agent
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.hierarchical,
manager_llm=ChatOpenAI(model="gpt-4")
# or
# manager_agent=my_manager_agent
)
my_agents
and my_tasks
are defined prior to creating a Crew
object, and for the hierarchical process, either manager_llm
or manager_agent
is also required.
Sequential Process¶
This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.
To customize task context, utilize the context
parameter in the Task
class to specify outputs that should be used as context for subsequent tasks.
Hierarchical Process¶
Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm
). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion.
Process Class: Detailed Overview¶
The Process
class is implemented as an enumeration (Enum
), ensuring type safety and restricting process values to the defined types (sequential
, hierarchical
). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation.
Conclusion¶
The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents. This documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tasks/
Tasks
Overview of a Task¶
What is a Task?
In the crewAI framework, tasks are specific assignments completed by agents. They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.
Tasks within crewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew's process, enhancing teamwork and efficiency.
Task Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
A clear, concise statement of what the task entails. |
Agent | agent |
Optional[BaseAgent] |
The agent responsible for the task, assigned either directly or by the crew's process. |
Expected Output | expected_output |
str |
A detailed description of what the task's completion looks like. |
Tools (optional) | tools |
Optional[List[Any]] |
The functions or capabilities the agent can utilize to perform the task. Defaults to an empty list. |
Async Execution (optional) | async_execution |
Optional[bool] |
If set, the task executes asynchronously, allowing progression without waiting for completion. Defaults to False. |
Context (optional) | context |
Optional[List["Task"]] |
Specifies tasks whose outputs are used as context for this task. |
Config (optional) | config |
Optional[Dict[str, Any]] |
Additional configuration details for the agent executing the task, allowing further customization. Defaults to None. |
Output JSON (optional) | output_json |
Optional[Type[BaseModel]] |
Outputs a JSON object, requiring an OpenAI client. Only one output format can be set. |
Output Pydantic (optional) | output_pydantic |
Optional[Type[BaseModel]] |
Outputs a Pydantic model object, requiring an OpenAI client. Only one output format can be set. |
Output File (optional) | output_file |
Optional[str] |
Saves the task output to a file. If used with Output JSON or Output Pydantic , specifies how the output is saved. |
Output (optional) | output |
Optional[TaskOutput] |
An instance of TaskOutput , containing the raw, JSON, and Pydantic output plus additional details. |
Callback (optional) | callback |
Optional[Any] |
A callable that is executed with the task's output upon completion. |
Human Input (optional) | human_input |
Optional[bool] |
Indicates if the task should involve human review at the end, useful for tasks needing human oversight. Defaults to False. |
Converter Class (optional) | converter_cls |
Optional[Type[Converter]] |
A converter class used to export structured output. Defaults to None. |
Creating a Task¶
Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:
from crewai import Task
task = Task(
description='Find and summarize the latest and most relevant news on AI',
agent=sales_agent,
expected_output='A bullet list summary of the top 5 most important AI news',
)
Task Assignment
Directly specify an agent
for assignment or let the hierarchical
CrewAI's process decide based on roles, availability, etc.
Task Output¶
Understanding Task Outputs
The output of a task in the crewAI framework is encapsulated within the TaskOutput
class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.
By default, the TaskOutput
will only include the raw
output. A TaskOutput
will only include the pydantic
or json_dict
output if the original Task
object was configured with output_pydantic
or output_json
, respectively.
Task Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
Description of the task. |
Summary | summary |
Optional[str] |
Summary of the task, auto-generated from the first 10 words of the description. |
Raw | raw |
str |
The raw output of the task. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the task. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the task. |
Agent | agent |
str |
The agent that executed the task. |
Output Format | output_format |
OutputFormat |
The format of the task output, with options including RAW, JSON, and Pydantic. The default is RAW. |
Task Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the task output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the task output, prioritizing Pydantic, then JSON, then raw. |
Accessing Task Outputs¶
Once a task has been executed, its output can be accessed through the output
attribute of the Task
object. The TaskOutput
class provides various ways to interact with and present this output.
Example¶
# Example task
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
# Execute the crew
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
# Accessing the task output
task_output = task.output
print(f"Task Description: {task_output.description}")
print(f"Task Summary: {task_output.summary}")
print(f"Raw Output: {task_output.raw}")
if task_output.json_dict:
print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
if task_output.pydantic:
print(f"Pydantic Output: {task_output.pydantic}")
Integrating Tools with Tasks¶
Leverage tools from the crewAI Toolkit and LangChain Tools for enhanced task performance and agent interaction.
Creating a Task with Tools¶
import os
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
research_agent = Agent(
role='Researcher',
goal='Find and summarize the latest AI news',
backstory="""You're a researcher at a large company.
You're responsible for analyzing data and providing insights
to the business.""",
verbose=True
)
# to perform a semantic search for a specified query from a text's content across the internet
search_tool = SerperDevTool()
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
print(result)
This demonstrates how tasks with specific tools can override an agent's default set for tailored task execution.
Referring to Other Tasks¶
In crewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks' output, including multiple, should be used as context for another task.
This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the context
attribute of the task:
# ...
research_ai_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
research_ops_task = Task(
description='Find and summarize the latest AI Ops news',
expected_output='A bullet list summary of the top 5 most important AI Ops news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
write_blog_task = Task(
description="Write a full blog post about the importance of AI and its latest news",
expected_output='Full blog post that is 4 paragraphs long',
agent=writer_agent,
context=[research_ai_task, research_ops_task]
)
#...
Asynchronous Execution¶
You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.
You can then use the context
attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.
#...
list_ideas = Task(
description="List of 5 interesting ideas to explore for an article about AI.",
expected_output="Bullet point list of 5 ideas for an article.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
list_important_history = Task(
description="Research the history of AI and give me the 5 most important events.",
expected_output="Bullet point list of 5 important events.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
write_article = Task(
description="Write an article about AI, its history, and interesting ideas.",
expected_output="A 4 paragraph article about AI.",
agent=writer,
context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed
)
#...
Callback Mechanism¶
The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task's outcome.
# ...
def callback_function(output: TaskOutput):
# Do something after the task is completed
# Example: Send an email to the manager
print(f"""
Task completed!
Task: {output.description}
Output: {output.raw}
""")
research_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool],
callback=callback_function
)
#...
Accessing a Specific Task Output¶
Once a crew finishes running, you can access the output of a specific task by using the output
attribute of the task object:
# ...
task1 = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
#...
crew = Crew(
agents=[research_agent],
tasks=[task1, task2, task3],
verbose=True
)
result = crew.kickoff()
# Returns a TaskOutput object with the description and results of the task
print(f"""
Task completed!
Task: {task1.output.description}
Output: {task1.output.raw}
""")
Tool Override Mechanism¶
Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI's flexibility.
Error Handling and Validation Mechanisms¶
While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:
- Ensuring only one output type is set per task to maintain clear output expectations.
- Preventing the manual assignment of the
id
attribute to uphold the integrity of the unique identifier system.
These validations help in maintaining the consistency and reliability of task executions within the crewAI framework.
Creating Directories when Saving Files¶
You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.
# ...
save_output_task = Task(
description='Save the summarized AI news to a file',
expected_output='File saved successfully',
agent=research_agent,
tools=[file_save_tool],
output_file='outputs/ai_news_summary.txt',
create_directory=True
)
#...
Conclusion¶
Tasks are the driving force behind the actions of agents in crewAI. By properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit. Equipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI's potential, ensuring agents are effectively prepared for their assignments and that tasks are executed as intended.
---page-end---
---link: https://docs.crewai.com/core-concepts/Testing/
Testing
Introduction¶
Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.
Using the Testing Feature¶
We added the CLI command crewai test
to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are n_iterations
and model
, which are optional and default to 2 and gpt-4o-mini
respectively. For now, the only provider available is OpenAI.
If you want to run more iterations or use a different model, you can specify the parameters like this:
or using the short forms:
When you run the crewai test
command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.
A table of scores at the end will show the performance of the crew in terms of the following metrics:
Tasks Scores
(1-10 Higher is better)
┏━━━━━━━━━━━━━━━━━━━━┯━━━━━━━┯━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Tasks/Crew/Agents │ Run 1 │ Run 2 │ Avg. Total │ Agents │ ┃
┠────────────────────┼───────┼───────┼────────────┼────────────────────────────────┼─────────────────────────────────┨
┃ Task 1 │ 9.0 │ 9.5 │ 9.2 │ - Professional Insights │ ┃
┃ │ │ │ │ Researcher │ ┃
┃ │ │ │ │ │ ┃
┃ Task 2 │ 9.0 │ 10.0 │ 9.5 │ - Company Profile Investigator │ ┃
┃ │ │ │ │ │ ┃
┃ Task 3 │ 9.0 │ 9.0 │ 9.0 │ - Automation Insights │ ┃
┃ │ │ │ │ Specialist │ ┃
┃ │ │ │ │ │ ┃
┃ Task 4 │ 9.0 │ 9.0 │ 9.0 │ - Final Report Compiler │ ┃
┃ │ │ │ │ │ - Automation Insights ┃
┃ │ │ │ │ │ Specialist ┃
┃ Crew │ 9.00 │ 9.38 │ 9.2 │ │ ┃
┃ Execution Time (s) │ 126 │ 145 │ 135 │ │ ┃
┗━━━━━━━━━━━━━━━━━━━━┷━━━━━━━┷━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tools/
Tools
Introduction¶
CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers. This documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools.
What is a Tool?¶
Definition
A tool in CrewAI is a skill or function that agents can utilize to perform various actions. This includes tools from the crewAI Toolkit and LangChain Tools, enabling everything from simple searches to complex interactions and effective teamwork among agents.
Key Characteristics of Tools¶
- Utility: Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.
- Integration: Boosts agent capabilities by seamlessly integrating tools into their workflow.
- Customizability: Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.
- Error Handling: Incorporates robust error handling mechanisms to ensure smooth operation.
- Caching Mechanism: Features intelligent caching to optimize performance and reduce redundant operations.
Using crewAI Tools¶
To enhance your agents' capabilities with crewAI tools, begin by installing our extra tools package:
Here's an example demonstrating their use:
import os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
DirectoryReadTool,
FileReadTool,
SerperDevTool,
WebsiteSearchTool
)
# Set up API keys
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()
web_rag_tool = WebsiteSearchTool()
# Create agents
researcher = Agent(
role='Market Research Analyst',
goal='Provide up-to-date market analysis of the AI industry',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool, web_rag_tool],
verbose=True
)
writer = Agent(
role='Content Writer',
goal='Craft engaging blog posts about the AI industry',
backstory='A skilled writer with a passion for technology.',
tools=[docs_tool, file_tool],
verbose=True
)
# Define tasks
research = Task(
description='Research the latest trends in the AI industry and provide a summary.',
expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',
agent=researcher
)
write = Task(
description='Write an engaging blog post about the AI industry, based on the research analyst’s summary. Draw inspiration from the latest blog posts in the directory.',
expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
agent=writer,
output_file='blog-posts/new_post.md' # The final blog post will be saved here
)
# Assemble a crew with planning enabled
crew = Crew(
agents=[researcher, writer],
tasks=[research, write],
verbose=True,
planning=True, # Enable planning feature
)
# Execute tasks
crew.kickoff()
Available crewAI Tools¶
- Error Handling: All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.
- Caching Mechanism: All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the
cache_function
attribute on the tool.
Here is a list of the available tools and their descriptions:
Tool | Description |
---|---|
BrowserbaseLoadTool | A tool for interacting with and extracting data from web browsers. |
CodeDocsSearchTool | A RAG tool optimized for searching through code documentation and related technical documents. |
CodeInterpreterTool | A tool for interpreting python code. |
ComposioTool | Enables use of Composio tools. |
CSVSearchTool | A RAG tool designed for searching within CSV files, tailored to handle structured data. |
DALL-E Tool | A tool for generating images using the DALL-E API. |
DirectorySearchTool | A RAG tool for searching within directories, useful for navigating through file systems. |
DOCXSearchTool | A RAG tool aimed at searching within DOCX documents, ideal for processing Word files. |
DirectoryReadTool | Facilitates reading and processing of directory structures and their contents. |
EXASearchTool | A tool designed for performing exhaustive searches across various data sources. |
FileReadTool | Enables reading and extracting data from files, supporting various file formats. |
FirecrawlSearchTool | A tool to search webpages using Firecrawl and return the results. |
FirecrawlCrawlWebsiteTool | A tool for crawling webpages using Firecrawl. |
FirecrawlScrapeWebsiteTool | A tool for scraping webpages URL using Firecrawl and returning its contents. |
GithubSearchTool | A RAG tool for searching within GitHub repositories, useful for code and documentation search. |
SerperDevTool | A specialized tool for development purposes, with specific functionalities under development. |
TXTSearchTool | A RAG tool focused on searching within text (.txt) files, suitable for unstructured data. |
JSONSearchTool | A RAG tool designed for searching within JSON files, catering to structured data handling. |
LlamaIndexTool | Enables the use of LlamaIndex tools. |
MDXSearchTool | A RAG tool tailored for searching within Markdown (MDX) files, useful for documentation. |
PDFSearchTool | A RAG tool aimed at searching within PDF documents, ideal for processing scanned documents. |
PGSearchTool | A RAG tool optimized for searching within PostgreSQL databases, suitable for database queries. |
Vision Tool | A tool for generating images using the DALL-E API. |
RagTool | A general-purpose RAG tool capable of handling various data sources and types. |
ScrapeElementFromWebsiteTool | Enables scraping specific elements from websites, useful for targeted data extraction. |
ScrapeWebsiteTool | Facilitates scraping entire websites, ideal for comprehensive data collection. |
WebsiteSearchTool | A RAG tool for searching website content, optimized for web data extraction. |
XMLSearchTool | A RAG tool designed for searching within XML files, suitable for structured data formats. |
YoutubeChannelSearchTool | A RAG tool for searching within YouTube channels, useful for video content analysis. |
YoutubeVideoSearchTool | A RAG tool aimed at searching within YouTube videos, ideal for video data extraction. |
Creating your own Tools¶
Custom Tool Creation
Developers can craft custom tools tailored for their agent’s needs or utilize pre-built options:
To create your own crewAI tools you will need to install our extra tools package:
Once you do that there are two main ways for one to create a crewAI tool:
Subclassing BaseTool
¶
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "Clear description for what this tool is useful for, your agent will need this information to use it."
def _run(self, argument: str) -> str:
# Implementation goes here
return "Result from custom tool"
Utilizing the tool
Decorator¶
from crewai_tools import tool
@tool("Name of my tool")
def my_tool(question: str) -> str:
"""Clear description for what this tool is useful for, your agent will need this information to use it."""
# Function logic here
return "Result from your custom tool"
Custom Caching Mechanism¶
Caching
Tools can optionally implement a cache_function
to fine-tune caching behavior. This function determines when to cache results based on specific conditions, offering granular control over caching logic.
from crewai_tools import tool
@tool
def multiplication_tool(first_number: int, second_number: int) -> str:
"""Useful for when you need to multiply two numbers together."""
return first_number * second_number
def cache_func(args, result):
# In this case, we only cache the result if it's a multiple of 2
cache = result % 2 == 0
return cache
multiplication_tool.cache_function = cache_func
writer1 = Agent(
role="Writer",
goal="You write lessons of math for kids.",
backstory="You're an expert in writing and you love to teach kids but you know nothing of math.",
tools=[multiplication_tool],
allow_delegation=False,
)
#...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Training-Crew/
Training
Introduction¶
The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI). By running the command crewai train -n <n_iterations>
, you can specify the number of iterations for the training process.
During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback. This helps the agents improve their understanding, decision-making, and problem-solving abilities.
Training Your Crew Using the CLI¶
To use the training feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
Replace <n_iterations>
with the desired number of training iterations and <filename>
with the appropriate filename ending with .pkl
.
Training Your Crew Programmatically¶
To train your crew programmatically, use the following steps:
- Define the number of iterations for training.
- Specify the input parameters for the training process.
- Execute the training command within a try-except block to handle potential errors.
n_iterations = 2
inputs = {"topic": "CrewAI Training"}
filename = "your_model.pkl"
try:
YourCrewName_Crew().crew().train(n_iterations=n_iterations, inputs=inputs, filename=filename)
except Exception as e:
raise Exception(f"An error occurred while training the crew: {e}")
Key Points to Note:¶
- Positive Integer Requirement: Ensure that the number of iterations (
n_iterations
) is a positive integer. The code will raise aValueError
if this condition is not met. - Filename Requirement: Ensure that the filename ends with
.pkl
. The code will raise aValueError
if this condition is not met. - Error Handling: The code handles subprocess errors and unexpected exceptions, providing error messages to the user.
It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.
Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.
Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.
Happy training with CrewAI!
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LangChain-Tools/
Using LangChain Tools
Using LangChain Tools¶
LangChain Integration
CrewAI seamlessly integrates with LangChain’s comprehensive list of tools, all of which can be used with crewAI.
import os
from crewai import Agent
from langchain.agents import Tool
from langchain.utilities import GoogleSerperAPIWrapper
# Setup API keys
os.environ["SERPER_API_KEY"] = "Your Key"
search = GoogleSerperAPIWrapper()
# Create and assign the search tool to an agent
serper_tool = Tool(
name="Intermediate Answer",
func=search.run,
description="Useful for search-based queries",
)
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[serper_tool]
)
# rest of the code ...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LlamaIndex-Tools/
Using LlamaIndex Tools
Using LlamaIndex Tools¶
LlamaIndex Integration
CrewAI seamlessly integrates with LlamaIndex’s comprehensive toolkit for RAG (Retrieval-Augmented Generation) and agentic pipelines, enabling advanced search-based queries and more. Here are the available built-in tools offered by LlamaIndex.
from crewai import Agent
from crewai_tools import LlamaIndexTool
# Example 1: Initialize from FunctionTool
from llama_index.core.tools import FunctionTool
your_python_function = lambda ...: ...
og_tool = FunctionTool.from_defaults(your_python_function, name="<name>", description='<description>')
tool = LlamaIndexTool.from_tool(og_tool)
# Example 2: Initialize from LlamaHub Tools
from llama_index.tools.wolfram_alpha import WolframAlphaToolSpec
wolfram_spec = WolframAlphaToolSpec(app_id="<app_id>")
wolfram_tools = wolfram_spec.to_tool_list()
tools = [LlamaIndexTool.from_tool(t) for t in wolfram_tools]
# Example 3: Initialize Tool from a LlamaIndex Query Engine
query_engine = index.as_query_engine()
query_tool = LlamaIndexTool.from_query_engine(
query_engine,
name="Uber 2019 10K Query Tool",
description="Use this tool to lookup the 2019 Uber 10K Annual Report"
)
# Create and assign the tools to an agent
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[tool, *tools, query_tool]
)
# rest of the code ...
Steps to Get Started¶
To effectively use the LlamaIndexTool, follow these steps:
-
Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. -
Install and Use LlamaIndex: Follow the LlamaIndex documentation LlamaIndex Documentation to set up a RAG/agent pipeline.
---page-end---
---link: https://docs.crewai.com/getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/
Creating a CrewAI Pipeline Project¶
Welcome to the comprehensive guide for creating a new CrewAI pipeline project. This document will walk you through the steps to create, customize, and run your CrewAI pipeline project, ensuring you have everything you need to get started.
To learn more about CrewAI pipelines, visit the CrewAI documentation.
Prerequisites¶
Before getting started with CrewAI pipelines, make sure that you have installed CrewAI via pip:
The same prerequisites for virtual environments and Code IDEs apply as in regular CrewAI projects.
Creating a New Pipeline Project¶
To create a new CrewAI pipeline project, you have two options:
- For a basic pipeline template:
- For a pipeline example that includes a router:
These commands will create a new project folder with the following structure:
<project_name>/
├── README.md
├── poetry.lock
├── pyproject.toml
├── src/
│ └── <project_name>/
│ ├── __init__.py
│ ├── main.py
│ ├── crews/
│ │ ├── crew1/
│ │ │ ├── crew1.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ │ ├── crew2/
│ │ │ ├── crew2.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ ├── pipelines/
│ │ ├── __init__.py
│ │ ├── pipeline1.py
│ │ └── pipeline2.py
│ └── tools/
│ ├── __init__.py
│ └── custom_tool.py
└── tests/
Customizing Your Pipeline Project¶
To customize your pipeline project, you can:
- Modify the crew files in
src/<project_name>/crews/
to define your agents and tasks for each crew. - Modify the pipeline files in
src/<project_name>/pipelines/
to define your pipeline structure. - Modify
src/<project_name>/main.py
to set up and run your pipelines. - Add your environment variables into the
.env
file.
Example 1: Defining a Two-Stage Sequential Pipeline¶
Here's an example of how to define a pipeline with sequential stages in src/<project_name>/pipelines/pipeline.py
:
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
@PipelineBase
class SequentialPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
self.write_x_crew
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Example 2: Defining a Two-Stage Pipeline with Parallel Execution¶
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
from ..crews.write_linkedin_crew.write_linkedin_crew import WriteLinkedInCrew
@PipelineBase
class ParallelExecutionPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
self.write_linkedin_crew = WriteLinkedInCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
[self.write_x_crew, self.write_linkedin_crew] # Parallel execution
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Annotations¶
The main annotation you'll use for pipelines is @PipelineBase
. This annotation is used to decorate your pipeline classes, similar to how @CrewBase
is used for crews.
Installing Dependencies¶
To install the dependencies for your project, use Poetry:
Running Your Pipeline Project¶
To run your pipeline project, use the following command:
This will initialize your pipeline and begin task execution as defined in your main.py
file.
Deploying Your Pipeline Project¶
Pipelines can be deployed in the same way as regular CrewAI projects. The easiest way is through CrewAI+, where you can deploy your pipeline in a few clicks.
Remember, when working with pipelines, you're orchestrating multiple crews to work together in a sequence or parallel fashion. This allows for more complex workflows and information processing tasks.
---page-end---
---link: https://docs.crewai.com/getting-started/Installing-CrewAI/
Installing crewAI¶
Welcome to crewAI! This guide will walk you through the installation process for crewAI and its dependencies. crewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently. Let's get started!
Installation¶
To install crewAI, you need to have Python >=3.10 and <=3.13 installed on your system:
---page-end---
---link: https://docs.crewai.com/getting-started/Start-a-New-CrewAI-Project-Template-Method/
Starting Your CrewAI Project¶
Welcome to the ultimate guide for starting a new CrewAI project. This document will walk you through the steps to create, customize, and run your CrewAI project, ensuring you have everything you need to get started.
Before we start, there are a couple of things to note:
- CrewAI is a Python package and requires Python >=3.10 and <=3.13 to run.
- The preferred way of setting up CrewAI is using the
crewai create crew
command. This will create a new project folder and install a skeleton template for you to work on.
Prerequisites¶
Before getting started with CrewAI, make sure that you have installed it via pip:
Creating a New Project¶
In this example, we will be using poetry as our virtual environment manager.
To create a new CrewAI project, run the following CLI command:
This command will create a new project folder with the following structure:
my_project/
├── .gitignore
├── pyproject.toml
├── README.md
└── src/
└── my_project/
├── __init__.py
├── main.py
├── crew.py
├── tools/
│ ├── custom_tool.py
│ └── __init__.py
└── config/
├── agents.yaml
└── tasks.yaml
You can now start developing your project by editing the files in the src/my_project
folder. The main.py
file is the entry point of your project, and the crew.py
file is where you define your agents and tasks.
Customizing Your Project¶
To customize your project, you can:
- Modify src/my_project/config/agents.yaml
to define your agents.
- Modify src/my_project/config/tasks.yaml
to define your tasks.
- Modify src/my_project/crew.py
to add your own logic, tools, and specific arguments.
- Modify src/my_project/main.py
to add custom inputs for your agents and tasks.
- Add your environment variables into the .env
file.
Example: Defining Agents and Tasks¶
agents.yaml¶
researcher:
role: >
Job Candidate Researcher
goal: >
Find potential candidates for the job
backstory: >
You are adept at finding the right candidates by exploring various online
resources. Your skill in identifying suitable candidates ensures the best
match for job positions.
tasks.yaml¶
research_candidates_task:
description: >
Conduct thorough research to find potential candidates for the specified job.
Utilize various online resources and databases to gather a comprehensive list of potential candidates.
Ensure that the candidates meet the job requirements provided.
Job Requirements:
{job_requirements}
expected_output: >
A list of 10 potential candidates with their contact information and brief profiles highlighting their suitability.
agent: researcher # THIS NEEDS TO MATCH THE AGENT NAME IN THE AGENTS.YAML FILE AND THE AGENT DEFINED IN THE crew.py FILE
context: # THESE NEED TO MATCH THE TASK NAMES DEFINED ABOVE AND THE TASKS.YAML FILE AND THE TASK DEFINED IN THE crew.py FILE
- researcher
Referencing Variables:¶
Your defined functions with the same name will be used. For example, you can reference the agent for specific tasks from tasks.yaml
file. Ensure your annotated agent and function name are the same; otherwise, your task won't recognize the reference properly.
Example References¶
agents.yaml
email_summarizer:
role: >
Email Summarizer
goal: >
Summarize emails into a concise and clear summary
backstory: >
You will create a 5 bullet point summary of the report
llm: mixtal_llm
tasks.yaml
email_summarizer_task:
description: >
Summarize the email into a 5 bullet point summary
expected_output: >
A 5 bullet point summary of the email
agent: email_summarizer
context:
- reporting_task
- research_task
Use the annotations to properly reference the agent and task in the crew.py
file.
Annotations include:¶
@agent
@task
@crew
@tool
@callback
@output_json
@output_pydantic
@cache_handler
crew.py
# ...
@agent
def email_summarizer(self) -> Agent:
return Agent(
config=self.agents_config["email_summarizer"],
)
@task
def email_summarizer_task(self) -> Task:
return Task(
config=self.tasks_config["email_summarizer_task"],
)
# ...
Installing Dependencies¶
To install the dependencies for your project, you can use Poetry. First, navigate to your project directory:
This will install the dependencies specified in the pyproject.toml
file.
Interpolating Variables¶
Any variable interpolated in your agents.yaml
and tasks.yaml
files like {variable}
will be replaced by the value of the variable in the main.py
file.
tasks.yaml¶
research_task:
description: >
Conduct a thorough research about the customer and competitors in the context
of {customer_domain}.
Make sure you find any interesting and relevant information given the
current year is 2024.
expected_output: >
A complete report on the customer and their customers and competitors,
including their demographics, preferences, market positioning and audience engagement.
main.py¶
# main.py
def run():
inputs = {
"customer_domain": "crewai.com"
}
MyProjectCrew(inputs).crew().kickoff(inputs=inputs)
Running Your Project¶
To run your project, use the following command:
This will initialize your crew of AI agents and begin task execution as defined in your configuration in the main.py
file.
Replay Tasks from Latest Crew Kickoff¶
CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run:
Replace <task_id>
with the ID of the task you want to replay.
Reset Crew Memory¶
If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:
This will clear the crew's memory, allowing for a fresh start.
Deploying Your Project¶
The easiest way to deploy your crew is through CrewAI+, where you can deploy your crew in a few clicks.
---page-end---
---link: https://docs.crewai.com/how-to/AgentOps-Observability/
Intro¶
Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing, how their agents are interacting with users, and how their agents use external tools and APIs. AgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.
AgentOps¶
AgentOps provides session replays, metrics, and monitoring for agents.
At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more. For more info, check out the AgentOps Repo.
Overview¶
AgentOps provides monitoring for agents in development and production. It provides a dashboard for tracking agent performance, session replays, and custom reporting.
Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time. This feature is useful for debugging and understanding how agents interact with users as well as other agents.
Features¶
- LLM Cost Management and Tracking: Track spend with foundation model providers.
- Replay Analytics: Watch step-by-step agent execution graphs.
- Recursive Thought Detection: Identify when agents fall into infinite loops.
- Custom Reporting: Create custom analytics on agent performance.
- Analytics Dashboard: Monitor high-level statistics about agents in development and production.
- Public Model Testing: Test your agents against benchmarks and leaderboards.
- Custom Tests: Run your agents against domain-specific tests.
- Time Travel Debugging: Restart your sessions from checkpoints.
- Compliance and Security: Create audit logs and detect potential threats such as profanity and PII leaks.
- Prompt Injection Detection: Identify potential code injection and secret leaks.
Using AgentOps¶
-
Create an API Key: Create a user API key here: Create API Key
-
Configure Your Environment: Add your API key to your environment variables
- Install AgentOps: Install AgentOps with: or
Before using Crew
in your script, include these lines:
This will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems, check out the AgentOps documentation or join the Discord.
Crew + AgentOps Examples¶
Further Information¶
To get started, create an AgentOps account.
For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo.
Extra links¶
🐦 Twitter • 📢 Discord • 🖇️ AgentOps Dashboard • 📙 Documentation
---page-end---
---link: https://docs.crewai.com/how-to/Coding-Agents/
Coding Agents
Introduction¶
crewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions.
Enabling Code Execution¶
To enable code execution for an agent, set the allow_code_execution
parameter to True
when creating the agent. Here's an example:
from crewai import Agent
coding_agent = Agent(
role="Senior Python Developer",
goal="Craft well-designed and thought-out code",
backstory="You are a senior Python developer with extensive experience in software architecture and best practices.",
allow_code_execution=True
)
Note: The allow_code_execution
parameter defaults to False
.
Important Considerations¶
-
Model Selection: It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution. These models have a better understanding of programming concepts and are more likely to generate correct and efficient code.
-
Error Handling: The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or provide alternative solutions. The
max_retry_limit
parameter, which defaults to 2, controls the maximum number of retries for a task. -
Dependencies: To use the code execution feature, you need to install the
crewai_tools
package. If not installed, the agent will log an info message: "Coding tools not available. Install crewai_tools."
Code Execution Process¶
When an agent with code execution enabled encounters a task requiring programming:
- The agent analyzes the task and determines that code execution is necessary.
- It formulates the Python code needed to solve the problem.
- The code is sent to the internal code execution tool (
CodeInterpreterTool
). - The tool executes the code in a controlled environment and returns the result.
- The agent interprets the result and incorporates it into its response or uses it for further problem-solving.
Example Usage¶
Here's a detailed example of creating an agent with code execution capabilities and using it in a task:
from crewai import Agent, Task, Crew
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants.",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Execute the crew
result = analysis_crew.kickoff()
print(result)
In this example, the coding_agent
can write and execute Python code to perform data analysis tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Conditional-Tasks/
Conditional Tasks
Introduction¶
Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks. This powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes.
Example Usage¶
from typing import List
from pydantic import BaseModel
from crewai import Agent, Crew
from crewai.tasks.conditional_task import ConditionalTask
from crewai.tasks.task_output import TaskOutput
from crewai.task import Task
from crewai_tools import SerperDevTool
# Define a condition function for the conditional task
# If false, the task will be skipped, if true, then execute the task.
def is_data_missing(output: TaskOutput) -> bool:
return len(output.pydantic.events) < 10 # this will skip this task
# Define the agents
data_fetcher_agent = Agent(
role="Data Fetcher",
goal="Fetch data online using Serper tool",
backstory="Backstory 1",
verbose=True,
tools=[SerperDevTool()]
)
data_processor_agent = Agent(
role="Data Processor",
goal="Process fetched data",
backstory="Backstory 2",
verbose=True
)
summary_generator_agent = Agent(
role="Summary Generator",
goal="Generate summary from fetched data",
backstory="Backstory 3",
verbose=True
)
class EventOutput(BaseModel):
events: List[str]
task1 = Task(
description="Fetch data about events in San Francisco using Serper tool",
expected_output="List of 10 things to do in SF this week",
agent=data_fetcher_agent,
output_pydantic=EventOutput,
)
conditional_task = ConditionalTask(
description="""
Check if data is missing. If we have less than 10 events,
fetch more events using Serper tool so that
we have a total of 10 events in SF this week..
""",
expected_output="List of 10 Things to do in SF this week",
condition=is_data_missing,
agent=data_processor_agent,
)
task3 = Task(
description="Generate summary of events in San Francisco from fetched data",
expected_output="A complete report on the customer and their customers and competitors, including their demographics, preferences, market positioning and audience engagement.",
agent=summary_generator_agent,
)
# Create a crew with the tasks
crew = Crew(
agents=[data_fetcher_agent, data_processor_agent, summary_generator_agent],
tasks=[task1, conditional_task, task3],
verbose=True,
planning=True
)
# Run the crew
result = crew.kickoff()
print("results", result)
---page-end---
---link: https://docs.crewai.com/how-to/Create-Custom-Tools/
Create Custom Tools
Creating and Utilizing Tools in crewAI¶
This guide provides detailed instructions on creating custom tools for the crewAI framework and how to efficiently manage and utilize these tools, incorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools, enabling agents to perform a wide range of actions.
Prerequisites¶
Before creating your own tools, ensure you have the crewAI extra tools package installed:
Subclassing BaseTool
¶
To create a personalized tool, inherit from BaseTool
and define the necessary attributes and the _run
method.
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "What this tool does. It's vital for effective utilization."
def _run(self, argument: str) -> str:
# Your tool's logic here
return "Tool's result"
Using the tool
Decorator¶
Alternatively, you can use the tool decorator @tool
. This approach allows you to define the tool's attributes and functionality directly within a function, offering a concise and efficient way to create specialized tools tailored to your needs.
from crewai_tools import tool
@tool("Tool Name")
def my_simple_tool(question: str) -> str:
"""Tool description for clarity."""
# Tool logic here
return "Tool output"
Defining a Cache Function for the Tool¶
To optimize tool performance with caching, define custom caching strategies using the cache_function
attribute.
@tool("Tool with Caching")
def cached_tool(argument: str) -> str:
"""Tool functionality description."""
return "Cacheable result"
def my_cache_strategy(arguments: dict, result: str) -> bool:
# Define custom caching logic
return True if some_condition else False
cached_tool.cache_function = my_cache_strategy
By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes, you can leverage the full capabilities of the crewAI framework, enhancing both the development experience and the efficiency of your AI agents.
---page-end---
---link: https://docs.crewai.com/how-to/Customize-Prompts/
Initial Support to Bring Your Own Prompts in CrewAI¶
CrewAI now supports the ability to bring your own prompts, enabling extensive customization and internationalization. This feature allows users to tailor the inner workings of their agents to better suit specific needs, including support for multiple languages.
Internationalization and Customization Support¶
Custom Prompts with prompt_file
¶
The prompt_file
attribute facilitates full customization of the agent prompts, enhancing the global usability of CrewAI. Users can specify their prompt templates, ensuring that the agents communicate in a manner that aligns with specific project requirements or language preferences.
Example of a Custom Prompt File¶
The custom prompts can be defined in a JSON file, similar to the example provided here.
Supported Languages¶
CrewAI's custom prompt support includes internationalization, allowing prompts to be written in different languages. This is particularly useful for global teams or projects that require multilingual support.
How to Use the prompt_file
Attribute¶
To utilize the prompt_file
attribute, include it in your crew definition. Below is an example demonstrating how to set up agents and tasks with custom prompts.
Example¶
import os
from crewai import Agent, Task, Crew
# Define your agents
researcher = Agent(
role="Researcher",
goal="Make the best research and analysis on content about AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Write the best content about AI and AI agents.",
backstory="You're a senior writer, specialized in technology, software engineering, AI and startups. You work as a freelancer and are now working on writing content for a new customer.",
allow_delegation=False,
)
# Define your tasks
tasks = [
Task(
description="Say Hi",
expected_output="The word: Hi",
agent=researcher,
)
]
# Instantiate your crew with custom prompts
crew = Crew(
agents=[researcher],
tasks=tasks,
prompt_file="prompt.json", # Path to your custom prompt file
)
# Get your crew to work!
crew.kickoff()
Advanced Customization Features¶
language
Attribute¶
In addition to prompt_file
, the language
attribute can be used to specify the language for the agent's prompts. This ensures that the prompts are generated in the desired language, further enhancing the internationalization capabilities of CrewAI.
Creating Custom Prompt Files¶
Custom prompt files should be structured in JSON format and include all necessary prompt templates. Below is a simplified example of a prompt JSON file:
{
"system": "You are a system template.",
"prompt": "Here is your prompt template.",
"response": "Here is your response template."
}
Benefits of Custom Prompts¶
- Enhanced Flexibility: Tailor agent communication to specific project needs.
- Improved Usability: Supports multiple languages, making it suitable for global projects.
- Consistency: Ensures uniform prompt structures across different agents and tasks.
By incorporating these updates, CrewAI provides users with the ability to fully customize and internationalize their agent prompts, making the platform more versatile and user-friendly.
---page-end---
---link: https://docs.crewai.com/how-to/Customizing-Agents/
Customizing Agents
Customizable Attributes¶
Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize.
Key Attributes for Customization¶
- Role: Specifies the agent's job within the crew, such as 'Analyst' or 'Customer Service Rep'.
- Goal: Defines what the agent aims to achieve, in alignment with its role and the overarching objectives of the crew.
- Backstory: Provides depth to the agent's persona, enriching its motivations and engagements within the crew.
- Tools (Optional): Represents the capabilities or methods the agent uses to perform tasks, from simple functions to intricate integrations.
- Cache (Optional): Determines whether the agent should use a cache for tool usage.
- Max RPM: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed. - Verbose (Optional): Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- Allow Delegation (Optional):
allow_delegation
controls whether the agent is allowed to delegate tasks to other agents. This attribute is now set toFalse
by default. - Max Iter (Optional): The
max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. - Max Execution Time (Optional):
max_execution_time
Sets the maximum execution time for an agent to complete a task. - System Template (Optional):
system_template
defines the system format for the agent. - Prompt Template (Optional):
prompt_template
defines the prompt format for the agent. - Response Template (Optional):
response_template
defines the response format for the agent. - Use System Prompt (Optional):
use_system_prompt
controls whether the agent will use a system prompt for task execution. Agents can now operate without system prompts. - Respect Context Window:
respect_context_window
renames the sliding context window attribute and enables it by default to maintain context size. - Max Retry Limit:
max_retry_limit
defines the maximum number of retries for an agent to execute a task when an error occurs.
Advanced Customization Options¶
Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent's behavior and capabilities significantly.
Language Model Customization¶
Agents can be customized with specific language models (llm
) and function-calling language models (function_calling_llm
), offering advanced control over their processing and decision-making abilities. It's important to note that setting the function_calling_llm
allows for overriding the default crew function-calling language model, providing a greater degree of customization.
Performance and Debugging Settings¶
Adjusting an agent's performance and monitoring its operations are crucial for efficient task execution.
Verbose Mode and RPM Limit¶
- Verbose Mode: Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- RPM Limit: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed.
Maximum Iterations for Task Execution¶
The max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer.
Customizing Agents and Tools¶
Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent's functionality, enabling them to perform specialized tasks. The tools
attribute should be an array of tools the agent can utilize, and it's initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements.
Example: Assigning Tools to an Agent¶
import os
from crewai import Agent
from crewai_tools import SerperDevTool
# Set API keys for tool initialization
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key"
# Initialize a search tool
search_tool = SerperDevTool()
# Initialize the agent with advanced options
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool],
memory=True, # Enable memory
verbose=True,
max_rpm=None, # No limit on requests per minute
max_iter=25, # Default value for maximum iterations
)
Delegation and Autonomy¶
Controlling an agent's ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default, the allow_delegation
attribute is now set to False
, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and efficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements.
Example: Disabling Delegation for an Agent¶
agent = Agent(
role='Content Writer',
goal='Write engaging content on market trends',
backstory='A seasoned writer with expertise in market analysis.',
allow_delegation=True # Enabling delegation
)
Conclusion¶
Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences, equips a nuanced and capable AI team ready for complex challenges.
---page-end---
---link: https://docs.crewai.com/how-to/Force-Tool-Ouput-as-Result/
Forcing Tool Output as Result
Introduction¶
In CrewAI, you can force the output of a tool as the result of an agent's task. This feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution.
Forcing Tool Output as Result¶
To force the tool output as the result of an agent's task, you need to set the result_as_answer
parameter to True
when adding a tool to the agent. This parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.
Here's an example of how to force the tool output as the result of an agent's task:
# ...
from crewai.agent import Agent
from my_tool import MyCustomTool
# Create a coding agent with the custom tool
coding_agent = Agent(
role="Data Scientist",
goal="Produce amazing reports on AI",
backstory="You work with data and AI",
tools=[MyCustomTool(result_as_answer=True)],
)
# Assuming the tool's execution and result population occurs within the system
task_result = coding_agent.execute_task(task)
Workflow in Action¶
- Task Execution: The agent executes the task using the tool provided.
- Tool Output: The tool generates the output, which is captured as the task result.
- Agent Interaction: The agent may reflect and take learnings from the tool but the output is not modified.
- Result Return: The tool output is returned as the task result without any modifications.
---page-end---
---link: https://docs.crewai.com/how-to/Hierarchical/
Using Hierarchical Process
Introduction¶
The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution. This systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.
Complexity and Efficiency
The hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.
Hierarchical Process Overview¶
By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management, where a 'manager' agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either automatically created by CrewAI or explicitly set by the user.
Key Features¶
- Task Delegation: A manager agent allocates tasks among crew members based on their roles and capabilities.
- Result Validation: The manager evaluates outcomes to ensure they meet the required standards.
- Efficient Workflow: Emulates corporate structures, providing an organized approach to task management.
- System Prompt Handling: Optionally specify whether the system should use predefined prompts.
- Stop Words Control: Optionally specify whether stop words should be used, supporting various models including the o1 models.
- Context Window Respect: Prioritize important context by enabling respect of the context window, which is now the default behavior.
- Delegation Control: Delegation is now disabled by default to give users explicit control.
- Max Requests Per Minute: Configurable option to set the maximum number of requests per minute.
- Max Iterations: Limit the maximum number of iterations for obtaining a final answer.
Implementing the Hierarchical Process¶
To utilize the hierarchical process, it's essential to explicitly set the process attribute to Process.hierarchical
, as the default behavior is Process.sequential
. Define a crew with a designated manager and establish a clear chain of command.
Tools and Agent Assignment
Assign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager's guidance. Tools can also be specified at the task level for precise control over tool availability during task execution.
Manager LLM Requirement
Configuring the manager_llm
parameter is crucial for the hierarchical process. The system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.
from langchain_openai import ChatOpenAI
from crewai import Crew, Process, Agent
# Agents are defined with attributes for backstory, cache, and verbose mode
researcher = Agent(
role='Researcher',
goal='Conduct in-depth analysis',
backstory='Experienced data analyst with a knack for uncovering hidden trends.',
cache=True,
verbose=False,
# tools=[] # This can be optionally specified; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
writer = Agent(
role='Writer',
goal='Create engaging content',
backstory='Creative writer passionate about storytelling in technical domains.',
cache=True,
verbose=False,
# tools=[] # Optionally specify tools; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
# Establishing the crew with a hierarchical process and additional configurations
project_crew = Crew(
tasks=[...], # Tasks to be delegated and executed under the manager's supervision
agents=[researcher, writer],
manager_llm=ChatOpenAI(temperature=0, model="gpt-4"), # Mandatory if manager_agent is not set
process=Process.hierarchical, # Specifies the hierarchical management approach
respect_context_window=True, # Enable respect of the context window for tasks
memory=True, # Enable memory usage for enhanced task execution
manager_agent=None, # Optional: explicitly set a specific agent as manager instead of the manager_llm
planning=True, # Enable planning feature for pre-execution strategy
)
Workflow in Action¶
- Task Assignment: The manager assigns tasks strategically, considering each agent's capabilities and available tools.
- Execution and Review: Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.
- Sequential Task Progression: Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager's oversight.
Conclusion¶
Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system's capabilities, facilitates an organized and efficient approach to project management. Utilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.
---page-end---
---link: https://docs.crewai.com/how-to/Human-Input-on-Execution/
Human Input in Agent Execution¶
Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary. This feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively.
Using Human Input with CrewAI¶
To integrate human input into agent execution, set the human_input
flag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer. This input can provide extra context, clarify ambiguities, or validate the agent's output.
Example:¶
import os
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Loading Tools
search_tool = SerperDevTool()
# Define your agents with roles, goals, tools, and additional attributes
researcher = Agent(
role='Senior Research Analyst',
goal='Uncover cutting-edge developments in AI and data science',
backstory=(
"You are a Senior Research Analyst at a leading tech think tank. "
"Your expertise lies in identifying emerging trends and technologies in AI and data science. "
"You have a knack for dissecting complex data and presenting actionable insights."
),
verbose=True,
allow_delegation=False,
tools=[search_tool]
)
writer = Agent(
role='Tech Content Strategist',
goal='Craft compelling content on tech advancements',
backstory=(
"You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. "
"With a deep understanding of the tech industry, you transform complex concepts into compelling narratives."
),
verbose=True,
allow_delegation=True,
tools=[search_tool],
cache=False, # Disable cache for this agent
)
# Create tasks for your agents
task1 = Task(
description=(
"Conduct a comprehensive analysis of the latest advancements in AI in 2024. "
"Identify key trends, breakthrough technologies, and potential industry impacts. "
"Compile your findings in a detailed report. "
"Make sure to check with a human if the draft is good before finalizing your answer."
),
expected_output='A comprehensive full report on the latest AI advancements in 2024, leave nothing out',
agent=researcher,
human_input=True
)
task2 = Task(
description=(
"Using the insights from the researcher\'s report, develop an engaging blog post that highlights the most significant AI advancements. "
"Your post should be informative yet accessible, catering to a tech-savvy audience. "
"Aim for a narrative that captures the essence of these breakthroughs and their implications for the future."
),
expected_output='A compelling 3 paragraphs blog post formatted as markdown about the latest AI advancements in 2024',
agent=writer,
human_input=True
)
# Instantiate your crew with a sequential process
crew = Crew(
agents=[researcher, writer],
tasks=[task1, task2],
verbose=True,
memory=True,
planning=True # Enable planning feature for the crew
)
# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-async/
Kickoff a Crew Asynchronously
Introduction¶
CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner. This feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing.
Asynchronous Crew Execution¶
To kickoff a crew asynchronously, use the kickoff_async()
method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks.
Method Signature¶
Parameters¶
inputs
(dict): A dictionary containing the input data required for the tasks.
Returns¶
CrewOutput
: An object representing the result of the crew execution.
Potential Use Cases¶
-
Parallel Content Generation: Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.
-
Concurrent Market Research Tasks: Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.
-
Independent Travel Planning Modules: Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.
Example: Single Asynchronous Crew Execution¶
Here's an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Async function to kickoff the crew asynchronously
async def async_crew_execution():
result = await analysis_crew.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
print("Crew Result:", result)
# Run the async function
asyncio.run(async_crew_execution())
Example: Multiple Asynchronous Crew Executions¶
In this example, we'll show how to kickoff multiple crews asynchronously and wait for all of them to complete using asyncio.gather()
:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create tasks that require code execution
task_1 = Task(
description="Analyze the first dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
task_2 = Task(
description="Analyze the second dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create two crews and add tasks
crew_1 = Crew(agents=[coding_agent], tasks=[task_1])
crew_2 = Crew(agents=[coding_agent], tasks=[task_2])
# Async function to kickoff multiple crews asynchronously and wait for all to finish
async def async_multiple_crews():
result_1 = crew_1.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
result_2 = crew_2.kickoff_async(inputs={"ages": [20, 22, 24, 28, 30]})
# Wait for both crews to finish
results = await asyncio.gather(result_1, result_2)
for i, result in enumerate(results, 1):
print(f"Crew {i} Result:", result)
# Run the async function
asyncio.run(async_multiple_crews())
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-for-each/
Kickoff a Crew for a List
Introduction¶
CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list. This feature is particularly useful when you need to perform the same set of tasks for multiple items.
Kicking Off a Crew for Each Item¶
To kickoff a crew for each item in a list, use the kickoff_for_each()
method. This method executes the crew for each item in the list, allowing you to process multiple items efficiently.
Here's an example of how to kickoff a crew for each item in a list:
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent,
expected_output="The average age calculated from the dataset"
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task],
verbose=True,
memory=False,
respect_context_window=True # enable by default
)
datasets = [
{ "ages": [25, 30, 35, 40, 45] },
{ "ages": [20, 25, 30, 35, 40] },
{ "ages": [30, 35, 40, 45, 50] }
]
# Execute the crew
result = analysis_crew.kickoff_for_each(inputs=datasets)
---page-end---
---link: https://docs.crewai.com/how-to/LLM-Connections/
Connecting to any LLM
Connect CrewAI to LLMs¶
CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface.
Default LLM
By default, CrewAI uses the gpt-4o-mini
model. This is determined by the OPENAI_MODEL_NAME
environment variable, which defaults to "gpt-4o-mini" if not set. You can easily configure your agents to use a different model or provider as described in this guide.
Supported Providers¶
LiteLLM supports a wide range of providers, including but not limited to:
- OpenAI
- Anthropic
- Google (Vertex AI, Gemini)
- Azure OpenAI
- AWS (Bedrock, SageMaker)
- Cohere
- Hugging Face
- Ollama
- Mistral AI
- Replicate
- Together AI
- AI21
- Cloudflare Workers AI
- DeepInfra
- Groq
- And many more!
For a complete and up-to-date list of supported providers, please refer to the LiteLLM Providers documentation.
Changing the LLM¶
To use a different LLM with your CrewAI agents, you have several options:
1. Using a String Identifier¶
Pass the model name as a string when initializing the agent:
from crewai import Agent
# Using OpenAI's GPT-4
openai_agent = Agent(
role='OpenAI Expert',
goal='Provide insights using GPT-4',
backstory="An AI assistant powered by OpenAI's latest model.",
llm='gpt-4'
)
# Using Anthropic's Claude
claude_agent = Agent(
role='Anthropic Expert',
goal='Analyze data using Claude',
backstory="An AI assistant leveraging Anthropic's language model.",
llm='claude-2'
)
2. Using the LLM Class¶
For more detailed configuration, use the LLM class:
from crewai import Agent, LLM
llm = LLM(
model="gpt-4",
temperature=0.7,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(
role='Customized LLM Expert',
goal='Provide tailored responses',
backstory="An AI assistant with custom LLM settings.",
llm=llm
)
Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "claude-2") |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
max_tokens |
int | Maximum number of tokens to generate |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
stop |
str, List[str] | Sequence(s) to stop generation |
base_url |
str | The base URL for the API endpoint |
api_key |
str | Your API key for authentication |
For a complete list of parameters and their descriptions, refer to the LLM class documentation.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
Using Environment Variables¶
import os
os.environ["OPENAI_API_KEY"] = "your-api-key"
os.environ["OPENAI_API_BASE"] = "https://api.your-provider.com/v1"
os.environ["OPENAI_MODEL_NAME"] = "your-model-name"
Using LLM Class Attributes¶
llm = LLM(
model="custom-model-name",
api_key="your-api-key",
base_url="https://api.your-provider.com/v1"
)
agent = Agent(llm=llm, ...)
Using Local Models with Ollama¶
For local models like those provided by Ollama:
- Download and install Ollama
- Pull the desired model (e.g.,
ollama pull llama2
) - Configure your agent:
agent = Agent(
role='Local AI Expert',
goal='Process information using a local model',
backstory="An AI assistant running on local hardware.",
llm=LLM(model="ollama/llama2", base_url="http://localhost:11434")
)
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Conclusion¶
By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult the LiteLLM documentation for the most up-to-date information on supported models and configuration options.
---page-end---
---link: https://docs.crewai.com/how-to/Langtrace-Observability/
Langtrace Overview¶
Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases. While not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents. This integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.
Setup Instructions¶
- Sign up for Langtrace by visiting https://langtrace.ai/signup.
- Create a project, set the project type to crewAI & generate an API key.
- Install Langtrace in your CrewAI project using the following commands:
Using Langtrace with CrewAI¶
To integrate Langtrace with your CrewAI project, follow these steps:
- Import and initialize Langtrace at the beginning of your script, before any CrewAI imports:
from langtrace_python_sdk import langtrace
langtrace.init(api_key='<LANGTRACE_API_KEY>')
# Now import CrewAI modules
from crewai import Agent, Task, Crew
Features and Their Application to CrewAI¶
-
LLM Token and Cost Tracking
-
Monitor the token usage and associated costs for each CrewAI agent interaction.
-
Trace Graph for Execution Steps
-
Visualize the execution flow of your CrewAI tasks, including latency and logs.
-
Useful for identifying bottlenecks in your agent workflows.
-
Dataset Curation with Manual Annotation
-
Create datasets from your CrewAI task outputs for future training or evaluation.
-
Prompt Versioning and Management
-
Keep track of different versions of prompts used in your CrewAI agents.
-
Useful for A/B testing and optimizing agent performance.
-
Prompt Playground with Model Comparisons
-
Test and compare different prompts and models for your CrewAI agents before deployment.
-
Testing and Evaluations
- Set up automated tests for your CrewAI agents and tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Replay-tasks-from-latest-Crew-Kickoff/
Replay from a specific task from a kickoff
Introduction¶
CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you've finished a kickoff and may want to retry certain tasks or don't need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.
Note:¶
You must run crew.kickoff()
before you can replay a task. Currently, only the latest kickoff is supported, so if you use kickoff_for_each
, it will only allow you to replay from the most recent crew run.
Here's an example of how to replay from a task:
Replaying from Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following commands:
To view the latest kickoff task_ids use:
Once you have your task_id
to replay, use:
Note: Ensure crewai
is installed and configured correctly in your development environment.
Replaying from a Task Programmatically¶
To replay from a task programmatically, use the following steps:
- Specify the
task_id
and input parameters for the replay process. - Execute the replay command within a try-except block to handle potential errors.
def replay():
"""
Replay the crew execution from a specific task.
"""
task_id = '<task_id>'
inputs = {"topic": "CrewAI Training"} # This is optional; you can pass in the inputs you want to replay; otherwise, it uses the previous kickoff's inputs.
try:
YourCrewName_Crew().crew().replay(task_id=task_id, inputs=inputs)
except subprocess.CalledProcessError as e:
raise Exception(f"An error occurred while replaying the crew: {e}")
except Exception as e:
raise Exception(f"An unexpected error occurred: {e}")
Conclusion¶
With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust. Ensure you follow the commands and steps precisely to make the most of these features.
---page-end---
---link: https://docs.crewai.com/how-to/Sequential/
Using Sequential Process
Introduction¶
CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes. This guide outlines how to effectively implement these processes to ensure efficient task execution and project completion.
Sequential Process Overview¶
The sequential process ensures tasks are executed one after the other, following a linear progression. This approach is ideal for projects requiring tasks to be completed in a specific order.
Key Features¶
- Linear Task Flow: Ensures orderly progression by handling tasks in a predetermined sequence.
- Simplicity: Best suited for projects with clear, step-by-step tasks.
- Easy Monitoring: Facilitates easy tracking of task completion and project progress.
Implementing the Sequential Process¶
To use the sequential process, assemble your crew and define tasks in the order they need to be executed.
from crewai import Crew, Process, Agent, Task, TaskOutput, CrewOutput
# Define your agents
researcher = Agent(
role='Researcher',
goal='Conduct foundational research',
backstory='An experienced researcher with a passion for uncovering insights'
)
analyst = Agent(
role='Data Analyst',
goal='Analyze research findings',
backstory='A meticulous analyst with a knack for uncovering patterns'
)
writer = Agent(
role='Writer',
goal='Draft the final report',
backstory='A skilled writer with a talent for crafting compelling narratives'
)
# Define your tasks
research_task = Task(description='Gather relevant data...', agent=researcher, expected_output='Raw Data')
analysis_task = Task(description='Analyze the data...', agent=analyst, expected_output='Data Insights')
writing_task = Task(description='Compose the report...', agent=writer, expected_output='Final Report')
# Form the crew with a sequential process
report_crew = Crew(
agents=[researcher, analyst, writer],
tasks=[research_task, analysis_task, writing_task],
process=Process.sequential
)
# Execute the crew
result = report_crew.kickoff()
# Accessing the type-safe output
task_output: TaskOutput = result.tasks[0].output
crew_output: CrewOutput = result.output
Note:¶
Each task in a sequential process must have an agent assigned. Ensure that every Task
includes an agent
parameter.
Workflow in Action¶
- Initial Task: In a sequential process, the first agent completes their task and signals completion.
- Subsequent Tasks: Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.
- Completion: The process concludes once the final task is executed, leading to project completion.
Advanced Features¶
Task Delegation¶
In sequential processes, if an agent has allow_delegation
set to True
, they can delegate tasks to other agents in the crew. This feature is automatically set up when there are multiple agents in the crew.
Asynchronous Execution¶
Tasks can be executed asynchronously, allowing for parallel processing when appropriate. To create an asynchronous task, set async_execution=True
when defining the task.
Memory and Caching¶
CrewAI supports both memory and caching features:
- Memory: Enable by setting memory=True
when creating the Crew. This allows agents to retain information across tasks.
- Caching: By default, caching is enabled. Set cache=False
to disable it.
Callbacks¶
You can set callbacks at both the task and step level:
- task_callback
: Executed after each task completion.
- step_callback
: Executed after each step in an agent's execution.
Usage Metrics¶
CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution.
Best Practices for Sequential Processes¶
- Order Matters: Arrange tasks in a logical sequence where each task builds upon the previous one.
- Clear Task Descriptions: Provide detailed descriptions for each task to guide the agents effectively.
- Appropriate Agent Selection: Match agents' skills and roles to the requirements of each task.
- Use Context: Leverage the context from previous tasks to inform subsequent ones.
This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations. The content is kept simple and direct to ensure easy understanding.
---page-end---
---link: https://docs.crewai.com/how-to/Your-Own-Manager-Agent/
Setting a Specific Agent as Manager in CrewAI¶
CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks. This feature enables the customization of the managerial role to better fit your project's requirements.
Using the manager_agent
Attribute¶
Custom Manager Agent¶
The manager_agent
attribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard.
Example¶
import os
from crewai import Agent, Task, Crew, Process
# Define your agents
researcher = Agent(
role="Researcher",
goal="Conduct thorough research and analysis on AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently researching for a new client.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Create compelling content about AI and AI agents",
backstory="You're a senior writer, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently writing content for a new client.",
allow_delegation=False,
)
# Define your task
task = Task(
description="Generate a list of 5 interesting ideas for an article, then write one captivating paragraph for each idea that showcases the potential of a full article on this topic. Return the list of ideas with their paragraphs and your notes.",
expected_output="5 bullet points, each with a paragraph and accompanying notes.",
)
# Define the manager agent
manager = Agent(
role="Project Manager",
goal="Efficiently manage the crew and ensure high-quality task completion",
backstory="You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success. Your role is to coordinate the efforts of the crew members, ensuring that each task is completed on time and to the highest standard.",
allow_delegation=True,
)
# Instantiate your crew with a custom manager
crew = Crew(
agents=[researcher, writer],
tasks=[task],
manager_agent=manager,
process=Process.hierarchical,
)
# Start the crew's work
result = crew.kickoff()
Benefits of a Custom Manager Agent¶
- Enhanced Control: Tailor the management approach to fit the specific needs of your project.
- Improved Coordination: Ensure efficient task coordination and management by an experienced agent.
- Customizable Management: Define managerial roles and responsibilities that align with your project's goals.
Setting a Manager LLM¶
If you're using the hierarchical process and don't want to set a custom manager agent, you can specify the language model for the manager:
from langchain_openai import ChatOpenAI
manager_llm = ChatOpenAI(model_name="gpt-4")
crew = Crew(
agents=[researcher, writer],
tasks=[task],
process=Process.hierarchical,
manager_llm=manager_llm
)
Note: Either manager_agent
or manager_llm
must be set when using the hierarchical process.
---page-end---
---link: https://docs.crewai.com/telemetry/Telemetry/
Telemetry
Telemetry¶
Personal Information
By default, we collect no data that would be considered personal information under GDPR and other privacy regulations.
We do collect Tool's names and Agent's roles, so be advised not to include any personal information in the tool's names or the Agent's roles.
Because no personal information is collected, it's not necessary to worry about data residency.
When share_crew
is enabled, additional data is collected which may contain personal information if included by the user. Users should exercise caution when enabling this feature to ensure compliance with privacy regulations.
CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library. Our focus is on improving and developing the features, integrations, and tools most utilized by our users.
It's pivotal to understand that by default, NO personal data is collected concerning prompts, task descriptions, agents' backstories or goals, usage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.
When the share_crew
feature is enabled, detailed data including task descriptions, agents' backstories or goals, and other specific attributes are collected to provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks. Users should carefully consider the content of their crews and tasks before enabling share_crew
. Users can disable telemetry by setting the environment variable OTEL_SDK_DISABLED to true.
Data Explanation:¶
Defaulted | Data | Reason and Specifics |
---|---|---|
Yes | CrewAI and Python Version | Tracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal data. |
Yes | Crew Metadata | Includes: randomly generated key and ID, process type (e.g., 'sequential', 'parallel'), boolean flag for memory usage (true/false), count of tasks, count of agents. All non-personal. |
Yes | Agent Data | Includes: randomly generated key and ID, role name (should not include personal info), boolean settings (verbose, delegation enabled, code execution allowed), max iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of tool names (should not include personal info). No personal data. |
Yes | Task Metadata | Includes: randomly generated key and ID, boolean execution settings (async_execution, human_input), associated agent's role and key, list of tool names. All non-personal. |
Yes | Tool Usage Statistics | Includes: tool name (should not include personal info), number of usage attempts (integer), LLM attributes used. No personal data. |
Yes | Test Execution Data | Includes: crew's randomly generated key and ID, number of iterations, model name used, quality score (float), execution time (in seconds). All non-personal. |
Yes | Task Lifecycle Data | Includes: creation and execution start/end times, crew and task identifiers. Stored as spans with timestamps. No personal data. |
Yes | LLM Attributes | Includes: name, model_name, model, top_k, temperature, and class name of the LLM. All technical, non-personal data. |
Yes | Crew Deployment attempt using crewAI CLI | Includes: The fact a deploy is being made and crew id, and if it's trying to pull logs, no other data. |
No | Agent's Expanded Data | Includes: goal description, backstory text, i18n prompt file identifier. Users should ensure no personal info is included in text fields. |
No | Detailed Task Information | Includes: task description, expected output description, context references. Users should ensure no personal info is included in these fields. |
No | Environment Information | Includes: platform, release, system, version, and CPU count. Example: 'Windows 10', 'x86_64'. No personal data. |
No | Crew and Task Inputs and Outputs | Includes: input parameters and output results as non-identifiable data. Users should ensure no personal info is included. |
No | Comprehensive Crew Execution Data | Includes: detailed logs of crew operations, all agents and tasks data, final output. All non-personal and technical in nature. |
Note: "No" in the "Defaulted" column indicates that this data is only collected when share_crew
is set to true
.
Opt-In Further Telemetry Sharing¶
Users can choose to share their complete telemetry data by enabling the share_crew
attribute to True
in their crew configurations. Enabling share_crew
results in the collection of detailed crew and task execution data, including goal
, backstory
, context
, and output
of tasks. This enables a deeper insight into usage patterns.
Potential Personal Information
If you enable share_crew
, the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs. Users should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.
---page-end---
---link: https://docs.crewai.com/tools/BrowserbaseLoadTool/
BrowserbaseLoadTool¶
Description¶
Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.
Power your AI data retrievals with: - Serverless Infrastructure providing reliable browsers to extract data from complex UIs - Stealth Mode with included fingerprinting tactics and automatic captcha solving - Session Debugger to inspect your Browser Session with networks timeline and logs - Live Debug to quickly debug your automation
Installation¶
- Get an API key and Project ID from browserbase.com and set it in environment variables (
BROWSERBASE_API_KEY
,BROWSERBASE_PROJECT_ID
). - Install the Browserbase SDK along with
crewai[tools]
package:
Example¶
Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:
Arguments¶
api_key
Optional. Browserbase API key. Default isBROWSERBASE_API_KEY
env variable.project_id
Optional. Browserbase Project ID. Default isBROWSERBASE_PROJECT_ID
env variable.text_content
Retrieve only text content. Default isFalse
.session_id
Optional. Provide an existing Session ID.proxy
Optional. Enable/Disable Proxies."
---page-end---
---link: https://docs.crewai.com/tools/CSVSearchTool/
CSVSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file's content. It allows users to semantically search for queries in the content of a specified CSV file. This feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with "Search" in their name, including CSVSearchTool, are RAG tools designed for searching different sources of data.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import CSVSearchTool
# Initialize the tool with a specific CSV file. This setup allows the agent to only search the given CSV file.
tool = CSVSearchTool(csv='path/to/your/csvfile.csv')
# OR
# Initialize the tool without a specific CSV file. Agent will need to provide the CSV path at runtime.
tool = CSVSearchTool()
Arguments¶
csv
: The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CSVSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeDocsSearchTool/
CodeDocsSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation. It enables users to efficiently find specific information or topics within code documentation. By providing a docs_url
during initialization, the tool narrows down the search to that particular documentation site. Alternatively, without a specific docs_url
, it searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs.
Installation¶
To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:
Example¶
Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:
from crewai_tools import CodeDocsSearchTool
# To search any code documentation content if the URL is known or discovered during its execution:
tool = CodeDocsSearchTool()
# OR
# To specifically focus your search on a given documentation site by providing its URL:
tool = CodeDocsSearchTool(docs_url='https://docs.example.com/reference')
Arguments¶
docs_url
: Optional. Specifies the URL of the code documentation to be searched. Providing this during the tool's initialization focuses the search on the specified documentation content.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CodeDocsSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeInterpreterTool/
CodeInterpreterTool¶
Description¶
This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.
This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem, obtain the results, and utilize that information to inform subsequent decisions and actions.
Requirements¶
- Docker
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the code must be generated by the Agent itself. The code must be a Python3 code. And it will take some time for the first time to run because it needs to build the Docker image.
from crewai import Agent
from crewai_tools import CodeInterpreterTool
Agent(
...
tools=[CodeInterpreterTool()],
)
We also provide a simple way to use it directly from the Agent.
---page-end---
---link: https://docs.crewai.com/tools/ComposioTool/
ComposioTool Documentation¶
Description¶
This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the composio SDK.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
after the installation is complete, either run composio login
or export your composio API key as COMPOSIO_API_KEY
.
Example¶
The following example demonstrates how to initialize the tool and execute a github action:
- Initialize Composio tools
from composio import App
from crewai_tools import ComposioTool
from crewai import Agent, Task
tools = [ComposioTool.from_action(action=Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER)]
If you don't know what action you want to use, use from_app
and tags
filter to get relevant actions
or use use_case
to search relevant actions
- Define agent
crewai_agent = Agent(
role="Github Agent",
goal="You take action on Github using Github APIs",
backstory=(
"You are AI agent that is responsible for taking actions on Github "
"on users behalf. You need to take action on Github using Github APIs"
),
verbose=True,
tools=tools,
)
- Execute task
task = Task(
description="Star a repo ComposioHQ/composio on GitHub",
agent=crewai_agent,
expected_output="if the star happened",
)
task.execute()
- More detailed list of tools can be found here
---page-end---
---link: https://docs.crewai.com/tools/DALL-ETool/
DALL-E Tool¶
Description¶
This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions. This tool allows the Agent to generate images based on the text input provided by the user.
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.
If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to the DallETool
class. For example:
from crewai_tools import DallETool
dalle_tool = DallETool(model="dall-e-3",
size="1024x1024",
quality="standard",
n=1)
Agent(
...
tools=[dalle_tool]
)
The parameters are based on the client.images.generate
method from the OpenAI API. For more information on the parameters, please refer to the OpenAI API documentation.
---page-end---
---link: https://docs.crewai.com/tools/DOCXSearchTool/
DOCXSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents. It enables users to effectively search and extract relevant information from DOCX files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Install the crewai_tools package by running the following command in your terminal:
Example¶
The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file's content or with a specific DOCX file path.
from crewai_tools import DOCXSearchTool
# Initialize the tool to search within any DOCX file's content
tool = DOCXSearchTool()
# OR
# Initialize the tool with a specific DOCX file, so the agent can only search the content of the specified DOCX file
tool = DOCXSearchTool(docx='path/to/your/document.docx')
Arguments¶
docx
: An optional file path to a specific DOCX document you wish to search. If not provided during initialization, the tool allows for later specification of any DOCX file's content path for searching.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = DOCXSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/DirectoryReadTool/
Directory Read
# DirectoryReadTool
!!! note "Experimental"
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
## Description
The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents. It can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories. This tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories.
## Installation
To utilize the DirectoryReadTool in your project, install the `crewai_tools` package. If this package is not yet part of your environment, you can install it using pip with the command below:
```shell
pip install 'crewai[tools]'
This command installs the latest version of the crewai_tools
package, granting access to the DirectoryReadTool among other utilities.
Example¶
Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:
from crewai_tools import DirectoryReadTool
# Initialize the tool so the agent can read any directory's content it learns about during execution
tool = DirectoryReadTool()
# OR
# Initialize the tool with a specific directory, so the agent can only read the content of the specified directory
tool = DirectoryReadTool(directory='/path/to/your/directory')
Arguments¶
The DirectoryReadTool requires minimal configuration for use. The essential argument for this tool is as follows:
directory
: Optional. An argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing.
---page-end---
---link: https://docs.crewai.com/tools/DirectorySearchTool/
DirectorySearchTool¶
Experimental
The DirectorySearchTool is under continuous development. Features and functionalities might evolve, and unexpected behavior may occur as we refine the tool.
Description¶
The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup.
Installation¶
To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:
Initialization and Usage¶
Import the DirectorySearchTool from the crewai_tools
package to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory.
from crewai_tools import DirectorySearchTool
# For dynamic directory specification at runtime
tool = DirectorySearchTool()
# For fixed directory searches
tool = DirectorySearchTool(directory='/path/to/directory')
Arguments¶
directory
: A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.
Custom Model and Embeddings¶
The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users.
tool = DirectorySearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include ollama, google, anthropic, llama2, and more
config=dict(
model="llama2",
# Additional configurations here
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/EXASearchTool/
EXASearchTool Documentation¶
Description¶
The EXASearchTool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the exa.ai API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import EXASearchTool
# Initialize the tool for internet searching capabilities
tool = EXASearchTool()
Steps to Get Started¶
To effectively use the EXASearchTool, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a exa.ai API key by registering for a free account at exa.ai.
- Environment Configuration: Store your obtained API key in an environment variable named
EXA_API_KEY
to facilitate its use by the tool.
Conclusion¶
By integrating the EXASearchTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/FileReadTool/
FileReadTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval. This suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics. It supports a variety of text-based file formats such as .txt
, .csv
, .json
, and more. Depending on the file type, the suite offers specialized functionality, such as converting JSON content into a Python dictionary for ease of use.
Installation¶
To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:
Usage Example¶
To get started with the FileReadTool:
from crewai_tools import FileReadTool
# Initialize the tool to read any files the agents knows or lean the path for
file_read_tool = FileReadTool()
# OR
# Initialize the tool with a specific file path, so the agent can only read the content of the specified file
file_read_tool = FileReadTool(file_path='path/to/your/file.txt')
Arguments¶
file_path
: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.
---page-end---
---link: https://docs.crewai.com/tools/FileWriteTool/
FileWriterTool Documentation¶
Description¶
The FileWriterTool
is a component of the crewai_tools package, designed to simplify the process of writing content to files. It is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more. This tool supports creating new directories if they don't exist, making it easier to organize your output.
Installation¶
Install the crewai_tools package to use the FileWriterTool
in your projects:
Example¶
To get started with the FileWriterTool
:
from crewai_tools import FileWriterTool
# Initialize the tool
file_writer_tool = FileWriterTool()
# Write content to a file in a specified directory
result = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')
print(result)
Arguments¶
filename
: The name of the file you want to create or overwrite.content
: The content to write into the file.directory
(optional): The path to the directory where the file will be created. Defaults to the current directory (.
). If the directory does not exist, it will be created.
Conclusion¶
By integrating the FileWriterTool
into your crews, the agents can execute the process of writing content to files and creating directories. This tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is straightforward and efficient.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlCrawlWebsiteTool/
FirecrawlCrawlWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlCrawlWebsiteTool
tool = FirecrawlCrawlWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The base URL to start crawling from.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.crawler_options
: Optional. Options for controlling the crawling behavior.includes
: Optional. URL patterns to include in the crawl.exclude
: Optional. URL patterns to exclude from the crawl.generateImgAltText
: Optional. Generate alt text for images using LLMs (requires a paid plan).returnOnlyUrls
: Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.maxDepth
: Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.mode
: Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn't be used on heavily JavaScript-rendered websites.limit
: Optional. Maximum number of pages to crawl.timeout
: Optional. Timeout in milliseconds for the crawling operation.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlScrapeWebsiteTool/
FirecrawlScrapeWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlScrapeWebsiteTool
tool = FirecrawlScrapeWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The URL to scrape.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.extractor_options
: Optional. Options for LLM-based extraction of structured information from the page contentmode
: The extraction mode to use, currently supports 'llm-extraction'extractionPrompt
: Optional. A prompt describing what information to extract from the pageextractionSchema
: Optional. The schema for the data to be extractedtimeout
: Optional. Timeout in milliseconds for the request
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlSearchTool/
FirecrawlSearchTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.query
: The search query string to be used for searching.page_options
: Optional. Options for result formatting.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.fetchPageContent
: Optional. Fetch the full content of the page.search_options
: Optional. Options for controlling the crawling behavior.limit
: Optional. Maximum number of pages to crawl.
---page-end---
---link: https://docs.crewai.com/tools/GitHubSearchTool/
GithubSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub.
Installation¶
To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:
This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package.
Example¶
Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:
from crewai_tools import GithubSearchTool
# Initialize the tool for semantic searches within a specific GitHub repository
tool = GithubSearchTool(
github_repo='https://github.com/example/repo',
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
# OR
# Initialize the tool for semantic searches within a specific GitHub repository, so the agent can search any repository if it learns about during its execution
tool = GithubSearchTool(
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
Arguments¶
github_repo
: The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.content_types
: Specifies the types of content to include in your search. You must provide a list of content types from the following options:code
for searching within the code,repo
for searching within the repository's general information,pr
for searching within pull requests, andissue
for searching within issues. This field is mandatory and allows tailoring the search to specific content types within the GitHub repository.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = GithubSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/JSONSearchTool/
JSONSearchTool¶
Experimental Status
The JSONSearchTool is currently in an experimental phase. This means the tool is under active development, and users might encounter unexpected behavior or changes. We highly encourage feedback on any issues or suggestions for improvements.
Description¶
The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results.
Installation¶
To install the JSONSearchTool, use the following pip command:
Usage Examples¶
Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase.
from crewai.json_tools import JSONSearchTool # Updated import path
# General JSON content search
# This approach is suitable when the JSON path is either known beforehand or can be dynamically identified.
tool = JSONSearchTool()
# Restricting search to a specific JSON file
# Use this initialization method when you want to limit the search scope to a specific JSON file.
tool = JSONSearchTool(json_path='./path/to/your/file.json')
Arguments¶
json_path
(str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.
Configuration Options¶
The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements.
tool = JSONSearchTool(
config={
"llm": {
"provider": "ollama", # Other options include google, openai, anthropic, llama2, etc.
"config": {
"model": "llama2",
# Additional optional configurations can be specified here.
# temperature=0.5,
# top_p=1,
# stream=true,
},
},
"embedder": {
"provider": "google", # or openai, ollama, ...
"config": {
"model": "models/embedding-001",
"task_type": "retrieval_document",
# Further customization options can be added here.
},
},
}
)
---page-end---
---link: https://docs.crewai.com/tools/MDXSearchTool/
MDXSearchTool¶
Experimental
The MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.
Description¶
The MDX Search Tool is a component of the crewai_tools
package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Before using the MDX Search Tool, ensure the crewai_tools
package is installed. If it is not, you can install it with the following command:
Usage Example¶
To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:
from crewai_tools import MDXSearchTool
# Initialize the tool to search any MDX content it learns about during execution
tool = MDXSearchTool()
# OR
# Initialize the tool with a specific MDX file path for an exclusive search within that document
tool = MDXSearchTool(mdx='path/to/your/document.mdx')
Parameters¶
- mdx: Optional. Specifies the MDX file path for the search. It can be provided during initialization.
Customization of Model and Embeddings¶
The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:
tool = MDXSearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include google, openai, anthropic, llama2, etc.
config=dict(
model="llama2",
# Optional parameters can be included here.
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# Optional title for the embeddings can be added here.
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/MySQLTool/
MySQLSearchTool¶
Description¶
This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology, the MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases. It simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing to perform advanced queries on extensive datasets within a MySQL database.
Installation¶
To install the crewai_tools
package and utilize the MySQLSearchTool, execute the following command in your terminal:
Example¶
Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:
from crewai_tools import MySQLSearchTool
# Initialize the tool with the database URI and the target table name
tool = MySQLSearchTool(db_uri='mysql://user:password@localhost:3306/mydatabase', table_name='employees')
Arguments¶
The MySQLSearchTool requires the following arguments for its operation:
db_uri
: A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = MySQLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google",
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/NL2SQLTool/
NL2SQL Tool¶
Description¶
This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.
This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output. Along with that proivdes the ability for the Agent to update the database based on its goal.
Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database.
Requirements¶
- SqlAlchemy
- Any DB compatible library (e.g. psycopg2, mysql-connector-python)
Installation¶
Install the crewai_tools package
Usage¶
In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the format dialect+driver://username:password@host:port/database
.
from crewai_tools import NL2SQLTool
# psycopg2 was installed to run this example with PostgreSQL
nl2sql = NL2SQLTool(db_uri="postgresql://example@localhost:5432/test_db")
@agent
def researcher(self) -> Agent:
return Agent(
config=self.agents_config["researcher"],
allow_delegation=False,
tools=[nl2sql]
)
Example¶
The primary task goal was:
"Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and sort the results by the average monthly revenue in descending order"
So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.
The second task goal was:
"Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided. Include information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order."
Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.
This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.
The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database.
---page-end---
---link: https://docs.crewai.com/tools/PDFSearchTool/
PDFSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently. This capability makes it especially useful for extracting specific information from large PDF files quickly.
Installation¶
To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:
Example¶
Here's how to use the PDFSearchTool to search within a PDF document:
from crewai_tools import PDFSearchTool
# Initialize the tool allowing for any PDF content search if the path is provided during execution
tool = PDFSearchTool()
# OR
# Initialize the tool with a specific PDF path for exclusive search within that document
tool = PDFSearchTool(pdf='path/to/your/document.pdf')
Arguments¶
pdf
: Optional The PDF path for the search. Can be provided at initialization or within therun
method's arguments. If provided at initialization, the tool confines its search to the specified document.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = PDFSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/PGSearchTool/
PGSearchTool¶
Under Development
The PGSearchTool is currently under development. This document outlines the intended functionality and interface. As development progresses, please be aware that some features may not be available or could change.
Description¶
The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology, it aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases. The tool's goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on extensive datasets within a PostgreSQL environment.
Installation¶
The crewai_tools
package, which will include the PGSearchTool upon its release, can be installed using the following command:
(Note: The PGSearchTool is not yet available in the current version of the crewai_tools
package. This installation command will be updated once the tool is released.)
Example Usage¶
Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:
from crewai_tools import PGSearchTool
# Initialize the tool with the database URI and the target table name
tool = PGSearchTool(db_uri='postgresql://user:password@localhost:5432/mydatabase', table_name='employees')
Arguments¶
The PGSearchTool is designed to require the following arguments for its operation:
db_uri
: A string representing the URI of the PostgreSQL database to be queried. This argument will be mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument will also be mandatory.
Custom Model and Embeddings¶
The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:
tool = PGSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/ScrapeWebsiteTool/
ScrapeWebsiteTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content. This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import ScrapeWebsiteTool
# To enable scrapping any website it finds during it's execution
tool = ScrapeWebsiteTool()
# Initialize the tool with the website URL, so the agent can only scrap the content of the specified website
tool = ScrapeWebsiteTool(website_url='https://www.example.com')
# Extract the text from the site
text = tool.run()
print(text)
Arguments¶
website_url
: Mandatory website URL to read the file. This is the primary input for the tool, specifying which website's content should be scraped and read.
---page-end---
---link: https://docs.crewai.com/tools/SeleniumScrapingTool/
SeleniumScrapingTool¶
Experimental
This tool is currently in development. As we refine its capabilities, users may encounter unexpected behavior. Your feedback is invaluable to us for making improvements.
Description¶
The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks. It allows for precise extraction of content from web pages by using CSS selectors to target specific elements. Its design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL.
Installation¶
To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:
Usage Examples¶
Below are some scenarios where the SeleniumScrapingTool can be utilized:
from crewai_tools import SeleniumScrapingTool
# Example 1: Initialize the tool without any parameters to scrape the current page it navigates to
tool = SeleniumScrapingTool()
# Example 2: Scrape the entire webpage of a given URL
tool = SeleniumScrapingTool(website_url='https://example.com')
# Example 3: Target and scrape a specific CSS element from a webpage
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content')
# Example 4: Perform scraping with additional parameters for a customized experience
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content', cookie={'name': 'user', 'value': 'John Doe'}, wait_time=10)
Arguments¶
The following parameters can be used to customize the SeleniumScrapingTool's scraping process:
website_url
: Mandatory. Specifies the URL of the website from which content is to be scraped.css_element
: Mandatory. The CSS selector for a specific element to target on the website. This enables focused scraping of a particular part of a webpage.cookie
: Optional. A dictionary that contains cookie information. Useful for simulating a logged-in session, thereby providing access to content that might be restricted to non-logged-in users.wait_time
: Optional. Specifies the delay (in seconds) before the content is scraped. This delay allows for the website and any dynamic content to fully load, ensuring a successful scrape.
Attention
Since the SeleniumScrapingTool is under active development, the parameters and functionality may evolve over time. Users are encouraged to keep the tool updated and report any issues or suggestions for enhancements.
---page-end---
---link: https://docs.crewai.com/tools/SerperDevTool/
SerperDevTool Documentation¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the serper.dev API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import SerperDevTool
# Initialize the tool for internet searching capabilities
tool = SerperDevTool()
Steps to Get Started¶
To effectively use the SerperDevTool
, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a
serper.dev
API key by registering for a free account atserper.dev
. - Environment Configuration: Store your obtained API key in an environment variable named
SERPER_API_KEY
to facilitate its use by the tool.
Parameters¶
The SerperDevTool
comes with several parameters that will be passed to the API :
-
search_url: The URL endpoint for the search API. (Default is
https://google.serper.dev/search
) -
country: Optional. Specify the country for the search results.
- location: Optional. Specify the location for the search results.
- locale: Optional. Specify the locale for the search results.
- n_results: Number of search results to return. Default is
10
.
The values for country
, location
, locale
and search_url
can be found on the Serper Playground.
Example with Parameters¶
Here is an example demonstrating how to use the tool with additional parameters:
from crewai_tools import SerperDevTool
tool = SerperDevTool(
search_url="https://google.serper.dev/scholar",
n_results=2,
)
print(tool.run(search_query="ChatGPT"))
# Using Tool: Search the internet
# Search results: Title: Role of chat gpt in public health
# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7
# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in
# ---
# Title: Potential use of chat gpt in global warming
# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8
# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate
# ---
from crewai_tools import SerperDevTool
tool = SerperDevTool(
country="fr",
locale="fr",
location="Paris, Paris, Ile-de-France, France",
n_results=2,
)
print(tool.run(search_query="Jeux Olympiques"))
# Using Tool: Search the internet
# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats
# Link: https://olympics.com/fr/paris-2024
# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...
# ---
# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques
# Link: https://tickets.paris2024.org/
# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.
# ---
Conclusion¶
By integrating the SerperDevTool
into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. The updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/SpiderTool/
SpiderTool¶
Description¶
Spider is the fastest open source scraper and crawler that returns LLM-ready data. It converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI.
Installation¶
To use the Spider API you need to download the Spider SDK and the crewai[tools] SDK too:
Example¶
This example shows you how you can use the Spider tool to enable your agent to scrape and crawl websites. The data returned from the Spider API is already LLM-ready, so no need to do any cleaning there.
from crewai_tools import SpiderTool
def main():
spider_tool = SpiderTool()
searcher = Agent(
role="Web Research Expert",
goal="Find related information from specific URL's",
backstory="An expert web researcher that uses the web extremely well",
tools=[spider_tool],
verbose=True,
)
return_metadata = Task(
description="Scrape https://spider.cloud with a limit of 1 and enable metadata",
expected_output="Metadata and 10 word summary of spider.cloud",
agent=searcher
)
crew = Crew(
agents=[searcher],
tasks=[
return_metadata,
],
verbose=2
)
crew.kickoff()
if __name__ == "__main__":
main()
Arguments¶
api_key
(string, optional): Specifies Spider API key. If not specified, it looks forSPIDER_API_KEY
in environment variables.params
(object, optional): Optional parameters for the request. Defaults to{"return_format": "markdown"}
to return the website's content in a format that fits LLMs better.request
(string): The request type to perform. Possible values arehttp
,chrome
, andsmart
. Usesmart
to perform an HTTP request by default until JavaScript rendering is needed for the HTML.limit
(int): The maximum number of pages allowed to crawl per website. Remove the value or set it to0
to crawl all pages.depth
(int): The crawl limit for maximum depth. If0
, no limit will be applied.cache
(bool): Use HTTP caching for the crawl to speed up repeated runs. Default istrue
.budget
(object): Object that has paths with a counter for limiting the amount of pages example{"*":1}
for only crawling the root page.locale
(string): The locale to use for request, exampleen-US
.cookies
(string): Add HTTP cookies to use for request.stealth
(bool): Use stealth mode for headless chrome request to help prevent being blocked. The default istrue
on chrome.headers
(object): Forward HTTP headers to use for all request. The object is expected to be a map of key value pairs.metadata
(bool): Boolean to store metadata about the pages and content found. This could help improve AI interopt. Defaults tofalse
unless you have the website already stored with the configuration enabled.viewport
(object): Configure the viewport for chrome. Defaults to800x600
.encoding
(string): The type of encoding to use likeUTF-8
,SHIFT_JIS
, or etc.subdomains
(bool): Allow subdomains to be included. Default isfalse
.user_agent
(string): Add a custom HTTP user agent to the request. By default this is set to a random agent.store_data
(bool): Boolean to determine if storage should be used. If set this takes precedence overstorageless
. Defaults tofalse
.gpt_config
(object): Use AI to generate actions to perform during the crawl. You can pass an array for the"prompt"
to chain steps.fingerprint
(bool): Use advanced fingerprint for chrome.storageless
(bool): Boolean to prevent storing any type of data for the request including storage and AI vectors embedding. Defaults tofalse
unless you have the website already stored.readability
(bool): Use readability to pre-process the content for reading. This may drastically improve the content for LLM usage.return_format
(string): The format to return the data in. Possible values aremarkdown
,raw
,text
, andhtml2text
. Useraw
to return the default format of the page like HTML etc.proxy_enabled
(bool): Enable high performance premium proxies for the request to prevent being blocked at the network level.query_selector
(string): The CSS query selector to use when extracting content from the markup.full_resources
(bool): Crawl and download all the resources for a website.request_timeout
(int): The timeout to use for request. Timeouts can be from5-60
. The default is30
seconds.run_in_background
(bool): Run the request in the background. Useful if storing data and wanting to trigger crawls to the dashboard. This has no effect if storageless is set.
---page-end---
---link: https://docs.crewai.com/tools/TXTSearchTool/
TXTSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file. It allows for semantic searching of a query within a specified text file's content, making it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided.
Installation¶
To use the TXTSearchTool, you first need to install the crewai_tools package. This can be done using pip, a package manager for Python. Open your terminal or command prompt and enter the following command:
This command will download and install the TXTSearchTool along with any necessary dependencies.
Example¶
The following example demonstrates how to use the TXTSearchTool to search within a text file. This example shows both the initialization of the tool with a specific text file and the subsequent search within that file's content.
from crewai_tools import TXTSearchTool
# Initialize the tool to search within any text file's content the agent learns about during its execution
tool = TXTSearchTool()
# OR
# Initialize the tool with a specific text file, so the agent can search within the given text file's content
tool = TXTSearchTool(txt='path/to/text/file.txt')
Arguments¶
txt
(str): Optional. The path to the text file you want to search. This argument is only required if the tool was not initialized with a specific text file; otherwise, the search will be conducted within the initially provided text file.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = TXTSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/VisionTool/
Vision Tool¶
Description¶
This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output. The URL or the PATH of the image should be passed to the Agent.
Installation¶
Install the crewai_tools package
Usage¶
In order to use the VisionTool, the OpenAI API key should be set in the environment variable OPENAI_API_KEY
.
---page-end---
---link: https://docs.crewai.com/tools/WebsiteSearchTool/
WebsiteSearchTool¶
Experimental Status
The WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.
Description¶
The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites. It aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently. This tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest. Please note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.
Installation¶
To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:
This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.
Example Usage¶
Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:
from crewai_tools import WebsiteSearchTool
# Example of initiating tool that agents can use to search across any discovered websites
tool = WebsiteSearchTool()
# Example of limiting the search to the content of a specific website, so now agents can only search within that website
tool = WebsiteSearchTool(website='https://example.com')
Arguments¶
website
: An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool's flexibility by allowing targeted searches when necessary.
Customization Options¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = WebsiteSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/XMLSearchTool/
XMLSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files. Ideal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path. By specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes.
Installation¶
To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:
Example¶
Here are two examples demonstrating how to use the XMLSearchTool. The first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope.
from crewai_tools import XMLSearchTool
# Allow agents to search within any XML file's content as it learns about their paths during execution
tool = XMLSearchTool()
# OR
# Initialize the tool with a specific XML file path for exclusive search within that document
tool = XMLSearchTool(xml='path/to/your/xmlfile.xml')
Arguments¶
xml
: This is the path to the XML file you wish to search. It is an optional parameter during the tool's initialization but must be provided either at initialization or as part of therun
method's arguments to execute a search.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = XMLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeChannelSearchTool/
YoutubeChannelSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform semantic searches within a specific Youtube channel's content. Leveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results, making it invaluable for extracting information or finding specific content without the need to manually sift through videos. It streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.
Installation¶
To utilize the YoutubeChannelSearchTool, the crewai_tools
package must be installed. Execute the following command in your shell to install:
Example¶
To begin using the YoutubeChannelSearchTool, follow the example below. This demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel's content.
from crewai_tools import YoutubeChannelSearchTool
# Initialize the tool to search within any Youtube channel's content the agent learns about during its execution
tool = YoutubeChannelSearchTool()
# OR
# Initialize the tool with a specific Youtube channel handle to target your search
tool = YoutubeChannelSearchTool(youtube_channel_handle='@exampleChannel')
Arguments¶
youtube_channel_handle
: A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeChannelSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeVideoSearchTool/
YoutubeVideoSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is part of the crewai_tools
package and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques. It is one of several "Search" tools in the package that leverage RAG for different sources. The YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL, or they can target their search to a specific Youtube video by providing its URL.
Installation¶
To utilize the YoutubeVideoSearchTool, you must first install the crewai_tools
package. This package contains the YoutubeVideoSearchTool among other utilities designed to enhance your data analysis and processing tasks. Install the package by executing the following command in your terminal:
Example¶
To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below. This demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video's content.
from crewai_tools import YoutubeVideoSearchTool
# General search across Youtube content without specifying a video URL, so the agent can search within any Youtube video content it learns about irs url during its operation
tool = YoutubeVideoSearchTool()
# Targeted search within a specific Youtube video's content
tool = YoutubeVideoSearchTool(youtube_video_url='https://youtube.com/watch?v=example')
Arguments¶
The YoutubeVideoSearchTool accepts the following initialization arguments:
youtube_video_url
: An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeVideoSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com
crewAI Documentation¶
Cutting-edge framework for orchestrating role-playing, autonomous AI agents. By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
Getting Started
How-To Guides
- Create Custom Tools
- Using Sequential Process
- Using Hierarchical Process
- Connecting to LLMs
- Customizing Agents
- Coding Agents
- Forcing Tool Output as Result
- Human Input on Execution
- Kickoff a Crew Asynchronously
- Kickoff a Crew for a List
- Replay from a Task
- Conditional Tasks
- Agent Monitoring with AgentOps
- Agent Monitoring with LangTrace
---page-end---
---link: https://docs.crewai.com/core-concepts/Agents/
Agents
What is an Agent?¶
What is an Agent?
An agent is an autonomous unit programmed to:
- Perform tasks
- Make decisions
- Communicate with other agents
Think of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like 'Researcher', 'Writer', or 'Customer Support', each contributing to the overall goal of the crew.
Agent Attributes¶
Attribute | Parameter | Description |
---|---|---|
Role | role |
Defines the agent's function within the crew. It determines the kind of tasks the agent is best suited for. |
Goal | goal |
The individual objective that the agent aims to achieve. It guides the agent's decision-making process. |
Backstory | backstory |
Provides context to the agent's role and goal, enriching the interaction and collaboration dynamics. |
LLM (optional) | llm |
Represents the language model that will run the agent. It dynamically fetches the model name from the OPENAI_MODEL_NAME environment variable, defaulting to "gpt-4" if not specified. |
Tools (optional) | tools |
Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent's execution environment. Tools are initialized with a default value of an empty list. |
Function Calling LLM (optional) | function_calling_llm |
Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is None . |
Max Iter (optional) | max_iter |
Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is 25 . |
Max RPM (optional) | max_rpm |
Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It's optional and can be left unspecified, with a default value of None . |
Max Execution Time (optional) | max_execution_time |
Max Execution Time is the maximum execution time for an agent to execute a task. It's optional and can be left unspecified, with a default value of None , meaning no max execution time. |
Verbose (optional) | verbose |
Setting this to True configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is False . |
Allow Delegation (optional) | allow_delegation |
Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is False . |
Step Callback (optional) | step_callback |
A function that is called after each step of the agent. This can be used to log the agent's actions or to perform other operations. It will overwrite the crew step_callback . |
Cache (optional) | cache |
Indicates if the agent should use a cache for tool usage. Default is True . |
System Template (optional) | system_template |
Specifies the system format for the agent. Default is None . |
Prompt Template (optional) | prompt_template |
Specifies the prompt format for the agent. Default is None . |
Response Template (optional) | response_template |
Specifies the response format for the agent. Default is None . |
Allow Code Execution (optional) | allow_code_execution |
Enable code execution for the agent. Default is False . |
Max Retry Limit (optional) | max_retry_limit |
Maximum number of retries for an agent to execute a task when an error occurs. Default is 2 . |
Use System Prompt (optional) | use_system_prompt |
Adds the ability to not use system prompt (to support o1 models). Default is True . |
Respect Context Window (optional) | respect_context_window |
Summary strategy to avoid overflowing the context window. Default is True . |
Creating an Agent¶
Agent Interaction
Agents can interact with each other using crewAI's built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.
To create an agent, you would typically initialize an instance of the Agent
class with the desired properties. Here's a conceptual example including all attributes:
# Example: Creating an agent with all attributes
from crewai import Agent
agent = Agent(
role='Data Analyst',
goal='Extract actionable insights',
backstory="""You're a data analyst at a large company.
You're responsible for analyzing data and providing insights
to the business.
You're currently working on a project to analyze the
performance of our marketing campaigns.""",
tools=[my_tool1, my_tool2], # Optional, defaults to an empty list
llm=my_llm, # Optional
function_calling_llm=my_llm, # Optional
max_iter=15, # Optional
max_rpm=None, # Optional
max_execution_time=None, # Optional
verbose=True, # Optional
allow_delegation=False, # Optional
step_callback=my_intermediate_step_callback, # Optional
cache=True, # Optional
system_template=my_system_template, # Optional
prompt_template=my_prompt_template, # Optional
response_template=my_response_template, # Optional
config=my_config, # Optional
crew=my_crew, # Optional
tools_handler=my_tools_handler, # Optional
cache_handler=my_cache_handler, # Optional
callbacks=[callback1, callback2], # Optional
allow_code_execution=True, # Optional
max_retry_limit=2, # Optional
use_system_prompt=True, # Optional
respect_context_window=True, # Optional
)
Setting prompt templates¶
Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here's an example of how to set prompt templates:
agent = Agent(
role="{topic} specialist",
goal="Figure {goal} out",
backstory="I am the master of {role}",
system_template="""<|start_header_id|>system<|end_header_id|>
{{ .System }}<|eot_id|>""",
prompt_template="""<|start_header_id|>user<|end_header_id|>
{{ .Prompt }}<|eot_id|>""",
response_template="""<|start_header_id|>assistant<|end_header_id|>
{{ .Response }}<|eot_id|>""",
)
Bring your Third Party Agents¶
Extend your Third Party Agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the crewai's BaseAgent class.
BaseAgent includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.
CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.
from crewai import Agent, Task, Crew
from custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.
from langchain.agents import load_tools
langchain_tools = load_tools(["google-serper"], llm=llm)
agent1 = CustomAgent(
role="agent role",
goal="who is {input}?",
backstory="agent backstory",
verbose=True,
)
task1 = Task(
expected_output="a short biography of {input}",
description="a short biography of {input}",
agent=agent1,
)
agent2 = Agent(
role="agent role",
goal="summarize the short bio for {input} and if needed do more research",
backstory="agent backstory",
verbose=True,
)
task2 = Task(
description="a tldr summary of the short biography",
expected_output="5 bullet point summary of the biography",
agent=agent2,
context=[task1],
)
my_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew = my_crew.kickoff(inputs={"input": "Mark Twain"})
Conclusion¶
Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents, you can create sophisticated AI systems that leverage the power of collaborative intelligence.
---page-end---
---link: https://docs.crewai.com/core-concepts/Cli/
CrewAI CLI Documentation¶
The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews and pipelines.
Installation¶
To use the CrewAI CLI, make sure you have CrewAI & Poetry installed:
Basic Usage¶
The basic structure of a CrewAI CLI command is:
Available Commands¶
1. create¶
Create a new crew or pipeline.
TYPE
: Choose between "crew" or "pipeline"NAME
: Name of the crew or pipeline--router
: (Optional) Create a pipeline with router functionality
Example:
2. version¶
Show the installed version of CrewAI.
--tools
: (Optional) Show the installed version of CrewAI tools
Example:
3. train¶
Train the crew for a specified number of iterations.
-n, --n_iterations INTEGER
: Number of iterations to train the crew (default: 5)-f, --filename TEXT
: Path to a custom file for training (default: "trained_agents_data.pkl")
Example:
4. replay¶
Replay the crew execution from a specific task.
-t, --task_id TEXT
: Replay the crew from this task ID, including all subsequent tasks
Example:
5. log_tasks_outputs¶
Retrieve your latest crew.kickoff() task outputs.
6. reset_memories¶
Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).
-l, --long
: Reset LONG TERM memory-s, --short
: Reset SHORT TERM memory-e, --entities
: Reset ENTITIES memory-k, --kickoff-outputs
: Reset LATEST KICKOFF TASK OUTPUTS-a, --all
: Reset ALL memories
Example:
7. test¶
Test the crew and evaluate the results.
-n, --n_iterations INTEGER
: Number of iterations to test the crew (default: 3)-m, --model TEXT
: LLM Model to run the tests on the Crew (default: "gpt-4o-mini")
Example:
8. run¶
Run the crew.
Note¶
Make sure to run these commands from the directory where your CrewAI project is set up. Some commands may require additional configuration or setup within your project structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Collaboration/
Collaboration
Collaboration Fundamentals¶
Core of Agent Interaction
Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem.
- Information Sharing: Ensures all agents are well-informed and can contribute effectively by sharing data and findings.
- Task Assistance: Allows agents to seek help from peers with the required expertise for specific tasks.
- Resource Allocation: Optimizes task execution through the efficient distribution and sharing of resources among agents.
Enhanced Attributes for Improved Collaboration¶
The Crew
class has been enriched with several attributes to support advanced functionalities:
- Language Model Management (
manager_llm
,function_calling_llm
): Manages language models for executing tasks and tools, facilitating sophisticated agent-tool interactions. Note that whilemanager_llm
is mandatory for hierarchical processes to ensure proper execution flow,function_calling_llm
is optional, with a default value provided for streamlined tool interaction. - Custom Manager Agent (
manager_agent
): Allows specifying a custom agent as the manager instead of using the default manager provided by CrewAI. - Process Flow (
process
): Defines the execution logic (e.g., sequential, hierarchical) to streamline task distribution and execution. - Verbose Logging (
verbose
): Offers detailed logging capabilities for monitoring and debugging purposes. It supports both integer and boolean types to indicate the verbosity level. For example, settingverbose
to 1 might enable basic logging, whereas setting it to True enables more detailed logs. - Rate Limiting (
max_rpm
): Ensures efficient utilization of resources by limiting requests per minute. Guidelines for settingmax_rpm
should consider the complexity of tasks and the expected load on resources. - Internationalization / Customization Support (
language
,prompt_file
): Facilitates full customization of the inner prompts, enhancing global usability. Supported languages and the process for utilizing theprompt_file
attribute for customization should be clearly documented. Example of file - Execution and Output Handling (
full_output
): Distinguishes between full and final outputs for nuanced control over task results. Examples showcasing the difference in outputs can aid in understanding the practical implications of this attribute. - Callback and Telemetry (
step_callback
,task_callback
): Integrates callbacks for step-wise and task-level execution monitoring, alongside telemetry for performance analytics. The purpose and usage oftask_callback
alongsidestep_callback
for granular monitoring should be clearly explained. - Crew Sharing (
share_crew
): Enables sharing of crew information with CrewAI for continuous improvement and training models. The privacy implications and benefits of this feature, including how it contributes to model improvement, should be outlined. - Usage Metrics (
usage_metrics
): Stores all metrics for the language model (LLM) usage during all tasks' execution, providing insights into operational efficiency and areas for improvement. Detailed information on accessing and interpreting these metrics for performance analysis should be provided. - Memory Usage (
memory
): Indicates whether the crew should use memory to store memories of its execution, enhancing task execution and agent learning. - Embedder Configuration (
embedder
): Specifies the configuration for the embedder to be used by the crew for understanding and generating language. This attribute supports customization of the language model provider. - Cache Management (
cache
): Determines whether the crew should use a cache to store the results of tool executions, optimizing performance. - Output Logging (
output_log_file
): Specifies the file path for logging the output of the crew's execution. - Planning Mode (
planning
): Allows crews to plan their actions before executing tasks by settingplanning=True
when creating theCrew
instance. This feature enhances coordination and efficiency. - Replay Feature: Introduces a new CLI for listing tasks from the last run and replaying from a specific task, enhancing task management and troubleshooting.
Delegation: Dividing to Conquer¶
Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew's overall capability.
Implementing Collaboration and Delegation¶
Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs.
Example Scenario¶
Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow.
Conclusion¶
The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation.
---page-end---
---link: https://docs.crewai.com/core-concepts/Crews/
Crews
What is a Crew?¶
A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow.
Crew Attributes¶
Attribute | Parameters | Description |
---|---|---|
Tasks | tasks |
A list of tasks assigned to the crew. |
Agents | agents |
A list of agents that are part of the crew. |
Process (optional) | process |
The process flow (e.g., sequential, hierarchical) the crew follows. Default is sequential . |
Verbose (optional) | verbose |
The verbosity level for logging during execution. Defaults to False . |
Manager LLM (optional) | manager_llm |
The language model used by the manager agent in a hierarchical process. Required when using a hierarchical process. |
Function Calling LLM (optional) | function_calling_llm |
If passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew's LLM for function calling. |
Config (optional) | config |
Optional configuration settings for the crew, in Json or Dict[str, Any] format. |
Max RPM (optional) | max_rpm |
Maximum requests per minute the crew adheres to during execution. Defaults to None . |
Language (optional) | language |
Language used for the crew, defaults to English. |
Language File (optional) | language_file |
Path to the language file to be used for the crew. |
Memory (optional) | memory |
Utilized for storing execution memories (short-term, long-term, entity memory). Defaults to False . |
Cache (optional) | cache |
Specifies whether to use a cache for storing the results of tools' execution. Defaults to True . |
Embedder (optional) | embedder |
Configuration for the embedder to be used by the crew. Mostly used by memory for now. Default is {"provider": "openai"} . |
Full Output (optional) | full_output |
Whether the crew should return the full output with all tasks outputs or just the final output. Defaults to False . |
Step Callback (optional) | step_callback |
A function that is called after each step of every agent. This can be used to log the agent's actions or to perform other operations; it won't override the agent-specific step_callback . |
Task Callback (optional) | task_callback |
A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution. |
Share Crew (optional) | share_crew |
Whether you want to share the complete crew information and execution with the crewAI team to make the library better, and allow us to train models. |
Output Log File (optional) | output_log_file |
Whether you want to have a file with the complete crew output and execution. You can set it using True and it will default to the folder you are currently in and it will be called logs.txt or passing a string with the full path and name of the file. |
Manager Agent (optional) | manager_agent |
manager sets a custom agent that will be used as a manager. |
Manager Callbacks (optional) | manager_callbacks |
manager_callbacks takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used. |
Prompt File (optional) | prompt_file |
Path to the prompt JSON file to be used for the crew. |
Planning (optional) | planning |
Adds planning ability to the Crew. When activated before each Crew iteration, all Crew data is sent to an AgentPlanner that will plan the tasks and this plan will be added to each task description. |
Planning LLM (optional) | planning_llm |
The language model used by the AgentPlanner in a planning process. |
Crew Max RPM
The max_rpm
attribute sets the maximum number of requests per minute the crew can perform to avoid rate limits and will override individual agents' max_rpm
settings if you set it.
Crew Output¶
Understanding Crew Outputs
The output of a crew in the crewAI framework is encapsulated within the CrewOutput
class.
This class provides a structured way to access results of the crew's execution, including various formats such as raw strings, JSON, and Pydantic models.
The CrewOutput
includes the results from the final task output, token usage, and individual task outputs.
Crew Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Raw | raw |
str |
The raw output of the crew. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the crew. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the crew. |
Tasks Output | tasks_output |
List[TaskOutput] |
A list of TaskOutput objects, each representing the output of a task in the crew. |
Token Usage | token_usage |
Dict[str, Any] |
A summary of token usage, providing insights into the language model's performance during execution. |
Crew Output Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the crew output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
**str** | Returns the string representation of the crew output, prioritizing Pydantic, then JSON, then raw. |
Accessing Crew Outputs¶
Once a crew has been executed, its output can be accessed through the output
attribute of the Crew
object. The CrewOutput
class provides various ways to interact with and present this output.
Example¶
# Example crew execution
crew = Crew(
agents=[research_agent, writer_agent],
tasks=[research_task, write_article_task],
verbose=True
)
crew_output = crew.kickoff()
# Accessing the crew output
print(f"Raw Output: {crew_output.raw}")
if crew_output.json_dict:
print(f"JSON Output: {json.dumps(crew_output.json_dict, indent=2)}")
if crew_output.pydantic:
print(f"Pydantic Output: {crew_output.pydantic}")
print(f"Tasks Output: {crew_output.tasks_output}")
print(f"Token Usage: {crew_output.token_usage}")
Memory Utilization¶
Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies.
Cache Utilization¶
Caches can be employed to store the results of tools' execution, making the process more efficient by reducing the need to re-execute identical tasks.
Crew Usage Metrics¶
After the crew execution, you can access the usage_metrics
attribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement.
# Access the crew's usage metrics
crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew.kickoff()
print(crew.usage_metrics)
Crew Execution Process¶
- Sequential Process: Tasks are executed one after another, allowing for a linear flow of work.
- Hierarchical Process: A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. Note: A
manager_llm
ormanager_agent
is required for this process and it's essential for validating the process flow.
Kicking Off a Crew¶
Once your crew is assembled, initiate the workflow with the kickoff()
method. This starts the execution process according to the defined process flow.
Different Ways to Kick Off a Crew¶
Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process: kickoff()
, kickoff_for_each()
, kickoff_async()
, and kickoff_for_each_async()
.
kickoff()
: Starts the execution process according to the defined process flow.kickoff_for_each()
: Executes tasks for each agent individually.kickoff_async()
: Initiates the workflow asynchronously.kickoff_for_each_async()
: Executes tasks for each agent individually in an asynchronous manner.
# Start the crew's task execution
result = my_crew.kickoff()
print(result)
# Example of using kickoff_for_each
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
results = my_crew.kickoff_for_each(inputs=inputs_array)
for result in results:
print(result)
# Example of using kickoff_async
inputs = {'topic': 'AI in healthcare'}
async_result = my_crew.kickoff_async(inputs=inputs)
print(async_result)
# Example of using kickoff_for_each_async
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
async_results = my_crew.kickoff_for_each_async(inputs=inputs_array)
for async_result in async_results:
print(async_result)
These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs.
Replaying from a Specific Task¶
You can now replay from a specific task using our CLI command replay
.
The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the command crewai replay -t <task_id>
, you can specify the task_id
for the replay process.
Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from.
Replaying from a Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
To view the latest kickoff task IDs, use:
Then, to replay from a specific task, use:
These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks.
---page-end---
---link: https://docs.crewai.com/core-concepts/Flows/
CrewAI Flows¶
Introduction¶
CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.
Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI's capabilities.
-
Simplified Workflow Creation: Easily chain together multiple Crews and tasks to create complex AI workflows.
-
State Management: Flows make it super easy to manage and share state between different tasks in your workflow.
-
Event-Driven Architecture: Built on an event-driven model, allowing for dynamic and responsive workflows.
-
Flexible Control Flow: Implement conditional logic, loops, and branching within your workflows.
Getting Started¶
Let's create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task.
import asyncio
from crewai.flow.flow import Flow, listen, start
from litellm import completion
class ExampleFlow(Flow):
model = "gpt-4o-mini"
@start()
def generate_city(self):
print("Starting flow")
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": "Return the name of a random city in the world.",
},
],
)
random_city = response["choices"][0]["message"]["content"]
print(f"Random City: {random_city}")
return random_city
@listen(generate_city)
def generate_fun_fact(self, random_city):
response = completion(
model=self.model,
messages=[
{
"role": "user",
"content": f"Tell me a fun fact about {random_city}",
},
],
)
fun_fact = response["choices"][0]["message"]["content"]
return fun_fact
async def main():
flow = ExampleFlow()
result = await flow.kickoff()
print(f"Generated fun fact: {result}")
asyncio.run(main())
In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks: generate_city
and generate_fun_fact
. The generate_city
task is the starting point of the Flow, and the generate_fun_fact
task listens for the output of the generate_city
task.
When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.
@start()¶
The @start()
decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with @start()
are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started.
@listen()¶
The @listen()
decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with @listen()
will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument.
Usage¶
The @listen()
decorator can be used in several ways:
- Listening to a Method by Name: You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.
- Listening to a Method Directly: You can pass the method itself. When that method completes, the listener method will be triggered.
Flow Output¶
Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow.
Retrieving the Final Output¶
When you run a Flow, the final output is determined by the last method that completes. The kickoff()
method returns the output of this final method.
Here's how you can access the final output:
import asyncio
from crewai.flow.flow import Flow, listen, start
class OutputExampleFlow(Flow):
@start()
def first_method(self):
return "Output from first_method"
@listen(first_method)
def second_method(self, first_output):
return f"Second method received: {first_output}"
async def main():
flow = OutputExampleFlow()
final_output = await flow.kickoff()
print("---- Final Output ----")
print(final_output)
asyncio.run(main())
In this example, the second_method
is the last method to complete, so its output will be the final output of the Flow. The kickoff()
method will return this final output, which is then printed to the console.
The output of the Flow will be:
Accessing and Updating State¶
In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.
Here's an example of how to update and access the state:
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StateExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from first_method"
self.state.counter += 1
@listen(first_method)
def second_method(self):
self.state.message += " - updated by second_method"
self.state.counter += 1
return self.state.message
async def main():
flow = StateExampleFlow()
final_output = await flow.kickoff()
print(f"Final Output: {final_output}")
print("Final State:")
print(flow.state)
asyncio.run(main())
In this example, the state is updated by both first_method
and second_method
. After the Flow has run, you can access the final state to see the updates made by these methods.
The output of the Flow will be:
Final Output: Hello from first_method - updated by second_method
Final State:
counter=2 message='Hello from first_method - updated by second_method'
By ensuring that the final method's output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems, while also maintaining and accessing the state throughout the Flow's execution.
Flow State Management¶
Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management, allowing developers to choose the approach that best fits their application's needs.
Unstructured State Management¶
In unstructured state management, all state is stored in the state
attribute of the Flow
class. This approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.
import asyncio
from crewai.flow.flow import Flow, listen, start
class UntructuredExampleFlow(Flow):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
self.state.counter = 0
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = UntructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Flexibility: You can dynamically add attributes to
self.state
without predefined constraints. - Simplicity: Ideal for straightforward workflows where state structure is minimal or varies significantly.
Structured State Management¶
Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow. By using models like Pydantic's BaseModel
, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.
import asyncio
from crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel
class ExampleState(BaseModel):
counter: int = 0
message: str = ""
class StructuredExampleFlow(Flow[ExampleState]):
@start()
def first_method(self):
self.state.message = "Hello from structured flow"
@listen(first_method)
def second_method(self):
self.state.counter += 1
self.state.message += " - updated"
@listen(second_method)
def third_method(self):
self.state.counter += 1
self.state.message += " - updated again"
print(f"State after third_method: {self.state}")
async def main():
flow = StructuredExampleFlow()
await flow.kickoff()
asyncio.run(main())
Key Points:
- Defined Schema:
ExampleState
clearly outlines the state structure, enhancing code readability and maintainability. - Type Safety: Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.
- Auto-Completion: IDEs can provide better auto-completion and error checking based on the defined state model.
Choosing Between Unstructured and Structured State Management¶
-
Use Unstructured State Management when:
-
The workflow's state is simple or highly dynamic.
- Flexibility is prioritized over strict state definitions.
-
Rapid prototyping is required without the overhead of defining schemas.
-
Use Structured State Management when:
- The workflow requires a well-defined and consistent state structure.
- Type safety and validation are important for your application's reliability.
- You want to leverage IDE features like auto-completion and type checking for better developer experience.
By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements.
Flow Control¶
Conditional Logic¶
or¶
The or_
function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, listen, or_, start
class OrExampleFlow(Flow):
@start()
def start_method(self):
return "Hello from the start method"
@listen(start_method)
def second_method(self):
return "Hello from the second method"
@listen(or_(start_method, second_method))
def logger(self, result):
print(f"Logger: {result}")
async def main():
flow = OrExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered by the output of either the start_method
or the second_method
. The or_
function is to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
The output of the Flow will be:
and¶
The and_
function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
import asyncio
from crewai.flow.flow import Flow, and_, listen, start
class AndExampleFlow(Flow):
@start()
def start_method(self):
self.state["greeting"] = "Hello from the start method"
@listen(start_method)
def second_method(self):
self.state["joke"] = "What do computers eat? Microchips."
@listen(and_(start_method, second_method))
def logger(self):
print("---- Logger ----")
print(self.state)
async def main():
flow = AndExampleFlow()
await flow.kickoff()
asyncio.run(main())
When you run this Flow, the logger
method will be triggered only when both the start_method
and the second_method
emit an output. The and_
function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
The output of the Flow will be:
---- Logger ----
{'greeting': 'Hello from the start method', 'joke': 'What do computers eat? Microchips.'}
Router¶
The @router()
decorator in Flows allows you to define conditional routing logic based on the output of a method. You can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.
import asyncio
import random
from crewai.flow.flow import Flow, listen, router, start
from pydantic import BaseModel
class ExampleState(BaseModel):
success_flag: bool = False
class RouterFlow(Flow[ExampleState]):
@start()
def start_method(self):
print("Starting the structured flow")
random_boolean = random.choice([True, False])
self.state.success_flag = random_boolean
@router(start_method)
def second_method(self):
if self.state.success_flag:
return "success"
else:
return "failed"
@listen("success")
def third_method(self):
print("Third method running")
@listen("failed")
def fourth_method(self):
print("Fourth method running")
async def main():
flow = RouterFlow()
await flow.kickoff()
asyncio.run(main())
In the above example, the start_method
generates a random boolean value and sets it in the state. The second_method
uses the @router()
decorator to define conditional routing logic based on the value of the boolean. If the boolean is True
, the method returns "success"
, and if it is False
, the method returns "failed"
. The third_method
and fourth_method
listen to the output of the second_method
and execute based on the returned value.
When you run this Flow, the output will change based on the random boolean value generated by the start_method
, but you should see an output similar to the following:
Adding Crews to Flows¶
Creating a flow with multiple crews in CrewAI is straightforward. You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:
This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew called poem_crew
that is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews.
Folder Structure¶
After running the crewai create flow name_of_flow
command, you will see a folder structure similar to the following:
name_of_flow/
├── crews/
│ └── poem_crew/
│ ├── config/
│ │ ├── agents.yaml
│ │ └── tasks.yaml
│ ├── poem_crew.py
├── tools/
│ └── custom_tool.py
├── main.py
├── README.md
├── pyproject.toml
└── .gitignore
Building Your Crews¶
In the crews
folder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, the poem_crew
folder contains:
config/agents.yaml
: Defines the agents for the crew.config/tasks.yaml
: Defines the tasks for the crew.poem_crew.py
: Contains the crew definition, including agents, tasks, and the crew itself.
You can copy, paste, and edit the poem_crew
to create other crews.
Connecting Crews in main.py
¶
The main.py
file is where you create your flow and connect the crews together. You can define your flow by using the Flow
class and the decorators @start
and @listen
to specify the flow of execution.
Here's an example of how you can connect the poem_crew
in the main.py
file:
#!/usr/bin/env python
import asyncio
from random import randint
from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start
from .crews.poem_crew.poem_crew import PoemCrew
class PoemState(BaseModel):
sentence_count: int = 1
poem: str = ""
class PoemFlow(Flow[PoemState]):
@start()
def generate_sentence_count(self):
print("Generating sentence count")
# Generate a number between 1 and 5
self.state.sentence_count = randint(1, 5)
@listen(generate_sentence_count)
def generate_poem(self):
print("Generating poem")
poem_crew = PoemCrew().crew()
result = poem_crew.kickoff(inputs={"sentence_count": self.state.sentence_count})
print("Poem generated", result.raw)
self.state.poem = result.raw
@listen(generate_poem)
def save_poem(self):
print("Saving poem")
with open("poem.txt", "w") as f:
f.write(self.state.poem)
async def run():
"""
Run the flow.
"""
poem_flow = PoemFlow()
await poem_flow.kickoff()
def main():
asyncio.run(run())
if __name__ == "__main__":
main()
In this example, the PoemFlow
class defines a flow that generates a sentence count, uses the PoemCrew
to generate a poem, and then saves the poem to a file. The flow is kicked off by calling the kickoff()
method.
Next Steps¶
If you're interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are four specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:
-
Email Auto Responder Flow: This example demonstrates an infinite loop where a background job continually runs to automate email responses. It's a great use case for tasks that need to be performed repeatedly without manual intervention. View Example
-
Lead Score Flow: This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It's an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. View Example
-
Write a Book Flow: This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. View Example
-
Meeting Assistant Flow: This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It's a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. View Example
By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.
---page-end---
---link: https://docs.crewai.com/core-concepts/LLMs/
Large Language Models (LLMs) in crewAI¶
Introduction¶
Large Language Models (LLMs) are the backbone of intelligent agents in the crewAI framework. This guide will help you understand, configure, and optimize LLM usage for your crewAI projects.
Table of Contents¶
- Key Concepts
- Configuring LLMs for Agents
- 1. Default Configuration
- 2. String Identifier
- 3. LLM Instance
- 4. Custom LLM Objects
- Connecting to OpenAI-Compatible LLMs
- LLM Configuration Options
- Using Ollama (Local LLMs)
- Changing the Base API URL
- Best Practices
- Troubleshooting
Key Concepts¶
- LLM: Large Language Model, the AI powering agent intelligence
- Agent: A crewAI entity that uses an LLM to perform tasks
- Provider: A service that offers LLM capabilities (e.g., OpenAI, Anthropic, Ollama, more providers)
Configuring LLMs for Agents¶
crewAI offers flexible options for setting up LLMs:
1. Default Configuration¶
By default, crewAI uses the gpt-4o-mini
model. It uses environment variables if no LLM is specified:
- OPENAI_MODEL_NAME
(defaults to "gpt-4o-mini" if not set)
- OPENAI_API_BASE
- OPENAI_API_KEY
2. String Identifier¶
3. LLM Instance¶
List of more providers.
4. Custom LLM Objects¶
Pass a custom LLM implementation or object from another library.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
-
Using environment variables:
-
Using LLM class attributes:
LLM Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "gpt-3.5-turbo", "ollama/llama3.1", more providers) |
timeout |
float, int | Maximum time (in seconds) to wait for a response |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
n |
int | Number of completions to generate |
stop |
str, List[str] | Sequence(s) to stop generation |
max_tokens |
int | Maximum number of tokens to generate |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
logit_bias |
Dict[int, float] | Modifies likelihood of specified tokens appearing in the completion |
response_format |
Dict[str, Any] | Specifies the format of the response (e.g., {"type": "json_object"}) |
seed |
int | Sets a random seed for deterministic results |
logprobs |
bool | Whether to return log probabilities of the output tokens |
top_logprobs |
int | Number of most likely tokens to return the log probabilities for |
base_url |
str | The base URL for the API endpoint |
api_version |
str | The version of the API to use |
api_key |
str | Your API key for authentication |
Example:
llm = LLM(
model="gpt-4",
temperature=0.8,
max_tokens=150,
top_p=0.9,
frequency_penalty=0.1,
presence_penalty=0.1,
stop=["END"],
seed=42,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(llm=llm, ...)
Using Ollama (Local LLMs)¶
crewAI supports using Ollama for running open-source models locally:
- Install Ollama: ollama.ai
- Run a model:
ollama run llama2
- Configure agent:
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Best Practices¶
- Choose the right model: Balance capability and cost.
- Optimize prompts: Clear, concise instructions improve output.
- Manage tokens: Monitor and limit token usage for efficiency.
- Use appropriate temperature: Lower for factual tasks, higher for creative ones.
- Implement error handling: Gracefully manage API errors and rate limits.
Troubleshooting¶
- API Errors: Check your API key, network connection, and rate limits.
- Unexpected Outputs: Refine your prompts and adjust temperature or top_p.
- Performance Issues: Consider using a more powerful model or optimizing your queries.
- Timeout Errors: Increase the
timeout
parameter or optimize your input.
---page-end---
---link: https://docs.crewai.com/core-concepts/Memory/
Memory
Introduction to Memory Systems in crewAI¶
Enhancing Agent Intelligence
The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents. This system comprises short-term memory, long-term memory, entity memory, and contextual memory, each serving a unique purpose in aiding agents to remember, reason, and learn from past interactions.
Memory System Components¶
Component | Description |
---|---|
Short-Term Memory | Temporarily stores recent interactions and outcomes using RAG , enabling agents to recall and utilize information relevant to their current context during the current executions. |
Long-Term Memory | Preserves valuable insights and learnings from past executions, allowing agents to build and refine their knowledge over time. |
Entity Memory | Captures and organizes information about entities (people, places, concepts) encountered during tasks, facilitating deeper understanding and relationship mapping. Uses RAG for storing entity information. |
Contextual Memory | Maintains the context of interactions by combining ShortTermMemory , LongTermMemory , and EntityMemory , aiding in the coherence and relevance of agent responses over a sequence of tasks or a conversation. |
How Memory Systems Empower Agents¶
-
Contextual Awareness: With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.
-
Experience Accumulation: Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.
-
Entity Understanding: By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.
Implementing Memory in Your Crew¶
When configuring a crew, you can enable and customize each memory component to suit the crew's objectives and the nature of tasks it will perform.
By default, the memory system is disabled, and you can ensure it is active by setting memory=True
in the crew configuration. The memory will use OpenAI embeddings by default, but you can change it by setting embedder
to a different model. It's also possible to initialize the memory instance with your own instance.
The 'embedder' only applies to Short-Term Memory which uses Chroma for RAG using the EmbedChain package. The Long-Term Memory uses SQLite3 to store task results. Currently, there is no way to override these storage implementations. The data storage files are saved into a platform-specific location found using the appdirs package, and the name of the project can be overridden using the CREWAI_STORAGE_DIR environment variable.
Example: Configuring Memory for a Crew¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True
)
Example: Use Custom Memory Instances e.g FAISS as the VectorDB¶
from crewai import Crew, Agent, Task, Process
# Assemble your crew with memory capabilities
my_crew = Crew(
agents=[...],
tasks=[...],
process="Process.sequential",
memory=True,
long_term_memory=EnhanceLongTermMemory(
storage=LTMSQLiteStorage(
db_path="/my_data_dir/my_crew1/long_term_memory_storage.db"
)
),
short_term_memory=EnhanceShortTermMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="short_term",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
entity_memory=EnhanceEntityMemory(
storage=CustomRAGStorage(
crew_name="my_crew",
storage_type="entities",
data_dir="//my_data_dir",
model=embedder["model"],
dimension=embedder["dimension"],
),
),
verbose=True,
)
Additional Embedding Providers¶
Using OpenAI embeddings (already default)¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "openai",
"config": {
"model": 'text-embedding-3-small'
}
}
)
Using Google AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "google",
"config": {
"model": 'models/embedding-001',
"task_type": "retrieval_document",
"title": "Embeddings for Embedchain"
}
}
)
Using Azure OpenAI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "azure_openai",
"config": {
"model": 'text-embedding-ada-002',
"deployment_name": "your_embedding_model_deployment_name"
}
}
)
Using GPT4ALL embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "gpt4all"
}
)
Using Vertex AI embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "vertexai",
"config": {
"model": 'textembedding-gecko'
}
}
)
Using Cohere embeddings¶
from crewai import Crew, Agent, Task, Process
my_crew = Crew(
agents=[...],
tasks=[...],
process=Process.sequential,
memory=True,
verbose=True,
embedder={
"provider": "cohere",
"config": {
"model": "embed-english-v3.0",
"vector_dimension": 1024
}
}
)
Resetting Memory¶
Resetting Memory Options¶
-l, --long
- Description: Reset LONG TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-s, --short
- Description: Reset SHORT TERM memory.
- Type: Flag (boolean)
-
Default: False
-
-e, --entities
- Description: Reset ENTITIES memory.
- Type: Flag (boolean)
-
Default: False
-
-k, --kickoff-outputs
- Description: Reset LATEST KICKOFF TASK OUTPUTS.
- Type: Flag (boolean)
-
Default: False
-
-a, --all
- Description: Reset ALL memories.
- Type: Flag (boolean)
- Default: False
Benefits of Using crewAI's Memory System¶
- Adaptive Learning: Crews become more efficient over time, adapting to new information and refining their approach to tasks.
- Enhanced Personalization: Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.
- Improved Problem Solving: Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.
Getting Started¶
Integrating crewAI's memory system into your projects is straightforward. By leveraging the provided memory components and configurations, you can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.
---page-end---
---link: https://docs.crewai.com/core-concepts/Pipeline/
Pipeline
What is a Pipeline?¶
A pipeline in crewAI represents a structured workflow that allows for the sequential or parallel execution of multiple crews. It provides a way to organize complex processes involving multiple stages, where the output of one stage can serve as input for subsequent stages.
Key Terminology¶
Understanding the following terms is crucial for working effectively with pipelines:
- Stage: A distinct part of the pipeline, which can be either sequential (a single crew) or parallel (multiple crews executing concurrently).
- Kickoff: A specific execution of the pipeline for a given set of inputs, representing a single instance of processing through the pipeline.
- Branch: Parallel executions within a stage (e.g., concurrent crew operations).
- Trace: The journey of an individual input through the entire pipeline, capturing the path and transformations it undergoes.
Example pipeline structure:
This represents a pipeline with three stages:
- A sequential stage (crew1)
- A parallel stage with two branches (crew2 and crew3 executing concurrently)
- Another sequential stage (crew4)
Each input creates its own kickoff, flowing through all stages of the pipeline. Multiple kickoffs can be processed concurrently, each following the defined pipeline structure.
Pipeline Attributes¶
Attribute | Parameters | Description |
---|---|---|
Stages | stages |
A list of PipelineStage (crews, lists of crews, or routers) representing the stages to be executed in sequence. |
Creating a Pipeline¶
When creating a pipeline, you define a series of stages, each consisting of either a single crew or a list of crews for parallel execution. The pipeline ensures that each stage is executed in order, with the output of one stage feeding into the next.
Example: Assembling a Pipeline¶
from crewai import Crew, Process, Pipeline
# Define your crews
research_crew = Crew(
agents=[researcher],
tasks=[research_task],
process=Process.sequential
)
analysis_crew = Crew(
agents=[analyst],
tasks=[analysis_task],
process=Process.sequential
)
writing_crew = Crew(
agents=[writer],
tasks=[writing_task],
process=Process.sequential
)
# Assemble the pipeline
my_pipeline = Pipeline(
stages=[research_crew, analysis_crew, writing_crew]
)
Pipeline Methods¶
Method | Description |
---|---|
kickoff | Executes the pipeline, processing all stages and returning the results. This method initiates one or more kickoffs through the pipeline, handling the flow of data between stages. |
process_runs | Runs the pipeline for each input provided, handling the flow and transformation of data between stages. |
Pipeline Output¶
Understanding Pipeline Outputs
The output of a pipeline in the crewAI framework is encapsulated within the PipelineKickoffResult
class. This class provides a structured way to access the results of the pipeline's execution, including various formats such as raw strings, JSON, and Pydantic models.
Pipeline Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the pipeline output. |
Run Results | run_results |
List[PipelineRunResult] |
A list of PipelineRunResult objects, each representing the output of a single run through the pipeline. |
Pipeline Output Methods¶
Method/Property | Description |
---|---|
add_run_result | Adds a PipelineRunResult to the list of run results. |
Pipeline Run Result Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
ID | id |
UUID4 |
A unique identifier for the run result. |
Raw | raw |
str |
The raw output of the final stage in the pipeline kickoff. |
Pydantic | pydantic |
Any |
A Pydantic model object representing the structured output of the final stage, if applicable. |
JSON Dict | json_dict |
Union[Dict[str, Any], None] |
A dictionary representing the JSON output of the final stage, if applicable. |
Token Usage | token_usage |
Dict[str, UsageMetrics] |
A summary of token usage across all stages of the pipeline kickoff. |
Trace | trace |
List[Any] |
A trace of the journey of inputs through the pipeline kickoff. |
Crews Outputs | crews_outputs |
List[CrewOutput] |
A list of CrewOutput objects, representing the outputs from each crew in the pipeline kickoff. |
Pipeline Run Result Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the run result if the output format of the final task is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the run result, prioritizing Pydantic, then JSON, then raw. |
Accessing Pipeline Outputs¶
Once a pipeline has been executed, its output can be accessed through the PipelineOutput
object returned by the process_runs
method. The PipelineOutput
class provides access to individual PipelineRunResult
objects, each representing a single run through the pipeline.
Example¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}, {"initial_query": "Future of robotics"}]
# Execute the pipeline
pipeline_output = await my_pipeline.process_runs(input_data)
# Access the results
for run_result in pipeline_output.run_results:
print(f"Run ID: {run_result.id}")
print(f"Final Raw Output: {run_result.raw}")
if run_result.json_dict:
print(f"JSON Output: {json.dumps(run_result.json_dict, indent=2)}")
if run_result.pydantic:
print(f"Pydantic Output: {run_result.pydantic}")
print(f"Token Usage: {run_result.token_usage}")
print(f"Trace: {run_result.trace}")
print("Crew Outputs:")
for crew_output in run_result.crews_outputs:
print(f" Crew: {crew_output.raw}")
print("\n")
This example demonstrates how to access and work with the pipeline output, including individual run results and their associated data.
Using Pipelines¶
Pipelines are particularly useful for complex workflows that involve multiple stages of processing, analysis, or content generation. They allow you to:
- Sequence Operations: Execute crews in a specific order, ensuring that the output of one crew is available as input to the next.
- Parallel Processing: Run multiple crews concurrently within a stage for increased efficiency.
- Manage Complex Workflows: Break down large tasks into smaller, manageable steps executed by specialized crews.
Example: Running a Pipeline¶
# Define input data for the pipeline
input_data = [{"initial_query": "Latest advancements in AI"}]
# Execute the pipeline, initiating a run for each input
results = await my_pipeline.process_runs(input_data)
# Access the results
for result in results:
print(f"Final Output: {result.raw}")
print(f"Token Usage: {result.token_usage}")
print(f"Trace: {result.trace}") # Shows the path of the input through all stages
Advanced Features¶
Parallel Execution within Stages¶
You can define parallel execution within a stage by providing a list of crews, creating multiple branches:
parallel_analysis_crew = Crew(agents=[financial_analyst], tasks=[financial_analysis_task])
market_analysis_crew = Crew(agents=[market_analyst], tasks=[market_analysis_task])
my_pipeline = Pipeline(
stages=[
research_crew,
[parallel_analysis_crew, market_analysis_crew], # Parallel execution (branching)
writing_crew
]
)
Routers in Pipelines¶
Routers are a powerful feature in crewAI pipelines that allow for dynamic decision-making and branching within your workflow. They enable you to direct the flow of execution based on specific conditions or criteria, making your pipelines more flexible and adaptive.
What is a Router?¶
A router in crewAI is a special component that can be included as a stage in your pipeline. It evaluates the input data and determines which path the execution should take next. This allows for conditional branching in your pipeline, where different crews or sub-pipelines can be executed based on the router's decision.
Key Components of a Router¶
- Routes: A dictionary of named routes, each associated with a condition and a pipeline to execute if the condition is met.
- Default Route: A fallback pipeline that is executed if none of the defined route conditions are met.
Creating a Router¶
Here's an example of how to create a router:
from crewai import Router, Route, Pipeline, Crew, Agent, Task
# Define your agents
classifier = Agent(name="Classifier", role="Email Classifier")
urgent_handler = Agent(name="Urgent Handler", role="Urgent Email Processor")
normal_handler = Agent(name="Normal Handler", role="Normal Email Processor")
# Define your tasks
classify_task = Task(description="Classify the email based on its content and metadata.")
urgent_task = Task(description="Process and respond to urgent email quickly.")
normal_task = Task(description="Process and respond to normal email thoroughly.")
# Define your crews
classification_crew = Crew(agents=[classifier], tasks=[classify_task]) # classify email between high and low urgency 1-10
urgent_crew = Crew(agents=[urgent_handler], tasks=[urgent_task])
normal_crew = Crew(agents=[normal_handler], tasks=[normal_task])
# Create pipelines for different urgency levels
urgent_pipeline = Pipeline(stages=[urgent_crew])
normal_pipeline = Pipeline(stages=[normal_crew])
# Create a router
email_router = Router(
routes={
"high_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) > 7,
pipeline=urgent_pipeline
),
"low_urgency": Route(
condition=lambda x: x.get("urgency_score", 0) <= 7,
pipeline=normal_pipeline
)
},
default=Pipeline(stages=[normal_pipeline]) # Default to just normal if no urgency score
)
# Use the router in a main pipeline
main_pipeline = Pipeline(stages=[classification_crew, email_router])
inputs = [{"email": "..."}, {"email": "..."}] # List of email data
main_pipeline.kickoff(inputs=inputs=inputs)
In this example, the router decides between an urgent pipeline and a normal pipeline based on the urgency score of the email. If the urgency score is greater than 7, it routes to the urgent pipeline; otherwise, it uses the normal pipeline. If the input doesn't include an urgency score, it defaults to just the classification crew.
Benefits of Using Routers¶
- Dynamic Workflow: Adapt your pipeline's behavior based on input characteristics or intermediate results.
- Efficiency: Route urgent tasks to quicker processes, reserving more thorough pipelines for less time-sensitive inputs.
- Flexibility: Easily modify or extend your pipeline's logic without changing the core structure.
- Scalability: Handle a wide range of email types and urgency levels with a single pipeline structure.
Error Handling and Validation¶
The Pipeline
class includes validation mechanisms to ensure the robustness of the pipeline structure:
- Validates that stages contain only Crew instances or lists of Crew instances.
- Prevents double nesting of stages to maintain a clear structure.
---page-end---
---link: https://docs.crewai.com/core-concepts/Planning/
Planning
Introduction¶
The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration, all Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.
Using the Planning Feature¶
Getting started with the planning feature is very easy, the only step required is to add planning=True
to your Crew:
from crewai import Crew, Agent, Task, Process
# Assemble your crew with planning capabilities
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
)
From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.
Planning LLM¶
Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.
from crewai import Crew, Agent, Task, Process
from langchain_openai import ChatOpenAI
# Assemble your crew with planning capabilities and custom LLM
my_crew = Crew(
agents=self.agents,
tasks=self.tasks,
process=Process.sequential,
planning=True,
planning_llm=ChatOpenAI(model="gpt-4o")
)
Example¶
When running the base case example, you will see something like the following output, which represents the output of the AgentPlanner responsible for creating the step-by-step logic to add to the Agents' tasks.
``` [2024-07-15 16:49:11][INFO]: Planning the crew execution Step-by-Step Plan for Task Execution
Task Number 1: Conduct a thorough research about AI LLMs
Agent: AI LLMs Senior Data Researcher
Agent Goal: Uncover cutting-edge developments in AI LLMs
Task Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Define Research Scope:
-
Determine the specific areas of AI LLMs to focus on, such as advancements in architecture, use cases, ethical considerations, and performance metrics.
-
Identify Reliable Sources:
-
List reputable sources for AI research, including academic journals, industry reports, conferences (e.g., NeurIPS, ACL), AI research labs (e.g., OpenAI, Google AI), and online databases (e.g., IEEE Xplore, arXiv).
-
Collect Data:
- Search for the latest papers, articles, and reports published in 2023 and early 2024.
-
Use keywords like "Large Language Models 2024", "AI LLM advancements", "AI ethics 2024", etc.
-
Analyze Findings:
- Read and summarize the key points from each source.
-
Highlight new techniques, models, and applications introduced in the past year.
-
Organize Information:
- Categorize the information into relevant topics (e.g., new architectures, ethical implications, real-world applications).
-
Ensure each bullet point is concise but informative.
-
Create the List:
- Compile the 10 most relevant pieces of information into a bullet point list.
- Review the list to ensure clarity and relevance.
Expected Output: A list with 10 bullet points of the most relevant information about AI LLMs.
Task Number 2: Review the context you got and expand each topic into a full section for a report
Agent: AI LLMs Reporting Analyst
Agent Goal: Create detailed reports based on AI LLMs data analysis and research findings
Task Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'
Task Tools: None specified
Agent Tools: None specified
Step-by-Step Plan:
- Review the Bullet Points:
-
Carefully read through the list of 10 bullet points provided by the AI LLMs Senior Data Researcher.
-
Outline the Report:
- Create an outline with each bullet point as a main section heading.
-
Plan sub-sections under each main heading to cover different aspects of the topic.
-
Research Further Details:
- For each bullet point, conduct additional research if necessary to gather more detailed information.
-
Look for case studies, examples, and statistical data to support each section.
-
Write Detailed Sections:
- Expand each bullet point into a comprehensive section.
- Ensure each section includes an introduction, detailed explanation, examples, and a conclusion.
-
Use markdown formatting for headings, subheadings, lists, and emphasis.
-
Review and Edit:
- Proofread the report for clarity, coherence, and correctness.
- Make sure the report flows logically from one section to the next.
-
Format the report according to markdown standards.
-
Finalize the Report:
- Ensure the report is complete with all sections expanded and detailed.
- Double-check formatting and make any necessary adjustments.
Expected Output: A fully fledged report with the main topics, each with a full section of information. Formatted as markdown without '```'.
---page-end---
---link: https://docs.crewai.com/core-concepts/Processes/
Processes
Understanding Processes¶
Core Concept
In CrewAI, processes orchestrate the execution of tasks by agents, akin to project management in human teams. These processes ensure tasks are distributed and executed efficiently, in alignment with a predefined strategy.
Process Implementations¶
- Sequential: Executes tasks sequentially, ensuring tasks are completed in an orderly progression.
- Hierarchical: Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model (
manager_llm
) or a custom manager agent (manager_agent
) must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager. - Consensual Process (Planned): Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.
The Role of Processes in Teamwork¶
Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence.
Assigning Processes to a Crew¶
To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to define manager_llm
or manager_agent
for the manager agent.
from crewai import Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI
# Example: Creating a crew with a sequential process
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.sequential
)
# Example: Creating a crew with a hierarchical process
# Ensure to provide a manager_llm or manager_agent
crew = Crew(
agents=my_agents,
tasks=my_tasks,
process=Process.hierarchical,
manager_llm=ChatOpenAI(model="gpt-4")
# or
# manager_agent=my_manager_agent
)
my_agents
and my_tasks
are defined prior to creating a Crew
object, and for the hierarchical process, either manager_llm
or manager_agent
is also required.
Sequential Process¶
This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.
To customize task context, utilize the context
parameter in the Task
class to specify outputs that should be used as context for subsequent tasks.
Hierarchical Process¶
Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm
). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion.
Process Class: Detailed Overview¶
The Process
class is implemented as an enumeration (Enum
), ensuring type safety and restricting process values to the defined types (sequential
, hierarchical
). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation.
Conclusion¶
The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents. This documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tasks/
Tasks
Overview of a Task¶
What is a Task?
In the crewAI framework, tasks are specific assignments completed by agents. They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.
Tasks within crewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew's process, enhancing teamwork and efficiency.
Task Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
A clear, concise statement of what the task entails. |
Agent | agent |
Optional[BaseAgent] |
The agent responsible for the task, assigned either directly or by the crew's process. |
Expected Output | expected_output |
str |
A detailed description of what the task's completion looks like. |
Tools (optional) | tools |
Optional[List[Any]] |
The functions or capabilities the agent can utilize to perform the task. Defaults to an empty list. |
Async Execution (optional) | async_execution |
Optional[bool] |
If set, the task executes asynchronously, allowing progression without waiting for completion. Defaults to False. |
Context (optional) | context |
Optional[List["Task"]] |
Specifies tasks whose outputs are used as context for this task. |
Config (optional) | config |
Optional[Dict[str, Any]] |
Additional configuration details for the agent executing the task, allowing further customization. Defaults to None. |
Output JSON (optional) | output_json |
Optional[Type[BaseModel]] |
Outputs a JSON object, requiring an OpenAI client. Only one output format can be set. |
Output Pydantic (optional) | output_pydantic |
Optional[Type[BaseModel]] |
Outputs a Pydantic model object, requiring an OpenAI client. Only one output format can be set. |
Output File (optional) | output_file |
Optional[str] |
Saves the task output to a file. If used with Output JSON or Output Pydantic , specifies how the output is saved. |
Output (optional) | output |
Optional[TaskOutput] |
An instance of TaskOutput , containing the raw, JSON, and Pydantic output plus additional details. |
Callback (optional) | callback |
Optional[Any] |
A callable that is executed with the task's output upon completion. |
Human Input (optional) | human_input |
Optional[bool] |
Indicates if the task should involve human review at the end, useful for tasks needing human oversight. Defaults to False. |
Converter Class (optional) | converter_cls |
Optional[Type[Converter]] |
A converter class used to export structured output. Defaults to None. |
Creating a Task¶
Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:
from crewai import Task
task = Task(
description='Find and summarize the latest and most relevant news on AI',
agent=sales_agent,
expected_output='A bullet list summary of the top 5 most important AI news',
)
Task Assignment
Directly specify an agent
for assignment or let the hierarchical
CrewAI's process decide based on roles, availability, etc.
Task Output¶
Understanding Task Outputs
The output of a task in the crewAI framework is encapsulated within the TaskOutput
class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.
By default, the TaskOutput
will only include the raw
output. A TaskOutput
will only include the pydantic
or json_dict
output if the original Task
object was configured with output_pydantic
or output_json
, respectively.
Task Output Attributes¶
Attribute | Parameters | Type | Description |
---|---|---|---|
Description | description |
str |
Description of the task. |
Summary | summary |
Optional[str] |
Summary of the task, auto-generated from the first 10 words of the description. |
Raw | raw |
str |
The raw output of the task. This is the default format for the output. |
Pydantic | pydantic |
Optional[BaseModel] |
A Pydantic model object representing the structured output of the task. |
JSON Dict | json_dict |
Optional[Dict[str, Any]] |
A dictionary representing the JSON output of the task. |
Agent | agent |
str |
The agent that executed the task. |
Output Format | output_format |
OutputFormat |
The format of the task output, with options including RAW, JSON, and Pydantic. The default is RAW. |
Task Methods and Properties¶
Method/Property | Description |
---|---|
json | Returns the JSON string representation of the task output if the output format is JSON. |
to_dict | Converts the JSON and Pydantic outputs to a dictionary. |
str | Returns the string representation of the task output, prioritizing Pydantic, then JSON, then raw. |
Accessing Task Outputs¶
Once a task has been executed, its output can be accessed through the output
attribute of the Task
object. The TaskOutput
class provides various ways to interact with and present this output.
Example¶
# Example task
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
# Execute the crew
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
# Accessing the task output
task_output = task.output
print(f"Task Description: {task_output.description}")
print(f"Task Summary: {task_output.summary}")
print(f"Raw Output: {task_output.raw}")
if task_output.json_dict:
print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
if task_output.pydantic:
print(f"Pydantic Output: {task_output.pydantic}")
Integrating Tools with Tasks¶
Leverage tools from the crewAI Toolkit and LangChain Tools for enhanced task performance and agent interaction.
Creating a Task with Tools¶
import os
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
research_agent = Agent(
role='Researcher',
goal='Find and summarize the latest AI news',
backstory="""You're a researcher at a large company.
You're responsible for analyzing data and providing insights
to the business.""",
verbose=True
)
# to perform a semantic search for a specified query from a text's content across the internet
search_tool = SerperDevTool()
task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
crew = Crew(
agents=[research_agent],
tasks=[task],
verbose=True
)
result = crew.kickoff()
print(result)
This demonstrates how tasks with specific tools can override an agent's default set for tailored task execution.
Referring to Other Tasks¶
In crewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks' output, including multiple, should be used as context for another task.
This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the context
attribute of the task:
# ...
research_ai_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
research_ops_task = Task(
description='Find and summarize the latest AI Ops news',
expected_output='A bullet list summary of the top 5 most important AI Ops news',
async_execution=True,
agent=research_agent,
tools=[search_tool]
)
write_blog_task = Task(
description="Write a full blog post about the importance of AI and its latest news",
expected_output='Full blog post that is 4 paragraphs long',
agent=writer_agent,
context=[research_ai_task, research_ops_task]
)
#...
Asynchronous Execution¶
You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.
You can then use the context
attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.
#...
list_ideas = Task(
description="List of 5 interesting ideas to explore for an article about AI.",
expected_output="Bullet point list of 5 ideas for an article.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
list_important_history = Task(
description="Research the history of AI and give me the 5 most important events.",
expected_output="Bullet point list of 5 important events.",
agent=researcher,
async_execution=True # Will be executed asynchronously
)
write_article = Task(
description="Write an article about AI, its history, and interesting ideas.",
expected_output="A 4 paragraph article about AI.",
agent=writer,
context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed
)
#...
Callback Mechanism¶
The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task's outcome.
# ...
def callback_function(output: TaskOutput):
# Do something after the task is completed
# Example: Send an email to the manager
print(f"""
Task completed!
Task: {output.description}
Output: {output.raw}
""")
research_task = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool],
callback=callback_function
)
#...
Accessing a Specific Task Output¶
Once a crew finishes running, you can access the output of a specific task by using the output
attribute of the task object:
# ...
task1 = Task(
description='Find and summarize the latest AI news',
expected_output='A bullet list summary of the top 5 most important AI news',
agent=research_agent,
tools=[search_tool]
)
#...
crew = Crew(
agents=[research_agent],
tasks=[task1, task2, task3],
verbose=True
)
result = crew.kickoff()
# Returns a TaskOutput object with the description and results of the task
print(f"""
Task completed!
Task: {task1.output.description}
Output: {task1.output.raw}
""")
Tool Override Mechanism¶
Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI's flexibility.
Error Handling and Validation Mechanisms¶
While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:
- Ensuring only one output type is set per task to maintain clear output expectations.
- Preventing the manual assignment of the
id
attribute to uphold the integrity of the unique identifier system.
These validations help in maintaining the consistency and reliability of task executions within the crewAI framework.
Creating Directories when Saving Files¶
You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.
# ...
save_output_task = Task(
description='Save the summarized AI news to a file',
expected_output='File saved successfully',
agent=research_agent,
tools=[file_save_tool],
output_file='outputs/ai_news_summary.txt',
create_directory=True
)
#...
Conclusion¶
Tasks are the driving force behind the actions of agents in crewAI. By properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit. Equipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI's potential, ensuring agents are effectively prepared for their assignments and that tasks are executed as intended.
---page-end---
---link: https://docs.crewai.com/core-concepts/Testing/
Testing
Introduction¶
Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.
Using the Testing Feature¶
We added the CLI command crewai test
to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are n_iterations
and model
, which are optional and default to 2 and gpt-4o-mini
respectively. For now, the only provider available is OpenAI.
If you want to run more iterations or use a different model, you can specify the parameters like this:
or using the short forms:
When you run the crewai test
command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.
A table of scores at the end will show the performance of the crew in terms of the following metrics:
Tasks Scores
(1-10 Higher is better)
┏━━━━━━━━━━━━━━━━━━━━┯━━━━━━━┯━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Tasks/Crew/Agents │ Run 1 │ Run 2 │ Avg. Total │ Agents │ ┃
┠────────────────────┼───────┼───────┼────────────┼────────────────────────────────┼─────────────────────────────────┨
┃ Task 1 │ 9.0 │ 9.5 │ 9.2 │ - Professional Insights │ ┃
┃ │ │ │ │ Researcher │ ┃
┃ │ │ │ │ │ ┃
┃ Task 2 │ 9.0 │ 10.0 │ 9.5 │ - Company Profile Investigator │ ┃
┃ │ │ │ │ │ ┃
┃ Task 3 │ 9.0 │ 9.0 │ 9.0 │ - Automation Insights │ ┃
┃ │ │ │ │ Specialist │ ┃
┃ │ │ │ │ │ ┃
┃ Task 4 │ 9.0 │ 9.0 │ 9.0 │ - Final Report Compiler │ ┃
┃ │ │ │ │ │ - Automation Insights ┃
┃ │ │ │ │ │ Specialist ┃
┃ Crew │ 9.00 │ 9.38 │ 9.2 │ │ ┃
┃ Execution Time (s) │ 126 │ 145 │ 135 │ │ ┃
┗━━━━━━━━━━━━━━━━━━━━┷━━━━━━━┷━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.
---page-end---
---link: https://docs.crewai.com/core-concepts/Tools/
Tools
Introduction¶
CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers. This documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools.
What is a Tool?¶
Definition
A tool in CrewAI is a skill or function that agents can utilize to perform various actions. This includes tools from the crewAI Toolkit and LangChain Tools, enabling everything from simple searches to complex interactions and effective teamwork among agents.
Key Characteristics of Tools¶
- Utility: Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.
- Integration: Boosts agent capabilities by seamlessly integrating tools into their workflow.
- Customizability: Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.
- Error Handling: Incorporates robust error handling mechanisms to ensure smooth operation.
- Caching Mechanism: Features intelligent caching to optimize performance and reduce redundant operations.
Using crewAI Tools¶
To enhance your agents' capabilities with crewAI tools, begin by installing our extra tools package:
Here's an example demonstrating their use:
import os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
DirectoryReadTool,
FileReadTool,
SerperDevTool,
WebsiteSearchTool
)
# Set up API keys
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()
web_rag_tool = WebsiteSearchTool()
# Create agents
researcher = Agent(
role='Market Research Analyst',
goal='Provide up-to-date market analysis of the AI industry',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool, web_rag_tool],
verbose=True
)
writer = Agent(
role='Content Writer',
goal='Craft engaging blog posts about the AI industry',
backstory='A skilled writer with a passion for technology.',
tools=[docs_tool, file_tool],
verbose=True
)
# Define tasks
research = Task(
description='Research the latest trends in the AI industry and provide a summary.',
expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',
agent=researcher
)
write = Task(
description='Write an engaging blog post about the AI industry, based on the research analyst’s summary. Draw inspiration from the latest blog posts in the directory.',
expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
agent=writer,
output_file='blog-posts/new_post.md' # The final blog post will be saved here
)
# Assemble a crew with planning enabled
crew = Crew(
agents=[researcher, writer],
tasks=[research, write],
verbose=True,
planning=True, # Enable planning feature
)
# Execute tasks
crew.kickoff()
Available crewAI Tools¶
- Error Handling: All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.
- Caching Mechanism: All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the
cache_function
attribute on the tool.
Here is a list of the available tools and their descriptions:
Tool | Description |
---|---|
BrowserbaseLoadTool | A tool for interacting with and extracting data from web browsers. |
CodeDocsSearchTool | A RAG tool optimized for searching through code documentation and related technical documents. |
CodeInterpreterTool | A tool for interpreting python code. |
ComposioTool | Enables use of Composio tools. |
CSVSearchTool | A RAG tool designed for searching within CSV files, tailored to handle structured data. |
DALL-E Tool | A tool for generating images using the DALL-E API. |
DirectorySearchTool | A RAG tool for searching within directories, useful for navigating through file systems. |
DOCXSearchTool | A RAG tool aimed at searching within DOCX documents, ideal for processing Word files. |
DirectoryReadTool | Facilitates reading and processing of directory structures and their contents. |
EXASearchTool | A tool designed for performing exhaustive searches across various data sources. |
FileReadTool | Enables reading and extracting data from files, supporting various file formats. |
FirecrawlSearchTool | A tool to search webpages using Firecrawl and return the results. |
FirecrawlCrawlWebsiteTool | A tool for crawling webpages using Firecrawl. |
FirecrawlScrapeWebsiteTool | A tool for scraping webpages URL using Firecrawl and returning its contents. |
GithubSearchTool | A RAG tool for searching within GitHub repositories, useful for code and documentation search. |
SerperDevTool | A specialized tool for development purposes, with specific functionalities under development. |
TXTSearchTool | A RAG tool focused on searching within text (.txt) files, suitable for unstructured data. |
JSONSearchTool | A RAG tool designed for searching within JSON files, catering to structured data handling. |
LlamaIndexTool | Enables the use of LlamaIndex tools. |
MDXSearchTool | A RAG tool tailored for searching within Markdown (MDX) files, useful for documentation. |
PDFSearchTool | A RAG tool aimed at searching within PDF documents, ideal for processing scanned documents. |
PGSearchTool | A RAG tool optimized for searching within PostgreSQL databases, suitable for database queries. |
Vision Tool | A tool for generating images using the DALL-E API. |
RagTool | A general-purpose RAG tool capable of handling various data sources and types. |
ScrapeElementFromWebsiteTool | Enables scraping specific elements from websites, useful for targeted data extraction. |
ScrapeWebsiteTool | Facilitates scraping entire websites, ideal for comprehensive data collection. |
WebsiteSearchTool | A RAG tool for searching website content, optimized for web data extraction. |
XMLSearchTool | A RAG tool designed for searching within XML files, suitable for structured data formats. |
YoutubeChannelSearchTool | A RAG tool for searching within YouTube channels, useful for video content analysis. |
YoutubeVideoSearchTool | A RAG tool aimed at searching within YouTube videos, ideal for video data extraction. |
Creating your own Tools¶
Custom Tool Creation
Developers can craft custom tools tailored for their agent’s needs or utilize pre-built options:
To create your own crewAI tools you will need to install our extra tools package:
Once you do that there are two main ways for one to create a crewAI tool:
Subclassing BaseTool
¶
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "Clear description for what this tool is useful for, your agent will need this information to use it."
def _run(self, argument: str) -> str:
# Implementation goes here
return "Result from custom tool"
Utilizing the tool
Decorator¶
from crewai_tools import tool
@tool("Name of my tool")
def my_tool(question: str) -> str:
"""Clear description for what this tool is useful for, your agent will need this information to use it."""
# Function logic here
return "Result from your custom tool"
Custom Caching Mechanism¶
Caching
Tools can optionally implement a cache_function
to fine-tune caching behavior. This function determines when to cache results based on specific conditions, offering granular control over caching logic.
from crewai_tools import tool
@tool
def multiplication_tool(first_number: int, second_number: int) -> str:
"""Useful for when you need to multiply two numbers together."""
return first_number * second_number
def cache_func(args, result):
# In this case, we only cache the result if it's a multiple of 2
cache = result % 2 == 0
return cache
multiplication_tool.cache_function = cache_func
writer1 = Agent(
role="Writer",
goal="You write lessons of math for kids.",
backstory="You're an expert in writing and you love to teach kids but you know nothing of math.",
tools=[multiplication_tool],
allow_delegation=False,
)
#...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Training-Crew/
Training
Introduction¶
The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI). By running the command crewai train -n <n_iterations>
, you can specify the number of iterations for the training process.
During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback. This helps the agents improve their understanding, decision-making, and problem-solving abilities.
Training Your Crew Using the CLI¶
To use the training feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following command:
Replace <n_iterations>
with the desired number of training iterations and <filename>
with the appropriate filename ending with .pkl
.
Training Your Crew Programmatically¶
To train your crew programmatically, use the following steps:
- Define the number of iterations for training.
- Specify the input parameters for the training process.
- Execute the training command within a try-except block to handle potential errors.
n_iterations = 2
inputs = {"topic": "CrewAI Training"}
filename = "your_model.pkl"
try:
YourCrewName_Crew().crew().train(n_iterations=n_iterations, inputs=inputs, filename=filename)
except Exception as e:
raise Exception(f"An error occurred while training the crew: {e}")
Key Points to Note:¶
- Positive Integer Requirement: Ensure that the number of iterations (
n_iterations
) is a positive integer. The code will raise aValueError
if this condition is not met. - Filename Requirement: Ensure that the filename ends with
.pkl
. The code will raise aValueError
if this condition is not met. - Error Handling: The code handles subprocess errors and unexpected exceptions, providing error messages to the user.
It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.
Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.
Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.
Happy training with CrewAI!
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LangChain-Tools/
Using LangChain Tools
Using LangChain Tools¶
LangChain Integration
CrewAI seamlessly integrates with LangChain’s comprehensive list of tools, all of which can be used with crewAI.
import os
from crewai import Agent
from langchain.agents import Tool
from langchain.utilities import GoogleSerperAPIWrapper
# Setup API keys
os.environ["SERPER_API_KEY"] = "Your Key"
search = GoogleSerperAPIWrapper()
# Create and assign the search tool to an agent
serper_tool = Tool(
name="Intermediate Answer",
func=search.run,
description="Useful for search-based queries",
)
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[serper_tool]
)
# rest of the code ...
Conclusion¶
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively. When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms, and the flexibility of tool arguments to optimize your agents' performance and capabilities.
---page-end---
---link: https://docs.crewai.com/core-concepts/Using-LlamaIndex-Tools/
Using LlamaIndex Tools
Using LlamaIndex Tools¶
LlamaIndex Integration
CrewAI seamlessly integrates with LlamaIndex’s comprehensive toolkit for RAG (Retrieval-Augmented Generation) and agentic pipelines, enabling advanced search-based queries and more. Here are the available built-in tools offered by LlamaIndex.
from crewai import Agent
from crewai_tools import LlamaIndexTool
# Example 1: Initialize from FunctionTool
from llama_index.core.tools import FunctionTool
your_python_function = lambda ...: ...
og_tool = FunctionTool.from_defaults(your_python_function, name="<name>", description='<description>')
tool = LlamaIndexTool.from_tool(og_tool)
# Example 2: Initialize from LlamaHub Tools
from llama_index.tools.wolfram_alpha import WolframAlphaToolSpec
wolfram_spec = WolframAlphaToolSpec(app_id="<app_id>")
wolfram_tools = wolfram_spec.to_tool_list()
tools = [LlamaIndexTool.from_tool(t) for t in wolfram_tools]
# Example 3: Initialize Tool from a LlamaIndex Query Engine
query_engine = index.as_query_engine()
query_tool = LlamaIndexTool.from_query_engine(
query_engine,
name="Uber 2019 10K Query Tool",
description="Use this tool to lookup the 2019 Uber 10K Annual Report"
)
# Create and assign the tools to an agent
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[tool, *tools, query_tool]
)
# rest of the code ...
Steps to Get Started¶
To effectively use the LlamaIndexTool, follow these steps:
-
Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. -
Install and Use LlamaIndex: Follow the LlamaIndex documentation LlamaIndex Documentation to set up a RAG/agent pipeline.
---page-end---
---link: https://docs.crewai.com/getting-started/Create-a-New-CrewAI-Pipeline-Template-Method/
Creating a CrewAI Pipeline Project¶
Welcome to the comprehensive guide for creating a new CrewAI pipeline project. This document will walk you through the steps to create, customize, and run your CrewAI pipeline project, ensuring you have everything you need to get started.
To learn more about CrewAI pipelines, visit the CrewAI documentation.
Prerequisites¶
Before getting started with CrewAI pipelines, make sure that you have installed CrewAI via pip:
The same prerequisites for virtual environments and Code IDEs apply as in regular CrewAI projects.
Creating a New Pipeline Project¶
To create a new CrewAI pipeline project, you have two options:
- For a basic pipeline template:
- For a pipeline example that includes a router:
These commands will create a new project folder with the following structure:
<project_name>/
├── README.md
├── poetry.lock
├── pyproject.toml
├── src/
│ └── <project_name>/
│ ├── __init__.py
│ ├── main.py
│ ├── crews/
│ │ ├── crew1/
│ │ │ ├── crew1.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ │ ├── crew2/
│ │ │ ├── crew2.py
│ │ │ └── config/
│ │ │ ├── agents.yaml
│ │ │ └── tasks.yaml
│ ├── pipelines/
│ │ ├── __init__.py
│ │ ├── pipeline1.py
│ │ └── pipeline2.py
│ └── tools/
│ ├── __init__.py
│ └── custom_tool.py
└── tests/
Customizing Your Pipeline Project¶
To customize your pipeline project, you can:
- Modify the crew files in
src/<project_name>/crews/
to define your agents and tasks for each crew. - Modify the pipeline files in
src/<project_name>/pipelines/
to define your pipeline structure. - Modify
src/<project_name>/main.py
to set up and run your pipelines. - Add your environment variables into the
.env
file.
Example 1: Defining a Two-Stage Sequential Pipeline¶
Here's an example of how to define a pipeline with sequential stages in src/<project_name>/pipelines/pipeline.py
:
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
@PipelineBase
class SequentialPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
self.write_x_crew
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Example 2: Defining a Two-Stage Pipeline with Parallel Execution¶
from crewai import Pipeline
from crewai.project import PipelineBase
from ..crews.research_crew.research_crew import ResearchCrew
from ..crews.write_x_crew.write_x_crew import WriteXCrew
from ..crews.write_linkedin_crew.write_linkedin_crew import WriteLinkedInCrew
@PipelineBase
class ParallelExecutionPipeline:
def __init__(self):
# Initialize crews
self.research_crew = ResearchCrew().crew()
self.write_x_crew = WriteXCrew().crew()
self.write_linkedin_crew = WriteLinkedInCrew().crew()
def create_pipeline(self):
return Pipeline(
stages=[
self.research_crew,
[self.write_x_crew, self.write_linkedin_crew] # Parallel execution
]
)
async def kickoff(self, inputs):
pipeline = self.create_pipeline()
results = await pipeline.kickoff(inputs)
return results
Annotations¶
The main annotation you'll use for pipelines is @PipelineBase
. This annotation is used to decorate your pipeline classes, similar to how @CrewBase
is used for crews.
Installing Dependencies¶
To install the dependencies for your project, use Poetry:
Running Your Pipeline Project¶
To run your pipeline project, use the following command:
This will initialize your pipeline and begin task execution as defined in your main.py
file.
Deploying Your Pipeline Project¶
Pipelines can be deployed in the same way as regular CrewAI projects. The easiest way is through CrewAI+, where you can deploy your pipeline in a few clicks.
Remember, when working with pipelines, you're orchestrating multiple crews to work together in a sequence or parallel fashion. This allows for more complex workflows and information processing tasks.
---page-end---
---link: https://docs.crewai.com/getting-started/Installing-CrewAI/
Installing crewAI¶
Welcome to crewAI! This guide will walk you through the installation process for crewAI and its dependencies. crewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently. Let's get started!
Installation¶
To install crewAI, you need to have Python >=3.10 and <=3.13 installed on your system:
---page-end---
---link: https://docs.crewai.com/getting-started/Start-a-New-CrewAI-Project-Template-Method/
Starting Your CrewAI Project¶
Welcome to the ultimate guide for starting a new CrewAI project. This document will walk you through the steps to create, customize, and run your CrewAI project, ensuring you have everything you need to get started.
Before we start, there are a couple of things to note:
- CrewAI is a Python package and requires Python >=3.10 and <=3.13 to run.
- The preferred way of setting up CrewAI is using the
crewai create crew
command. This will create a new project folder and install a skeleton template for you to work on.
Prerequisites¶
Before getting started with CrewAI, make sure that you have installed it via pip:
Creating a New Project¶
In this example, we will be using poetry as our virtual environment manager.
To create a new CrewAI project, run the following CLI command:
This command will create a new project folder with the following structure:
my_project/
├── .gitignore
├── pyproject.toml
├── README.md
└── src/
└── my_project/
├── __init__.py
├── main.py
├── crew.py
├── tools/
│ ├── custom_tool.py
│ └── __init__.py
└── config/
├── agents.yaml
└── tasks.yaml
You can now start developing your project by editing the files in the src/my_project
folder. The main.py
file is the entry point of your project, and the crew.py
file is where you define your agents and tasks.
Customizing Your Project¶
To customize your project, you can:
- Modify src/my_project/config/agents.yaml
to define your agents.
- Modify src/my_project/config/tasks.yaml
to define your tasks.
- Modify src/my_project/crew.py
to add your own logic, tools, and specific arguments.
- Modify src/my_project/main.py
to add custom inputs for your agents and tasks.
- Add your environment variables into the .env
file.
Example: Defining Agents and Tasks¶
agents.yaml¶
researcher:
role: >
Job Candidate Researcher
goal: >
Find potential candidates for the job
backstory: >
You are adept at finding the right candidates by exploring various online
resources. Your skill in identifying suitable candidates ensures the best
match for job positions.
tasks.yaml¶
research_candidates_task:
description: >
Conduct thorough research to find potential candidates for the specified job.
Utilize various online resources and databases to gather a comprehensive list of potential candidates.
Ensure that the candidates meet the job requirements provided.
Job Requirements:
{job_requirements}
expected_output: >
A list of 10 potential candidates with their contact information and brief profiles highlighting their suitability.
agent: researcher # THIS NEEDS TO MATCH THE AGENT NAME IN THE AGENTS.YAML FILE AND THE AGENT DEFINED IN THE crew.py FILE
context: # THESE NEED TO MATCH THE TASK NAMES DEFINED ABOVE AND THE TASKS.YAML FILE AND THE TASK DEFINED IN THE crew.py FILE
- researcher
Referencing Variables:¶
Your defined functions with the same name will be used. For example, you can reference the agent for specific tasks from tasks.yaml
file. Ensure your annotated agent and function name are the same; otherwise, your task won't recognize the reference properly.
Example References¶
agents.yaml
email_summarizer:
role: >
Email Summarizer
goal: >
Summarize emails into a concise and clear summary
backstory: >
You will create a 5 bullet point summary of the report
llm: mixtal_llm
tasks.yaml
email_summarizer_task:
description: >
Summarize the email into a 5 bullet point summary
expected_output: >
A 5 bullet point summary of the email
agent: email_summarizer
context:
- reporting_task
- research_task
Use the annotations to properly reference the agent and task in the crew.py
file.
Annotations include:¶
@agent
@task
@crew
@tool
@callback
@output_json
@output_pydantic
@cache_handler
crew.py
# ...
@agent
def email_summarizer(self) -> Agent:
return Agent(
config=self.agents_config["email_summarizer"],
)
@task
def email_summarizer_task(self) -> Task:
return Task(
config=self.tasks_config["email_summarizer_task"],
)
# ...
Installing Dependencies¶
To install the dependencies for your project, you can use Poetry. First, navigate to your project directory:
This will install the dependencies specified in the pyproject.toml
file.
Interpolating Variables¶
Any variable interpolated in your agents.yaml
and tasks.yaml
files like {variable}
will be replaced by the value of the variable in the main.py
file.
tasks.yaml¶
research_task:
description: >
Conduct a thorough research about the customer and competitors in the context
of {customer_domain}.
Make sure you find any interesting and relevant information given the
current year is 2024.
expected_output: >
A complete report on the customer and their customers and competitors,
including their demographics, preferences, market positioning and audience engagement.
main.py¶
# main.py
def run():
inputs = {
"customer_domain": "crewai.com"
}
MyProjectCrew(inputs).crew().kickoff(inputs=inputs)
Running Your Project¶
To run your project, use the following command:
This will initialize your crew of AI agents and begin task execution as defined in your configuration in the main.py
file.
Replay Tasks from Latest Crew Kickoff¶
CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run:
Replace <task_id>
with the ID of the task you want to replay.
Reset Crew Memory¶
If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:
This will clear the crew's memory, allowing for a fresh start.
Deploying Your Project¶
The easiest way to deploy your crew is through CrewAI+, where you can deploy your crew in a few clicks.
---page-end---
---link: https://docs.crewai.com/how-to/AgentOps-Observability/
Intro¶
Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing, how their agents are interacting with users, and how their agents use external tools and APIs. AgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.
AgentOps¶
AgentOps provides session replays, metrics, and monitoring for agents.
At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more. For more info, check out the AgentOps Repo.
Overview¶
AgentOps provides monitoring for agents in development and production. It provides a dashboard for tracking agent performance, session replays, and custom reporting.
Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time. This feature is useful for debugging and understanding how agents interact with users as well as other agents.
Features¶
- LLM Cost Management and Tracking: Track spend with foundation model providers.
- Replay Analytics: Watch step-by-step agent execution graphs.
- Recursive Thought Detection: Identify when agents fall into infinite loops.
- Custom Reporting: Create custom analytics on agent performance.
- Analytics Dashboard: Monitor high-level statistics about agents in development and production.
- Public Model Testing: Test your agents against benchmarks and leaderboards.
- Custom Tests: Run your agents against domain-specific tests.
- Time Travel Debugging: Restart your sessions from checkpoints.
- Compliance and Security: Create audit logs and detect potential threats such as profanity and PII leaks.
- Prompt Injection Detection: Identify potential code injection and secret leaks.
Using AgentOps¶
-
Create an API Key: Create a user API key here: Create API Key
-
Configure Your Environment: Add your API key to your environment variables
- Install AgentOps: Install AgentOps with: or
Before using Crew
in your script, include these lines:
This will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems, check out the AgentOps documentation or join the Discord.
Crew + AgentOps Examples¶
Further Information¶
To get started, create an AgentOps account.
For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo.
Extra links¶
🐦 Twitter • 📢 Discord • 🖇️ AgentOps Dashboard • 📙 Documentation
---page-end---
---link: https://docs.crewai.com/how-to/Coding-Agents/
Coding Agents
Introduction¶
crewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions.
Enabling Code Execution¶
To enable code execution for an agent, set the allow_code_execution
parameter to True
when creating the agent. Here's an example:
from crewai import Agent
coding_agent = Agent(
role="Senior Python Developer",
goal="Craft well-designed and thought-out code",
backstory="You are a senior Python developer with extensive experience in software architecture and best practices.",
allow_code_execution=True
)
Note: The allow_code_execution
parameter defaults to False
.
Important Considerations¶
-
Model Selection: It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution. These models have a better understanding of programming concepts and are more likely to generate correct and efficient code.
-
Error Handling: The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or provide alternative solutions. The
max_retry_limit
parameter, which defaults to 2, controls the maximum number of retries for a task. -
Dependencies: To use the code execution feature, you need to install the
crewai_tools
package. If not installed, the agent will log an info message: "Coding tools not available. Install crewai_tools."
Code Execution Process¶
When an agent with code execution enabled encounters a task requiring programming:
- The agent analyzes the task and determines that code execution is necessary.
- It formulates the Python code needed to solve the problem.
- The code is sent to the internal code execution tool (
CodeInterpreterTool
). - The tool executes the code in a controlled environment and returns the result.
- The agent interprets the result and incorporates it into its response or uses it for further problem-solving.
Example Usage¶
Here's a detailed example of creating an agent with code execution capabilities and using it in a task:
from crewai import Agent, Task, Crew
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants.",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Execute the crew
result = analysis_crew.kickoff()
print(result)
In this example, the coding_agent
can write and execute Python code to perform data analysis tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Conditional-Tasks/
Conditional Tasks
Introduction¶
Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks. This powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes.
Example Usage¶
from typing import List
from pydantic import BaseModel
from crewai import Agent, Crew
from crewai.tasks.conditional_task import ConditionalTask
from crewai.tasks.task_output import TaskOutput
from crewai.task import Task
from crewai_tools import SerperDevTool
# Define a condition function for the conditional task
# If false, the task will be skipped, if true, then execute the task.
def is_data_missing(output: TaskOutput) -> bool:
return len(output.pydantic.events) < 10 # this will skip this task
# Define the agents
data_fetcher_agent = Agent(
role="Data Fetcher",
goal="Fetch data online using Serper tool",
backstory="Backstory 1",
verbose=True,
tools=[SerperDevTool()]
)
data_processor_agent = Agent(
role="Data Processor",
goal="Process fetched data",
backstory="Backstory 2",
verbose=True
)
summary_generator_agent = Agent(
role="Summary Generator",
goal="Generate summary from fetched data",
backstory="Backstory 3",
verbose=True
)
class EventOutput(BaseModel):
events: List[str]
task1 = Task(
description="Fetch data about events in San Francisco using Serper tool",
expected_output="List of 10 things to do in SF this week",
agent=data_fetcher_agent,
output_pydantic=EventOutput,
)
conditional_task = ConditionalTask(
description="""
Check if data is missing. If we have less than 10 events,
fetch more events using Serper tool so that
we have a total of 10 events in SF this week..
""",
expected_output="List of 10 Things to do in SF this week",
condition=is_data_missing,
agent=data_processor_agent,
)
task3 = Task(
description="Generate summary of events in San Francisco from fetched data",
expected_output="A complete report on the customer and their customers and competitors, including their demographics, preferences, market positioning and audience engagement.",
agent=summary_generator_agent,
)
# Create a crew with the tasks
crew = Crew(
agents=[data_fetcher_agent, data_processor_agent, summary_generator_agent],
tasks=[task1, conditional_task, task3],
verbose=True,
planning=True
)
# Run the crew
result = crew.kickoff()
print("results", result)
---page-end---
---link: https://docs.crewai.com/how-to/Create-Custom-Tools/
Create Custom Tools
Creating and Utilizing Tools in crewAI¶
This guide provides detailed instructions on creating custom tools for the crewAI framework and how to efficiently manage and utilize these tools, incorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools, enabling agents to perform a wide range of actions.
Prerequisites¶
Before creating your own tools, ensure you have the crewAI extra tools package installed:
Subclassing BaseTool
¶
To create a personalized tool, inherit from BaseTool
and define the necessary attributes and the _run
method.
from crewai_tools import BaseTool
class MyCustomTool(BaseTool):
name: str = "Name of my tool"
description: str = "What this tool does. It's vital for effective utilization."
def _run(self, argument: str) -> str:
# Your tool's logic here
return "Tool's result"
Using the tool
Decorator¶
Alternatively, you can use the tool decorator @tool
. This approach allows you to define the tool's attributes and functionality directly within a function, offering a concise and efficient way to create specialized tools tailored to your needs.
from crewai_tools import tool
@tool("Tool Name")
def my_simple_tool(question: str) -> str:
"""Tool description for clarity."""
# Tool logic here
return "Tool output"
Defining a Cache Function for the Tool¶
To optimize tool performance with caching, define custom caching strategies using the cache_function
attribute.
@tool("Tool with Caching")
def cached_tool(argument: str) -> str:
"""Tool functionality description."""
return "Cacheable result"
def my_cache_strategy(arguments: dict, result: str) -> bool:
# Define custom caching logic
return True if some_condition else False
cached_tool.cache_function = my_cache_strategy
By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes, you can leverage the full capabilities of the crewAI framework, enhancing both the development experience and the efficiency of your AI agents.
---page-end---
---link: https://docs.crewai.com/how-to/Customize-Prompts/
Initial Support to Bring Your Own Prompts in CrewAI¶
CrewAI now supports the ability to bring your own prompts, enabling extensive customization and internationalization. This feature allows users to tailor the inner workings of their agents to better suit specific needs, including support for multiple languages.
Internationalization and Customization Support¶
Custom Prompts with prompt_file
¶
The prompt_file
attribute facilitates full customization of the agent prompts, enhancing the global usability of CrewAI. Users can specify their prompt templates, ensuring that the agents communicate in a manner that aligns with specific project requirements or language preferences.
Example of a Custom Prompt File¶
The custom prompts can be defined in a JSON file, similar to the example provided here.
Supported Languages¶
CrewAI's custom prompt support includes internationalization, allowing prompts to be written in different languages. This is particularly useful for global teams or projects that require multilingual support.
How to Use the prompt_file
Attribute¶
To utilize the prompt_file
attribute, include it in your crew definition. Below is an example demonstrating how to set up agents and tasks with custom prompts.
Example¶
import os
from crewai import Agent, Task, Crew
# Define your agents
researcher = Agent(
role="Researcher",
goal="Make the best research and analysis on content about AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Write the best content about AI and AI agents.",
backstory="You're a senior writer, specialized in technology, software engineering, AI and startups. You work as a freelancer and are now working on writing content for a new customer.",
allow_delegation=False,
)
# Define your tasks
tasks = [
Task(
description="Say Hi",
expected_output="The word: Hi",
agent=researcher,
)
]
# Instantiate your crew with custom prompts
crew = Crew(
agents=[researcher],
tasks=tasks,
prompt_file="prompt.json", # Path to your custom prompt file
)
# Get your crew to work!
crew.kickoff()
Advanced Customization Features¶
language
Attribute¶
In addition to prompt_file
, the language
attribute can be used to specify the language for the agent's prompts. This ensures that the prompts are generated in the desired language, further enhancing the internationalization capabilities of CrewAI.
Creating Custom Prompt Files¶
Custom prompt files should be structured in JSON format and include all necessary prompt templates. Below is a simplified example of a prompt JSON file:
{
"system": "You are a system template.",
"prompt": "Here is your prompt template.",
"response": "Here is your response template."
}
Benefits of Custom Prompts¶
- Enhanced Flexibility: Tailor agent communication to specific project needs.
- Improved Usability: Supports multiple languages, making it suitable for global projects.
- Consistency: Ensures uniform prompt structures across different agents and tasks.
By incorporating these updates, CrewAI provides users with the ability to fully customize and internationalize their agent prompts, making the platform more versatile and user-friendly.
---page-end---
---link: https://docs.crewai.com/how-to/Customizing-Agents/
Customizing Agents
Customizable Attributes¶
Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize.
Key Attributes for Customization¶
- Role: Specifies the agent's job within the crew, such as 'Analyst' or 'Customer Service Rep'.
- Goal: Defines what the agent aims to achieve, in alignment with its role and the overarching objectives of the crew.
- Backstory: Provides depth to the agent's persona, enriching its motivations and engagements within the crew.
- Tools (Optional): Represents the capabilities or methods the agent uses to perform tasks, from simple functions to intricate integrations.
- Cache (Optional): Determines whether the agent should use a cache for tool usage.
- Max RPM: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed. - Verbose (Optional): Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- Allow Delegation (Optional):
allow_delegation
controls whether the agent is allowed to delegate tasks to other agents. This attribute is now set toFalse
by default. - Max Iter (Optional): The
max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. - Max Execution Time (Optional):
max_execution_time
Sets the maximum execution time for an agent to complete a task. - System Template (Optional):
system_template
defines the system format for the agent. - Prompt Template (Optional):
prompt_template
defines the prompt format for the agent. - Response Template (Optional):
response_template
defines the response format for the agent. - Use System Prompt (Optional):
use_system_prompt
controls whether the agent will use a system prompt for task execution. Agents can now operate without system prompts. - Respect Context Window:
respect_context_window
renames the sliding context window attribute and enables it by default to maintain context size. - Max Retry Limit:
max_retry_limit
defines the maximum number of retries for an agent to execute a task when an error occurs.
Advanced Customization Options¶
Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent's behavior and capabilities significantly.
Language Model Customization¶
Agents can be customized with specific language models (llm
) and function-calling language models (function_calling_llm
), offering advanced control over their processing and decision-making abilities. It's important to note that setting the function_calling_llm
allows for overriding the default crew function-calling language model, providing a greater degree of customization.
Performance and Debugging Settings¶
Adjusting an agent's performance and monitoring its operations are crucial for efficient task execution.
Verbose Mode and RPM Limit¶
- Verbose Mode: Enables detailed logging of an agent's actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
- RPM Limit: Sets the maximum number of requests per minute (
max_rpm
). This attribute is optional and can be set toNone
for no limit, allowing for unlimited queries to external services if needed.
Maximum Iterations for Task Execution¶
The max_iter
attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions. The default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer.
Customizing Agents and Tools¶
Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent's functionality, enabling them to perform specialized tasks. The tools
attribute should be an array of tools the agent can utilize, and it's initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements.
Example: Assigning Tools to an Agent¶
import os
from crewai import Agent
from crewai_tools import SerperDevTool
# Set API keys for tool initialization
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key"
# Initialize a search tool
search_tool = SerperDevTool()
# Initialize the agent with advanced options
agent = Agent(
role='Research Analyst',
goal='Provide up-to-date market analysis',
backstory='An expert analyst with a keen eye for market trends.',
tools=[search_tool],
memory=True, # Enable memory
verbose=True,
max_rpm=None, # No limit on requests per minute
max_iter=25, # Default value for maximum iterations
)
Delegation and Autonomy¶
Controlling an agent's ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default, the allow_delegation
attribute is now set to False
, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and efficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements.
Example: Disabling Delegation for an Agent¶
agent = Agent(
role='Content Writer',
goal='Write engaging content on market trends',
backstory='A seasoned writer with expertise in market analysis.',
allow_delegation=True # Enabling delegation
)
Conclusion¶
Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences, equips a nuanced and capable AI team ready for complex challenges.
---page-end---
---link: https://docs.crewai.com/how-to/Force-Tool-Ouput-as-Result/
Forcing Tool Output as Result
Introduction¶
In CrewAI, you can force the output of a tool as the result of an agent's task. This feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution.
Forcing Tool Output as Result¶
To force the tool output as the result of an agent's task, you need to set the result_as_answer
parameter to True
when adding a tool to the agent. This parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.
Here's an example of how to force the tool output as the result of an agent's task:
# ...
from crewai.agent import Agent
from my_tool import MyCustomTool
# Create a coding agent with the custom tool
coding_agent = Agent(
role="Data Scientist",
goal="Produce amazing reports on AI",
backstory="You work with data and AI",
tools=[MyCustomTool(result_as_answer=True)],
)
# Assuming the tool's execution and result population occurs within the system
task_result = coding_agent.execute_task(task)
Workflow in Action¶
- Task Execution: The agent executes the task using the tool provided.
- Tool Output: The tool generates the output, which is captured as the task result.
- Agent Interaction: The agent may reflect and take learnings from the tool but the output is not modified.
- Result Return: The tool output is returned as the task result without any modifications.
---page-end---
---link: https://docs.crewai.com/how-to/Hierarchical/
Using Hierarchical Process
Introduction¶
The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution. This systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.
Complexity and Efficiency
The hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.
Hierarchical Process Overview¶
By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management, where a 'manager' agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either automatically created by CrewAI or explicitly set by the user.
Key Features¶
- Task Delegation: A manager agent allocates tasks among crew members based on their roles and capabilities.
- Result Validation: The manager evaluates outcomes to ensure they meet the required standards.
- Efficient Workflow: Emulates corporate structures, providing an organized approach to task management.
- System Prompt Handling: Optionally specify whether the system should use predefined prompts.
- Stop Words Control: Optionally specify whether stop words should be used, supporting various models including the o1 models.
- Context Window Respect: Prioritize important context by enabling respect of the context window, which is now the default behavior.
- Delegation Control: Delegation is now disabled by default to give users explicit control.
- Max Requests Per Minute: Configurable option to set the maximum number of requests per minute.
- Max Iterations: Limit the maximum number of iterations for obtaining a final answer.
Implementing the Hierarchical Process¶
To utilize the hierarchical process, it's essential to explicitly set the process attribute to Process.hierarchical
, as the default behavior is Process.sequential
. Define a crew with a designated manager and establish a clear chain of command.
Tools and Agent Assignment
Assign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager's guidance. Tools can also be specified at the task level for precise control over tool availability during task execution.
Manager LLM Requirement
Configuring the manager_llm
parameter is crucial for the hierarchical process. The system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.
from langchain_openai import ChatOpenAI
from crewai import Crew, Process, Agent
# Agents are defined with attributes for backstory, cache, and verbose mode
researcher = Agent(
role='Researcher',
goal='Conduct in-depth analysis',
backstory='Experienced data analyst with a knack for uncovering hidden trends.',
cache=True,
verbose=False,
# tools=[] # This can be optionally specified; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
writer = Agent(
role='Writer',
goal='Create engaging content',
backstory='Creative writer passionate about storytelling in technical domains.',
cache=True,
verbose=False,
# tools=[] # Optionally specify tools; defaults to an empty list
use_system_prompt=True, # Enable or disable system prompts for this agent
max_rpm=30, # Limit on the number of requests per minute
max_iter=5 # Maximum number of iterations for a final answer
)
# Establishing the crew with a hierarchical process and additional configurations
project_crew = Crew(
tasks=[...], # Tasks to be delegated and executed under the manager's supervision
agents=[researcher, writer],
manager_llm=ChatOpenAI(temperature=0, model="gpt-4"), # Mandatory if manager_agent is not set
process=Process.hierarchical, # Specifies the hierarchical management approach
respect_context_window=True, # Enable respect of the context window for tasks
memory=True, # Enable memory usage for enhanced task execution
manager_agent=None, # Optional: explicitly set a specific agent as manager instead of the manager_llm
planning=True, # Enable planning feature for pre-execution strategy
)
Workflow in Action¶
- Task Assignment: The manager assigns tasks strategically, considering each agent's capabilities and available tools.
- Execution and Review: Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.
- Sequential Task Progression: Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager's oversight.
Conclusion¶
Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system's capabilities, facilitates an organized and efficient approach to project management. Utilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.
---page-end---
---link: https://docs.crewai.com/how-to/Human-Input-on-Execution/
Human Input in Agent Execution¶
Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary. This feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively.
Using Human Input with CrewAI¶
To integrate human input into agent execution, set the human_input
flag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer. This input can provide extra context, clarify ambiguities, or validate the agent's output.
Example:¶
import os
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"
# Loading Tools
search_tool = SerperDevTool()
# Define your agents with roles, goals, tools, and additional attributes
researcher = Agent(
role='Senior Research Analyst',
goal='Uncover cutting-edge developments in AI and data science',
backstory=(
"You are a Senior Research Analyst at a leading tech think tank. "
"Your expertise lies in identifying emerging trends and technologies in AI and data science. "
"You have a knack for dissecting complex data and presenting actionable insights."
),
verbose=True,
allow_delegation=False,
tools=[search_tool]
)
writer = Agent(
role='Tech Content Strategist',
goal='Craft compelling content on tech advancements',
backstory=(
"You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. "
"With a deep understanding of the tech industry, you transform complex concepts into compelling narratives."
),
verbose=True,
allow_delegation=True,
tools=[search_tool],
cache=False, # Disable cache for this agent
)
# Create tasks for your agents
task1 = Task(
description=(
"Conduct a comprehensive analysis of the latest advancements in AI in 2024. "
"Identify key trends, breakthrough technologies, and potential industry impacts. "
"Compile your findings in a detailed report. "
"Make sure to check with a human if the draft is good before finalizing your answer."
),
expected_output='A comprehensive full report on the latest AI advancements in 2024, leave nothing out',
agent=researcher,
human_input=True
)
task2 = Task(
description=(
"Using the insights from the researcher\'s report, develop an engaging blog post that highlights the most significant AI advancements. "
"Your post should be informative yet accessible, catering to a tech-savvy audience. "
"Aim for a narrative that captures the essence of these breakthroughs and their implications for the future."
),
expected_output='A compelling 3 paragraphs blog post formatted as markdown about the latest AI advancements in 2024',
agent=writer,
human_input=True
)
# Instantiate your crew with a sequential process
crew = Crew(
agents=[researcher, writer],
tasks=[task1, task2],
verbose=True,
memory=True,
planning=True # Enable planning feature for the crew
)
# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-async/
Kickoff a Crew Asynchronously
Introduction¶
CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner. This feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing.
Asynchronous Crew Execution¶
To kickoff a crew asynchronously, use the kickoff_async()
method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks.
Method Signature¶
Parameters¶
inputs
(dict): A dictionary containing the input data required for the tasks.
Returns¶
CrewOutput
: An object representing the result of the crew execution.
Potential Use Cases¶
-
Parallel Content Generation: Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.
-
Concurrent Market Research Tasks: Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.
-
Independent Travel Planning Modules: Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.
Example: Single Asynchronous Crew Execution¶
Here's an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task]
)
# Async function to kickoff the crew asynchronously
async def async_crew_execution():
result = await analysis_crew.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
print("Crew Result:", result)
# Run the async function
asyncio.run(async_crew_execution())
Example: Multiple Asynchronous Crew Executions¶
In this example, we'll show how to kickoff multiple crews asynchronously and wait for all of them to complete using asyncio.gather()
:
import asyncio
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create tasks that require code execution
task_1 = Task(
description="Analyze the first dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
task_2 = Task(
description="Analyze the second dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent
)
# Create two crews and add tasks
crew_1 = Crew(agents=[coding_agent], tasks=[task_1])
crew_2 = Crew(agents=[coding_agent], tasks=[task_2])
# Async function to kickoff multiple crews asynchronously and wait for all to finish
async def async_multiple_crews():
result_1 = crew_1.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
result_2 = crew_2.kickoff_async(inputs={"ages": [20, 22, 24, 28, 30]})
# Wait for both crews to finish
results = await asyncio.gather(result_1, result_2)
for i, result in enumerate(results, 1):
print(f"Crew {i} Result:", result)
# Run the async function
asyncio.run(async_multiple_crews())
---page-end---
---link: https://docs.crewai.com/how-to/Kickoff-for-each/
Kickoff a Crew for a List
Introduction¶
CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list. This feature is particularly useful when you need to perform the same set of tasks for multiple items.
Kicking Off a Crew for Each Item¶
To kickoff a crew for each item in a list, use the kickoff_for_each()
method. This method executes the crew for each item in the list, allowing you to process multiple items efficiently.
Here's an example of how to kickoff a crew for each item in a list:
from crewai import Crew, Agent, Task
# Create an agent with code execution enabled
coding_agent = Agent(
role="Python Data Analyst",
goal="Analyze data and provide insights using Python",
backstory="You are an experienced data analyst with strong Python skills.",
allow_code_execution=True
)
# Create a task that requires code execution
data_analysis_task = Task(
description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
agent=coding_agent,
expected_output="The average age calculated from the dataset"
)
# Create a crew and add the task
analysis_crew = Crew(
agents=[coding_agent],
tasks=[data_analysis_task],
verbose=True,
memory=False,
respect_context_window=True # enable by default
)
datasets = [
{ "ages": [25, 30, 35, 40, 45] },
{ "ages": [20, 25, 30, 35, 40] },
{ "ages": [30, 35, 40, 45, 50] }
]
# Execute the crew
result = analysis_crew.kickoff_for_each(inputs=datasets)
---page-end---
---link: https://docs.crewai.com/how-to/LLM-Connections/
Connecting to any LLM
Connect CrewAI to LLMs¶
CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface.
Default LLM
By default, CrewAI uses the gpt-4o-mini
model. This is determined by the OPENAI_MODEL_NAME
environment variable, which defaults to "gpt-4o-mini" if not set. You can easily configure your agents to use a different model or provider as described in this guide.
Supported Providers¶
LiteLLM supports a wide range of providers, including but not limited to:
- OpenAI
- Anthropic
- Google (Vertex AI, Gemini)
- Azure OpenAI
- AWS (Bedrock, SageMaker)
- Cohere
- Hugging Face
- Ollama
- Mistral AI
- Replicate
- Together AI
- AI21
- Cloudflare Workers AI
- DeepInfra
- Groq
- And many more!
For a complete and up-to-date list of supported providers, please refer to the LiteLLM Providers documentation.
Changing the LLM¶
To use a different LLM with your CrewAI agents, you have several options:
1. Using a String Identifier¶
Pass the model name as a string when initializing the agent:
from crewai import Agent
# Using OpenAI's GPT-4
openai_agent = Agent(
role='OpenAI Expert',
goal='Provide insights using GPT-4',
backstory="An AI assistant powered by OpenAI's latest model.",
llm='gpt-4'
)
# Using Anthropic's Claude
claude_agent = Agent(
role='Anthropic Expert',
goal='Analyze data using Claude',
backstory="An AI assistant leveraging Anthropic's language model.",
llm='claude-2'
)
2. Using the LLM Class¶
For more detailed configuration, use the LLM class:
from crewai import Agent, LLM
llm = LLM(
model="gpt-4",
temperature=0.7,
base_url="https://api.openai.com/v1",
api_key="your-api-key-here"
)
agent = Agent(
role='Customized LLM Expert',
goal='Provide tailored responses',
backstory="An AI assistant with custom LLM settings.",
llm=llm
)
Configuration Options¶
When configuring an LLM for your agent, you have access to a wide range of parameters:
Parameter | Type | Description |
---|---|---|
model |
str | The name of the model to use (e.g., "gpt-4", "claude-2") |
temperature |
float | Controls randomness in output (0.0 to 1.0) |
max_tokens |
int | Maximum number of tokens to generate |
top_p |
float | Controls diversity of output (0.0 to 1.0) |
frequency_penalty |
float | Penalizes new tokens based on their frequency in the text so far |
presence_penalty |
float | Penalizes new tokens based on their presence in the text so far |
stop |
str, List[str] | Sequence(s) to stop generation |
base_url |
str | The base URL for the API endpoint |
api_key |
str | Your API key for authentication |
For a complete list of parameters and their descriptions, refer to the LLM class documentation.
Connecting to OpenAI-Compatible LLMs¶
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
Using Environment Variables¶
import os
os.environ["OPENAI_API_KEY"] = "your-api-key"
os.environ["OPENAI_API_BASE"] = "https://api.your-provider.com/v1"
os.environ["OPENAI_MODEL_NAME"] = "your-model-name"
Using LLM Class Attributes¶
llm = LLM(
model="custom-model-name",
api_key="your-api-key",
base_url="https://api.your-provider.com/v1"
)
agent = Agent(llm=llm, ...)
Using Local Models with Ollama¶
For local models like those provided by Ollama:
- Download and install Ollama
- Pull the desired model (e.g.,
ollama pull llama2
) - Configure your agent:
agent = Agent(
role='Local AI Expert',
goal='Process information using a local model',
backstory="An AI assistant running on local hardware.",
llm=LLM(model="ollama/llama2", base_url="http://localhost:11434")
)
Changing the Base API URL¶
You can change the base API URL for any LLM provider by setting the base_url
parameter:
llm = LLM(
model="custom-model-name",
base_url="https://api.your-provider.com/v1",
api_key="your-api-key"
)
agent = Agent(llm=llm, ...)
This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
Conclusion¶
By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult the LiteLLM documentation for the most up-to-date information on supported models and configuration options.
---page-end---
---link: https://docs.crewai.com/how-to/Langtrace-Observability/
Langtrace Overview¶
Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases. While not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents. This integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.
Setup Instructions¶
- Sign up for Langtrace by visiting https://langtrace.ai/signup.
- Create a project, set the project type to crewAI & generate an API key.
- Install Langtrace in your CrewAI project using the following commands:
Using Langtrace with CrewAI¶
To integrate Langtrace with your CrewAI project, follow these steps:
- Import and initialize Langtrace at the beginning of your script, before any CrewAI imports:
from langtrace_python_sdk import langtrace
langtrace.init(api_key='<LANGTRACE_API_KEY>')
# Now import CrewAI modules
from crewai import Agent, Task, Crew
Features and Their Application to CrewAI¶
-
LLM Token and Cost Tracking
-
Monitor the token usage and associated costs for each CrewAI agent interaction.
-
Trace Graph for Execution Steps
-
Visualize the execution flow of your CrewAI tasks, including latency and logs.
-
Useful for identifying bottlenecks in your agent workflows.
-
Dataset Curation with Manual Annotation
-
Create datasets from your CrewAI task outputs for future training or evaluation.
-
Prompt Versioning and Management
-
Keep track of different versions of prompts used in your CrewAI agents.
-
Useful for A/B testing and optimizing agent performance.
-
Prompt Playground with Model Comparisons
-
Test and compare different prompts and models for your CrewAI agents before deployment.
-
Testing and Evaluations
- Set up automated tests for your CrewAI agents and tasks.
---page-end---
---link: https://docs.crewai.com/how-to/Replay-tasks-from-latest-Crew-Kickoff/
Replay from a specific task from a kickoff
Introduction¶
CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you've finished a kickoff and may want to retry certain tasks or don't need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.
Note:¶
You must run crew.kickoff()
before you can replay a task. Currently, only the latest kickoff is supported, so if you use kickoff_for_each
, it will only allow you to replay from the most recent crew run.
Here's an example of how to replay from a task:
Replaying from Specific Task Using the CLI¶
To use the replay feature, follow these steps:
- Open your terminal or command prompt.
- Navigate to the directory where your CrewAI project is located.
- Run the following commands:
To view the latest kickoff task_ids use:
Once you have your task_id
to replay, use:
Note: Ensure crewai
is installed and configured correctly in your development environment.
Replaying from a Task Programmatically¶
To replay from a task programmatically, use the following steps:
- Specify the
task_id
and input parameters for the replay process. - Execute the replay command within a try-except block to handle potential errors.
def replay():
"""
Replay the crew execution from a specific task.
"""
task_id = '<task_id>'
inputs = {"topic": "CrewAI Training"} # This is optional; you can pass in the inputs you want to replay; otherwise, it uses the previous kickoff's inputs.
try:
YourCrewName_Crew().crew().replay(task_id=task_id, inputs=inputs)
except subprocess.CalledProcessError as e:
raise Exception(f"An error occurred while replaying the crew: {e}")
except Exception as e:
raise Exception(f"An unexpected error occurred: {e}")
Conclusion¶
With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust. Ensure you follow the commands and steps precisely to make the most of these features.
---page-end---
---link: https://docs.crewai.com/how-to/Sequential/
Using Sequential Process
Introduction¶
CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes. This guide outlines how to effectively implement these processes to ensure efficient task execution and project completion.
Sequential Process Overview¶
The sequential process ensures tasks are executed one after the other, following a linear progression. This approach is ideal for projects requiring tasks to be completed in a specific order.
Key Features¶
- Linear Task Flow: Ensures orderly progression by handling tasks in a predetermined sequence.
- Simplicity: Best suited for projects with clear, step-by-step tasks.
- Easy Monitoring: Facilitates easy tracking of task completion and project progress.
Implementing the Sequential Process¶
To use the sequential process, assemble your crew and define tasks in the order they need to be executed.
from crewai import Crew, Process, Agent, Task, TaskOutput, CrewOutput
# Define your agents
researcher = Agent(
role='Researcher',
goal='Conduct foundational research',
backstory='An experienced researcher with a passion for uncovering insights'
)
analyst = Agent(
role='Data Analyst',
goal='Analyze research findings',
backstory='A meticulous analyst with a knack for uncovering patterns'
)
writer = Agent(
role='Writer',
goal='Draft the final report',
backstory='A skilled writer with a talent for crafting compelling narratives'
)
# Define your tasks
research_task = Task(description='Gather relevant data...', agent=researcher, expected_output='Raw Data')
analysis_task = Task(description='Analyze the data...', agent=analyst, expected_output='Data Insights')
writing_task = Task(description='Compose the report...', agent=writer, expected_output='Final Report')
# Form the crew with a sequential process
report_crew = Crew(
agents=[researcher, analyst, writer],
tasks=[research_task, analysis_task, writing_task],
process=Process.sequential
)
# Execute the crew
result = report_crew.kickoff()
# Accessing the type-safe output
task_output: TaskOutput = result.tasks[0].output
crew_output: CrewOutput = result.output
Note:¶
Each task in a sequential process must have an agent assigned. Ensure that every Task
includes an agent
parameter.
Workflow in Action¶
- Initial Task: In a sequential process, the first agent completes their task and signals completion.
- Subsequent Tasks: Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.
- Completion: The process concludes once the final task is executed, leading to project completion.
Advanced Features¶
Task Delegation¶
In sequential processes, if an agent has allow_delegation
set to True
, they can delegate tasks to other agents in the crew. This feature is automatically set up when there are multiple agents in the crew.
Asynchronous Execution¶
Tasks can be executed asynchronously, allowing for parallel processing when appropriate. To create an asynchronous task, set async_execution=True
when defining the task.
Memory and Caching¶
CrewAI supports both memory and caching features:
- Memory: Enable by setting memory=True
when creating the Crew. This allows agents to retain information across tasks.
- Caching: By default, caching is enabled. Set cache=False
to disable it.
Callbacks¶
You can set callbacks at both the task and step level:
- task_callback
: Executed after each task completion.
- step_callback
: Executed after each step in an agent's execution.
Usage Metrics¶
CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution.
Best Practices for Sequential Processes¶
- Order Matters: Arrange tasks in a logical sequence where each task builds upon the previous one.
- Clear Task Descriptions: Provide detailed descriptions for each task to guide the agents effectively.
- Appropriate Agent Selection: Match agents' skills and roles to the requirements of each task.
- Use Context: Leverage the context from previous tasks to inform subsequent ones.
This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations. The content is kept simple and direct to ensure easy understanding.
---page-end---
---link: https://docs.crewai.com/how-to/Your-Own-Manager-Agent/
Setting a Specific Agent as Manager in CrewAI¶
CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks. This feature enables the customization of the managerial role to better fit your project's requirements.
Using the manager_agent
Attribute¶
Custom Manager Agent¶
The manager_agent
attribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard.
Example¶
import os
from crewai import Agent, Task, Crew, Process
# Define your agents
researcher = Agent(
role="Researcher",
goal="Conduct thorough research and analysis on AI and AI agents",
backstory="You're an expert researcher, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently researching for a new client.",
allow_delegation=False,
)
writer = Agent(
role="Senior Writer",
goal="Create compelling content about AI and AI agents",
backstory="You're a senior writer, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently writing content for a new client.",
allow_delegation=False,
)
# Define your task
task = Task(
description="Generate a list of 5 interesting ideas for an article, then write one captivating paragraph for each idea that showcases the potential of a full article on this topic. Return the list of ideas with their paragraphs and your notes.",
expected_output="5 bullet points, each with a paragraph and accompanying notes.",
)
# Define the manager agent
manager = Agent(
role="Project Manager",
goal="Efficiently manage the crew and ensure high-quality task completion",
backstory="You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success. Your role is to coordinate the efforts of the crew members, ensuring that each task is completed on time and to the highest standard.",
allow_delegation=True,
)
# Instantiate your crew with a custom manager
crew = Crew(
agents=[researcher, writer],
tasks=[task],
manager_agent=manager,
process=Process.hierarchical,
)
# Start the crew's work
result = crew.kickoff()
Benefits of a Custom Manager Agent¶
- Enhanced Control: Tailor the management approach to fit the specific needs of your project.
- Improved Coordination: Ensure efficient task coordination and management by an experienced agent.
- Customizable Management: Define managerial roles and responsibilities that align with your project's goals.
Setting a Manager LLM¶
If you're using the hierarchical process and don't want to set a custom manager agent, you can specify the language model for the manager:
from langchain_openai import ChatOpenAI
manager_llm = ChatOpenAI(model_name="gpt-4")
crew = Crew(
agents=[researcher, writer],
tasks=[task],
process=Process.hierarchical,
manager_llm=manager_llm
)
Note: Either manager_agent
or manager_llm
must be set when using the hierarchical process.
---page-end---
---link: https://docs.crewai.com/telemetry/Telemetry/
Telemetry
Telemetry¶
Personal Information
By default, we collect no data that would be considered personal information under GDPR and other privacy regulations.
We do collect Tool's names and Agent's roles, so be advised not to include any personal information in the tool's names or the Agent's roles.
Because no personal information is collected, it's not necessary to worry about data residency.
When share_crew
is enabled, additional data is collected which may contain personal information if included by the user. Users should exercise caution when enabling this feature to ensure compliance with privacy regulations.
CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library. Our focus is on improving and developing the features, integrations, and tools most utilized by our users.
It's pivotal to understand that by default, NO personal data is collected concerning prompts, task descriptions, agents' backstories or goals, usage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.
When the share_crew
feature is enabled, detailed data including task descriptions, agents' backstories or goals, and other specific attributes are collected to provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks. Users should carefully consider the content of their crews and tasks before enabling share_crew
. Users can disable telemetry by setting the environment variable OTEL_SDK_DISABLED to true.
Data Explanation:¶
Defaulted | Data | Reason and Specifics |
---|---|---|
Yes | CrewAI and Python Version | Tracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal data. |
Yes | Crew Metadata | Includes: randomly generated key and ID, process type (e.g., 'sequential', 'parallel'), boolean flag for memory usage (true/false), count of tasks, count of agents. All non-personal. |
Yes | Agent Data | Includes: randomly generated key and ID, role name (should not include personal info), boolean settings (verbose, delegation enabled, code execution allowed), max iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of tool names (should not include personal info). No personal data. |
Yes | Task Metadata | Includes: randomly generated key and ID, boolean execution settings (async_execution, human_input), associated agent's role and key, list of tool names. All non-personal. |
Yes | Tool Usage Statistics | Includes: tool name (should not include personal info), number of usage attempts (integer), LLM attributes used. No personal data. |
Yes | Test Execution Data | Includes: crew's randomly generated key and ID, number of iterations, model name used, quality score (float), execution time (in seconds). All non-personal. |
Yes | Task Lifecycle Data | Includes: creation and execution start/end times, crew and task identifiers. Stored as spans with timestamps. No personal data. |
Yes | LLM Attributes | Includes: name, model_name, model, top_k, temperature, and class name of the LLM. All technical, non-personal data. |
Yes | Crew Deployment attempt using crewAI CLI | Includes: The fact a deploy is being made and crew id, and if it's trying to pull logs, no other data. |
No | Agent's Expanded Data | Includes: goal description, backstory text, i18n prompt file identifier. Users should ensure no personal info is included in text fields. |
No | Detailed Task Information | Includes: task description, expected output description, context references. Users should ensure no personal info is included in these fields. |
No | Environment Information | Includes: platform, release, system, version, and CPU count. Example: 'Windows 10', 'x86_64'. No personal data. |
No | Crew and Task Inputs and Outputs | Includes: input parameters and output results as non-identifiable data. Users should ensure no personal info is included. |
No | Comprehensive Crew Execution Data | Includes: detailed logs of crew operations, all agents and tasks data, final output. All non-personal and technical in nature. |
Note: "No" in the "Defaulted" column indicates that this data is only collected when share_crew
is set to true
.
Opt-In Further Telemetry Sharing¶
Users can choose to share their complete telemetry data by enabling the share_crew
attribute to True
in their crew configurations. Enabling share_crew
results in the collection of detailed crew and task execution data, including goal
, backstory
, context
, and output
of tasks. This enables a deeper insight into usage patterns.
Potential Personal Information
If you enable share_crew
, the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs. Users should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.
---page-end---
---link: https://docs.crewai.com/tools/BrowserbaseLoadTool/
BrowserbaseLoadTool¶
Description¶
Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.
Power your AI data retrievals with: - Serverless Infrastructure providing reliable browsers to extract data from complex UIs - Stealth Mode with included fingerprinting tactics and automatic captcha solving - Session Debugger to inspect your Browser Session with networks timeline and logs - Live Debug to quickly debug your automation
Installation¶
- Get an API key and Project ID from browserbase.com and set it in environment variables (
BROWSERBASE_API_KEY
,BROWSERBASE_PROJECT_ID
). - Install the Browserbase SDK along with
crewai[tools]
package:
Example¶
Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:
Arguments¶
api_key
Optional. Browserbase API key. Default isBROWSERBASE_API_KEY
env variable.project_id
Optional. Browserbase Project ID. Default isBROWSERBASE_PROJECT_ID
env variable.text_content
Retrieve only text content. Default isFalse
.session_id
Optional. Provide an existing Session ID.proxy
Optional. Enable/Disable Proxies."
---page-end---
---link: https://docs.crewai.com/tools/CSVSearchTool/
CSVSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file's content. It allows users to semantically search for queries in the content of a specified CSV file. This feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with "Search" in their name, including CSVSearchTool, are RAG tools designed for searching different sources of data.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import CSVSearchTool
# Initialize the tool with a specific CSV file. This setup allows the agent to only search the given CSV file.
tool = CSVSearchTool(csv='path/to/your/csvfile.csv')
# OR
# Initialize the tool without a specific CSV file. Agent will need to provide the CSV path at runtime.
tool = CSVSearchTool()
Arguments¶
csv
: The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CSVSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeDocsSearchTool/
CodeDocsSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation. It enables users to efficiently find specific information or topics within code documentation. By providing a docs_url
during initialization, the tool narrows down the search to that particular documentation site. Alternatively, without a specific docs_url
, it searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs.
Installation¶
To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:
Example¶
Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:
from crewai_tools import CodeDocsSearchTool
# To search any code documentation content if the URL is known or discovered during its execution:
tool = CodeDocsSearchTool()
# OR
# To specifically focus your search on a given documentation site by providing its URL:
tool = CodeDocsSearchTool(docs_url='https://docs.example.com/reference')
Arguments¶
docs_url
: Optional. Specifies the URL of the code documentation to be searched. Providing this during the tool's initialization focuses the search on the specified documentation content.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = CodeDocsSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/CodeInterpreterTool/
CodeInterpreterTool¶
Description¶
This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.
This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem, obtain the results, and utilize that information to inform subsequent decisions and actions.
Requirements¶
- Docker
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the code must be generated by the Agent itself. The code must be a Python3 code. And it will take some time for the first time to run because it needs to build the Docker image.
from crewai import Agent
from crewai_tools import CodeInterpreterTool
Agent(
...
tools=[CodeInterpreterTool()],
)
We also provide a simple way to use it directly from the Agent.
---page-end---
---link: https://docs.crewai.com/tools/ComposioTool/
ComposioTool Documentation¶
Description¶
This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the composio SDK.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
after the installation is complete, either run composio login
or export your composio API key as COMPOSIO_API_KEY
.
Example¶
The following example demonstrates how to initialize the tool and execute a github action:
- Initialize Composio tools
from composio import App
from crewai_tools import ComposioTool
from crewai import Agent, Task
tools = [ComposioTool.from_action(action=Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER)]
If you don't know what action you want to use, use from_app
and tags
filter to get relevant actions
or use use_case
to search relevant actions
- Define agent
crewai_agent = Agent(
role="Github Agent",
goal="You take action on Github using Github APIs",
backstory=(
"You are AI agent that is responsible for taking actions on Github "
"on users behalf. You need to take action on Github using Github APIs"
),
verbose=True,
tools=tools,
)
- Execute task
task = Task(
description="Star a repo ComposioHQ/composio on GitHub",
agent=crewai_agent,
expected_output="if the star happened",
)
task.execute()
- More detailed list of tools can be found here
---page-end---
---link: https://docs.crewai.com/tools/DALL-ETool/
DALL-E Tool¶
Description¶
This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions. This tool allows the Agent to generate images based on the text input provided by the user.
Installation¶
Install the crewai_tools package
Example¶
Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.
If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to the DallETool
class. For example:
from crewai_tools import DallETool
dalle_tool = DallETool(model="dall-e-3",
size="1024x1024",
quality="standard",
n=1)
Agent(
...
tools=[dalle_tool]
)
The parameters are based on the client.images.generate
method from the OpenAI API. For more information on the parameters, please refer to the OpenAI API documentation.
---page-end---
---link: https://docs.crewai.com/tools/DOCXSearchTool/
DOCXSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents. It enables users to effectively search and extract relevant information from DOCX files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Install the crewai_tools package by running the following command in your terminal:
Example¶
The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file's content or with a specific DOCX file path.
from crewai_tools import DOCXSearchTool
# Initialize the tool to search within any DOCX file's content
tool = DOCXSearchTool()
# OR
# Initialize the tool with a specific DOCX file, so the agent can only search the content of the specified DOCX file
tool = DOCXSearchTool(docx='path/to/your/document.docx')
Arguments¶
docx
: An optional file path to a specific DOCX document you wish to search. If not provided during initialization, the tool allows for later specification of any DOCX file's content path for searching.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = DOCXSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/DirectoryReadTool/
Directory Read
# DirectoryReadTool
!!! note "Experimental"
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
## Description
The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents. It can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories. This tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories.
## Installation
To utilize the DirectoryReadTool in your project, install the `crewai_tools` package. If this package is not yet part of your environment, you can install it using pip with the command below:
```shell
pip install 'crewai[tools]'
This command installs the latest version of the crewai_tools
package, granting access to the DirectoryReadTool among other utilities.
Example¶
Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:
from crewai_tools import DirectoryReadTool
# Initialize the tool so the agent can read any directory's content it learns about during execution
tool = DirectoryReadTool()
# OR
# Initialize the tool with a specific directory, so the agent can only read the content of the specified directory
tool = DirectoryReadTool(directory='/path/to/your/directory')
Arguments¶
The DirectoryReadTool requires minimal configuration for use. The essential argument for this tool is as follows:
directory
: Optional. An argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing.
---page-end---
---link: https://docs.crewai.com/tools/DirectorySearchTool/
DirectorySearchTool¶
Experimental
The DirectorySearchTool is under continuous development. Features and functionalities might evolve, and unexpected behavior may occur as we refine the tool.
Description¶
The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup.
Installation¶
To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:
Initialization and Usage¶
Import the DirectorySearchTool from the crewai_tools
package to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory.
from crewai_tools import DirectorySearchTool
# For dynamic directory specification at runtime
tool = DirectorySearchTool()
# For fixed directory searches
tool = DirectorySearchTool(directory='/path/to/directory')
Arguments¶
directory
: A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.
Custom Model and Embeddings¶
The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users.
tool = DirectorySearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include ollama, google, anthropic, llama2, and more
config=dict(
model="llama2",
# Additional configurations here
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/EXASearchTool/
EXASearchTool Documentation¶
Description¶
The EXASearchTool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the exa.ai API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import EXASearchTool
# Initialize the tool for internet searching capabilities
tool = EXASearchTool()
Steps to Get Started¶
To effectively use the EXASearchTool, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a exa.ai API key by registering for a free account at exa.ai.
- Environment Configuration: Store your obtained API key in an environment variable named
EXA_API_KEY
to facilitate its use by the tool.
Conclusion¶
By integrating the EXASearchTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/FileReadTool/
FileReadTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval. This suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics. It supports a variety of text-based file formats such as .txt
, .csv
, .json
, and more. Depending on the file type, the suite offers specialized functionality, such as converting JSON content into a Python dictionary for ease of use.
Installation¶
To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:
Usage Example¶
To get started with the FileReadTool:
from crewai_tools import FileReadTool
# Initialize the tool to read any files the agents knows or lean the path for
file_read_tool = FileReadTool()
# OR
# Initialize the tool with a specific file path, so the agent can only read the content of the specified file
file_read_tool = FileReadTool(file_path='path/to/your/file.txt')
Arguments¶
file_path
: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.
---page-end---
---link: https://docs.crewai.com/tools/FileWriteTool/
FileWriterTool Documentation¶
Description¶
The FileWriterTool
is a component of the crewai_tools package, designed to simplify the process of writing content to files. It is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more. This tool supports creating new directories if they don't exist, making it easier to organize your output.
Installation¶
Install the crewai_tools package to use the FileWriterTool
in your projects:
Example¶
To get started with the FileWriterTool
:
from crewai_tools import FileWriterTool
# Initialize the tool
file_writer_tool = FileWriterTool()
# Write content to a file in a specified directory
result = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')
print(result)
Arguments¶
filename
: The name of the file you want to create or overwrite.content
: The content to write into the file.directory
(optional): The path to the directory where the file will be created. Defaults to the current directory (.
). If the directory does not exist, it will be created.
Conclusion¶
By integrating the FileWriterTool
into your crews, the agents can execute the process of writing content to files and creating directories. This tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is straightforward and efficient.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlCrawlWebsiteTool/
FirecrawlCrawlWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlCrawlWebsiteTool
tool = FirecrawlCrawlWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The base URL to start crawling from.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.crawler_options
: Optional. Options for controlling the crawling behavior.includes
: Optional. URL patterns to include in the crawl.exclude
: Optional. URL patterns to exclude from the crawl.generateImgAltText
: Optional. Generate alt text for images using LLMs (requires a paid plan).returnOnlyUrls
: Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.maxDepth
: Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.mode
: Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn't be used on heavily JavaScript-rendered websites.limit
: Optional. Maximum number of pages to crawl.timeout
: Optional. Timeout in milliseconds for the crawling operation.
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlScrapeWebsiteTool/
FirecrawlScrapeWebsiteTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:
from crewai_tools import FirecrawlScrapeWebsiteTool
tool = FirecrawlScrapeWebsiteTool(url='firecrawl.dev')
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.url
: The URL to scrape.page_options
: Optional.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.extractor_options
: Optional. Options for LLM-based extraction of structured information from the page contentmode
: The extraction mode to use, currently supports 'llm-extraction'extractionPrompt
: Optional. A prompt describing what information to extract from the pageextractionSchema
: Optional. The schema for the data to be extractedtimeout
: Optional. Timeout in milliseconds for the request
---page-end---
---link: https://docs.crewai.com/tools/FirecrawlSearchTool/
FirecrawlSearchTool¶
Description¶
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
Installation¶
- Get an API key from firecrawl.dev and set it in environment variables (
FIRECRAWL_API_KEY
). - Install the Firecrawl SDK along with
crewai[tools]
package:
Example¶
Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:
Arguments¶
api_key
: Optional. Specifies Firecrawl API key. Defaults is theFIRECRAWL_API_KEY
environment variable.query
: The search query string to be used for searching.page_options
: Optional. Options for result formatting.onlyMainContent
: Optional. Only return the main content of the page excluding headers, navs, footers, etc.includeHtml
: Optional. Include the raw HTML content of the page. Will output a html key in the response.fetchPageContent
: Optional. Fetch the full content of the page.search_options
: Optional. Options for controlling the crawling behavior.limit
: Optional. Maximum number of pages to crawl.
---page-end---
---link: https://docs.crewai.com/tools/GitHubSearchTool/
GithubSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub.
Installation¶
To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:
This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package.
Example¶
Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:
from crewai_tools import GithubSearchTool
# Initialize the tool for semantic searches within a specific GitHub repository
tool = GithubSearchTool(
github_repo='https://github.com/example/repo',
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
# OR
# Initialize the tool for semantic searches within a specific GitHub repository, so the agent can search any repository if it learns about during its execution
tool = GithubSearchTool(
content_types=['code', 'issue'] # Options: code, repo, pr, issue
)
Arguments¶
github_repo
: The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.content_types
: Specifies the types of content to include in your search. You must provide a list of content types from the following options:code
for searching within the code,repo
for searching within the repository's general information,pr
for searching within pull requests, andissue
for searching within issues. This field is mandatory and allows tailoring the search to specific content types within the GitHub repository.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = GithubSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/JSONSearchTool/
JSONSearchTool¶
Experimental Status
The JSONSearchTool is currently in an experimental phase. This means the tool is under active development, and users might encounter unexpected behavior or changes. We highly encourage feedback on any issues or suggestions for improvements.
Description¶
The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results.
Installation¶
To install the JSONSearchTool, use the following pip command:
Usage Examples¶
Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase.
from crewai.json_tools import JSONSearchTool # Updated import path
# General JSON content search
# This approach is suitable when the JSON path is either known beforehand or can be dynamically identified.
tool = JSONSearchTool()
# Restricting search to a specific JSON file
# Use this initialization method when you want to limit the search scope to a specific JSON file.
tool = JSONSearchTool(json_path='./path/to/your/file.json')
Arguments¶
json_path
(str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.
Configuration Options¶
The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements.
tool = JSONSearchTool(
config={
"llm": {
"provider": "ollama", # Other options include google, openai, anthropic, llama2, etc.
"config": {
"model": "llama2",
# Additional optional configurations can be specified here.
# temperature=0.5,
# top_p=1,
# stream=true,
},
},
"embedder": {
"provider": "google", # or openai, ollama, ...
"config": {
"model": "models/embedding-001",
"task_type": "retrieval_document",
# Further customization options can be added here.
},
},
}
)
---page-end---
---link: https://docs.crewai.com/tools/MDXSearchTool/
MDXSearchTool¶
Experimental
The MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.
Description¶
The MDX Search Tool is a component of the crewai_tools
package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
Installation¶
Before using the MDX Search Tool, ensure the crewai_tools
package is installed. If it is not, you can install it with the following command:
Usage Example¶
To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:
from crewai_tools import MDXSearchTool
# Initialize the tool to search any MDX content it learns about during execution
tool = MDXSearchTool()
# OR
# Initialize the tool with a specific MDX file path for an exclusive search within that document
tool = MDXSearchTool(mdx='path/to/your/document.mdx')
Parameters¶
- mdx: Optional. Specifies the MDX file path for the search. It can be provided during initialization.
Customization of Model and Embeddings¶
The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:
tool = MDXSearchTool(
config=dict(
llm=dict(
provider="ollama", # Options include google, openai, anthropic, llama2, etc.
config=dict(
model="llama2",
# Optional parameters can be included here.
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# Optional title for the embeddings can be added here.
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/MySQLTool/
MySQLSearchTool¶
Description¶
This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology, the MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases. It simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing to perform advanced queries on extensive datasets within a MySQL database.
Installation¶
To install the crewai_tools
package and utilize the MySQLSearchTool, execute the following command in your terminal:
Example¶
Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:
from crewai_tools import MySQLSearchTool
# Initialize the tool with the database URI and the target table name
tool = MySQLSearchTool(db_uri='mysql://user:password@localhost:3306/mydatabase', table_name='employees')
Arguments¶
The MySQLSearchTool requires the following arguments for its operation:
db_uri
: A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = MySQLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google",
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/NL2SQLTool/
NL2SQL Tool¶
Description¶
This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.
This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output. Along with that proivdes the ability for the Agent to update the database based on its goal.
Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database.
Requirements¶
- SqlAlchemy
- Any DB compatible library (e.g. psycopg2, mysql-connector-python)
Installation¶
Install the crewai_tools package
Usage¶
In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the format dialect+driver://username:password@host:port/database
.
from crewai_tools import NL2SQLTool
# psycopg2 was installed to run this example with PostgreSQL
nl2sql = NL2SQLTool(db_uri="postgresql://example@localhost:5432/test_db")
@agent
def researcher(self) -> Agent:
return Agent(
config=self.agents_config["researcher"],
allow_delegation=False,
tools=[nl2sql]
)
Example¶
The primary task goal was:
"Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and sort the results by the average monthly revenue in descending order"
So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.
The second task goal was:
"Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided. Include information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order."
Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.
This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.
The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database.
---page-end---
---link: https://docs.crewai.com/tools/PDFSearchTool/
PDFSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently. This capability makes it especially useful for extracting specific information from large PDF files quickly.
Installation¶
To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:
Example¶
Here's how to use the PDFSearchTool to search within a PDF document:
from crewai_tools import PDFSearchTool
# Initialize the tool allowing for any PDF content search if the path is provided during execution
tool = PDFSearchTool()
# OR
# Initialize the tool with a specific PDF path for exclusive search within that document
tool = PDFSearchTool(pdf='path/to/your/document.pdf')
Arguments¶
pdf
: Optional The PDF path for the search. Can be provided at initialization or within therun
method's arguments. If provided at initialization, the tool confines its search to the specified document.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = PDFSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/PGSearchTool/
PGSearchTool¶
Under Development
The PGSearchTool is currently under development. This document outlines the intended functionality and interface. As development progresses, please be aware that some features may not be available or could change.
Description¶
The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology, it aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases. The tool's goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on extensive datasets within a PostgreSQL environment.
Installation¶
The crewai_tools
package, which will include the PGSearchTool upon its release, can be installed using the following command:
(Note: The PGSearchTool is not yet available in the current version of the crewai_tools
package. This installation command will be updated once the tool is released.)
Example Usage¶
Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:
from crewai_tools import PGSearchTool
# Initialize the tool with the database URI and the target table name
tool = PGSearchTool(db_uri='postgresql://user:password@localhost:5432/mydatabase', table_name='employees')
Arguments¶
The PGSearchTool is designed to require the following arguments for its operation:
db_uri
: A string representing the URI of the PostgreSQL database to be queried. This argument will be mandatory and must include the necessary authentication details and the location of the database.table_name
: A string specifying the name of the table within the database on which the semantic search will be performed. This argument will also be mandatory.
Custom Model and Embeddings¶
The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:
tool = PGSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/ScrapeWebsiteTool/
ScrapeWebsiteTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content. This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.
Installation¶
Install the crewai_tools package
Example¶
from crewai_tools import ScrapeWebsiteTool
# To enable scrapping any website it finds during it's execution
tool = ScrapeWebsiteTool()
# Initialize the tool with the website URL, so the agent can only scrap the content of the specified website
tool = ScrapeWebsiteTool(website_url='https://www.example.com')
# Extract the text from the site
text = tool.run()
print(text)
Arguments¶
website_url
: Mandatory website URL to read the file. This is the primary input for the tool, specifying which website's content should be scraped and read.
---page-end---
---link: https://docs.crewai.com/tools/SeleniumScrapingTool/
SeleniumScrapingTool¶
Experimental
This tool is currently in development. As we refine its capabilities, users may encounter unexpected behavior. Your feedback is invaluable to us for making improvements.
Description¶
The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks. It allows for precise extraction of content from web pages by using CSS selectors to target specific elements. Its design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL.
Installation¶
To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:
Usage Examples¶
Below are some scenarios where the SeleniumScrapingTool can be utilized:
from crewai_tools import SeleniumScrapingTool
# Example 1: Initialize the tool without any parameters to scrape the current page it navigates to
tool = SeleniumScrapingTool()
# Example 2: Scrape the entire webpage of a given URL
tool = SeleniumScrapingTool(website_url='https://example.com')
# Example 3: Target and scrape a specific CSS element from a webpage
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content')
# Example 4: Perform scraping with additional parameters for a customized experience
tool = SeleniumScrapingTool(website_url='https://example.com', css_element='.main-content', cookie={'name': 'user', 'value': 'John Doe'}, wait_time=10)
Arguments¶
The following parameters can be used to customize the SeleniumScrapingTool's scraping process:
website_url
: Mandatory. Specifies the URL of the website from which content is to be scraped.css_element
: Mandatory. The CSS selector for a specific element to target on the website. This enables focused scraping of a particular part of a webpage.cookie
: Optional. A dictionary that contains cookie information. Useful for simulating a logged-in session, thereby providing access to content that might be restricted to non-logged-in users.wait_time
: Optional. Specifies the delay (in seconds) before the content is scraped. This delay allows for the website and any dynamic content to fully load, ensuring a successful scrape.
Attention
Since the SeleniumScrapingTool is under active development, the parameters and functionality may evolve over time. Users are encouraged to keep the tool updated and report any issues or suggestions for enhancements.
---page-end---
---link: https://docs.crewai.com/tools/SerperDevTool/
SerperDevTool Documentation¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform a semantic search for a specified query from a text's content across the internet. It utilizes the serper.dev API to fetch and display the most relevant search results based on the query provided by the user.
Installation¶
To incorporate this tool into your project, follow the installation instructions below:
Example¶
The following example demonstrates how to initialize the tool and execute a search with a given query:
from crewai_tools import SerperDevTool
# Initialize the tool for internet searching capabilities
tool = SerperDevTool()
Steps to Get Started¶
To effectively use the SerperDevTool
, follow these steps:
- Package Installation: Confirm that the
crewai[tools]
package is installed in your Python environment. - API Key Acquisition: Acquire a
serper.dev
API key by registering for a free account atserper.dev
. - Environment Configuration: Store your obtained API key in an environment variable named
SERPER_API_KEY
to facilitate its use by the tool.
Parameters¶
The SerperDevTool
comes with several parameters that will be passed to the API :
-
search_url: The URL endpoint for the search API. (Default is
https://google.serper.dev/search
) -
country: Optional. Specify the country for the search results.
- location: Optional. Specify the location for the search results.
- locale: Optional. Specify the locale for the search results.
- n_results: Number of search results to return. Default is
10
.
The values for country
, location
, locale
and search_url
can be found on the Serper Playground.
Example with Parameters¶
Here is an example demonstrating how to use the tool with additional parameters:
from crewai_tools import SerperDevTool
tool = SerperDevTool(
search_url="https://google.serper.dev/scholar",
n_results=2,
)
print(tool.run(search_query="ChatGPT"))
# Using Tool: Search the internet
# Search results: Title: Role of chat gpt in public health
# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7
# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in
# ---
# Title: Potential use of chat gpt in global warming
# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8
# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate
# ---
from crewai_tools import SerperDevTool
tool = SerperDevTool(
country="fr",
locale="fr",
location="Paris, Paris, Ile-de-France, France",
n_results=2,
)
print(tool.run(search_query="Jeux Olympiques"))
# Using Tool: Search the internet
# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats
# Link: https://olympics.com/fr/paris-2024
# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...
# ---
# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques
# Link: https://tickets.paris2024.org/
# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.
# ---
Conclusion¶
By integrating the SerperDevTool
into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications. The updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.
---page-end---
---link: https://docs.crewai.com/tools/SpiderTool/
SpiderTool¶
Description¶
Spider is the fastest open source scraper and crawler that returns LLM-ready data. It converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI.
Installation¶
To use the Spider API you need to download the Spider SDK and the crewai[tools] SDK too:
Example¶
This example shows you how you can use the Spider tool to enable your agent to scrape and crawl websites. The data returned from the Spider API is already LLM-ready, so no need to do any cleaning there.
from crewai_tools import SpiderTool
def main():
spider_tool = SpiderTool()
searcher = Agent(
role="Web Research Expert",
goal="Find related information from specific URL's",
backstory="An expert web researcher that uses the web extremely well",
tools=[spider_tool],
verbose=True,
)
return_metadata = Task(
description="Scrape https://spider.cloud with a limit of 1 and enable metadata",
expected_output="Metadata and 10 word summary of spider.cloud",
agent=searcher
)
crew = Crew(
agents=[searcher],
tasks=[
return_metadata,
],
verbose=2
)
crew.kickoff()
if __name__ == "__main__":
main()
Arguments¶
api_key
(string, optional): Specifies Spider API key. If not specified, it looks forSPIDER_API_KEY
in environment variables.params
(object, optional): Optional parameters for the request. Defaults to{"return_format": "markdown"}
to return the website's content in a format that fits LLMs better.request
(string): The request type to perform. Possible values arehttp
,chrome
, andsmart
. Usesmart
to perform an HTTP request by default until JavaScript rendering is needed for the HTML.limit
(int): The maximum number of pages allowed to crawl per website. Remove the value or set it to0
to crawl all pages.depth
(int): The crawl limit for maximum depth. If0
, no limit will be applied.cache
(bool): Use HTTP caching for the crawl to speed up repeated runs. Default istrue
.budget
(object): Object that has paths with a counter for limiting the amount of pages example{"*":1}
for only crawling the root page.locale
(string): The locale to use for request, exampleen-US
.cookies
(string): Add HTTP cookies to use for request.stealth
(bool): Use stealth mode for headless chrome request to help prevent being blocked. The default istrue
on chrome.headers
(object): Forward HTTP headers to use for all request. The object is expected to be a map of key value pairs.metadata
(bool): Boolean to store metadata about the pages and content found. This could help improve AI interopt. Defaults tofalse
unless you have the website already stored with the configuration enabled.viewport
(object): Configure the viewport for chrome. Defaults to800x600
.encoding
(string): The type of encoding to use likeUTF-8
,SHIFT_JIS
, or etc.subdomains
(bool): Allow subdomains to be included. Default isfalse
.user_agent
(string): Add a custom HTTP user agent to the request. By default this is set to a random agent.store_data
(bool): Boolean to determine if storage should be used. If set this takes precedence overstorageless
. Defaults tofalse
.gpt_config
(object): Use AI to generate actions to perform during the crawl. You can pass an array for the"prompt"
to chain steps.fingerprint
(bool): Use advanced fingerprint for chrome.storageless
(bool): Boolean to prevent storing any type of data for the request including storage and AI vectors embedding. Defaults tofalse
unless you have the website already stored.readability
(bool): Use readability to pre-process the content for reading. This may drastically improve the content for LLM usage.return_format
(string): The format to return the data in. Possible values aremarkdown
,raw
,text
, andhtml2text
. Useraw
to return the default format of the page like HTML etc.proxy_enabled
(bool): Enable high performance premium proxies for the request to prevent being blocked at the network level.query_selector
(string): The CSS query selector to use when extracting content from the markup.full_resources
(bool): Crawl and download all the resources for a website.request_timeout
(int): The timeout to use for request. Timeouts can be from5-60
. The default is30
seconds.run_in_background
(bool): Run the request in the background. Useful if storing data and wanting to trigger crawls to the dashboard. This has no effect if storageless is set.
---page-end---
---link: https://docs.crewai.com/tools/TXTSearchTool/
TXTSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file. It allows for semantic searching of a query within a specified text file's content, making it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided.
Installation¶
To use the TXTSearchTool, you first need to install the crewai_tools package. This can be done using pip, a package manager for Python. Open your terminal or command prompt and enter the following command:
This command will download and install the TXTSearchTool along with any necessary dependencies.
Example¶
The following example demonstrates how to use the TXTSearchTool to search within a text file. This example shows both the initialization of the tool with a specific text file and the subsequent search within that file's content.
from crewai_tools import TXTSearchTool
# Initialize the tool to search within any text file's content the agent learns about during its execution
tool = TXTSearchTool()
# OR
# Initialize the tool with a specific text file, so the agent can search within the given text file's content
tool = TXTSearchTool(txt='path/to/text/file.txt')
Arguments¶
txt
(str): Optional. The path to the text file you want to search. This argument is only required if the tool was not initialized with a specific text file; otherwise, the search will be conducted within the initially provided text file.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = TXTSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/VisionTool/
Vision Tool¶
Description¶
This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output. The URL or the PATH of the image should be passed to the Agent.
Installation¶
Install the crewai_tools package
Usage¶
In order to use the VisionTool, the OpenAI API key should be set in the environment variable OPENAI_API_KEY
.
---page-end---
---link: https://docs.crewai.com/tools/WebsiteSearchTool/
WebsiteSearchTool¶
Experimental Status
The WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.
Description¶
The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites. It aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently. This tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest. Please note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.
Installation¶
To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:
This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.
Example Usage¶
Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:
from crewai_tools import WebsiteSearchTool
# Example of initiating tool that agents can use to search across any discovered websites
tool = WebsiteSearchTool()
# Example of limiting the search to the content of a specific website, so now agents can only search within that website
tool = WebsiteSearchTool(website='https://example.com')
Arguments¶
website
: An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool's flexibility by allowing targeted searches when necessary.
Customization Options¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = WebsiteSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/XMLSearchTool/
XMLSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files. Ideal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path. By specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes.
Installation¶
To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:
Example¶
Here are two examples demonstrating how to use the XMLSearchTool. The first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope.
from crewai_tools import XMLSearchTool
# Allow agents to search within any XML file's content as it learns about their paths during execution
tool = XMLSearchTool()
# OR
# Initialize the tool with a specific XML file path for exclusive search within that document
tool = XMLSearchTool(xml='path/to/your/xmlfile.xml')
Arguments¶
xml
: This is the path to the XML file you wish to search. It is an optional parameter during the tool's initialization but must be provided either at initialization or as part of therun
method's arguments to execute a search.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = XMLSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeChannelSearchTool/
YoutubeChannelSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is designed to perform semantic searches within a specific Youtube channel's content. Leveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results, making it invaluable for extracting information or finding specific content without the need to manually sift through videos. It streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.
Installation¶
To utilize the YoutubeChannelSearchTool, the crewai_tools
package must be installed. Execute the following command in your shell to install:
Example¶
To begin using the YoutubeChannelSearchTool, follow the example below. This demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel's content.
from crewai_tools import YoutubeChannelSearchTool
# Initialize the tool to search within any Youtube channel's content the agent learns about during its execution
tool = YoutubeChannelSearchTool()
# OR
# Initialize the tool with a specific Youtube channel handle to target your search
tool = YoutubeChannelSearchTool(youtube_channel_handle='@exampleChannel')
Arguments¶
youtube_channel_handle
: A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeChannelSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
---link: https://docs.crewai.com/tools/YoutubeVideoSearchTool/
YoutubeVideoSearchTool¶
Experimental
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
Description¶
This tool is part of the crewai_tools
package and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques. It is one of several "Search" tools in the package that leverage RAG for different sources. The YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL, or they can target their search to a specific Youtube video by providing its URL.
Installation¶
To utilize the YoutubeVideoSearchTool, you must first install the crewai_tools
package. This package contains the YoutubeVideoSearchTool among other utilities designed to enhance your data analysis and processing tasks. Install the package by executing the following command in your terminal:
Example¶
To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below. This demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video's content.
from crewai_tools import YoutubeVideoSearchTool
# General search across Youtube content without specifying a video URL, so the agent can search within any Youtube video content it learns about irs url during its operation
tool = YoutubeVideoSearchTool()
# Targeted search within a specific Youtube video's content
tool = YoutubeVideoSearchTool(youtube_video_url='https://youtube.com/watch?v=example')
Arguments¶
The YoutubeVideoSearchTool accepts the following initialization arguments:
youtube_video_url
: An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.
Custom model and embeddings¶
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
tool = YoutubeVideoSearchTool(
config=dict(
llm=dict(
provider="ollama", # or google, openai, anthropic, llama2, ...
config=dict(
model="llama2",
# temperature=0.5,
# top_p=1,
# stream=true,
),
),
embedder=dict(
provider="google", # or openai, ollama, ...
config=dict(
model="models/embedding-001",
task_type="retrieval_document",
# title="Embeddings",
),
),
)
)
---page-end---
