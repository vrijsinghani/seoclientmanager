This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-08T05:10:45.879Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
apps/
  agents/
    admin.py
    apps.py
    forms.py
    models.py
    tests.py
    urls.py
    views_admin.py
    views.py
templates/
  agents/
    agent_form.html
    base_agents.html
    confirm_delete.html
    crew_detail.html
    crew_form.html
    crew_list.html
    execution_detail.html
    execution_list.html
    manage_agents.html
    manage_crews.html
    manage_tasks.html
    manage_tools.html
    task_form.html
    tool_form.html

================================================================
Repository Files
================================================================

================
File: apps/agents/admin.py
================
from django.contrib import admin
from .models import Crew, CrewExecution, CrewMessage, Agent, Task, Tool
from .forms import AgentForm, TaskForm, CrewForm

@admin.register(Crew)
class CrewAdmin(admin.ModelAdmin):
    form = CrewForm
    list_display = ('name', 'process', 'verbose', 'memory', 'cache', 'full_output', 'share_crew', 'planning')
    list_filter = ('process', 'verbose', 'memory', 'cache', 'full_output', 'share_crew', 'planning')
    filter_horizontal = ('agents', 'tasks')
    search_fields = ('name', 'language', 'language_file', 'output_log_file', 'prompt_file')
    fieldsets = (
        (None, {
            'fields': ('name', 'agents', 'tasks', 'process')
        }),
        ('Language Model Settings', {
            'fields': ('manager_llm', 'function_calling_llm', 'planning_llm')
        }),
        ('Execution Settings', {
            'fields': ('verbose', 'max_rpm', 'memory', 'cache', 'full_output', 'planning')
        }),
        ('Language and Localization', {
            'fields': ('language', 'language_file')
        }),
        ('Callbacks and Logging', {
            'fields': ('step_callback', 'task_callback', 'output_log_file')
        }),
        ('Advanced Settings', {
            'classes': ('collapse',),
            'fields': ('config', 'embedder', 'share_crew', 'manager_agent', 'manager_callbacks', 'prompt_file'),
        }),
    )

@admin.register(CrewExecution)
class CrewExecutionAdmin(admin.ModelAdmin):
    list_display = ('crew', 'user', 'client', 'status', 'created_at', 'updated_at')
    list_filter = ('status', 'created_at', 'updated_at')
    search_fields = ('crew__name', 'user__username', 'client__name')

@admin.register(CrewMessage)
class CrewMessageAdmin(admin.ModelAdmin):
    list_display = ('execution', 'timestamp')
    list_filter = ('timestamp',)
    search_fields = ('execution__crew__name', 'content')

@admin.register(Agent)
class AgentAdmin(admin.ModelAdmin):
    form = AgentForm
    list_display = ('name', 'role', 'llm', 'function_calling_llm', 'verbose', 'allow_delegation', 'allow_code_execution')
    list_filter = ('verbose', 'allow_delegation', 'allow_code_execution', 'use_system_prompt', 'respect_context_window')
    search_fields = ('name', 'role', 'goal', 'backstory')
    filter_horizontal = ('tools',)
    fieldsets = (
        (None, {
            'fields': ('name', 'role', 'goal', 'backstory', 'llm', 'tools')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('function_calling_llm', 'max_iter', 'max_rpm', 'max_execution_time', 'verbose', 'allow_delegation', 'step_callback', 'cache', 'system_template', 'prompt_template', 'response_template', 'allow_code_execution', 'max_retry_limit', 'use_system_prompt', 'respect_context_window'),
        }),
    )

@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    form = TaskForm
    list_display = ('description', 'agent', 'async_execution', 'human_input', 'output_type')
    list_filter = ('async_execution', 'human_input')
    filter_horizontal = ('tools', 'context')
    search_fields = ('description', 'agent__name', 'expected_output')
    readonly_fields = ('output',)

    def output_type(self, obj):
        if obj.output_json:
            return 'JSON'
        elif obj.output_pydantic:
            return 'Pydantic'
        elif obj.output_file:
            return 'File'
        else:
            return 'Default'
    output_type.short_description = 'Output Type'

    fieldsets = (
        (None, {
            'fields': ('description', 'agent', 'expected_output', 'tools', 'async_execution', 'context')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls'),
        }),
        ('Output', {
            'fields': ('output',),
        }),
    )

@admin.register(Tool)
class ToolAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ('name', 'description', 'function')

================
File: apps/agents/apps.py
================
from django.apps import AppConfig


class AgentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.agents'
    verbose_name = 'CrewAI Agents'

    def ready(self):
        pass  # We'll add any necessary imports or setup here later if needed

================
File: apps/agents/forms.py
================
from django import forms
from .models import CrewExecution, Agent, Task, Tool, Crew, get_available_tools
from apps.seo_manager.models import Client
from apps.common.utils import get_models
import json

class CrewExecutionForm(forms.ModelForm):
    client = forms.ModelChoiceField(queryset=Client.objects.all(), required=False)

    class Meta:
        model = CrewExecution
        fields = ['crew', 'inputs', 'client']
        widgets = {
            'inputs': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['inputs'].widget.attrs['placeholder'] = 'Enter inputs as JSON'

class AgentForm(forms.ModelForm):
    class Meta:
        model = Agent
        fields = ['name', 'role', 'goal', 'backstory', 'llm', 'tools', 'function_calling_llm', 'max_iter', 'max_rpm', 'max_execution_time', 'verbose', 'allow_delegation', 'step_callback', 'cache', 'system_template', 'prompt_template', 'response_template', 'allow_code_execution', 'max_retry_limit', 'use_system_prompt', 'respect_context_window']
        widgets = {
            'backstory': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.CheckboxSelectMultiple(),
            'system_template': forms.Textarea(attrs={'rows': 4}),
            'prompt_template': forms.Textarea(attrs={'rows': 4}),
            'response_template': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        available_models = get_models()
        self.fields['llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'})
        )
        self.fields['function_calling_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['max_iter'].widget.attrs['min'] = 1
        self.fields['max_rpm'].widget.attrs['min'] = 0
        self.fields['max_execution_time'].widget.attrs['min'] = 0
        self.fields['max_retry_limit'].widget.attrs['min'] = 0

class TaskForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = Task
        fields = ['description', 'agent', 'expected_output', 'tools', 'async_execution', 'context', 'config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'expected_output': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.CheckboxSelectMultiple(),
            'context': forms.CheckboxSelectMultiple(),
            'output_json': forms.TextInput(),
            'output_pydantic': forms.TextInput(),
            'output_file': forms.TextInput(),
            'converter_cls': forms.TextInput(),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['config'].widget.attrs['placeholder'] = 'Enter config as JSON'
        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)

    def clean_config(self):
        config = self.cleaned_data.get('config')
        if config:
            try:
                return json.loads(config)
            except json.JSONDecodeError:
                raise forms.ValidationError("Invalid JSON format in config field")
        return None

class ToolForm(forms.ModelForm):
    class Meta:
        model = Tool
        fields = ['tool_class']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['tool_class'] = forms.ChoiceField(
            choices=[(tool, tool) for tool in get_available_tools()],
            widget=forms.Select(attrs={'class': 'form-control'})
        )

class CrewForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)
    manager_callbacks = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = Crew
        fields = ['name', 'agents', 'tasks', 'process', 'verbose', 'manager_llm', 'function_calling_llm', 
                  'config', 'max_rpm', 'language', 'language_file', 'memory', 'cache', 'embedder', 
                  'full_output', 'step_callback', 'task_callback', 'share_crew', 'output_log_file', 
                  'manager_agent', 'manager_callbacks', 'prompt_file', 'planning', 'planning_llm']
        widgets = {
            'agents': forms.CheckboxSelectMultiple(),
            'tasks': forms.CheckboxSelectMultiple(),
            'embedder': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        available_models = get_models()
        self.fields['manager_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['function_calling_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['planning_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['max_rpm'].widget.attrs['min'] = 0
        self.fields['max_rpm'].widget.attrs['step'] = 1
        self.fields['config'].widget.attrs['placeholder'] = 'Enter config as JSON'
        self.fields['manager_callbacks'].widget.attrs['placeholder'] = 'Enter manager callbacks as JSON'
        self.fields['embedder'].widget.attrs['placeholder'] = 'Enter embedder configuration as JSON'

        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)
        if self.instance.manager_callbacks:
            self.initial['manager_callbacks'] = json.dumps(self.instance.manager_callbacks, indent=2)
        if self.instance.embedder:
            self.initial['embedder'] = json.dumps(self.instance.embedder, indent=2)

    def clean_config(self):
        return self._clean_json_field('config')

    def clean_manager_callbacks(self):
        return self._clean_json_field('manager_callbacks')

    def clean_embedder(self):
        return self._clean_json_field('embedder')

    def _clean_json_field(self, field_name):
        data = self.cleaned_data.get(field_name)
        if data:
            try:
                return json.loads(data)
            except json.JSONDecodeError:
                raise forms.ValidationError(f"Invalid JSON format in {field_name} field")
        return None

================
File: apps/agents/models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from apps.common.utils import get_models
from pydantic import BaseModel
import os
import importlib
import logging

logger = logging.getLogger(__name__)

User = get_user_model()

def get_available_tools():
    tools_dir = os.path.join('apps', 'agents', 'tools')
    return [name for name in os.listdir(tools_dir) if os.path.isdir(os.path.join(tools_dir, name))]

def default_embedder():
    return {'provider': 'openai'}

class Tool(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    tool_class = models.CharField(max_length=100, choices=[(tool, tool) for tool in get_available_tools()])
    schema = models.JSONField(null=True, blank=True)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        try:
            # Import the tool module
            module_path = f"apps.agents.tools.{self.tool_class}.{self.tool_class}"
            module = importlib.import_module(module_path)
            logger.info(f"Successfully imported module: {module_path}")

            # Get all classes defined in the module
            classes = [cls for name, cls in module.__dict__.items() if isinstance(cls, type)]
            logger.info(f"Found {len(classes)} classes in the module")

            # Try to find the correct tool class
            tool_class = next((cls for cls in classes if cls.__name__.lower() == self.tool_class.lower() or cls.__name__.endswith('Tool')), None)

            if tool_class is None:
                raise ValueError(f"Could not find a suitable Tool class in module {module_path}")

            logger.info(f"Using tool class: {tool_class.__name__}")

            # Set name and description
            self.name = getattr(tool_class, 'name', self.tool_class)
            self.description = getattr(tool_class, 'description', '')

            # Set schema if args_schema is available and is a subclass of BaseModel
            args_schema = getattr(tool_class, 'args_schema', None)
            if args_schema and issubclass(args_schema, BaseModel):
                self.schema = args_schema.schema()
            else:
                self.schema = None
                logger.warning(f"args_schema not found or not a subclass of BaseModel for {self.tool_class}")

        except Exception as e:
            logger.error(f"Error in Tool.save: {str(e)}")
            raise

        super().save(*args, **kwargs)

class Agent(models.Model):
    name = models.CharField(max_length=100)
    role = models.CharField(max_length=100)
    goal = models.TextField()
    backstory = models.TextField()
    llm = models.CharField(max_length=100)
    tools = models.ManyToManyField(Tool, blank=True)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True)
    max_iter = models.IntegerField(default=25)
    max_rpm = models.IntegerField(null=True, blank=True)
    max_execution_time = models.IntegerField(null=True, blank=True)
    verbose = models.BooleanField(default=False)
    allow_delegation = models.BooleanField(default=False)
    step_callback = models.CharField(max_length=255, null=True, blank=True)
    cache = models.BooleanField(default=True)
    system_template = models.TextField(null=True, blank=True)
    prompt_template = models.TextField(null=True, blank=True)
    response_template = models.TextField(null=True, blank=True)
    allow_code_execution = models.BooleanField(default=False)
    max_retry_limit = models.IntegerField(default=2)
    use_system_prompt = models.BooleanField(default=True)
    respect_context_window = models.BooleanField(default=True)

    def __str__(self):
        return self.name

    def clean(self):
        super().clean()
        available_models = get_models()
        if self.llm not in available_models:
            raise ValidationError({'llm': f"Selected LLM '{self.llm}' is not available. Please choose from: {', '.join(available_models)}"})

class Task(models.Model):
    description = models.TextField()
    agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True)
    expected_output = models.TextField()
    tools = models.ManyToManyField(Tool, blank=True)
    async_execution = models.BooleanField(default=False)
    context = models.ManyToManyField('self', symmetrical=False, blank=True)
    config = models.JSONField(null=True, blank=True)
    output_json = models.CharField(max_length=255, null=True, blank=True)
    output_pydantic = models.CharField(max_length=255, null=True, blank=True)
    output_file = models.CharField(max_length=255, null=True, blank=True)
    output = models.TextField(null=True, blank=True)
    callback = models.CharField(max_length=255, null=True, blank=True)
    human_input = models.BooleanField(default=False)
    converter_cls = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return self.description[:50]

class Crew(models.Model):
    name = models.CharField(max_length=100)
    agents = models.ManyToManyField(Agent)
    tasks = models.ManyToManyField(Task)
    process = models.CharField(max_length=20, choices=[('sequential', 'Sequential'), ('hierarchical', 'Hierarchical')], default='sequential')
    verbose = models.BooleanField(default=False)
    manager_llm = models.CharField(max_length=100, null=True, blank=True)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True)
    config = models.JSONField(null=True, blank=True)
    max_rpm = models.IntegerField(null=True, blank=True)
    language = models.CharField(max_length=50, default='English')
    language_file = models.CharField(max_length=255, null=True, blank=True)
    memory = models.BooleanField(default=False)
    cache = models.BooleanField(default=True)
    embedder = models.JSONField(default=default_embedder)
    full_output = models.BooleanField(default=False)
    step_callback = models.CharField(max_length=255, null=True, blank=True)
    task_callback = models.CharField(max_length=255, null=True, blank=True)
    share_crew = models.BooleanField(default=False)
    output_log_file = models.CharField(max_length=255, null=True, blank=True)
    manager_agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True, related_name='managed_crews')
    manager_callbacks = models.JSONField(null=True, blank=True)
    prompt_file = models.CharField(max_length=255, null=True, blank=True)
    planning = models.BooleanField(default=False)
    planning_llm = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        return self.name

class CrewExecution(models.Model):
    crew = models.ForeignKey(Crew, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    client = models.ForeignKey('seo_manager.Client', on_delete=models.SET_NULL, null=True, blank=True)
    inputs = models.JSONField()
    outputs = models.JSONField(null=True, blank=True)
    status = models.CharField(max_length=20, choices=[
        ('PENDING', 'Pending'),
        ('RUNNING', 'Running'),
        ('COMPLETED', 'Completed'),
        ('FAILED', 'Failed')
    ], default='PENDING')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.crew.name} - {self.created_at}"

class CrewMessage(models.Model):
    execution = models.ForeignKey(CrewExecution, on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.execution.crew.name} - {self.timestamp}"

================
File: apps/agents/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/agents/urls.py
================
from django.urls import path
from . import views
from . import views_admin

app_name = 'agents'

urlpatterns = [
    # Existing URLs
    path('', views.crew_list, name='crew_list'),
    path('crew/<int:crew_id>/', views.crew_detail, name='crew_detail'),
    path('executions/', views.execution_list, name='execution_list'),
    path('execution/<int:execution_id>/', views.execution_detail, name='execution_detail'),
    
    # Admin views
    path('manage/agents/', views_admin.manage_agents, name='manage_agents'),
    path('manage/agents/add/', views_admin.add_agent, name='add_agent'),
    path('manage/agents/edit/<int:agent_id>/', views_admin.edit_agent, name='edit_agent'),
    path('manage/agents/delete/<int:agent_id>/', views_admin.delete_agent, name='delete_agent'),
    
    path('manage/tasks/', views_admin.manage_tasks, name='manage_tasks'),
    path('manage/tasks/add/', views_admin.add_task, name='add_task'),
    path('manage/tasks/edit/<int:task_id>/', views_admin.edit_task, name='edit_task'),
    path('manage/tasks/delete/<int:task_id>/', views_admin.delete_task, name='delete_task'),
    
    path('manage/tools/', views_admin.manage_tools, name='manage_tools'),
    path('manage/tools/add/', views_admin.add_tool, name='add_tool'),
    path('manage/tools/edit/<int:tool_id>/', views_admin.edit_tool, name='edit_tool'),
    path('manage/tools/delete/<int:tool_id>/', views_admin.delete_tool, name='delete_tool'),
    path('get_tool_info/', views_admin.get_tool_info, name='get_tool_info'),  # New URL for fetching tool info

    # Crew management URLs
    path('manage/crews/', views_admin.manage_crews, name='manage_crews'),
    path('manage/crews/add/', views_admin.add_crew, name='add_crew'),
    path('manage/crews/edit/<int:crew_id>/', views_admin.edit_crew, name='edit_crew'),
    path('manage/crews/delete/<int:crew_id>/', views_admin.delete_crew, name='delete_crew'),
    
    # New URL for updating crew agents
    path('manage/crews/update_agents/<int:crew_id>/', views_admin.update_crew_agents, name='update_crew_agents'),
]

================
File: apps/agents/views_admin.py
================
import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from .models import Agent, Task, Tool, Crew
from .forms import AgentForm, TaskForm, ToolForm, CrewForm
from django.http import JsonResponse
import importlib
import traceback
import os

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def manage_agents(request):
    agents = Agent.objects.all()
    return render(request, 'agents/manage_agents.html', {'agents': agents})

@login_required
@user_passes_test(is_admin)
def add_agent(request):
    if request.method == 'POST':
        form = AgentForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Agent added successfully.')
            return redirect('agents:manage_agents')
    else:
        form = AgentForm()
    return render(request, 'agents/agent_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        form = AgentForm(request.POST, instance=agent)
        if form.is_valid():
            form.save()
            messages.success(request, 'Agent updated successfully.')
            return redirect('agents:manage_agents')
    else:
        form = AgentForm(instance=agent)
    return render(request, 'agents/agent_form.html', {'form': form, 'agent': agent})

@login_required
@user_passes_test(is_admin)
def delete_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        agent.delete()
        messages.success(request, 'Agent deleted successfully.')
        return redirect('agents:manage_agents')
    return render(request, 'agents/confirm_delete.html', {'object': agent, 'type': 'agent'})

@login_required
@user_passes_test(is_admin)
def manage_tasks(request):
    tasks = Task.objects.all()
    return render(request, 'agents/manage_tasks.html', {'tasks': tasks})

@login_required
@user_passes_test(is_admin)
def add_task(request):
    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task added successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm()
    return render(request, 'agents/task_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task updated successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm(instance=task)
    return render(request, 'agents/task_form.html', {'form': form, 'task': task})

@login_required
@user_passes_test(is_admin)
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        task.delete()
        messages.success(request, 'Task deleted successfully.')
        return redirect('agents:manage_tasks')
    return render(request, 'agents/confirm_delete.html', {'object': task, 'type': 'task'})

@login_required
@user_passes_test(is_admin)
def manage_tools(request):
    tools = Tool.objects.all().order_by('-id')
    return render(request, 'agents/manage_tools.html', {'tools': tools})

@login_required
@user_passes_test(is_admin)
def add_tool(request):
    logger.info("Entering add_tool view")
    if request.method == 'POST':
        logger.info("POST request received")
        form = ToolForm(request.POST)
        logger.info(f"Form data: {request.POST}")
        if form.is_valid():
            logger.info("Form is valid")
            try:
                tool = form.save(commit=False)
                logger.info(f"Tool object created: {tool.__dict__}")
                tool.save()
                logger.info("Tool saved successfully")
                messages.success(request, 'Tool added successfully.')
                return redirect('agents:manage_tools')
            except Exception as e:
                logger.error(f"Error in tool creation: {str(e)}")
                logger.error(traceback.format_exc())
                messages.error(request, f"Error adding tool: {str(e)}")
        else:
            logger.warning(f"Form is invalid. Errors: {form.errors}")
    else:
        logger.info("GET request received")
        form = ToolForm()
    
    logger.info("Rendering tool_form.html")
    return render(request, 'agents/tool_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        form = ToolForm(request.POST, instance=tool)
        if form.is_valid():
            try:
                tool = form.save(commit=False)
                # Fetch tool info to ensure name and description are set correctly
                tool_info = get_tool_info_internal(tool.tool_class)
                if tool_info.get('error'):
                    raise ValueError(tool_info['error'])
                tool.name = tool_info['name']
                tool.description = tool_info['description']
                tool.save()
                messages.success(request, 'Tool updated successfully.')
                return redirect('agents:manage_tools')
            except Exception as e:
                logger.error(f"Error updating tool: {str(e)}")
                messages.error(request, f"Error updating tool: {str(e)}")
    else:
        form = ToolForm(instance=tool)
    return render(request, 'agents/tool_form.html', {'form': form, 'tool': tool})

@login_required
@user_passes_test(is_admin)
def delete_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        tool.delete()
        messages.success(request, 'Tool deleted successfully.')
        return redirect('agents:manage_tools')
    return render(request, 'agents/confirm_delete.html', {'object': tool, 'type': 'tool'})

@login_required
@user_passes_test(is_admin)
def get_tool_info(request):
    tool_class = request.GET.get('tool_class')
    logger.info(f"Received request for tool_class: {tool_class}")
    
    if tool_class:
        try:
            # Log the current working directory and the full path of the tool
            cwd = os.getcwd()
            tool_path = os.path.join(cwd, 'apps', 'agents', 'tools', tool_class, f"{tool_class}.py")
            logger.info(f"Current working directory: {cwd}")
            logger.info(f"Full path of the tool: {tool_path}")
            
            # Check if the file exists
            if not os.path.exists(tool_path):
                logger.error(f"Tool file does not exist: {tool_path}")
                return JsonResponse({'error': 'Tool file not found'}, status=404)
            
            module_path = f"apps.agents.tools.{tool_class}.{tool_class}"
            logger.info(f"Attempting to import module: {module_path}")
            
            module = importlib.import_module(module_path)
            logger.info(f"Module imported successfully: {module}")
            
            # Get all classes defined in the module
            classes = [cls for name, cls in module.__dict__.items() if isinstance(cls, type)]
            logger.info(f"Classes found in the module: {classes}")
            
            # Try to find a class that ends with 'Tool' or matches the module name
            tool_class_obj = next((cls for cls in classes if cls.__name__.endswith('Tool') or cls.__name__.lower() == tool_class.lower()), None)

            if tool_class_obj is None:
                logger.error(f"Could not find a suitable Tool class in module {module_path}")
                return JsonResponse({'error': 'Tool class not found in module'}, status=404)
            
            logger.info(f"Tool class object: {tool_class_obj}")
            
            # Get name and description, with fallbacks
            name = getattr(tool_class_obj, 'name', tool_class)
            description = getattr(tool_class_obj, 'description', '')
            
            logger.info(f"Retrieved name: {name}, description: {description}")
            
            return JsonResponse({
                'name': name,
                'description': description,
            })
        except ImportError as e:
            logger.error(f"ImportError: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': 'Failed to import tool module'}, status=500)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)
    
    logger.warning("Invalid request: tool_class parameter is missing")
    return JsonResponse({'error': 'Invalid request'}, status=400)

    

@login_required
@user_passes_test(is_admin)
def manage_crews(request):
    crews = Crew.objects.all().prefetch_related('agents', 'tasks')
    context = {
        'crews': crews,
        'show_process': True,
        'show_planning': True,
        'show_language': True,
    }
    return render(request, 'agents/manage_crews.html', context)

@login_required
@user_passes_test(is_admin)
def add_crew(request):
    if request.method == 'POST':
        form = CrewForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew added successfully.')
            return redirect('agents:manage_crews')
    else:
        form = CrewForm()
    return render(request, 'agents/crew_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        form = CrewForm(request.POST, instance=crew)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew updated successfully.')
            return redirect('agents:manage_crews')
    else:
        form = CrewForm(instance=crew)
    return render(request, 'agents/crew_form.html', {'form': form, 'crew': crew})

@login_required
@user_passes_test(is_admin)
def delete_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        crew.delete()
        messages.success(request, 'Crew deleted successfully.')
        return redirect('agents:manage_crews')
    return render(request, 'agents/confirm_delete.html', {'object': crew, 'type': 'crew'})

@login_required
@user_passes_test(is_admin)
def update_crew_agents(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        agent_ids = request.POST.getlist('agents')
        crew.agents.set(agent_ids)
        
        # Update manager_agent if it's in the POST data
        manager_agent_id = request.POST.get('manager_agent')
        if manager_agent_id:
            crew.manager_agent_id = manager_agent_id
        else:
            crew.manager_agent = None
        
        crew.save()
        messages.success(request, 'Crew agents updated successfully.')
    return redirect('agents:manage_crews')

# ... (rest of the code remains unchanged)

================
File: apps/agents/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Crew, CrewExecution
from .forms import CrewExecutionForm
from django.contrib import messages

@login_required
def crew_list(request):
    crews = Crew.objects.all()
    return render(request, 'agents/crew_list.html', {'crews': crews})

@login_required
def crew_detail(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        form = CrewExecutionForm(request.POST)
        if form.is_valid():
            execution = form.save(commit=False)
            execution.crew = crew
            execution.user = request.user
            execution.save()
            messages.success(request, 'Crew execution started successfully.')
            return redirect('agents:execution_detail', execution_id=execution.id)
    else:
        form = CrewExecutionForm()
    return render(request, 'agents/crew_detail.html', {'crew': crew, 'form': form})

@login_required
def execution_list(request):
    executions = CrewExecution.objects.filter(user=request.user).order_by('-created_at')
    return render(request, 'agents/execution_list.html', {'executions': executions})

@login_required
def execution_detail(request, execution_id):
    execution = get_object_or_404(CrewExecution, id=execution_id, user=request.user)
    return render(request, 'agents/execution_detail.html', {'execution': execution})

================
File: templates/agents/agent_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if agent %}Edit Agent{% else %}Add Agent{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">{% if agent %}Edit Agent{% else %}Add Agent{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="mb-4">
                            <label for="{{ form.name.id_for_label }}" class="form-label">Name</label><br>
                            {{ form.name }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.role.id_for_label }}" class="form-label">Role</label><br>
                            {{ form.role }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.goal.id_for_label }}" class="form-label">Goal</label><br>
                            {{ form.goal }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.backstory.id_for_label }}" class="form-label">Backstory</label><br>
                            {{ form.backstory }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.llm.id_for_label }}" class="form-label">LLM</label><br>
                            {{ form.llm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.tools.id_for_label }}" class="form-label">Tools</label><br>
                            {{ form.tools }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.function_calling_llm.id_for_label }}" class="form-label">Function Calling LLM</label><br>
                            {{ form.function_calling_llm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.max_iter.id_for_label }}" class="form-label">Max Iterations</label><br>
                            {{ form.max_iter }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.max_rpm.id_for_label }}" class="form-label">Max RPM</label><br>
                            {{ form.max_rpm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.max_execution_time.id_for_label }}" class="form-label">Max Execution Time</label><br>
                            {{ form.max_execution_time }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Options</label>
                            <div class="form-check custom-checkbox">
                                {{ form.verbose }}
                                <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.allow_delegation }}
                                <label class="form-check-label" for="{{ form.allow_delegation.id_for_label }}">Allow Delegation</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.cache }}
                                <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.allow_code_execution }}
                                <label class="form-check-label" for="{{ form.allow_code_execution.id_for_label }}">Allow Code Execution</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.use_system_prompt }}
                                <label class="form-check-label" for="{{ form.use_system_prompt.id_for_label }}">Use System Prompt</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.respect_context_window }}
                                <label class="form-check-label" for="{{ form.respect_context_window.id_for_label }}">Respect Context Window</label>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.step_callback.id_for_label }}" class="form-label">Step Callback</label><br>
                            {{ form.step_callback }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.system_template.id_for_label }}" class="form-label">System Template</label><br>
                            {{ form.system_template }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.prompt_template.id_for_label }}" class="form-label">Prompt Template</label><br>
                            {{ form.prompt_template }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.response_template.id_for_label }}" class="form-label">Response Template</label><br>
                            {{ form.response_template }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.max_retry_limit.id_for_label }}" class="form-label">Max Retry Limit</label><br>
                            {{ form.max_retry_limit }}
                        </div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_agents' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_css %}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 100px;
    }
    .form-check {
        margin-bottom: 0.5rem;
        padding-left: 0;
    }
    .form-check-input {
        margin-top: 0.3rem;
        margin-right: 0.5rem;
        float: left;
    }
    .form-check-label {
        display: block;
        margin-left: 1.75rem;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .custom-checkbox .form-check-input {
        border-radius: 0.25rem;
        width: 1.25rem;
        height: 1.25rem;
    }
    .custom-checkbox .form-check-input:checked {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .custom-checkbox .form-check-label {
        padding-top: 0.1rem;
    }
</style>
{% endblock extra_css %}

{% block javascripts %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });
    });
</script>
{% endblock javascripts %}

================
File: templates/agents/base_agents.html
================
{% extends "layouts/base.html" %}

{% block title %} CrewAI Agents {% endblock %}

{% block content %}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Agents</h5>
                    <a href="{% url 'agents:manage_agents' %}" class="text-muted">
                        <i class="fas fa-cog"></i>
                    </a>
                </div>
                <div class="card-body">
                    {% block agents_list %}{% endblock %}
                </div>
            </div>
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Previous Tasks</h5>
                </div>
                <div class="card-body">
                    {% block previous_tasks %}{% endblock %}
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">CrewAI Execution</h5>
                </div>
                <div class="card-body">
                    {% block main_content %}{% endblock %}
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock content %}

{% block javascripts %}
<script>
    // Add any JavaScript specific to the agents app here
</script>
{% endblock javascripts %}

{% block extra_css %}
<style>
    .card-header .fa-cog {
        font-size: 1.2em;
        transition: transform 0.3s ease;
    }
    .card-header .fa-cog:hover {
        transform: rotate(90deg);
    }
</style>
{% endblock extra_css %}

================
File: templates/agents/confirm_delete.html
================
{% extends "layouts/base.html" %}

{% block title %} Confirm Delete {% endblock %}

{% block content %}
<div class="container-fluid">
    <h1 class="mb-4">Confirm Delete</h1>
    <p>Are you sure you want to delete the following {{ type }}?</p>
    <p><strong>{{ object }}</strong></p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Confirm Delete</button>
        <a href="{% url 'agents:manage_'|add:type|add:'s' %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock content %}

================
File: templates/agents/crew_detail.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    <li class="list-group-item active">{{ crew.name }}</li>
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for execution in crew.crewaiexecution_set.all|slice:":5" %}
    <li class="list-group-item">
        <a href="{% url 'agents:execution_detail' execution.id %}">
            {{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks for this crew.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>{{ crew.name }}</h2>
<p>{{ crew.description }}</p>

<h3>Inputs</h3>
<pre>{{ crew.inputs|pprint }}</pre>

<h3>Outputs</h3>
<pre>{{ crew.outputs|pprint }}</pre>

<h3>Tools</h3>
<pre>{{ crew.tools|pprint }}</pre>

<h3>Start New Execution</h3>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit" class="btn btn-primary">Start Execution</button>
</form>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/crew_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if crew %}Edit Crew{% else %}Add Crew{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">{% if crew %}Edit Crew{% else %}Add Crew{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="mb-4">
                            <label for="{{ form.name.id_for_label }}" class="form-label">Name</label><br>
                            {{ form.name }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.agents.id_for_label }}" class="form-label">Agents</label>
                            {{ form.agents }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.tasks.id_for_label }}" class="form-label">Tasks</label>
                            {{ form.tasks }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.process.id_for_label }}" class="form-label">Process</label><br>
                            {{ form.process }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.manager_llm.id_for_label }}" class="form-label">Manager LLM</label><br>
                            {{ form.manager_llm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.function_calling_llm.id_for_label }}" class="form-label">Function Calling LLM</label><br>
                            {{ form.function_calling_llm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.config.id_for_label }}" class="form-label">Config</label><br>
                            {{ form.config }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.max_rpm.id_for_label }}" class="form-label">Max RPM</label><br>
                            {{ form.max_rpm }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.language.id_for_label }}" class="form-label">Language</label><br>
                            {{ form.language }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.language_file.id_for_label }}" class="form-label">Language File</label><br>
                            {{ form.language_file }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.embedder.id_for_label }}" class="form-label">Embedder</label><br>
                            {{ form.embedder }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.step_callback.id_for_label }}" class="form-label">Step Callback</label><br>
                            {{ form.step_callback }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.task_callback.id_for_label }}" class="form-label">Task Callback</label><br>
                            {{ form.task_callback }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.output_log_file.id_for_label }}" class="form-label">Output Log File</label><br>
                            {{ form.output_log_file }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.manager_agent.id_for_label }}" class="form-label">Manager Agent</label><br>
                            {{ form.manager_agent }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.manager_callbacks.id_for_label }}" class="form-label">Manager Callbacks</label><br>
                            {{ form.manager_callbacks }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.prompt_file.id_for_label }}" class="form-label">Prompt File</label><br>
                            {{ form.prompt_file }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.planning_llm.id_for_label }}" class="form-label">Planning LLM</label><br>
                            {{ form.planning_llm }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Options</label>
                            <div class="form-check custom-checkbox">
                                {{ form.verbose }}
                                <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.memory }}
                                <label class="form-check-label" for="{{ form.memory.id_for_label }}">Memory</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.cache }}
                                <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.full_output }}
                                <label class="form-check-label" for="{{ form.full_output.id_for_label }}">Full Output</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.share_crew }}
                                <label class="form-check-label" for="{{ form.share_crew.id_for_label }}">Share Crew</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.planning }}
                                <label class="form-check-label" for="{{ form.planning.id_for_label }}">Planning</label>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_crews' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_css %}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 100px;
    }
    .form-check {
        margin-bottom: 0.5rem;
        padding-left: 0;
    }
    .form-check-input {
        margin-top: 0.3rem;
        margin-right: 0.5rem;
        float: left;
    }
    .form-check-label {
        display: block;
        margin-left: 1.75rem;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .custom-checkbox .form-check-input {
        border-radius: 0.25rem;
        width: 1.25rem;
        height: 1.25rem;
    }
    .custom-checkbox .form-check-input:checked {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .custom-checkbox .form-check-label {
        padding-top: 0.1rem;
    }
</style>
{% endblock extra_css %}

{% block javascripts %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });
    });
</script>
{% endblock javascripts %}

================
File: templates/agents/crew_list.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    {% for crew in crews %}
    <li class="list-group-item">
        <a href="{% url 'agents:crew_detail' crew.id %}" data-toggle="tooltip" title="{{ crew.description }}">
            {{ crew.name }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No CrewAI crews available.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for execution in request.user.crewaiexecution_set.all|slice:":5" %}
    <li class="list-group-item">
        <a href="{% url 'agents:execution_detail' execution.id %}">
            {{ execution.crew.name }} - {{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>Welcome to CrewAI Agents</h2>
<p>Select a crew from the list on the left to start a new execution or view previous tasks.</p>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/execution_detail.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    <li class="list-group-item">
        <a href="{% url 'agents:crew_detail' execution.crew.id %}">{{ execution.crew.name }}</a>
    </li>
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for prev_execution in execution.crew.crewaiexecution_set.all|slice:":5" %}
    <li class="list-group-item {% if prev_execution.id == execution.id %}active{% endif %}">
        <a href="{% url 'agents:execution_detail' prev_execution.id %}" {% if prev_execution.id == execution.id %}class="text-white"{% endif %}>
            {{ prev_execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks for this crew.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>Execution Details</h2>
<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">{{ execution.crew.name }}</h5>
        <h6 class="card-subtitle mb-2 text-muted">{{ execution.get_status_display }}</h6>
        <p class="card-text">Created at: {{ execution.created_at|date:"DATETIME_FORMAT" }}</p>
        <p class="card-text">Updated at: {{ execution.updated_at|date:"DATETIME_FORMAT" }}</p>
        {% if execution.client %}
        <p class="card-text">Client: {{ execution.client.name }}</p>
        {% endif %}
    </div>
</div>

<h3>Inputs</h3>
<pre>{{ execution.inputs|pprint }}</pre>

<h3>Outputs</h3>
{% if execution.outputs %}
<pre>{{ execution.outputs|pprint }}</pre>
{% else %}
<p>No outputs available yet.</p>
{% endif %}

<h3>Messages</h3>
<div class="list-group">
    {% for message in execution.crewaimessage_set.all %}
    <div class="list-group-item">
        <div class="d-flex w-100 justify-content-between">
            <h5 class="mb-1">Message {{ forloop.counter }}</h5>
            <small>{{ message.timestamp|date:"DATETIME_FORMAT" }}</small>
        </div>
        <p class="mb-1">{{ message.content }}</p>
    </div>
    {% empty %}
    <p>No messages available.</p>
    {% endfor %}
</div>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/execution_list.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    {% for crew in crews %}
    <li class="list-group-item">
        <a href="{% url 'agents:crew_detail' crew.id %}">{{ crew.name }}</a>
    </li>
    {% empty %}
    <li class="list-group-item">No CrewAI crews available.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for execution in executions %}
    <li class="list-group-item">
        <a href="{% url 'agents:execution_detail' execution.id %}">
            {{ execution.crew.name }} - {{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>Execution History</h2>
<table class="table">
    <thead>
        <tr>
            <th>Crew</th>
            <th>Status</th>
            <th>Created At</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        {% for execution in executions %}
        <tr>
            <td>{{ execution.crew.name }}</td>
            <td>{{ execution.get_status_display }}</td>
            <td>{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</td>
            <td>
                <a href="{% url 'agents:execution_detail' execution.id %}" class="btn btn-sm btn-info">View Details</a>
            </td>
        </tr>
        {% empty %}
        <tr>
            <td colspan="4">No executions found.</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/manage_agents.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Agents {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Agents</h5>
            <p class="text-sm mb-0">
              View and manage your AI agents.
            </p>
          </div>
          <div>
            <a href="{% url 'agents:add_agent' %}" class="btn btn-primary btn-sm">Add New Agent</a>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="agents-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Role</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">LLM</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for agent in agents %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_agent' agent.id %}">{{ agent.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ agent.role }}</td>
                <td class="text-sm font-weight-normal">{{ agent.llm }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_agent' agent.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit agent">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_agent' agent.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete agent">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="4" class="text-sm font-weight-normal">No agents found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#agents-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_crews.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Crews {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Crews</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent crews.
            </p>
          </div>
          <div>
            <a href="{% url 'agents:add_crew' %}" class="btn btn-primary btn-sm">Add New Crew</a>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="crews-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Process</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agents</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tasks</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for crew in crews %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_crew' crew.id %}">{{ crew.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ crew.get_process_display }}</td>
                <td class="text-sm font-weight-normal">
                  {% for agent in crew.agents.all %}
                    {{ agent.name }}{% if not forloop.last %}, {% endif %}
                  {% endfor %}
                </td>
                <td class="text-sm font-weight-normal">
                  {% for task in crew.tasks.all %}
                    {{ task.description|truncatechars:30 }}{% if not forloop.last %}, {% endif %}
                  {% endfor %}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_crew' crew.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit crew">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_crew' crew.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete crew">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="5" class="text-sm font-weight-normal">No crews found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#crews-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_tasks.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tasks {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tasks</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tasks.
            </p>
          </div>
          <div>
            <a href="{% url 'agents:add_task' %}" class="btn btn-primary btn-sm">Add New Task</a>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tasks-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agent</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Async Execution</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Human Input</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Output Type</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for task in tasks %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}">{{ task.description|truncatechars:50 }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ task.agent.name|default:"N/A" }}</td>
                <td class="text-sm font-weight-normal">{% if task.async_execution %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">{% if task.human_input %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">
                  {% if task.output_json %}JSON
                  {% elif task.output_pydantic %}Pydantic
                  {% elif task.output_file %}File
                  {% else %}Default
                  {% endif %}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit task">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_task' task.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete task">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="6" class="text-sm font-weight-normal">No tasks found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tasks-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_tools.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tools {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tools</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tools.
            </p>
          </div>
          <a href="{% url 'agents:add_tool' %}" class="btn btn-primary btn-sm">Add New Tool</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tools-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tool Class</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for tool in tools %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}">{{ tool.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ tool.description|truncatechars:50 }}</td>
                <td class="text-sm font-weight-normal">{{ tool.tool_class }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit tool">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_tool' tool.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete tool">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="4" class="text-sm font-weight-normal">No tools found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tools-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/task_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if task %}Edit Task{% else %}Add Task{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">{% if task %}Edit Task{% else %}Add Task{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="mb-4">
                            <label for="{{ form.description.id_for_label }}" class="form-label">Description</label><br>
                            {{ form.description }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.agent.id_for_label }}" class="form-label">Agent</label><br>
                            {{ form.agent }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.expected_output.id_for_label }}" class="form-label">Expected Output</label><br>
                            {{ form.expected_output }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.tools.id_for_label }}" class="form-label">Tools</label><br>
                            {{ form.tools }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Options</label>
                            <div class="form-check custom-checkbox">
                                {{ form.async_execution }}
                                <label class="form-check-label" for="{{ form.async_execution.id_for_label }}">Async Execution</label>
                            </div>
                            <div class="form-check custom-checkbox">
                                {{ form.human_input }}
                                <label class="form-check-label" for="{{ form.human_input.id_for_label }}">Human Input</label>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.context.id_for_label }}" class="form-label">Context</label><br>
                            {{ form.context }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.config.id_for_label }}" class="form-label">Config (JSON)</label><br>
                            {{ form.config }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.output_json.id_for_label }}" class="form-label">Output JSON</label><br>
                            {{ form.output_json }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.output_pydantic.id_for_label }}" class="form-label">Output Pydantic</label><br>
                            {{ form.output_pydantic }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.output_file.id_for_label }}" class="form-label">Output File</label><br>
                            {{ form.output_file }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.converter_cls.id_for_label }}" class="form-label">Converter Class</label><br>
                            {{ form.converter_cls }}
                        </div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_tasks' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_css %}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 100px;
    }
    .form-check {
        margin-bottom: 0.5rem;
        padding-left: 0;
    }
    .form-check-input {
        margin-top: 0.3rem;
        margin-right: 0.5rem;
        float: left;
    }
    .form-check-label {
        display: block;
        margin-left: 1.75rem;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .custom-checkbox .form-check-input {
        border-radius: 0.25rem;
        width: 1.25rem;
        height: 1.25rem;
    }
    .custom-checkbox .form-check-input:checked {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .custom-checkbox .form-check-label {
        padding-top: 0.1rem;
    }
</style>
{% endblock extra_css %}

{% block javascripts %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var configField = document.getElementById('{{ form.config.id_for_label }}');
        if (configField) {
            configField.addEventListener('blur', function() {
                try {
                    JSON.parse(this.value);
                    this.classList.remove('is-invalid');
                } catch (error) {
                    this.classList.add('is-invalid');
                    alert('Invalid JSON format in Config field');
                }
            });
        }

        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });
    });
</script>
{% endblock javascripts %}

================
File: templates/agents/tool_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if tool %}Edit Tool{% else %}Add Tool{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">{% if tool %}Edit Tool{% else %}Add Tool{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post" id="toolForm">
                        {% csrf_token %}
                        <div class="mb-4">
                            <label for="{{ form.tool_class.id_for_label }}" class="form-label">Tool Class</label><br>
                            {{ form.tool_class }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Name</label><br>
                            <input type="text" id="tool_name" name="name" class="form-control" readonly>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label><br>
                            <textarea id="tool_description" name="description" class="form-control" readonly rows="4"></textarea>
                        </div>
                        <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_tools' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" id="submitButton" class="btn btn-primary" disabled>Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_css %}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 150px;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0,0,0,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }
    @keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    @-webkit-keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
</style>
{% endblock extra_css %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });

        var toolClassSelect = document.getElementById('{{ form.tool_class.id_for_label }}');
        var toolNameInput = document.getElementById('tool_name');
        var toolDescriptionInput = document.getElementById('tool_description');
        var submitButton = document.getElementById('submitButton');
        var errorMessageDiv = document.getElementById('errorMessage');

        function setLoading(isLoading) {
            if (isLoading) {
                toolNameInput.value = 'Loading...';
                toolDescriptionInput.value = 'Loading...';
                submitButton.innerHTML = '<span class="loading"></span> Loading';
            } else {
                submitButton.innerHTML = 'Save';
            }
            submitButton.disabled = isLoading;
        }

        function showError(message) {
            errorMessageDiv.textContent = message;
            errorMessageDiv.style.display = 'block';
        }

        function hideError() {
            errorMessageDiv.style.display = 'none';
        }

        toolClassSelect.addEventListener('change', function() {
            var selectedTool = this.value;
            if (selectedTool) {
                setLoading(true);
                hideError();
                fetch(`/agents/get_tool_info/?tool_class=${selectedTool}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch tool information');
                        }
                        return response.json();
                    })
                    .then(data => {
                        toolNameInput.value = data.name;
                        toolDescriptionInput.value = data.description;
                        submitButton.disabled = false;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError('Failed to load tool information. Please try again.');
                        toolNameInput.value = '';
                        toolDescriptionInput.value = '';
                        submitButton.disabled = true;
                    })
                    .finally(() => {
                        setLoading(false);
                    });
            } else {
                toolNameInput.value = '';
                toolDescriptionInput.value = '';
                submitButton.disabled = true;
                hideError();
            }
        });

        // Trigger the change event on page load if a tool is already selected (for edit mode)
        if (toolClassSelect.value) {
            toolClassSelect.dispatchEvent(new Event('change'));
        }
    });
</script>
{% endblock extra_js %}
