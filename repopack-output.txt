This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-10T16:22:31.115Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
apps/
  agents/
    tools/
      browser_tools/
        browser_tools.py
      crawl_website_tool/
        crawl_website_tool.py
      csv_search_tool/
        csv_search_tool.py
        README.md
      directory_read_tool/
        directory_read_tool.py
        README.md
      directory_search_tool/
        directory_search_tool.py
        README.md
      docx_search_tool/
        docx_search_tool.py
        README.md
      file_read_tool/
        file_read_tool.py
        README.md
      file_writer_tool/
        file_writer_tool.py
        README.md
      google_analytics_tool/
        google_analytics_tool.py
      google_suggestions_tool/
        google_suggestions_tool.py
      keyword_tools/
        keyword_tools.py
      rag/
        rag_tool.py
        README.md
      screenshot_tool/
        screenshot_tool.py
      searxng_tool/
        searxng_tool.py
    admin.py
    apps.py
    consumers.py
    forms.py
    models.py
    README.md
    routing.py
    tasks.py
    tests.py
    urls.py
    views_admin.py
    views.py
templates/
  agents/
    agent_form.html
    base_agents.html
    confirm_delete.html
    connection_test.html
    crew_detail.html
    crew_form.html
    crew_list.html
    crewai_home.html
    dashboard_home.html
    execution_detail.html
    execution_list.html
    manage_agents_card_view.html
    manage_agents.html
    manage_crews_card_view.html
    manage_crews.html
    manage_pipelines.html
    manage_tasks.html
    manage_tools.html
    task_form.html
    tool_form.html

================================================================
Repository Files
================================================================

================
File: apps/agents/tools/browser_tools/browser_tools.py
================
import json
import os

import requests
from langchain.tools import tool
from unstructured.partition.html import partition_html
from trafilatura import fetch_url, extract, sitemaps, spider
from summarizer import summarize

class BrowserTools:
    name = "Browser Tools"
    description = "A collection of tools for scraping and summarizing website content"

    @tool("Scrape and summarize website content")
    def scrape_and_summarize_website(website):
        """Useful to scrape and summarize a website content, just pass a string with
        only the full url, no need for a final slash `/`, eg: https://google.com or https://clearbit.com/about-us"""
        url = f"https://browserless.neuralami.com/content?token={os.environ['BROWSERLESS_API_KEY']}"
        payload = json.dumps({"url": website})
        headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
        print(f"Browsin': {website}")
        response = requests.request("POST", url, headers=headers, data=payload)
        content = extract(response.text)
        summary = summarize(content)
        print(f"summary: '{summary}'")
        content = summary

        return f'\nSummary of {website}: {content}\n'

    @tool("Scrape website content")
    def scrape_website(website):
        """Useful to scrape website content, just pass a string with
        only the full url, no need for a final slash `/`, eg: https://google.com or https://clearbit.com/about-us"""
        url = f"https://browserless.neuralami.com/content?token={os.environ['BROWSERLESS_API_KEY']}"
        payload = json.dumps({"url": website})
        headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
        print(f"Browsin': {website}")
        response = requests.request("POST", url, headers=headers, data=payload)
        content = extract(response.text)
        return f'\nContent of {website}: {content}\n'

================
File: apps/agents/tools/crawl_website_tool/crawl_website_tool.py
================
import requests
from bs4 import BeautifulSoup
from typing import Optional, Type, Any, List
from pydantic.v1 import BaseModel, Field
from crewai_tools import BaseTool
from urllib.parse import urljoin
from trafilatura import fetch_url, extract, sitemaps, spider

class FixedCrawlWebsiteToolSchema(BaseModel):
    """Input for CrawlWebsiteTool."""
    pass

class CrawlWebsiteToolSchema(FixedCrawlWebsiteToolSchema):
    """Input for CrawlWebsiteTool."""
    website_url: str = Field(..., description="Mandatory website url to crawl and read content")

class CrawlWebsiteTool(BaseTool):
    name: str = "Crawl and read website content"
    description: str = "A tool that can be used to crawl a website and read its content, including content from internal links on the same page."
    args_schema: Type[BaseModel] = CrawlWebsiteToolSchema
    website_url: Optional[str] = None
    headers: Optional[dict] = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
        'Accept-Language': 'en-US,en;q=0.5',
        'Referer': 'https://www.google.com/'
    }

    def __init__(self, website_url: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if website_url is not None:
            self.website_url = website_url
            self.description = f"A tool that can be used to crawl {website_url} and read its content, including content from internal links on the same page."
            self.args_schema = FixedCrawlWebsiteToolSchema

    def _run(self, **kwargs: Any) -> str:
        website_url = kwargs.get('website_url', self.website_url)
        print(f"Processing {website_url}")
        content = self._crawl_website(website_url)
        return content

    def _crawl_website(self, url: str) -> str:
        links_to_visit = self._get_links_to_visit(url)
        content = ""
        print(f"Reading {len(links_to_visit)} pages.")
        for link in links_to_visit:
            page_content = self._fetch_and_extract_content(link)
            content += page_content
        
        return content

    def _get_links_to_visit(self, url: str) -> List[str]:
#        sitemap_links = sitemaps.sitemap_search(url)
        sitemap_links = []
        if sitemap_links:
            print(f"Found {len(sitemap_links)} pages from sitemap.")
            return sitemap_links
        else:
            _, known_urls = spider.focused_crawler(url, max_seen_urls=10, max_known_urls=1000)
            print(f"Found {len(known_urls)} from crawling the website.")
            return list(known_urls)

    def _fetch_and_extract_content(self, url: str) -> str:
        html_content = fetch_url(url)
        if html_content:
            extracted_content = f"---link: {url}\n{extract(html_content,url=url)}\n---page-end---\n"
            return extracted_content or ""
        else:
            return ""

================
File: apps/agents/tools/csv_search_tool/csv_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.models.data_type import DataType
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedCSVSearchToolSchema(BaseModel):
    """Input for CSVSearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the CSV's content",
    )


class CSVSearchToolSchema(FixedCSVSearchToolSchema):
    """Input for CSVSearchTool."""

    csv: str = Field(..., description="Mandatory csv path you want to search")


class CSVSearchTool(RagTool):
    name: str = "Search a CSV's content"
    description: str = (
        "A tool that can be used to semantic search a query from a CSV's content."
    )
    args_schema: Type[BaseModel] = CSVSearchToolSchema

    def __init__(self, csv: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if csv is not None:
            self.add(csv)
            self.description = f"A tool that can be used to semantic search a query the {csv} CSV's content."
            self.args_schema = FixedCSVSearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.CSV
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "csv" in kwargs:
            self.add(kwargs["csv"])

    def _run(
        self,
        search_query: str,
        **kwargs: Any,
    ) -> Any:
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/csv_search_tool/README.md
================
# CSVSearchTool

## Description

This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file's content. It allows users to semantically search for queries in the content of a specified CSV file. This feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with "Search" in their name, including CSVSearchTool, are RAG tools designed for searching different sources of data.

## Installation

Install the crewai_tools package

```shell
pip install 'crewai[tools]'
```

## Example

```python
from crewai_tools import CSVSearchTool

# Initialize the tool with a specific CSV file. This setup allows the agent to only search the given CSV file.
tool = CSVSearchTool(csv='path/to/your/csvfile.csv')

# OR

# Initialize the tool without a specific CSV file. Agent  will need to provide the CSV path at runtime.
tool = CSVSearchTool()
```

## Arguments

- `csv` : The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional.

## Custom model and embeddings

By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:

```python
tool = CSVSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google",
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
```

================
File: apps/agents/tools/directory_read_tool/directory_read_tool.py
================
import os
from typing import Any, Optional, Type

from pydantic import BaseModel, Field

from ..base_tool import BaseTool


class FixedDirectoryReadToolSchema(BaseModel):
    """Input for DirectoryReadTool."""

    pass


class DirectoryReadToolSchema(FixedDirectoryReadToolSchema):
    """Input for DirectoryReadTool."""

    directory: str = Field(..., description="Mandatory directory to list content")


class DirectoryReadTool(BaseTool):
    name: str = "List files in directory"
    description: str = (
        "A tool that can be used to recursively list a directory's content."
    )
    args_schema: Type[BaseModel] = DirectoryReadToolSchema
    directory: Optional[str] = None

    def __init__(self, directory: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if directory is not None:
            self.directory = directory
            self.description = f"A tool that can be used to list {directory}'s content."
            self.args_schema = FixedDirectoryReadToolSchema
            self._generate_description()

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        directory = kwargs.get("directory", self.directory)
        if directory[-1] == "/":
            directory = directory[:-1]
        files_list = [
            f"{directory}/{(os.path.join(root, filename).replace(directory, '').lstrip(os.path.sep))}"
            for root, dirs, files in os.walk(directory)
            for filename in files
        ]
        files = "\n- ".join(files_list)
        return f"File paths: \n-{files}"

================
File: apps/agents/tools/directory_read_tool/README.md
================
```markdown
# DirectoryReadTool

## Description
The DirectoryReadTool is a highly efficient utility designed for the comprehensive listing of directory contents. It recursively navigates through the specified directory, providing users with a detailed enumeration of all files, including those nested within subdirectories. This tool is indispensable for tasks requiring a thorough inventory of directory structures or for validating the organization of files within directories.

## Installation
Install the `crewai_tools` package to use the DirectoryReadTool in your project. If you haven't added this package to your environment, you can easily install it with pip using the following command:

```shell
pip install 'crewai[tools]'
```

This installs the latest version of the `crewai_tools` package, allowing access to the DirectoryReadTool and other utilities.

## Example
The DirectoryReadTool is simple to use. The code snippet below shows how to set up and use the tool to list the contents of a specified directory:

```python
from crewai_tools import DirectoryReadTool

# Initialize the tool with the directory you want to explore
tool = DirectoryReadTool(directory='/path/to/your/directory')

# Use the tool to list the contents of the specified directory
directory_contents = tool.run()
print(directory_contents)
```

This example demonstrates the essential steps to utilize the DirectoryReadTool effectively, highlighting its simplicity and user-friendly design.

## Arguments
The DirectoryReadTool requires minimal configuration for use. The essential argument for this tool is as follows:

- `directory`: A mandatory argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing.

The DirectoryReadTool provides a user-friendly and efficient way to list directory contents, making it an invaluable tool for managing and inspecting directory structures.
```

This revised documentation for the DirectoryReadTool maintains the structure and content requirements as outlined, with adjustments made for clarity, consistency, and adherence to the high-quality standards exemplified in the provided documentation example.

================
File: apps/agents/tools/directory_search_tool/directory_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.loaders.directory_loader import DirectoryLoader
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedDirectorySearchToolSchema(BaseModel):
    """Input for DirectorySearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the directory's content",
    )


class DirectorySearchToolSchema(FixedDirectorySearchToolSchema):
    """Input for DirectorySearchTool."""

    directory: str = Field(..., description="Mandatory directory you want to search")


class DirectorySearchTool(RagTool):
    name: str = "Search a directory's content"
    description: str = (
        "A tool that can be used to semantic search a query from a directory's content."
    )
    args_schema: Type[BaseModel] = DirectorySearchToolSchema

    def __init__(self, directory: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if directory is not None:
            self.add(directory)
            self.description = f"A tool that can be used to semantic search a query the {directory} directory's content."
            self.args_schema = FixedDirectorySearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["loader"] = DirectoryLoader(config=dict(recursive=True))
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "directory" in kwargs:
            self.add(kwargs["directory"])

    def _run(
        self,
        search_query: str,
        **kwargs: Any,
    ) -> Any:
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/directory_search_tool/README.md
================
# DirectorySearchTool

## Description
This tool is designed to perform a semantic search for queries within the content of a specified directory. Utilizing the RAG (Retrieval-Augmented Generation) methodology, it offers a powerful means to semantically navigate through the files of a given directory. The tool can be dynamically set to search any directory specified at runtime or can be pre-configured to search within a specific directory upon initialization.

## Installation
To start using the DirectorySearchTool, you need to install the crewai_tools package. Execute the following command in your terminal:

```shell
pip install 'crewai[tools]'
```

## Example
The following examples demonstrate how to initialize the DirectorySearchTool for different use cases and how to perform a search:

```python
from crewai_tools import DirectorySearchTool

# To enable searching within any specified directory at runtime
tool = DirectorySearchTool()

# Alternatively, to restrict searches to a specific directory
tool = DirectorySearchTool(directory='/path/to/directory')
```

## Arguments
- `directory` : This string argument specifies the directory within which to search. It is mandatory if the tool has not been initialized with a directory; otherwise, the tool will only search within the initialized directory.

## Custom model and embeddings

By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:

```python
tool = DirectorySearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google",
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
```

================
File: apps/agents/tools/docx_search_tool/docx_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.models.data_type import DataType
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedDOCXSearchToolSchema(BaseModel):
    """Input for DOCXSearchTool."""

    docx: Optional[str] = Field(
        ..., description="Mandatory docx path you want to search"
    )
    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the DOCX's content",
    )


class DOCXSearchToolSchema(FixedDOCXSearchToolSchema):
    """Input for DOCXSearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the DOCX's content",
    )


class DOCXSearchTool(RagTool):
    name: str = "Search a DOCX's content"
    description: str = (
        "A tool that can be used to semantic search a query from a DOCX's content."
    )
    args_schema: Type[BaseModel] = DOCXSearchToolSchema

    def __init__(self, docx: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if docx is not None:
            self.add(docx)
            self.description = f"A tool that can be used to semantic search a query the {docx} DOCX's content."
            self.args_schema = FixedDOCXSearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.DOCX
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "docx" in kwargs:
            self.add(kwargs["docx"])

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        search_query = kwargs.get("search_query")
        if search_query is None:
            search_query = kwargs.get("query")

        docx = kwargs.get("docx")
        if docx is not None:
            self.add(docx)
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/docx_search_tool/README.md
================
# DOCXSearchTool

## Description
The DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents. It enables users to effectively search and extract relevant information from DOCX files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.

## Installation
Install the crewai_tools package by running the following command in your terminal:

```shell
pip install 'crewai[tools]'
```

## Example
The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file's content or with a specific DOCX file path.

```python
from crewai_tools import DOCXSearchTool

# Initialize the tool to search within any DOCX file's content
tool = DOCXSearchTool()

# OR

# Initialize the tool with a specific DOCX file, so the agent can only search the content of the specified DOCX file
tool = DOCXSearchTool(docx='path/to/your/document.docx')
```

## Arguments
- `docx`: An optional file path to a specific DOCX document you wish to search. If not provided during initialization, the tool allows for later specification of any DOCX file's content path for searching.

## Custom model and embeddings

By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:

```python
tool = DOCXSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google",
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
```

================
File: apps/agents/tools/file_read_tool/file_read_tool.py
================
from typing import Any, Optional, Type

from pydantic import BaseModel, Field

from ..base_tool import BaseTool


class FixedFileReadToolSchema(BaseModel):
    """Input for FileReadTool."""

    pass


class FileReadToolSchema(FixedFileReadToolSchema):
    """Input for FileReadTool."""

    file_path: str = Field(..., description="Mandatory file full path to read the file")


class FileReadTool(BaseTool):
    name: str = "Read a file's content"
    description: str = "A tool that can be used to read a file's content."
    args_schema: Type[BaseModel] = FileReadToolSchema
    file_path: Optional[str] = None

    def __init__(self, file_path: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if file_path is not None:
            self.file_path = file_path
            self.description = f"A tool that can be used to read {file_path}'s content."
            self.args_schema = FixedFileReadToolSchema
            self._generate_description()

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        try:
            file_path = kwargs.get("file_path", self.file_path)
            with open(file_path, "r") as file:
                return file.read()
        except Exception as e:
            return f"Fail to read the file {file_path}. Error: {e}"

================
File: apps/agents/tools/file_read_tool/README.md
================
# FileReadTool

## Description
The FileReadTool is a versatile component of the crewai_tools package, designed to streamline the process of reading and retrieving content from files. It is particularly useful in scenarios such as batch text file processing, runtime configuration file reading, and data importation for analytics. This tool supports various text-based file formats including `.txt`, `.csv`, `.json`, and adapts its functionality based on the file type, for instance, converting JSON content into a Python dictionary for easy use.

## Installation
Install the crewai_tools package to use the FileReadTool in your projects:

```shell
pip install 'crewai[tools]'
```

## Example
To get started with the FileReadTool:

```python
from crewai_tools import FileReadTool

# Initialize the tool to read any files the agents knows or lean the path for
file_read_tool = FileReadTool()

# OR

# Initialize the tool with a specific file path, so the agent can only read the content of the specified file
file_read_tool = FileReadTool(file_path='path/to/your/file.txt')
```

## Arguments
- `file_path`: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.

================
File: apps/agents/tools/file_writer_tool/file_writer_tool.py
================
import os
from typing import Any, Optional, Type

from pydantic import BaseModel

from ..base_tool import BaseTool


class FileWriterToolInput(BaseModel):
    filename: str
    content: str
    directory: Optional[str] = None
    overwrite: bool = False


class FileWriterTool(BaseTool):
    name: str = "File Writer Tool"
    description: str = (
        "A tool to write content to a specified file. Accepts filename, content, and optionally a directory path and overwrite flag as input."
    )
    args_schema: Type[BaseModel] = FileWriterToolInput

    def _run(self, **kwargs: Any) -> str:
        try:
            # Create the directory if it doesn't exist
            if kwargs["directory"] and not os.path.exists(kwargs["directory"]):
                os.makedirs(kwargs["directory"])

            # Construct the full path
            filepath = os.path.join(kwargs["directory"] or "", kwargs["filename"])

            # Check if file exists and overwrite is not allowed
            if os.path.exists(filepath) and not kwargs["overwrite"]:
                return f"File {filepath} already exists and overwrite option was not passed."

            # Write content to the file
            mode = "w" if kwargs["overwrite"] else "x"
            with open(filepath, mode) as file:
                file.write(kwargs["content"])
            return f"Content successfully written to {filepath}"
        except FileExistsError:
            return (
                f"File {filepath} already exists and overwrite option was not passed."
            )
        except Exception as e:
            return f"An error occurred while writing to the file: {str(e)}"

================
File: apps/agents/tools/file_writer_tool/README.md
================
Here's the rewritten README for the `FileWriterTool`:

# FileWriterTool Documentation

## Description
The `FileWriterTool` is a component of the crewai_tools package, designed to simplify the process of writing content to files. It is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more. This tool supports creating new directories if they don't exist, making it easier to organize your output.

## Installation
Install the crewai_tools package to use the `FileWriterTool` in your projects:

```shell
pip install 'crewai[tools]'
```

## Example
To get started with the `FileWriterTool`:

```python
from crewai_tools import FileWriterTool

# Initialize the tool
file_writer_tool = FileWriterTool()

# Write content to a file in a specified directory
result = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')
print(result)
```

## Arguments
- `filename`: The name of the file you want to create or overwrite.
- `content`: The content to write into the file.
- `directory` (optional): The path to the directory where the file will be created. Defaults to the current directory (`.`). If the directory does not exist, it will be created.

## Conclusion
By integrating the `FileWriterTool` into your crews, the agents can execute the process of writing content to files and creating directories. This tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is straightforward and efficient.

================
File: apps/agents/tools/google_analytics_tool/google_analytics_tool.py
================
import os
import json
import logging
from typing import Any, Type, List
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange, Metric, Dimension, RunReportRequest
from google.auth.transport.requests import Request
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class GoogleAnalyticsCredentials(BaseModel):
  view_id: str = None
  access_token: str = None
  refresh_token: str = None
  token_uri: str = None
  ga_client_id: str = None
  client_secret: str = None
  use_service_account: bool = False
  service_account_json: str = None
  user_email: str
  scopes: List[str] = []

class GoogleAnalyticsToolSchema(BaseModel):
  """Input schema for GoogleAnalyticsTool."""
  property_id: str = Field(..., description="The Google Analytics property ID.")
  start_date: str = Field(..., description="The start date for the analytics data (YYYY-MM-DD).")
  end_date: str = Field(..., description="The end date for the analytics data (YYYY-MM-DD).")

class GoogleAnalyticsTool(BaseTool):
  name: str = "Google Analytics Data Fetcher"
  description: str = "Fetches Google Analytics data for a specified property and date range."
  args_schema: Type[BaseModel] = GoogleAnalyticsToolSchema
  credentials: GoogleAnalyticsCredentials = None

  def __init__(self, **kwargs):
      super().__init__()
      if 'credentials' in kwargs:
          self.set_credentials(kwargs['credentials'])

  def set_credentials(self, credentials: GoogleAnalyticsCredentials):
      self.credentials = credentials
      logger.info(f"Credentials set: use_service_account={credentials.use_service_account}, scopes={credentials.scopes}")
      
  def _get_analytics_service(self):
    logger.info("Entering GoogleAnalyticsTool._get_analytics_service")
    if not self.credentials:
        raise ValueError("Credentials have not been set. Use set_credentials() method to set them.")
    
    try:
        logger.info(f"Creating analytics service for client")
        if self.credentials.use_service_account:
            logger.info("Using service account")
            service_account_info = json.loads(self.credentials.service_account_json)
            creds = service_account.Credentials.from_service_account_info(
                service_account_info,
                scopes=self.credentials.scopes or ['https://www.googleapis.com/auth/analytics.readonly']
            )
        else:
            logger.info("Using OAuth credentials")
            creds = Credentials(
                token=self.credentials.access_token,
                refresh_token=self.credentials.refresh_token,
                token_uri=self.credentials.token_uri,
                client_id=self.credentials.ga_client_id,
                client_secret=self.credentials.client_secret,
                scopes=self.credentials.scopes or ['https://www.googleapis.com/auth/analytics.readonly']
            )
        
        logger.info("Credentials created, refreshing...")
        request = Request()
        creds.refresh(request)
        logger.info("Credentials refreshed successfully")
        
        analytics_client = BetaAnalyticsDataClient(credentials=creds)
        logger.info("Analytics client created successfully")
        return analytics_client
    except Exception as e:
        logger.error(f"Error creating analytics service: {str(e)}", exc_info=True)
        raise

  def run(self, property_id: str, start_date: str, end_date: str, **kwargs: Any) -> Any:
      logger.info("Entering GoogleAnalyticsTool.run")
      return self._run(property_id, start_date, end_date, **kwargs)
  
  def _run(self, property_id: str, start_date: str, end_date: str, **kwargs: Any) -> Any:
    try:
        logger.info("Entering GoogleAnalyticsTool._run")
        client = self._get_analytics_service()
        logger.info(f"Fetching analytics data for Property ID: {property_id}, Start Date: {start_date}, End Date: {end_date}")
        
        request = RunReportRequest(
            property=f"properties/{property_id}",
            date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
            metrics=[Metric(name="activeUsers"), Metric(name="sessions")],
            dimensions=[Dimension(name="date")]  # Removed sessionSource dimension
        )        
        response = client.run_report(request)
        logger.info("Analytics data fetched successfully")
        
        processed_data = self._process_analytics_data(response)
        
        return {
            'analytics_data': json.dumps(processed_data),
            'start_date': start_date,
            'end_date': end_date
        }
    except Exception as e:
        logger.error(f"Failed to fetch Google Analytics data. Error: {str(e)}", exc_info=True)
        return {
            'analytics_data': json.dumps([]),
            'start_date': start_date,
            'end_date': end_date,
            'error': str(e)
        }

  def _process_analytics_data(self, response):
      processed_data = []
      for row in response.rows:
          date = datetime.strptime(row.dimension_values[0].value, '%Y%m%d').strftime('%Y-%m-%d')
          active_users = int(row.metric_values[0].value)
          sessions = int(row.metric_values[1].value)
          processed_data.append({
              'date': date,
              'active_users': active_users,
              'sessions': sessions
          })
      processed_data.sort(key=lambda x: x['date'])
      return processed_data

================
File: apps/agents/tools/google_suggestions_tool/google_suggestions_tool.py
================
from crewai_tools import tool
import requests
import xml.etree.ElementTree as ET

@tool("Google Suggestions")
def google_suggestions_tool(argument: str) -> str:
    """Retrieve Google search suggestions for a given keyword."""
    # Parse the argument to extract the keyword and other parameters
    keyword = argument.split(",")[0].strip()
    country_code = argument.split(",")[1].strip() if "," in argument else "us"

    # Build the Google Search query URL
    search_query = f"is {keyword}"
    google_search_url = f"http://google.com/complete/search?output=toolbar&gl={country_code}&q={search_query}"

    # Call the URL and read the data
    result = requests.get(google_search_url)
    tree = ET.ElementTree(ET.fromstring(result.content))
    root = tree.getroot()

    # Extract the suggestions from the XML response
    suggestions = []
    for suggestion in root.findall('CompleteSuggestion'):
        question = suggestion.find('suggestion').attrib.get('data')
        suggestions.append(question)

    # Return the suggestions as a comma-separated string
    return ", ".join(suggestions)

================
File: apps/agents/tools/keyword_tools/keyword_tools.py
================
import os
import requests
from langchain.tools import BaseTool
from pydantic.v1 import BaseModel, Field
from typing import Type, Optional, List, Dict, Any, Tuple


class KeywordsInput(BaseModel):
    keywords: List[str] = Field(description="list of keywords")
    filters: List[Tuple[str, str, float]] = Field(description="list of filters")

class KeywordsForSiteTool(BaseTool):
    name = "keywords_for_site"
    description = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"

    def _run(self, target: str) -> str:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live"
        payload = [
            {
                "target": target,
                "language_code": "en",
                "location_code": 2840,
            }
        ]
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        return results["tasks"][0]["result"]

    def _arun(self, target: str) -> str:
        raise NotImplementedError("KeywordsForSiteTool does not support async")

class KeywordSuggestionsTool(BaseTool):
    name = "keyword_suggestions"
    description = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"

    def _run(self, seed_keyword: str, filters: Optional[List] = None) -> str:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/dataforseo_labs/google/keyword_suggestions/live"
        payload = [
            {
                "keyword": seed_keyword,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "include_seed_keyword": True,
                "limit": 50,
            }
        ]
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        #return results["tasks"][0]["result"]
        return results

    def _arun(self, seed_keyword: str, filters: Optional[List] = None) -> str:
        raise NotImplementedError("KeywordSuggestionsTool does not support async")

class KeywordIdeasTool(BaseTool):
    name = "keyword_ideas"
    description = "Provides search terms that are relevant to the product or service categories of the specified keywords. The algorithm selects the keywords which fall into the same categories as the seed keywords specified"
    args_schema: Type[BaseModel] = KeywordsInput

    def _run(self, keywords: List[str], filters: List[str]=None) -> str:
        
        
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/dataforseo_labs/google/keyword_ideas/live"
        payload = [
            {
                "keywords": keywords,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "limit": 100,
          }
        ]
        payload[0]["ordery_by"]="keyword_info.search_volume,desc"
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        return results

    def _arun(self, tool_input: Dict[str, Any]) -> Dict:
        raise NotImplementedError("KeywordSuggestionsTool does not support async")

class KeywordTools:
    name = "Keyword Tools"
    description = "A collection of tools for keyword research and analysis"

    @staticmethod
    def tools():
        return [KeywordsForSiteTool(), KeywordSuggestionsTool(), KeywordIdeasTool()]

    @staticmethod
    def _dataforseo_credentials():
        login = os.environ["DATAFORSEO_LOGIN"]
        password = os.environ["DATAFORSEO_PASSWORD"]
        return login, password

================
File: apps/agents/tools/rag/rag_tool.py
================
from abc import ABC, abstractmethod
from typing import Any

from pydantic import BaseModel, Field, model_validator

from crewai_tools.tools.base_tool import BaseTool


class Adapter(BaseModel, ABC):
    class Config:
        arbitrary_types_allowed = True

    @abstractmethod
    def query(self, question: str) -> str:
        """Query the knowledge base with a question and return the answer."""

    @abstractmethod
    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        """Add content to the knowledge base."""


class RagTool(BaseTool):
    class _AdapterPlaceholder(Adapter):
        def query(self, question: str) -> str:
            raise NotImplementedError

        def add(self, *args: Any, **kwargs: Any) -> None:
            raise NotImplementedError

    name: str = "Knowledge base"
    description: str = "A knowledge base that can be used to answer questions."
    summarize: bool = False
    adapter: Adapter = Field(default_factory=_AdapterPlaceholder)
    config: dict[str, Any] | None = None

    @model_validator(mode="after")
    def _set_default_adapter(self):
        if isinstance(self.adapter, RagTool._AdapterPlaceholder):
            from embedchain import App

            from crewai_tools.adapters.embedchain_adapter import EmbedchainAdapter

            app = App.from_config(config=self.config) if self.config else App()
            self.adapter = EmbedchainAdapter(
                embedchain_app=app, summarize=self.summarize
            )

        return self

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        self.adapter.add(*args, **kwargs)

    def _run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        self._before_run(query, **kwargs)

        return f"Relevant Content:\n{self.adapter.query(query)}"

    def _before_run(self, query, **kwargs):
        pass

================
File: apps/agents/tools/rag/README.md
================
# RagTool: A Dynamic Knowledge Base Tool

RagTool is designed to answer questions by leveraging the power of RAG by leveraging (EmbedChain). It integrates seamlessly with the CrewAI ecosystem, offering a versatile and powerful solution for information retrieval.

## **Overview**

RagTool enables users to dynamically query a knowledge base, making it an ideal tool for applications requiring access to a vast array of information. Its flexible design allows for integration with various data sources, including files, directories, web pages, yoututbe videos and custom configurations.

## **Usage**

RagTool can be instantiated with data from different sources, including:

- 📰 PDF file
- 📊 CSV file
- 📃 JSON file
- 📝 Text
- 📁 Directory/ Folder
- 🌐 HTML Web page
- 📽️ Youtube Channel
- 📺 Youtube Video
- 📚 Docs website
- 📝 MDX file
- 📄 DOCX file
- 🧾 XML file
- 📬 Gmail
- 📝 Github
- 🐘 Postgres
- 🐬 MySQL
- 🤖 Slack
- 💬 Discord
- 🗨️ Discourse
- 📝 Substack
- 🐝 Beehiiv
- 💾 Dropbox
- 🖼️ Image
- ⚙️ Custom

#### **Creating an Instance**

```python
from crewai_tools.tools.rag_tool import RagTool

# Example: Loading from a file
rag_tool = RagTool().from_file('path/to/your/file.txt')

# Example: Loading from a directory
rag_tool = RagTool().from_directory('path/to/your/directory')

# Example: Loading from a web page
rag_tool = RagTool().from_web_page('https://example.com')
```

## **Contribution**

Contributions to RagTool and the broader CrewAI tools ecosystem are welcome. To contribute, please follow the standard GitHub workflow for forking the repository, making changes, and submitting a pull request.

## **License**

RagTool is open-source and available under the MIT license.

Thank you for considering RagTool for your knowledge base needs. Your contributions and feedback are invaluable to making RagTool even better.

================
File: apps/agents/tools/screenshot_tool/screenshot_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from django.conf import settings
from urllib.parse import urlparse
import re
"""
You can use the ScreenshotTool by 
 1. importing 'from apps.common.tools.screenshot_tool import screenshot_tool'' and 
 2. calling its run method with a URL as the argument: 'result = screenshot_tool.run(url=url)'
 """

class ScreenshotToolSchema(BaseModel):
    """Input schema for ScreenshotTool."""
    url: str = Field(..., description="The URL of the website to capture a screenshot.")

class ScreenshotTool(BaseTool):
    name: str = "Capture Website Screenshot"
    description: str = "Captures a screenshot of a given website URL."
    args_schema: Type[BaseModel] = ScreenshotToolSchema
    
    def _run(
        self, 
        url: str, 
        **kwargs: Any
    ) -> Any:
        browserless_url = os.getenv('BROWSERLESS_BASE_URL')
        api_key = os.getenv('BROWSERLESS_API_KEY')
        
        if not browserless_url or not api_key:
            return {'error': 'Browserless configuration is missing'}
        
        screenshot_url = f"{browserless_url}/screenshot?token={api_key}"
        
        payload = {
            "url": url,
            "options": {
                "fullPage": False,
                "type": "png"
            }
        }
        
        response = requests.post(screenshot_url, json=payload)
        
        if response.status_code == 200:
            # Generate a sanitized filename based on the URL
            parsed_url = urlparse(url)
            sanitized_name = re.sub(r'[^\w\-_\. ]', '_', parsed_url.netloc + parsed_url.path)
            filename = f"{sanitized_name[:200]}.png"  # Limit filename length
            filepath = os.path.join(settings.MEDIA_ROOT, 'crawled_screenshots', filename)
            # Ensure the directory exists
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            
            # Save the image
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            # Generate the URL for the saved image
            image_url = f"{settings.MEDIA_URL}crawled_screenshots/{filename}"
            
            return {'screenshot_url': image_url}
        else:
            return {'error': f'Failed to get screenshot. Status code: {response.status_code}'}

# Initialize the tool
screenshot_tool = ScreenshotTool()

================
File: apps/agents/tools/searxng_tool/searxng_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool

class SearxNGToolSchema(BaseModel):
    """Input schema for SearxNGSearchTool."""
    search_query: str = Field(..., description="The search query to be used.")

class SearxNGSearchTool(BaseTool):
    name: str = "Search the internet"
    description: str = "Searches the internet displaying titles, links, snippets, engines, and categories."
    args_schema: Type[BaseModel] = SearxNGToolSchema
    search_url: str = "https://search.neuralami.com"
    n_results: int = None
    
    def _run(
		self, 
		search_query: str, 
		**kwargs: Any
		) -> Any:
        payload = {        
            'q': search_query,
            'format': 'json',
            'pageno': '1',
            'language': 'en-US'
        }
        response = requests.get(self.search_url, params=payload)
        if response.ok:
            results = response.json()['results']
            formatted_results = []
            for result in results:
                try:
                    engines = ', '.join(result['engines']) if 'engines' in result else 'N/A'
                    formatted_results.append('\n'.join([
                            f"Title: {result.get('title', 'No Title')}",
                            f"Link: {result.get('url', 'No Link')}",
                            f"Score: {result.get('score', 'No Score')}",
                            f"Snippet: {result.get('content', 'No Snippet')}",
                            f"Engines: {engines}",
                            f"Category: {result.get('category', 'No Category')}",
                            "---"
                    ]))
                except KeyError as e:
                    print(f"Skipping an entry due to missing key: {e}")
                    continue

            content = '\n'.join(formatted_results)
            return f"Search results:\n{content}"
        else:
            return f"Failed to fetch search results. Status code: {response.status_code}"

================
File: apps/agents/admin.py
================
from django.contrib import admin
from .models import Crew, CrewExecution, CrewMessage, Agent, Task, Tool
from .forms import AgentForm, TaskForm, CrewForm

@admin.register(Crew)
class CrewAdmin(admin.ModelAdmin):
    form = CrewForm
    list_display = ('name', 'process', 'verbose', 'memory', 'cache', 'full_output', 'share_crew', 'planning')
    list_filter = ('process', 'verbose', 'memory', 'cache', 'full_output', 'share_crew', 'planning')
    filter_horizontal = ('agents', 'tasks')
    search_fields = ('name', 'language', 'language_file', 'output_log_file', 'prompt_file')
    fieldsets = (
        (None, {
            'fields': ('name', 'agents', 'tasks', 'process')
        }),
        ('Language Model Settings', {
            'fields': ('manager_llm', 'function_calling_llm', 'planning_llm')
        }),
        ('Execution Settings', {
            'fields': ('verbose', 'max_rpm', 'memory', 'cache', 'full_output', 'planning')
        }),
        ('Language and Localization', {
            'fields': ('language', 'language_file')
        }),
        ('Callbacks and Logging', {
            'fields': ('step_callback', 'task_callback', 'output_log_file')
        }),
        ('Advanced Settings', {
            'classes': ('collapse',),
            'fields': ('config', 'embedder', 'share_crew', 'manager_agent', 'manager_callbacks', 'prompt_file'),
        }),
    )

@admin.register(CrewExecution)
class CrewExecutionAdmin(admin.ModelAdmin):
    list_display = ('crew', 'user', 'client', 'status', 'created_at', 'updated_at')
    list_filter = ('status', 'created_at', 'updated_at')
    search_fields = ('crew__name', 'user__username', 'client__name')
    readonly_fields = ('created_at', 'updated_at', 'human_input_request', 'human_input_response')
    fieldsets = (
        (None, {
            'fields': ('crew', 'user', 'client', 'status', 'inputs', 'outputs')
        }),
        ('Human Input', {
            'fields': ('human_input_request', 'human_input_response')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at')
        }),
    )

@admin.register(CrewMessage)
class CrewMessageAdmin(admin.ModelAdmin):
    list_display = ('execution', 'timestamp')
    list_filter = ('timestamp',)
    search_fields = ('execution__crew__name', 'content')

@admin.register(Agent)
class AgentAdmin(admin.ModelAdmin):
    form = AgentForm
    list_display = ('name', 'role', 'llm', 'function_calling_llm', 'verbose', 'allow_delegation', 'allow_code_execution')
    list_filter = ('verbose', 'allow_delegation', 'allow_code_execution', 'use_system_prompt', 'respect_context_window')
    search_fields = ('name', 'role', 'goal', 'backstory')
    filter_horizontal = ('tools',)
    fieldsets = (
        (None, {
            'fields': ('name', 'role', 'goal', 'backstory', 'llm', 'tools')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('function_calling_llm', 'max_iter', 'max_rpm', 'max_execution_time', 'verbose', 'allow_delegation', 'step_callback', 'cache', 'system_template', 'prompt_template', 'response_template', 'allow_code_execution', 'max_retry_limit', 'use_system_prompt', 'respect_context_window'),
        }),
    )

@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    form = TaskForm
    list_display = ('description', 'agent', 'async_execution', 'human_input', 'output_type')
    list_filter = ('async_execution', 'human_input')
    filter_horizontal = ('tools', 'context')
    search_fields = ('description', 'agent__name', 'expected_output')
    readonly_fields = ('output',)

    def output_type(self, obj):
        if obj.output_json:
            return 'JSON'
        elif obj.output_pydantic:
            return 'Pydantic'
        elif obj.output_file:
            return 'File'
        else:
            return 'Default'
    output_type.short_description = 'Output Type'

    fieldsets = (
        (None, {
            'fields': ('description', 'agent', 'expected_output', 'tools', 'async_execution', 'context')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls'),
        }),
        ('Output', {
            'fields': ('output',),
        }),
    )

@admin.register(Tool)
class ToolAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ('name', 'description', 'function')

================
File: apps/agents/apps.py
================
from django.apps import AppConfig


class AgentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.agents'
    verbose_name = 'CrewAI Agents'

    def ready(self):
        pass  # We'll add any necessary imports or setup here later if needed

================
File: apps/agents/consumers.py
================
import json
import logging
from channels.generic.websocket import AsyncWebsocketConsumer

logger = logging.getLogger(__name__)

class ConnectionTestConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        logger.info("WebSocket connection attempt")
        try:
            await self.accept()
            logger.info("WebSocket connection accepted")
            await self.send(text_data=json.dumps({
                'message': 'Connected to server'
            }))
        except Exception as e:
            logger.error(f"Error in connect: {str(e)}")
            raise

    async def disconnect(self, close_code):
        logger.info(f"WebSocket disconnected with code: {close_code}")

    async def receive(self, text_data):
        logger.info(f"Received message: {text_data}")
        try:
            text_data_json = json.loads(text_data)
            message = text_data_json['message']

            await self.send(text_data=json.dumps({
                'message': f'Server received: {message}'
            }))
        except Exception as e:
            logger.error(f"Error in receive: {str(e)}")
            raise

================
File: apps/agents/forms.py
================
import random
from django import forms
from .models import CrewExecution, Agent, Task, Tool, Crew, get_available_tools, AVATAR_CHOICES
from apps.seo_manager.models import Client
from apps.common.utils import get_models
import json
import logging

logger = logging.getLogger(__name__)

class CrewExecutionForm(forms.ModelForm):
    inputs = forms.JSONField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = CrewExecution
        fields = ['inputs']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['inputs'].widget.attrs['class'] = 'form-control'
        self.fields['inputs'].help_text = 'Enter JSON formatted inputs for the crew execution.'

    def clean_inputs(self):
        inputs = self.cleaned_data.get('inputs')
        if inputs:
            try:
                return json.loads(inputs)
            except json.JSONDecodeError:
                raise forms.ValidationError("Invalid JSON format in inputs field")
        return {}

class HumanInputForm(forms.Form):
    response = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=True)

class AgentForm(forms.ModelForm):
    avatar = forms.ChoiceField(
        choices=[(choice, choice) for choice in AVATAR_CHOICES],
        widget=forms.RadioSelect(),
        required=False
    )
    llm = forms.ChoiceField(
        choices=[(model, model) for model in get_models()],
        widget=forms.Select(attrs={'class': 'form-select'}),
        required=True
    )
    tools = forms.ModelMultipleChoiceField(
        queryset=Tool.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False
    )

    class Meta:
        model = Agent
        fields = '__all__'  # Include all fields from the model
        widgets = {
            'goal': forms.Textarea(attrs={'rows': 3}),
            'backstory': forms.Textarea(attrs={'rows': 3}),
            'system_template': forms.Textarea(attrs={'rows': 4}),
            'prompt_template': forms.Textarea(attrs={'rows': 4}),
            'response_template': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.SelectMultiple(attrs={'class': 'form-select'}),
            'llm': forms.Select(attrs={'class': 'form-select'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            if isinstance(self.fields[field].widget, forms.CheckboxInput):
                self.fields[field].widget.attrs['class'] = 'form-check-input'
            elif not isinstance(self.fields[field].widget, (forms.SelectMultiple, forms.RadioSelect)):
                self.fields[field].widget.attrs['class'] = 'form-control'

        # Ensure avatar choices are set
        self.fields['avatar'].choices = [(choice, choice) for choice in AVATAR_CHOICES]

    def clean(self):
        cleaned_data = super().clean()
        logger.debug(f"Cleaned form data: {cleaned_data}")
        return cleaned_data

    def save(self, commit=True):
        logger.debug(f"Saving form with data: {self.cleaned_data}")
        instance = super().save(commit=False)
        if commit:
            instance.save()
            self.save_m2m()
        logger.debug(f"Saved instance: {instance.__dict__}")
        return instance

class TaskForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = Task
        fields = ['description', 'agent', 'expected_output', 'tools', 'async_execution', 'context', 'config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'expected_output': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.CheckboxSelectMultiple(),
            'context': forms.CheckboxSelectMultiple(),
            'output_json': forms.TextInput(),
            'output_pydantic': forms.TextInput(),
            'output_file': forms.TextInput(),
            'converter_cls': forms.TextInput(),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)

    def clean_config(self):
        config = self.cleaned_data.get('config')
        if config:
            try:
                return json.loads(config)
            except json.JSONDecodeError:
                raise forms.ValidationError("Invalid JSON format in config field")
        return None

class ToolForm(forms.ModelForm):
    class Meta:
        model = Tool
        fields = ['tool_class']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['tool_class'] = forms.ChoiceField(
            choices=[(tool, tool) for tool in get_available_tools()],
            widget=forms.Select(attrs={'class': 'form-control'})
        )

class CrewForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)
    manager_callbacks = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = Crew
        fields = ['name', 'agents', 'tasks', 'process', 'verbose', 'manager_llm', 'function_calling_llm', 
                  'config', 'max_rpm', 'language', 'language_file', 'memory', 'cache', 'embedder', 
                  'full_output', 'step_callback', 'task_callback', 'share_crew', 'output_log_file', 
                  'manager_agent', 'manager_callbacks', 'prompt_file', 'planning', 'planning_llm']
        widgets = {
            'agents': forms.CheckboxSelectMultiple(),
            'tasks': forms.CheckboxSelectMultiple(),
            'embedder': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        available_models = get_models()
        self.fields['manager_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['function_calling_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['planning_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['max_rpm'].widget.attrs['min'] = 0
        self.fields['max_rpm'].widget.attrs['step'] = 1

        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)
        if self.instance.manager_callbacks:
            self.initial['manager_callbacks'] = json.dumps(self.instance.manager_callbacks, indent=2)
        if self.instance.embedder:
            self.initial['embedder'] = json.dumps(self.instance.embedder, indent=2)

    def clean_config(self):
        return self._clean_json_field('config')

    def clean_manager_callbacks(self):
        return self._clean_json_field('manager_callbacks')

    def clean_embedder(self):
        return self._clean_json_field('embedder')

    def _clean_json_field(self, field_name):
        data = self.cleaned_data.get(field_name)
        if data:
            try:
                return json.loads(data)
            except json.JSONDecodeError:
                raise forms.ValidationError(f"Invalid JSON format in {field_name} field")
        return None

================
File: apps/agents/models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from apps.common.utils import get_models
from pydantic import BaseModel
import os
import importlib
import logging
import uuid
import random

logger = logging.getLogger(__name__)

User = get_user_model()

AVATAR_CHOICES = [
    'user.jpg', 'team-5.jpg', 'team-4.jpg', 'team-3.jpg', 'team-2.jpg', 'kal-visuals-square.jpg',
    'team-1.jpg', 'marie.jpg', 'ivana-squares.jpg', 'ivana-square.jpg'
]

def random_avatar():
    return random.choice(AVATAR_CHOICES)

def get_available_tools():
    tools_dir = os.path.join('apps', 'agents', 'tools')
    return [name for name in os.listdir(tools_dir) if os.path.isdir(os.path.join(tools_dir, name))]

def default_embedder():
    return {'provider': 'openai'}

class Tool(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    tool_class = models.CharField(max_length=100, choices=[(tool, tool) for tool in get_available_tools()])
    schema = models.JSONField(null=True, blank=True)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        try:
            # Import the tool module
            module_path = f"apps.agents.tools.{self.tool_class}.{self.tool_class}"
            module = importlib.import_module(module_path)
            logger.info(f"Successfully imported module: {module_path}")

            # Get all classes defined in the module
            classes = [cls for name, cls in module.__dict__.items() if isinstance(cls, type)]
            logger.info(f"Found {len(classes)} classes in the module")

            # Try to find the correct tool class
            tool_class = next((cls for cls in classes if cls.__name__.lower() == self.tool_class.lower() or cls.__name__.endswith('Tool')), None)

            if tool_class is None:
                raise ValueError(f"Could not find a suitable Tool class in module {module_path}")

            logger.info(f"Using tool class: {tool_class.__name__}")

            # Set name and description
            self.name = getattr(tool_class, 'name', self.tool_class)
            self.description = getattr(tool_class, 'description', '')

            # Set schema if args_schema is available and is a subclass of BaseModel
            args_schema = getattr(tool_class, 'args_schema', None)
            if args_schema and issubclass(args_schema, BaseModel):
                self.schema = args_schema.schema()
            else:
                self.schema = None
                logger.warning(f"args_schema not found or not a subclass of BaseModel for {self.tool_class}")

        except Exception as e:
            logger.error(f"Error in Tool.save: {str(e)}")
            raise

        super().save(*args, **kwargs)

class Agent(models.Model):
    name = models.CharField(max_length=255)
    role = models.CharField(max_length=100)
    goal = models.TextField()
    backstory = models.TextField()
    llm = models.CharField(max_length=100, default="gpt-3.5-turbo")
    tools = models.ManyToManyField(Tool, blank=True)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True)
    max_iter = models.IntegerField(default=25)
    max_rpm = models.IntegerField(null=True, blank=True)
    max_execution_time = models.IntegerField(null=True, blank=True)
    verbose = models.BooleanField(default=False)
    allow_delegation = models.BooleanField(default=False)
    step_callback = models.CharField(max_length=255, null=True, blank=True)
    cache = models.BooleanField(default=True)
    system_template = models.TextField(null=True, blank=True)
    prompt_template = models.TextField(null=True, blank=True)
    response_template = models.TextField(null=True, blank=True)
    allow_code_execution = models.BooleanField(default=False)
    max_retry_limit = models.IntegerField(default=2)
    use_system_prompt = models.BooleanField(default=True)
    respect_context_window = models.BooleanField(default=True)
    avatar = models.CharField(max_length=100, default=random_avatar)

    def __str__(self):
        return self.name

    def clean(self):
        super().clean()
        available_models = get_models()
        if self.llm not in available_models:
            raise ValidationError({'llm': f"Selected LLM '{self.llm}' is not available. Please choose from: {', '.join(available_models)}"})

class Task(models.Model):
    description = models.TextField()
    agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True)
    expected_output = models.TextField()
    tools = models.ManyToManyField(Tool, blank=True)
    async_execution = models.BooleanField(default=False)
    context = models.ManyToManyField('self', symmetrical=False, blank=True)
    config = models.JSONField(null=True, blank=True)
    output_json = models.CharField(max_length=255, null=True, blank=True)
    output_pydantic = models.CharField(max_length=255, null=True, blank=True)
    output_file = models.CharField(max_length=255, null=True, blank=True)
    output = models.TextField(null=True, blank=True)
    callback = models.CharField(max_length=255, null=True, blank=True)
    human_input = models.BooleanField(default=False)
    converter_cls = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return self.description[:50]

class Crew(models.Model):
    name = models.CharField(max_length=100)
    agents = models.ManyToManyField(Agent)
    tasks = models.ManyToManyField(Task)
    process = models.CharField(max_length=20, choices=[('sequential', 'Sequential'), ('hierarchical', 'Hierarchical')], default='sequential')
    verbose = models.BooleanField(default=False)
    manager_llm = models.CharField(max_length=100, null=True, blank=True)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True)
    config = models.JSONField(null=True, blank=True)
    max_rpm = models.IntegerField(null=True, blank=True)
    language = models.CharField(max_length=50, default='English')
    language_file = models.CharField(max_length=255, null=True, blank=True)
    memory = models.BooleanField(default=False)
    cache = models.BooleanField(default=True)
    embedder = models.JSONField(default=default_embedder)
    full_output = models.BooleanField(default=False)
    step_callback = models.CharField(max_length=255, null=True, blank=True)
    task_callback = models.CharField(max_length=255, null=True, blank=True)
    share_crew = models.BooleanField(default=False)
    output_log_file = models.CharField(max_length=255, null=True, blank=True)
    manager_agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True, related_name='managed_crews')
    manager_callbacks = models.JSONField(null=True, blank=True)
    prompt_file = models.CharField(max_length=255, null=True, blank=True)
    planning = models.BooleanField(default=False)
    planning_llm = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        return self.name

class CrewExecution(models.Model):
    crew = models.ForeignKey(Crew, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    client = models.ForeignKey('seo_manager.Client', on_delete=models.SET_NULL, null=True, blank=True)
    inputs = models.JSONField()
    outputs = models.JSONField(null=True, blank=True)
    status = models.CharField(max_length=25, choices=[
        ('PENDING', 'Pending'),
        ('RUNNING', 'Running'),
        ('WAITING_FOR_HUMAN_INPUT', 'Waiting for Human Input'),
        ('COMPLETED', 'Completed'),
        ('FAILED', 'Failed')
    ], default='PENDING')
    human_input_request = models.JSONField(null=True, blank=True)
    human_input_response = models.JSONField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    error_message = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.crew.name} - {self.created_at}"

class CrewMessage(models.Model):
    execution = models.ForeignKey(CrewExecution, on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.execution.crew.name} - {self.timestamp}"

class Pipeline(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    status = models.CharField(max_length=20, default='Idle')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def clean(self):
        # Validate that stages are properly structured
        stages = self.stages.all().order_by('order')
        for stage in stages:
            if stage.is_parallel:
                if stage.crew is not None:
                    raise ValidationError("Parallel stages should not have a single crew assigned.")
            else:
                if stage.crew is None:
                    raise ValidationError("Sequential stages must have a crew assigned.")

class PipelineStage(models.Model):
    pipeline = models.ForeignKey(Pipeline, related_name='stages', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    crew = models.ForeignKey('Crew', on_delete=models.SET_NULL, null=True, blank=True)
    order = models.PositiveIntegerField()
    is_parallel = models.BooleanField(default=False)
    is_router = models.BooleanField(default=False)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.pipeline.name} - {self.name}"

    def clean(self):
        if self.is_router and self.crew is not None:
            raise ValidationError("Router stages should not have a crew assigned.")

class PipelineRoute(models.Model):
    stage = models.ForeignKey(PipelineStage, related_name='routes', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    condition = models.TextField()  # This would store a serialized form of the condition
    target_pipeline = models.ForeignKey(Pipeline, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.stage.name} - {self.name}"

class PipelineExecution(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    pipeline = models.ForeignKey(Pipeline, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, default='Pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.pipeline.name} Execution - {self.created_at}"

class PipelineRunResult(models.Model):
    execution = models.ForeignKey(PipelineExecution, related_name='run_results', on_delete=models.CASCADE)
    raw_output = models.TextField(blank=True)
    json_output = models.JSONField(null=True, blank=True)
    pydantic_output = models.TextField(null=True, blank=True)  # This would store a serialized form of the Pydantic model
    token_usage = models.JSONField(null=True, blank=True)
    trace = models.JSONField(null=True, blank=True)

    def __str__(self):
        return f"Run Result for {self.execution.pipeline.name}"

class CrewOutput(models.Model):
    run_result = models.ForeignKey(PipelineRunResult, related_name='crew_outputs', on_delete=models.CASCADE)
    crew = models.ForeignKey('Crew', on_delete=models.CASCADE)
    output = models.TextField()

    def __str__(self):
        return f"Output from {self.crew.name} in {self.run_result.execution.pipeline.name}"

================
File: apps/agents/README.md
================
# Crew Execution and Human Input

This document provides an overview of the crew execution process and the human input feature in the CrewAI platform.

## Crew Execution

Crews are executed using the following process:

1. A user initiates a crew execution from the crew detail page.
2. The `execute_crew` Celery task is triggered, which creates a `CrewExecution` instance.
3. The crew is executed using the CrewAI library.
4. If the execution completes successfully, the results are stored in the `CrewExecution` instance.
5. If an error occurs, the execution is marked as failed, and an error message is logged.

## Human Input Feature

The human input feature allows crews to request input from users during execution. Here's how it works:

1. If a task in the crew requires human input, it raises a `HumanInputRequired` exception.
2. The `execute_crew` task catches this exception and updates the `CrewExecution` status to "WAITING_FOR_HUMAN_INPUT".
3. The execution detail page displays the human input request to the user.
4. The user submits their input through a form on the execution detail page.
5. The `resume_crew_execution` task is triggered, which continues the execution with the provided human input.

### Implementation Details

- The `CrewExecution` model includes fields for `human_input_request` and `human_input_response`.
- The `execution_detail.html` template includes a form for submitting human input when required.
- The `tasks.py` file contains the logic for handling human input requests and resuming execution.

## Testing

Unit tests for crew execution and human input handling can be found in `tests.py`. These tests cover:

- Basic crew execution
- Handling of human input requests
- Resuming execution after human input
- Creation of crew messages

To run the tests, use the following command:

```
python manage.py test apps.agents
```

## Future Improvements

- Implement a notification system to alert users when their input is required.
- Add more comprehensive error handling and recovery mechanisms.
- Enhance the user interface for a more intuitive human input experience.

For any questions or issues, please contact the development team.

================
File: apps/agents/routing.py
================
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/execution/(?P<execution_id>\w+)/$', consumers.ExecutionConsumer.as_asgi()),
]

================
File: apps/agents/tasks.py
================
from celery import shared_task
from .models import CrewExecution, CrewMessage, Task, Agent as AgentModel
from crewai import Crew, Agent, Task as CrewAITask, LLM
from django.core.exceptions import ObjectDoesNotExist
import logging
from apps.common.utils import get_llm_openai
from django.conf import settings
import builtins
from django.core.cache import cache
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
import time

logger = logging.getLogger(__name__)
channel_layer = get_channel_layer()

class HumanInputRequired(Exception):
    def __init__(self, request: str):
        self.request = request
        super().__init__(f"Human input required: {request}")

def custom_input_handler(prompt=None, execution_id=None):
    if prompt is None:
        prompt = "Input required:"
    
    if execution_id is None:
        logger.warning("Execution ID not provided for custom input handler")
        return builtins.input(prompt)  # Fall back to standard input

    # Store the prompt in the cache
    cache.set(f'human_input_request_{execution_id}', prompt, timeout=3600)
    
    # Notify the web interface that input is needed
    async_to_sync(channel_layer.group_send)(
        f"execution_{execution_id}",
        {
            "type": "human_input_required",
            "message": prompt
        }
    )
    
    # Wait for the input (with a timeout)
    user_input = None
    timeout = 3600  # 1 hour timeout
    start_time = time.time()
    while user_input is None and time.time() - start_time < timeout:
        user_input = cache.get(f'human_input_response_{execution_id}')
        if user_input is None:
            time.sleep(1)  # Wait for 1 second before checking again
    
    if user_input is None:
        raise TimeoutError("No user input received within the timeout period")
    
    # Clear the cache
    cache.delete(f'human_input_response_{execution_id}')
    
    return user_input

# Replace the built-in input function
#builtins.input = lambda prompt=None: custom_input_handler(prompt, execution.id)

@shared_task
def execute_crew(execution_id):
    logger.info(f"Starting crew execution for id: {execution_id}")
    execution = CrewExecution.objects.get(id=execution_id)
    
    try:
        result = run_crew(execution)
        update_execution_status(execution, 'COMPLETED', result)
        log_message = f"Crew execution completed successfully. Output: {result}"
        log_crew_message(execution, log_message)
    except HumanInputRequired as e:
        handle_human_input_required(execution, e)
    except Exception as e:
        handle_execution_error(execution, e)

    logger.info(f"Execution completed for CrewExecution id: {execution_id}")
    return execution.id

def run_crew(execution):
    logger.debug(f"Setting up crew for execution id: {execution.id}")
    logger.debug(f"# Create agents\n{execution.crew.agents.all()}")
    logger.debug(f"# Define tasks\n{execution.crew.tasks.all()}")
    agents = create_crewai_agents(execution.crew.agents.all())
    tasks = create_crewai_tasks(execution.crew.tasks.all(), agents, execution)
    
    # Log agents and tasks before crew creation

    if not tasks:
        raise ValueError("No valid tasks for crew execution")

    crew = create_crew(agents, tasks, execution)
    
    # Log the crew configuration
    logger.info(f"# Assemble a crew\n{crew}")
    
    logger.info(f"Crew instance created for execution id: {execution.id}. Starting kickoff.")
    
    # Set up the custom input handler for this execution
    builtins.input = lambda prompt=None: custom_input_handler(prompt, execution.id)
    
    try:
        result = crew.kickoff(**execution.inputs)
    finally:
        # Restore the original input function
        builtins.input = builtins.__dict__['input']
    logger.info(f"Crew kickoff completed for execution id: {execution.id}")
    return result

def create_crewai_agents(agent_models):
    agents = []
    for agent_model in agent_models:
        try:
            model_name=agent_model.llm.split('/', 1)[1] if '/' in agent_model.llm else agent_model.llm
            logger.debug(f"agent model_name: {model_name}")
            crewai_agent_llm = LLM(
                model=model_name,
                api_key=settings.LITELLM_MASTER_KEY,
                base_url=settings.API_BASE_URL,
            )
            agent_params = {
                'role': agent_model.role,
                'goal': agent_model.goal,
                'backstory': agent_model.backstory,
                'verbose': agent_model.verbose,
                'allow_delegation': agent_model.allow_delegation,
                'llm': crewai_agent_llm,
            }
            optional_params = ['max_iter', 'max_rpm', 'function_calling_llm', 'step_callback']
            agent_params.update({param: getattr(agent_model, param) for param in optional_params if getattr(agent_model, param) is not None})
            
            agents.append(Agent(**agent_params))
            logger.info(f"CrewAI Agent created successfully for agent id: {agent_model.id}")
        except Exception as e:
            logger.error(f"Error creating CrewAI Agent for agent {agent_model.id}: {str(e)}")
    return agents

def create_crewai_tasks(task_models, agents, execution):
    tasks = []
    for task_model in task_models:
        try:
            crewai_agent = next((agent for agent in agents if agent.role == task_model.agent.role), None)
            if not crewai_agent:
                logger.warning(f"No matching CrewAI agent found for task {task_model.id}")
                continue

            task_dict = {
                'description': task_model.description,
                'agent': crewai_agent,
                'expected_output': task_model.expected_output,
                'async_execution': task_model.async_execution,
                'human_input': task_model.human_input,
            }

            if task_model.human_input:
                task_dict['human_input_callback'] = lambda request: handle_human_input(execution, request)

            optional_fields = ['output_json', 'output_pydantic', 'output_file', 'callback', 'converter_cls']
            task_dict.update({field: getattr(task_model, field) for field in optional_fields if getattr(task_model, field) is not None})

            tasks.append(CrewAITask(**task_dict))
            logger.info(f"CrewAITask created successfully for task: {task_model.id}")
        except Exception as e:
            logger.error(f"Error creating CrewAITask for task {task_model.id}: {str(e)}")
    return tasks

def create_crew(agents, tasks, execution):
    crew_config = execution.crew.config or {}
    return Crew(
        agents=agents,
        tasks=tasks,
        process=execution.crew.process,
        verbose=execution.crew.verbose,
        **crew_config
    )

def handle_human_input(execution, request):
    raise HumanInputRequired(request)

def update_execution_status(execution, status, result=None):
    execution.status = status
    if result:
        if isinstance(result, dict) and 'final_output' in result:
            execution.outputs = {
                'final_output': result['final_output'],
                'tasks_outputs': result.get('tasks_outputs', [])
            }
        else:
            execution.outputs = {'final_output': str(result)}
    execution.save()

def log_crew_message(execution, content):
    CrewMessage.objects.create(execution=execution, content=content)

def handle_human_input_required(execution, exception):
    logger.info(f"Human input required for execution {execution.id}: {str(exception)}")
    update_execution_status(execution, 'WAITING_FOR_HUMAN_INPUT')
    execution.human_input_request = exception.request
    execution.save()
    log_crew_message(execution, f"Human input required: {exception.request}")

def handle_execution_error(execution, exception):
    logger.error(f"Error during crew execution: {str(exception)}", exc_info=True)
    update_execution_status(execution, 'FAILED')
    error_message = f"Crew execution failed: {str(exception)}"
    log_crew_message(execution, error_message)
    execution.error_message = error_message
    execution.save()

@shared_task
def resume_crew_execution(execution_id: int) -> int:
    logger.info(f"Resuming execution for CrewExecution id: {execution_id}")
    try:
        execution = CrewExecution.objects.get(id=execution_id)
        if execution.status != 'WAITING_FOR_HUMAN_INPUT':
            logger.error(f"Cannot resume execution {execution_id}: not waiting for human input")
            return execution_id

        update_execution_status(execution, 'RUNNING')
        
        # Create a custom input handler for this specific execution
        def execution_specific_input_handler(prompt):
            return custom_input_handler(prompt, execution_id)

        try:
            result = run_crew(execution, input_handler=execution_specific_input_handler)
            update_execution_status(execution, 'COMPLETED', result)
            log_message = f"Execution resumed and completed after human input. Output: {result}"
            log_crew_message(execution, log_message)
            logger.info(f"Execution resumed and completed for CrewExecution id: {execution_id}")
        except HumanInputRequired as e:
            handle_human_input_required(execution, e)
        except Exception as e:
            handle_execution_error(execution, e)

    except ObjectDoesNotExist:
        logger.error(f"CrewExecution with id {execution_id} not found")
    except Exception as e:
        logger.error(f"Unexpected error in resume_crew_execution: {str(e)}", exc_info=True)

    return execution_id

================
File: apps/agents/tests.py
================
from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Crew, CrewExecution, CrewMessage
from .tasks import execute_crew, resume_crew_execution
from unittest.mock import patch

User = get_user_model()

class CrewExecutionTestCase(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.crew = Crew.objects.create(name='Test Crew', process='sequential')
        self.execution = CrewExecution.objects.create(
            crew=self.crew,
            user=self.user,
            inputs={'test_input': 'value'}
        )

    @patch('apps.agents.tasks.run_crew')
    def test_execute_crew(self, mock_run_crew):
        mock_run_crew.return_value = {'test_output': 'result'}
        
        execute_crew(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'COMPLETED')
        self.assertEqual(self.execution.outputs, {'test_output': 'result'})

    @patch('apps.agents.tasks.run_crew')
    def test_execute_crew_human_input_required(self, mock_run_crew):
        from .tasks import HumanInputRequired
        mock_run_crew.side_effect = HumanInputRequired('Test human input required')
        
        execute_crew(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'WAITING_FOR_HUMAN_INPUT')
        self.assertEqual(self.execution.human_input_request, 'Test human input required')

    @patch('apps.agents.tasks.run_crew')
    def test_resume_crew_execution(self, mock_run_crew):
        mock_run_crew.return_value = {'test_output': 'result after human input'}
        
        self.execution.status = 'WAITING_FOR_HUMAN_INPUT'
        self.execution.human_input_response = 'Test human input'
        self.execution.save()
        
        resume_crew_execution(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'COMPLETED')
        self.assertEqual(self.execution.outputs, {'test_output': 'result after human input'})

    def test_crew_message_creation(self):
        CrewMessage.objects.create(
            execution=self.execution,
            content='Test message'
        )
        
        self.assertEqual(CrewMessage.objects.count(), 1)
        self.assertEqual(CrewMessage.objects.first().content, 'Test message')

================
File: apps/agents/urls.py
================
from django.urls import path
from . import views
from . import views_admin

app_name = 'agents'

urlpatterns = [
    path('', views.crewai_home, name='crewai_home'),
    path('crews/', views.crew_list, name='crew_list'),
    path('crew/<int:crew_id>/', views.crew_detail, name='crew_detail'),
    path('executions/', views.execution_list, name='execution_list'),
    path('execution/<int:execution_id>/', views.execution_detail, name='execution_detail'),
    path('execution/<int:execution_id>/status/', views.execution_status, name='execution_status'),
    path('execution/<int:execution_id>/provide_input/', views.provide_human_input, name='provide_human_input'),
    
    # Admin views
    path('manage/agents/', views_admin.manage_agents, name='manage_agents'),
    path('manage/agents/add/', views_admin.add_agent, name='add_agent'),
    path('manage/agents/edit/<int:agent_id>/', views_admin.edit_agent, name='edit_agent'),
    path('manage/agents/delete/<int:agent_id>/', views_admin.delete_agent, name='delete_agent'),
    
    path('manage/tasks/', views_admin.manage_tasks, name='manage_tasks'),
    path('manage/tasks/add/', views_admin.add_task, name='add_task'),
    path('manage/tasks/edit/<int:task_id>/', views_admin.edit_task, name='edit_task'),
    path('manage/tasks/delete/<int:task_id>/', views_admin.delete_task, name='delete_task'),
    
    path('manage/tools/', views_admin.manage_tools, name='manage_tools'),
    path('manage/tools/add/', views_admin.add_tool, name='add_tool'),
    path('manage/tools/edit/<int:tool_id>/', views_admin.edit_tool, name='edit_tool'),
    path('manage/tools/delete/<int:tool_id>/', views_admin.delete_tool, name='delete_tool'),
    path('get_tool_info/', views_admin.get_tool_info, name='get_tool_info'),

    path('manage/crews/', views_admin.manage_crews, name='manage_crews'),
    path('manage/crews/add/', views_admin.add_crew, name='add_crew'),
    path('manage/crews/edit/<int:crew_id>/', views_admin.edit_crew, name='edit_crew'),
    path('manage/crews/delete/<int:crew_id>/', views_admin.delete_crew, name='delete_crew'),
    path('manage/crews/update_agents/<int:crew_id>/', views_admin.update_crew_agents, name='update_crew_agents'),
    
    path('pipelines/', views.manage_pipelines, name='manage_pipelines'),
    path('manage/agents/card-view/', views.manage_agents_card_view, name='manage_agents_card_view'),
    path('manage/crews/card-view/', views_admin.manage_crews_card_view, name='manage_crews_card_view'),
    
    path('connection-test/', views.connection_test, name='connection_test'),
]

================
File: apps/agents/views_admin.py
================
import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from .models import Agent, Task, Tool, Crew
from .forms import AgentForm, TaskForm, ToolForm, CrewForm
from django.http import JsonResponse
import importlib
import traceback
import os

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def manage_agents(request):
    agents = Agent.objects.all()
    return render(request, 'agents/manage_agents.html', {'agents': agents})

@login_required
@user_passes_test(is_admin)
def add_agent(request):
    if request.method == 'POST':
        form = AgentForm(request.POST)
        logger.debug(f"POST data: {request.POST}")
        if form.is_valid():
            logger.info("Form is valid. Attempting to save.")
            try:
                agent = form.save(commit=False)
                agent.avatar = form.cleaned_data['avatar']  # Explicitly set the avatar
                agent.save()
                form.save_m2m()  # Save many-to-many relationships
                logger.info(f"Agent saved successfully. ID: {agent.id}")
                messages.success(request, 'Agent added successfully.')
                return redirect('agents:manage_agents')
            except Exception as e:
                logger.error(f"Error saving agent: {str(e)}")
                logger.error(traceback.format_exc())
                messages.error(request, f"Error adding agent: {str(e)}")
        else:
            logger.warning(f"Form is invalid. Errors: {form.errors}")
            messages.error(request, 'Please correct the errors below.')
    else:
        form = AgentForm()
    return render(request, 'agents/agent_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        form = AgentForm(request.POST, instance=agent)
        logger.debug(f"POST data: {request.POST}")
        if form.is_valid():
            logger.info("Form is valid. Attempting to save.")
            try:
                agent = form.save(commit=False)
                agent.avatar = form.cleaned_data['avatar']  # Explicitly set the avatar
                agent.save()
                form.save_m2m()  # Save many-to-many relationships
                logger.info(f"Agent updated successfully. ID: {agent.id}")
                messages.success(request, 'Agent updated successfully.')
                return redirect('agents:manage_agents')
            except Exception as e:
                logger.error(f"Error updating agent: {str(e)}")
                logger.error(traceback.format_exc())
                messages.error(request, f"Error updating agent: {str(e)}")
        else:
            logger.warning(f"Form is invalid. Errors: {form.errors}")
            messages.error(request, 'Please correct the errors below.')
    else:
        form = AgentForm(instance=agent)
    return render(request, 'agents/agent_form.html', {'form': form, 'agent': agent})

@login_required
@user_passes_test(is_admin)
def delete_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        agent.delete()
        messages.success(request, 'Agent deleted successfully.')
        return redirect('agents:manage_agents')
    return render(request, 'agents/confirm_delete.html', {'object': agent, 'type': 'agent'})

@login_required
@user_passes_test(is_admin)
def manage_tasks(request):
    tasks = Task.objects.all()
    return render(request, 'agents/manage_tasks.html', {'tasks': tasks})

@login_required
@user_passes_test(is_admin)
def add_task(request):
    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task added successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm()
    return render(request, 'agents/task_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task updated successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm(instance=task)
    return render(request, 'agents/task_form.html', {'form': form, 'task': task})

@login_required
@user_passes_test(is_admin)
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        task.delete()
        messages.success(request, 'Task deleted successfully.')
        return redirect('agents:manage_tasks')
    return render(request, 'agents/confirm_delete.html', {'object': task, 'type': 'task'})

@login_required
@user_passes_test(is_admin)
def manage_tools(request):
    tools = Tool.objects.all().order_by('-id')
    return render(request, 'agents/manage_tools.html', {'tools': tools})

@login_required
@user_passes_test(is_admin)
def add_tool(request):
    logger.info("Entering add_tool view")
    if request.method == 'POST':
        logger.info("POST request received")
        form = ToolForm(request.POST)
        logger.info(f"Form data: {request.POST}")
        if form.is_valid():
            logger.info("Form is valid")
            try:
                tool = form.save(commit=False)
                logger.info(f"Tool object created: {tool.__dict__}")
                tool.save()
                logger.info("Tool saved successfully")
                messages.success(request, 'Tool added successfully.')
                return redirect('agents:manage_tools')
            except Exception as e:
                logger.error(f"Error in tool creation: {str(e)}")
                logger.error(traceback.format_exc())
                messages.error(request, f"Error adding tool: {str(e)}")
        else:
            logger.warning(f"Form is invalid. Errors: {form.errors}")
    else:
        logger.info("GET request received")
        form = ToolForm()
    
    logger.info("Rendering tool_form.html")
    return render(request, 'agents/tool_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        form = ToolForm(request.POST, instance=tool)
        if form.is_valid():
            try:
                tool = form.save(commit=False)
                # Fetch tool info to ensure name and description are set correctly
                tool_info = get_tool_info_internal(tool.tool_class)
                if tool_info.get('error'):
                    raise ValueError(tool_info['error'])
                tool.name = tool_info['name']
                tool.description = tool_info['description']
                tool.save()
                messages.success(request, 'Tool updated successfully.')
                return redirect('agents:manage_tools')
            except Exception as e:
                logger.error(f"Error updating tool: {str(e)}")
                messages.error(request, f"Error updating tool: {str(e)}")
    else:
        form = ToolForm(instance=tool)
    return render(request, 'agents/tool_form.html', {'form': form, 'tool': tool})

@login_required
@user_passes_test(is_admin)
def delete_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        tool.delete()
        messages.success(request, 'Tool deleted successfully.')
        return redirect('agents:manage_tools')
    return render(request, 'agents/confirm_delete.html', {'object': tool, 'type': 'tool'})

@login_required
@user_passes_test(is_admin)
def get_tool_info(request):
    tool_class = request.GET.get('tool_class')
    logger.info(f"Received request for tool_class: {tool_class}")
    
    if tool_class:
        try:
            # Log the current working directory and the full path of the tool
            cwd = os.getcwd()
            tool_path = os.path.join(cwd, 'apps', 'agents', 'tools', tool_class, f"{tool_class}.py")
            logger.info(f"Current working directory: {cwd}")
            logger.info(f"Full path of the tool: {tool_path}")
            
            # Check if the file exists
            if not os.path.exists(tool_path):
                logger.error(f"Tool file does not exist: {tool_path}")
                return JsonResponse({'error': 'Tool file not found'}, status=404)
            
            module_path = f"apps.agents.tools.{tool_class}.{tool_class}"
            logger.info(f"Attempting to import module: {module_path}")
            
            module = importlib.import_module(module_path)
            logger.info(f"Module imported successfully: {module}")
            
            # Get all classes defined in the module
            classes = [cls for name, cls in module.__dict__.items() if isinstance(cls, type)]
            logger.info(f"Classes found in the module: {classes}")
            
            # Try to find a class that ends with 'Tool' or matches the module name
            tool_class_obj = next((cls for cls in classes if cls.__name__.endswith('Tool') or cls.__name__.lower() == tool_class.lower()), None)

            if tool_class_obj is None:
                logger.error(f"Could not find a suitable Tool class in module {module_path}")
                return JsonResponse({'error': 'Tool class not found in module'}, status=404)
            
            logger.info(f"Tool class object: {tool_class_obj}")
            
            # Get name and description, with fallbacks
            name = getattr(tool_class_obj, 'name', tool_class)
            description = getattr(tool_class_obj, 'description', '')
            
            logger.info(f"Retrieved name: {name}, description: {description}")
            
            return JsonResponse({
                'name': name,
                'description': description,
            })
        except ImportError as e:
            logger.error(f"ImportError: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': 'Failed to import tool module'}, status=500)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)
    
    logger.warning("Invalid request: tool_class parameter is missing")
    return JsonResponse({'error': 'Invalid request'}, status=400)

@login_required
@user_passes_test(is_admin)
def manage_crews(request):
    crews = Crew.objects.all().prefetch_related('agents', 'tasks')
    context = {
        'crews': crews,
        'show_process': True,
        'show_planning': True,
        'show_language': True,
    }
    return render(request, 'agents/manage_crews.html', context)

@login_required
@user_passes_test(is_admin)
def add_crew(request):
    if request.method == 'POST':
        form = CrewForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew added successfully.')
            return redirect('agents:manage_crews')
    else:
        form = CrewForm()
    return render(request, 'agents/crew_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        form = CrewForm(request.POST, instance=crew)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew updated successfully.')
            return redirect('agents:manage_crews')
    else:
        form = CrewForm(instance=crew)
    return render(request, 'agents/crew_form.html', {'form': form, 'crew': crew})

@login_required
@user_passes_test(is_admin)
def delete_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        crew.delete()
        messages.success(request, 'Crew deleted successfully.')
        return redirect('agents:manage_crews')
    return render(request, 'agents/confirm_delete.html', {'object': crew, 'type': 'crew'})

@login_required
@user_passes_test(is_admin)
def update_crew_agents(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        agent_ids = request.POST.getlist('agents')
        crew.agents.set(agent_ids)
        
        # Update manager_agent if it's in the POST data
        manager_agent_id = request.POST.get('manager_agent')
        if manager_agent_id:
            crew.manager_agent_id = manager_agent_id
        else:
            crew.manager_agent = None
        
        crew.save()
        messages.success(request, 'Crew agents updated successfully.')
    return redirect('agents:manage_crews')

@login_required
@user_passes_test(is_admin)
def manage_crews_card_view(request):
    crews = Crew.objects.all()
    context = {
        'crews': crews,
    }
    return render(request, 'agents/manage_crews_card_view.html', context)

================
File: apps/agents/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from .models import Crew, CrewExecution, CrewMessage, Pipeline, Agent  # Add Agent here
from .forms import CrewExecutionForm, HumanInputForm, AgentForm
from .tasks import execute_crew, resume_crew_execution
from django.core.exceptions import ValidationError
import logging
import json
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.core.cache import cache

logger = logging.getLogger(__name__)

@login_required
def crewai_home(request):
    crews = Crew.objects.all()[:3]  # Get the first 3 crews for the summary
    recent_executions = CrewExecution.objects.filter(user=request.user).order_by('-created_at')[:5]
    
    context = {
        'crews': crews,
        'recent_executions': recent_executions,
    }
    return render(request, 'agents/crewai_home.html', context)

@login_required
def crew_list(request):
    logger.debug("Entering crew_list view")
    crews = Crew.objects.all()
    return render(request, 'agents/crew_list.html', {'crews': crews})

@login_required
def crew_detail(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    recent_executions = CrewExecution.objects.filter(crew=crew).order_by('-created_at')[:5]
    
    if request.method == 'POST':
        form = CrewExecutionForm(request.POST)
        if form.is_valid():
            execution = form.save(commit=False)
            execution.crew = crew  # Set the crew here
            execution.user = request.user
            execution.inputs = form.cleaned_data.get('inputs') or {}
            execution.save()
            
            # Start the Celery task
            execute_crew.delay(execution.id)
            
            return JsonResponse({
                'message': 'Crew execution started successfully',
                'execution_id': execution.id
            })
        else:
            return JsonResponse({'errors': form.errors}, status=400)
    else:
        form = CrewExecutionForm()
    
    context = {
        'crew': crew,
        'form': form,
        'recent_executions': recent_executions,
    }
    return render(request, 'agents/crew_detail.html', context)

@login_required
def execution_list(request):
    logger.debug("Entering execution_list view")
    executions = CrewExecution.objects.filter(user=request.user).order_by('-created_at')
    crews = Crew.objects.all()

    # Apply filters
    crew_id = request.GET.get('crew')
    status = request.GET.get('status')

    if crew_id:
        executions = executions.filter(crew_id=crew_id)
    if status:
        executions = executions.filter(status=status)

    # Pagination
    paginator = Paginator(executions, 10)  # Show 10 executions per page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'executions': page_obj,
        'crews': crews,
    }
    return render(request, 'agents/execution_list.html', context)

@login_required
def execution_detail(request, execution_id):
    logger.debug(f"Entering execution_detail view for execution_id: {execution_id}")
    execution = get_object_or_404(CrewExecution, id=execution_id, user=request.user)
    logger.info(f"Execution details: id={execution.id}, status={execution.status}, crew={execution.crew.name}")
    
    crew_messages = CrewMessage.objects.filter(execution=execution).order_by('timestamp')
    logger.info(f"Number of crew messages: {crew_messages.count()}")
    for message in crew_messages:
        logger.debug(f"Message: {message.content[:100]}...")  # Log first 100 characters of each message
    
    human_input_form = None
    if execution.status == 'WAITING_FOR_HUMAN_INPUT':
        human_input_form = HumanInputForm()
        logger.info("Human input form created")
    
    if execution.outputs:
        logger.info(f"Execution outputs: {json.dumps(execution.outputs)}")
    else:
        logger.info("No execution outputs available")

    context = {
        'execution': execution,
        'messages': crew_messages,
        'human_input_form': human_input_form,
    }
    logger.debug("Rendering execution_detail.html template")
    return render(request, 'agents/execution_detail.html', context)

@login_required
def execution_status(request, execution_id):
    try:
        execution = CrewExecution.objects.get(id=execution_id, user=request.user)
        recent_messages = CrewMessage.objects.filter(execution=execution).order_by('-timestamp')[:10]
        response_data = {
            'status': execution.status,
            'outputs': execution.outputs,
            'human_input_request': execution.human_input_request,
            'messages': [{'agent': msg.agent, 'content': msg.content} for msg in recent_messages],
        }
        return JsonResponse(response_data)
    except CrewExecution.DoesNotExist:
        return JsonResponse({'error': 'Execution not found'}, status=404)

@login_required
@csrf_exempt
@require_POST
def provide_human_input(request, execution_id):
    try:
        execution = CrewExecution.objects.get(id=execution_id, user=request.user)
        if execution.status != 'WAITING_FOR_HUMAN_INPUT':
            return JsonResponse({'error': 'Execution is not waiting for human input'}, status=400)

        data = json.loads(request.body)
        user_input = data.get('input')

        if not user_input:
            return JsonResponse({'error': 'No input provided'}, status=400)

        # Store the user input in the cache
        cache.set(f'human_input_response_{execution_id}', user_input, timeout=3600)

        # Update the execution status
        execution.status = 'RUNNING'
        execution.save()

        # Resume the Celery task
        resume_crew_execution.delay(execution_id)

        return JsonResponse({'message': 'Human input received and processing resumed'})
    except CrewExecution.DoesNotExist:
        return JsonResponse({'error': 'Execution not found'}, status=404)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Error in provide_human_input: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@login_required
def manage_pipelines(request):
    pipelines = Pipeline.objects.all()
    context = {
        'pipelines': pipelines,
    }
    return render(request, 'agents/manage_pipelines.html', context)

@login_required
def manage_agents_card_view(request):
    agents = Agent.objects.prefetch_related('crew_set', 'task_set', 'tools').all()
    form = AgentForm()  # Create an instance of the form
    context = {
        'agents': agents,
        'form': form,  # Pass the form to the template
    }
    return render(request, 'agents/manage_agents_card_view.html', context)

@login_required
def manage_crews_card_view(request):
    crews = Crew.objects.all()
    context = {
        'crews': crews,
    }
    return render(request, 'agents/manage_crews_card_view.html', context)

def connection_test(request):
    return render(request, 'agents/connection_test.html')

================
File: templates/agents/agent_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if agent %}Edit Agent{% else %}Add Agent{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if agent %}Edit Agent{% else %}Add Agent{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        {% if request.GET.next %}
                            <input type="hidden" name="next" value="{{ request.GET.next }}">
                        {% endif %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.name.errors %}has-error{% endif %}">
                                    <label for="{{ form.name.id_for_label }}" class="form-control-label">Name</label>
                                    {{ form.name }}
                                    {% if form.name.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.name.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group {% if form.role.errors %}has-error{% endif %}">
                                    <label for="{{ form.role.id_for_label }}" class="form-control-label">Role</label>
                                    {{ form.role }}
                                    {% if form.role.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.role.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.goal.errors %}has-error{% endif %}">
                                    <label for="{{ form.goal.id_for_label }}" class="form-control-label">Goal</label>
                                    {{ form.goal }}
                                    {% if form.goal.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.goal.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.backstory.errors %}has-error{% endif %}">
                                    <label for="{{ form.backstory.id_for_label }}" class="form-control-label">Backstory</label>
                                    {{ form.backstory }}
                                    {% if form.backstory.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.backstory.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.llm.errors %}has-error{% endif %}">
                                    <label for="{{ form.llm.id_for_label }}" class="form-control-label">Language Model</label>
                                    {{ form.llm }}
                                    {% if form.llm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group {% if form.function_calling_llm.errors %}has-error{% endif %}">
                                    <label for="{{ form.function_calling_llm.id_for_label }}" class="form-control-label">Function Calling LLM</label>
                                    {{ form.function_calling_llm }}
                                    {% if form.function_calling_llm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.function_calling_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.tools.errors %}has-error{% endif %}">
                                    <label for="{{ form.tools.id_for_label }}" class="form-control-label">Tools</label>
                                    <div class="tool-selection">
                                        {{ form.tools }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_iter.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_iter.id_for_label }}" class="form-control-label">Max Iterations</label>
                                    {{ form.max_iter }}
                                    {% if form.max_iter.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_iter.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_rpm.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_rpm.id_for_label }}" class="form-control-label">Max RPM</label>
                                    {{ form.max_rpm }}
                                    {% if form.max_rpm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_rpm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_execution_time.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_execution_time.id_for_label }}" class="form-control-label">Max Execution Time</label>
                                    {{ form.max_execution_time }}
                                    {% if form.max_execution_time.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_execution_time.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.verbose.errors %}has-error{% endif %}">
                                    {{ form.verbose }}
                                    <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                                    {% if form.verbose.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.verbose.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.allow_delegation.errors %}has-error{% endif %}">
                                    {{ form.allow_delegation }}
                                    <label class="form-check-label" for="{{ form.allow_delegation.id_for_label }}">Allow Delegation</label>
                                    {% if form.allow_delegation.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.allow_delegation.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.cache.errors %}has-error{% endif %}">
                                    {{ form.cache }}
                                    <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                                    {% if form.cache.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.cache.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.step_callback.errors %}has-error{% endif %}">
                                    <label for="{{ form.step_callback.id_for_label }}" class="form-control-label">Step Callback</label>
                                    {{ form.step_callback }}
                                    {% if form.step_callback.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.step_callback.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.system_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.system_template.id_for_label }}" class="form-control-label">System Template</label>
                                    {{ form.system_template }}
                                    {% if form.system_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.system_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.prompt_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.prompt_template.id_for_label }}" class="form-control-label">Prompt Template</label>
                                    {{ form.prompt_template }}
                                    {% if form.prompt_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.prompt_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.response_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.response_template.id_for_label }}" class="form-control-label">Response Template</label>
                                    {{ form.response_template }}
                                    {% if form.response_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.response_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.allow_code_execution.errors %}has-error{% endif %}">
                                    {{ form.allow_code_execution }}
                                    <label class="form-check-label" for="{{ form.allow_code_execution.id_for_label }}">Allow Code Execution</label>
                                    {% if form.allow_code_execution.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.allow_code_execution.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.use_system_prompt.errors %}has-error{% endif %}">
                                    {{ form.use_system_prompt }}
                                    <label class="form-check-label" for="{{ form.use_system_prompt.id_for_label }}">Use System Prompt</label>
                                    {% if form.use_system_prompt.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.use_system_prompt.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.respect_context_window.errors %}has-error{% endif %}">
                                    {{ form.respect_context_window }}
                                    <label class="form-check-label" for="{{ form.respect_context_window.id_for_label }}">Respect Context Window</label>
                                    {% if form.respect_context_window.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.respect_context_window.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.max_retry_limit.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_retry_limit.id_for_label }}" class="form-control-label">Max Retry Limit</label>
                                    {{ form.max_retry_limit }}
                                    {% if form.max_retry_limit.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_retry_limit.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div class="form-group {% if form.avatar.errors %}has-error{% endif %}">
                                    <label class="form-control-label">Avatar</label>
                                    <div class="avatar-selection">
                                        {% for choice in form.avatar.field.choices %}
                                        <div class="avatar-option">
                                            <input type="radio" name="{{ form.avatar.name }}" id="avatar_{{ forloop.counter }}" value="{{ choice.0 }}" {% if form.avatar.value == choice.0 %}checked{% endif %} class="avatar-input">
                                            <label for="avatar_{{ forloop.counter }}" class="avatar-label">
                                                <img src="{% static 'assets/img/'|add:choice.0 %}" alt="{{ choice.0 }}" class="avatar-image">
                                            </label>
                                        </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{{ request.GET.next|default:'/agents/manage/' }}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Agent</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


{% endblock content %}

{% block extrastyle %}
{{ block.super }}
<style>
    .avatar-selection {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    .avatar-option {
        position: relative;
    }
    .avatar-input {
        display: none;
    }
    .avatar-label {
        cursor: pointer;
        display: inline-block;
        padding: 2px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    .avatar-image {
        width: 72px;
        height: 72px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #fff;
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        transition: all 0.15s ease;
    }
    .avatar-input:checked + .avatar-label .avatar-image {
        border-color: #5e72e4;
        box-shadow: 0 0 0 2px #5e72e4;
    }
    .avatar-input:checked + .avatar-label::after {
        content: '✓';
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #2dce89;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
    }
    .tool-selection {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ced4da;
        padding: 10px;
        border-radius: 4px;
    }
    .tool-selection label {
        display: block;
        margin-bottom: 5px;
    }
</style>
{% endblock extrastyle %}

{% block extra_js %}
{{ block.super }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add 'form-control' class to all input, select, and textarea elements
        var formElements = document.querySelectorAll('input, select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        // Add 'form-select' class to select elements
        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        // Add 'form-check-input' class to checkbox inputs
        var checkboxInputs = document.querySelectorAll('input[type="checkbox"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Add click event for avatar selection
        var avatarInputs = document.querySelectorAll('.avatar-input');
        avatarInputs.forEach(function(input) {
            input.addEventListener('change', function() {
                document.querySelectorAll('.avatar-label').forEach(function(label) {
                    label.classList.remove('selected');
                });
                if (this.checked) {
                    this.nextElementSibling.classList.add('selected');
                }
            });
        });

        // Trigger change event on the checked avatar input to highlight it on page load
        var checkedAvatar = document.querySelector('.avatar-input:checked');
        if (checkedAvatar) {
            checkedAvatar.dispatchEvent(new Event('change'));
        }

        // Add form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/base_agents.html
================
{% extends "layouts/base.html" %}

{% block title %} CrewAI Agents {% endblock %}

{% block content %}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Agents</h5>
                    <a href="{% url 'agents:manage_agents' %}" class="text-muted">
                        <i class="fas fa-cog"></i>
                    </a>
                </div>
                <div class="card-body">
                    {% block agents_list %}{% endblock %}
                </div>
            </div>
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Previous Tasks</h5>
                </div>
                <div class="card-body">
                    {% block previous_tasks %}{% endblock %}
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">CrewAI Execution</h5>
                </div>
                <div class="card-body">
                    {% block main_content %}{% endblock %}
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock content %}

{% block javascripts %}
<script>
    // Add any JavaScript specific to the agents app here
</script>
{% endblock javascripts %}

{% block extrastyle %}
<style>
    .card-header .fa-cog {
        font-size: 1.2em;
        transition: transform 0.3s ease;
    }
    .card-header .fa-cog:hover {
        transform: rotate(90deg);
    }
</style>
{% endblock extrastyle %}

================
File: templates/agents/confirm_delete.html
================
{% extends "layouts/base.html" %}

{% block title %} Confirm Delete {% endblock %}

{% block content %}
<div class="container-fluid">
    <h1 class="mb-4">Confirm Delete</h1>
    <p>Are you sure you want to delete the following {{ type }}?</p>
    <p><strong>{{ object }}</strong></p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Confirm Delete</button>
        <a href="{% url 'agents:manage_'|add:type|add:'s' %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock content %}

================
File: templates/agents/connection_test.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} WebSocket Connection Test {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>WebSocket Connection Test</h6>
        </div>
        <div class="card-body">
          <div id="status" class="alert alert-info">Initializing...</div>
          <button id="connect-btn" class="btn btn-primary mb-3">Connect to WebSocket</button>
          <button id="send-btn" class="btn btn-secondary mb-3" disabled>Send Test Message</button>
          <div id="log" class="bg-light p-3" style="height: 300px; overflow-y: auto;">
            <pre><code></code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusDiv = document.getElementById('status');
    const logDiv = document.getElementById('log');
    const connectBtn = document.getElementById('connect-btn');
    const sendBtn = document.getElementById('send-btn');
    let socket = null;

    function log(message) {
      const logContent = logDiv.querySelector('code');
      logContent.innerHTML += message + '\n';
      logDiv.scrollTop = logDiv.scrollHeight;
    }

    function connect() {
      log('Attempting to connect...');
      
      // Use wss:// for secure connections, ws:// for non-secure
      const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
      const wsPath = `${wsScheme}${window.location.host}/ws/connection_test/`;
      
      log(`Connecting to: ${wsPath}`);
      
      socket = new WebSocket(wsPath);

      socket.onopen = function(e) {
        log('WebSocket connection established');
        statusDiv.textContent = 'Connected';
        statusDiv.className = 'alert alert-success';
        connectBtn.disabled = true;
        sendBtn.disabled = false;
      };

      socket.onmessage = function(event) {
        log(`Received message: ${event.data}`);
      };

      socket.onclose = function(event) {
        if (event.wasClean) {
          log(`Connection closed cleanly, code=${event.code}, reason=${event.reason}`);
        } else {
          log('Connection died');
        }
        statusDiv.textContent = 'Disconnected';
        statusDiv.className = 'alert alert-danger';
        connectBtn.disabled = false;
        sendBtn.disabled = true;
      };

      socket.onerror = function(error) {
        log(`WebSocket Error: ${JSON.stringify(error)}`);
        console.error('WebSocket Error:', error);
        statusDiv.textContent = 'Error occurred';
        statusDiv.className = 'alert alert-danger';
      };
    }

    connectBtn.onclick = connect;

    sendBtn.onclick = function() {
      if (socket && socket.readyState === WebSocket.OPEN) {
        const message = 'Test message from client';
        socket.send(message);
        log(`Sent message: ${message}`);
      } else {
        log('WebSocket is not connected');
      }
    };
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/crew_detail.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Crew Detail {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-lg-8 col-md-12">
      <!-- Existing crew details card -->
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between">
            <h6 class="mb-0">{{ crew.name }}</h6>
          </div>
          <p class="text-sm mb-0">{{ crew.description }}</p>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder">Process</h6>
              <p class="text-sm mb-3">{{ crew.get_process_display }}</p>
            </div>
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder">Verbose</h6>
              <p class="text-sm mb-3">{{ crew.verbose|yesno:"Yes,No" }}</p>
            </div>
          </div>
          <hr class="horizontal dark">
          <div class="row">
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Agents</h6>
              <ul class="list-group">
                {% for agent in crew.agents.all %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">
                  <strong class="text-dark">{{ agent.name }}</strong> &nbsp;|&nbsp; {{ agent.role }}
                </li>
                {% empty %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">No agents assigned to this crew.</li>
                {% endfor %}
              </ul>
            </div>
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Tasks</h6>
              <ul class="list-group">
                {% for task in crew.tasks.all %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">{{ task.description }}</li>
                {% empty %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">No tasks assigned to this crew.</li>
                {% endfor %}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <!-- New card for real-time updates -->
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6 class="mb-0">Real-time Execution Updates</h6>
        </div>
        <div class="card-body">
          <div id="execution-status" class="alert alert-info" role="alert">
            No active execution
          </div>
          <div id="execution-messages">
            <!-- Messages will be dynamically inserted here -->
          </div>
          <div id="human-input-section" style="display: none;">
            <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Human Input Required</h6>
            <div id="human-input-prompt"></div>
            <textarea id="human-input-response" class="form-control mb-3" rows="3"></textarea>
            <button id="submit-human-input" class="btn btn-primary">Submit Input</button>
          </div>
        </div>
      </div>

      <!-- Existing card for starting new execution -->
      <div class="card">
        <div class="card-header pb-0">
          <h6 class="mb-0">Start New Execution for {{ crew.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" id="crew-execution-form">
            {% csrf_token %}
            {% for field in form %}
              {% if field.name != 'crew' %}
                <div class="form-group">
                  <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
                  {% if field.field.widget.input_type == 'textarea' %}
                    <textarea class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}" rows="4">{{ field.value|default:'' }}</textarea>
                  {% elif field.field.widget.input_type == 'select' %}
                    <select class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}">
                      {% for choice in field.field.choices %}
                        <option value="{{ choice.0 }}" {% if choice.0 == field.value %}selected{% endif %}>{{ choice.1 }}</option>
                      {% endfor %}
                    </select>
                  {% else %}
                    <input type="{{ field.field.widget.input_type }}" class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}" value="{{ field.value|default:'' }}">
                  {% endif %}
                  {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                  {% endif %}
                  {% for error in field.errors %}
                    <div class="invalid-feedback d-block">{{ error }}</div>
                  {% endfor %}
                </div>
              {% endif %}
            {% endfor %}
            <button type="submit" class="btn btn-primary mt-3" id="submit-btn">Start Execution</button>
          </form>
        </div>
      </div>
    </div>
    <div class="col-lg-4 col-md-12 mt-4 mt-lg-0">
      <div class="card h-100">
        <div class="card-header pb-0">
          <h6 class="mb-0">Recent Executions</h6>
        </div>
        <div class="card-body p-3">
          <div class="timeline timeline-one-side">
            {% for execution in recent_executions %}
            <div class="timeline-block mb-3">
              <span class="timeline-step">
                <i class="ni ni-bell-55 text-{% if execution.status == 'COMPLETED' %}success{% elif execution.status == 'FAILED' %}danger{% else %}warning{% endif %}"></i>
              </span>
              <div class="timeline-content">
                <h6 class="text-dark text-sm font-weight-bold mb-0">{{ execution.get_status_display }}</h6>
                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</p>
                <p class="text-sm mt-3 mb-2">
                  <a href="{% url 'agents:execution_detail' execution.id %}" class="text-primary">View Details</a>
                </p>
              </div>
            </div>
            {% empty %}
            <p class="text-sm mb-0">No previous executions for this crew.</p>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  $(function () {
    let activeExecutionId = null;

    $('#crew-execution-form').on('submit', function(e) {
      e.preventDefault();
      var form = $(this);
      var url = form.attr('action');
      
      $.ajax({
        type: "POST",
        url: url,
        data: form.serialize(),
        success: function(data) {
          activeExecutionId = data.execution_id;
          updateExecutionStatus();
          $('#execution-status').text('Execution started');
          $('#execution-messages').empty();
          $('#human-input-section').hide();
        },
        error: function(xhr, status, error) {
          var errorMessage = xhr.status + ': ' + xhr.statusText;
          alert('Error - ' + errorMessage);
        }
      });
    });

    function updateExecutionStatus() {
      if (!activeExecutionId) return;

      $.ajax({
        url: `/agents/execution/${activeExecutionId}/status/`,
        success: function(data) {
          $('#execution-status').text(`Status: ${data.status}`);
          
          if (data.messages && data.messages.length > 0) {
            let messagesHtml = data.messages.map(msg => 
              `<p><strong>${msg.agent || 'System'}:</strong> ${msg.content}</p>`
            ).join('');
            $('#execution-messages').html(messagesHtml);
          }

          if (data.status === 'WAITING_FOR_HUMAN_INPUT') {
            showHumanInputPrompt(data.human_input_request);
          } else {
            $('#human-input-section').hide();
          }

          if (data.status !== 'COMPLETED' && data.status !== 'FAILED') {
            setTimeout(updateExecutionStatus, 5000);  // Poll every 5 seconds
          } else {
            activeExecutionId = null;
          }
        },
        error: function() {
          $('#execution-status').text('Error fetching status');
          activeExecutionId = null;
        }
      });
    }

    function showHumanInputPrompt(prompt) {
      $('#human-input-prompt').text(prompt);
      $('#human-input-section').show();
    }

    $('#submit-human-input').on('click', function() {
      let userInput = $('#human-input-response').val();
      $.ajax({
        type: "POST",
        url: `/agents/execution/${activeExecutionId}/provide_input/`,
        data: JSON.stringify({ input: userInput }),
        contentType: "application/json",
        success: function(data) {
          $('#human-input-section').hide();
          $('#human-input-response').val('');
          updateExecutionStatus();
        },
        error: function(xhr, status, error) {
          alert('Error submitting input: ' + error);
        }
      });
    });
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/crew_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if crew %}Edit Crew{% else %}Add Crew{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if crew %}Edit Crew{% else %}Add Crew{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.name.id_for_label }}" class="form-control-label">Name</label>
                                    {{ form.name }}
                                    {% if form.name.errors %}
                                        <div class="text-danger">
                                            {{ form.name.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.agents.id_for_label }}" class="form-control-label">Agents</label>
                                    {{ form.agents }}
                                    {% if form.agents.errors %}
                                        <div class="text-danger">
                                            {{ form.agents.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="{{ form.tasks.id_for_label }}" class="form-control-label">Tasks</label>
                                    {{ form.tasks }}
                                    {% if form.tasks.errors %}
                                        <div class="text-danger">
                                            {{ form.tasks.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.process.id_for_label }}" class="form-control-label">Process</label>
                                    {{ form.process }}
                                    {% if form.process.errors %}
                                        <div class="text-danger">
                                            {{ form.process.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_llm.id_for_label }}" class="form-control-label">Manager LLM</label>
                                    {{ form.manager_llm }}
                                    {% if form.manager_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.function_calling_llm.id_for_label }}" class="form-control-label">Function Calling LLM</label>
                                    {{ form.function_calling_llm }}
                                    {% if form.function_calling_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.function_calling_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.config.id_for_label }}" class="form-control-label">Config</label>
                                    {{ form.config }}
                                    {% if form.config.errors %}
                                        <div class="text-danger">
                                            {{ form.config.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.max_rpm.id_for_label }}" class="form-control-label">Max RPM</label>
                                    {{ form.max_rpm }}
                                    {% if form.max_rpm.errors %}
                                        <div class="text-danger">
                                            {{ form.max_rpm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.language.id_for_label }}" class="form-control-label">Language</label>
                                    {{ form.language }}
                                    {% if form.language.errors %}
                                        <div class="text-danger">
                                            {{ form.language.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.language_file.id_for_label }}" class="form-control-label">Language File</label>
                                    {{ form.language_file }}
                                    {% if form.language_file.errors %}
                                        <div class="text-danger">
                                            {{ form.language_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.embedder.id_for_label }}" class="form-control-label">Embedder</label>
                                    {{ form.embedder }}
                                    {% if form.embedder.errors %}
                                        <div class="text-danger">
                                            {{ form.embedder.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.step_callback.id_for_label }}" class="form-control-label">Step Callback</label>
                                    {{ form.step_callback }}
                                    {% if form.step_callback.errors %}
                                        <div class="text-danger">
                                            {{ form.step_callback.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.task_callback.id_for_label }}" class="form-control-label">Task Callback</label>
                                    {{ form.task_callback }}
                                    {% if form.task_callback.errors %}
                                        <div class="text-danger">
                                            {{ form.task_callback.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.output_log_file.id_for_label }}" class="form-control-label">Output Log File</label>
                                    {{ form.output_log_file }}
                                    {% if form.output_log_file.errors %}
                                        <div class="text-danger">
                                            {{ form.output_log_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_agent.id_for_label }}" class="form-control-label">Manager Agent</label>
                                    {{ form.manager_agent }}
                                    {% if form.manager_agent.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_agent.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_callbacks.id_for_label }}" class="form-control-label">Manager Callbacks</label>
                                    {{ form.manager_callbacks }}
                                    {% if form.manager_callbacks.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_callbacks.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.prompt_file.id_for_label }}" class="form-control-label">Prompt File</label>
                                    {{ form.prompt_file }}
                                    {% if form.prompt_file.errors %}
                                        <div class="text-danger">
                                            {{ form.prompt_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.planning_llm.id_for_label }}" class="form-control-label">Planning LLM</label>
                                    {{ form.planning_llm }}
                                    {% if form.planning_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.planning_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.verbose }}
                                    <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                                    {% if form.verbose.errors %}
                                        <div class="text-danger">
                                            {{ form.verbose.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.memory }}
                                    <label class="form-check-label" for="{{ form.memory.id_for_label }}">Memory</label>
                                    {% if form.memory.errors %}
                                        <div class="text-danger">
                                            {{ form.memory.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.cache }}
                                    <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                                    {% if form.cache.errors %}
                                        <div class="text-danger">
                                            {{ form.cache.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.full_output }}
                                    <label class="form-check-label" for="{{ form.full_output.id_for_label }}">Full Output</label>
                                    {% if form.full_output.errors %}
                                        <div class="text-danger">
                                            {{ form.full_output.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.share_crew }}
                                    <label class="form-check-label" for="{{ form.share_crew.id_for_label }}">Share Crew</label>
                                    {% if form.share_crew.errors %}
                                        <div class="text-danger">
                                            {{ form.share_crew.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.planning }}
                                    <label class="form-check-label" for="{{ form.planning.id_for_label }}">Planning</label>
                                    {% if form.planning.errors %}
                                        <div class="text-danger">
                                            {{ form.planning.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{% url 'agents:manage_crews' %}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Crew</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}


{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });

        // Add classes to form elements
        var formElements = document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]), select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        var checkboxInputs = document.querySelectorAll('input[type="checkbox"], input[type="radio"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/crew_list.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    {% for crew in crews %}
    <li class="list-group-item">
        <a href="{% url 'agents:crew_detail' crew.id %}" data-toggle="tooltip" title="{{ crew.description }}">
            {{ crew.name }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No CrewAI crews available.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for execution in request.user.crewaiexecution_set.all|slice:":5" %}
    <li class="list-group-item">
        <a href="{% url 'agents:execution_detail' execution.id %}">
            {{ execution.crew.name }} - {{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>Welcome to CrewAI Agents</h2>
<p>Select a crew from the list on the left to start a new execution or view previous tasks.</p>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/crewai_home.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Crews</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ crews.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Recent Executions</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ recent_executions.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-lg-6">
              <div class="d-flex flex-column h-100">
                <p class="mb-1 pt-2 text-bold">Welcome back, {{ request.user.username|capfirst }}</p>
                <h5 class="font-weight-bolder">CrewAI Dashboard</h5>
                <p class="mb-5">What do you want to do with your crews today.</p>
                <a class="text-body text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:manage_crews_card_view' %}">
                  View All Crews
                  <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
                </a>
              </div>
            </div>
            <div class="col-lg-5 ms-auto text-center mt-5 mt-lg-0">
              <div class="bg-gradient-primary border-radius-lg h-100">
                <img src="{% static 'assets/img/shapes/waves-white.svg' %}" class="position-absolute h-100 w-50 top-0 d-lg-block d-none" alt="waves">
                <div class="position-relative d-flex align-items-center justify-content-center h-100">
                  <img class="w-100 position-relative z-index-2 pt-4" src="{% static 'assets/img/illustrations/rocket-white.png' %}" alt="rocket">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card h-100 p-3">
        <div class="overflow-hidden position-relative border-radius-lg bg-cover h-100" style="background-image: url('{% static 'assets/img/ivancik.jpg' %}');">
          <span class="mask bg-gradient-dark"></span>
          <div class="card-body position-relative z-index-1 d-flex flex-column h-100 p-3">
            <h5 class="text-white font-weight-bolder mb-4 pt-2">Quick Actions</h5>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:add_crew' %}">
              Create New Crew
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:execution_list' %}">
              View Executions
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Crew Summaries</h6>
        </div>
        <div class="card-body p-3">
          {% for crew in crews %}
          <div class="d-flex mb-3">
            <div class="icon icon-shape bg-gradient-dark shadow text-center border-radius-md">
              <i class="ni ni-mobile-button text-lg opacity-10" aria-hidden="true"></i>
            </div>
            <div class="ms-3">
              <div class="numbers">
                <h6 class="mb-1 text-dark text-sm">{{ crew.name }}</h6>
                <span class="text-sm">Agents: {{ crew.agent_set.count }}, Tasks: {{ crew.task_set.count }}</span>
              </div>
            </div>
            <div class="ms-auto">
              <a class="btn btn-link text-dark px-3 mb-0" href="{% url 'agents:crew_detail' crew.id %}">
                <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>View
              </a>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Recent Executions</h6>
        </div>
        <div class="card-body p-3">
          <ul class="list-group">
            {% for execution in recent_executions %}
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-mobile-button text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">{{ execution.crew.name }}</h6>
                  <span class="text-xs">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</span>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:execution_detail' execution.id %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            {% endfor %}
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Replace the existing Navigation card with this updated version -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Navigation</h6>
        </div>
        <div class="card-body p-3">
          <div class="row">
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:manage_crews' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-bullet-list-67 me-2"></i> Manage Crews</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:manage_agents' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-single-02 me-2"></i> Manage Agents</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:manage_tasks' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-check-bold me-2"></i> Manage Tasks</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:manage_tools' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-app me-2"></i> Manage Tools</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:manage_pipelines' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-settings-gear-65 me-2"></i> Manage Pipelines</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
            <div class="col-md-4 col-sm-6 mb-3">
              <a href="{% url 'agents:execution_list' %}" class="btn btn-outline-primary btn-sm w-100 h-100 d-flex align-items-center justify-content-between">
                <span><i class="ni ni-calendar-grid-58 me-2"></i> Execution List</span>
                <i class="ni ni-bold-right"></i>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
{% endblock javascripts %}

================
File: templates/agents/dashboard_home.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Crews</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ crews.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Recent Executions</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ recent_executions.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-lg-6">
              <div class="d-flex flex-column h-100">
                <p class="mb-1 pt-2 text-bold">Welcome back, {{ request.user.username }}</p>
                <h5 class="font-weight-bolder">CrewAI Dashboard</h5>
                <p class="mb-5">Here's what's happening with your CrewAI today.</p>
                <a class="text-body text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:manage_crews' %}">
                  View All Crews
                  <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
                </a>
              </div>
            </div>
            <div class="col-lg-5 ms-auto text-center mt-5 mt-lg-0">
              <div class="bg-gradient-primary border-radius-lg h-100">
                <img src="{% static 'assets/img/shapes/waves-white.svg' %}" class="position-absolute h-100 w-50 top-0 d-lg-block d-none" alt="waves">
                <div class="position-relative d-flex align-items-center justify-content-center h-100">
                  <img class="w-100 position-relative z-index-2 pt-4" src="{% static 'assets/img/illustrations/rocket-white.png' %}" alt="rocket">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card h-100 p-3">
        <div class="overflow-hidden position-relative border-radius-lg bg-cover h-100" style="background-image: url('{% static 'assets/img/ivancik.jpg' %}');">
          <span class="mask bg-gradient-dark"></span>
          <div class="card-body position-relative z-index-1 d-flex flex-column h-100 p-3">
            <h5 class="text-white font-weight-bolder mb-4 pt-2">Quick Actions</h5>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:add_crew' %}">
              Create New Crew
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:execution_list' %}">
              View Executions
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Crew Summaries</h6>
        </div>
        <div class="card-body p-3">
          {% for crew in crews %}
          <div class="d-flex mb-3">
            <div class="icon icon-shape bg-gradient-dark shadow text-center border-radius-md">
              <i class="ni ni-mobile-button text-lg opacity-10" aria-hidden="true"></i>
            </div>
            <div class="ms-3">
              <div class="numbers">
                <h6 class="mb-1 text-dark text-sm">{{ crew.name }}</h6>
                <span class="text-sm">Agents: {{ crew.agent_set.count }}, Tasks: {{ crew.task_set.count }}</span>
              </div>
            </div>
            <div class="ms-auto">
              <a class="btn btn-link text-dark px-3 mb-0" href="{% url 'agents:crew_detail' crew.id %}">
                <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>View
              </a>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Recent Executions</h6>
        </div>
        <div class="card-body p-3">
          <ul class="list-group">
            {% for execution in recent_executions %}
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-mobile-button text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">{{ execution.crew.name }}</h6>
                  <span class="text-xs">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</span>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:execution_detail' execution.id %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            {% endfor %}
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Add links to existing pages -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Navigation</h6>
        </div>
        <div class="card-body p-3">
          <ul class="list-group">
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-bullet-list-67 text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">Manage Crews</h6>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:manage_crews' %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-calendar-grid-58 text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">Execution List</h6>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:execution_list' %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            <!-- Add more links to other existing pages as needed -->
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
{% endblock javascripts %}

================
File: templates/agents/execution_detail.html
================
{% extends "agents/base_agents.html" %}
{% load static %}

{% block main_content %}
<div class="container mt-4">
    <h2>Execution Detail</h2>
    <div class="card mb-4">
        <div class="card-header">
            <h3>Execution Information</h3>
        </div>
        <div class="card-body">
            <p><strong>Crew:</strong> {{ execution.crew.name }}</p>
            <p><strong>Status:</strong> <span id="execution-status">{{ execution.get_status_display }}</span></p>
            <p><strong>Started:</strong> {{ execution.created_at }}</p>
            <p><strong>Last Updated:</strong> <span id="last-updated">{{ execution.updated_at }}</span></p>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h3>Execution Messages</h3>
        </div>
        <div class="card-body">
            <ul id="message-list" class="list-group">
                {% for message in messages %}
                <li class="list-group-item">
                    <strong>{{ message.timestamp|date:"SHORT_DATETIME_FORMAT" }}:</strong> {{ message.content }}
                </li>
                {% empty %}
                <li class="list-group-item">No messages yet.</li>
                {% endfor %}
            </ul>
        </div>
    </div>

    {% if execution.status == 'WAITING_FOR_HUMAN_INPUT' %}
    <div class="card mb-4">
        <div class="card-header">
            <h3>Human Input Required</h3>
        </div>
        <div class="card-body">
            <form method="post" action="{% url 'agents:submit_human_input' execution.id %}">
                {% csrf_token %}
                {{ human_input_form.as_p }}
                <button type="submit" class="btn btn-primary">Submit Input</button>
            </form>
        </div>
    </div>
    {% endif %}

    {% if execution.outputs %}
    <div class="card mb-4">
        <div class="card-header">
            <h3>Execution Outputs</h3>
        </div>
        <div class="card-body">
            <pre>{{ execution.outputs|pprint }}</pre>
        </div>
    </div>
    {% endif %}
</div>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    function updateExecutionStatus() {
        console.log("Updating execution status...");
        $.ajax({
            url: "{% url 'agents:execution_status' execution.id %}",
            method: 'GET',
            success: function(data) {
                console.log("Received status update:", data);
                $('#execution-status').text(data.status);
                $('#last-updated').text(new Date().toLocaleString());

                if (data.status === 'COMPLETED' || data.status === 'FAILED') {
                    console.log("Execution completed or failed. Stopping updates.");
                    clearInterval(statusInterval);
                }

                if (data.human_input_request) {
                    console.log("Human input required. Reloading page.");
                    location.reload();
                }

                if (data.outputs) {
                    console.log("New outputs available. Reloading page.");
                    location.reload();
                }
            },
            error: function(xhr, status, error) {
                console.error("Error fetching execution status:", error);
                console.error("XHR status:", status);
                console.error("XHR response:", xhr.responseText);
            }
        });
    }

    var statusInterval = setInterval(updateExecutionStatus, 5000);  // Update every 5 seconds

    // Initial update
    $(document).ready(function() {
        console.log("Document ready. Performing initial status update.");
        updateExecutionStatus();
    });
</script>
{% endblock %}

================
File: templates/agents/execution_list.html
================
{% extends "agents/base_agents.html" %}
{% load static %}

{% block main_content %}
<div class="container mt-4">
    <h2>Executions</h2>

    <div class="card mb-4">
        <div class="card-header">
            <h3>Filter Executions</h3>
        </div>
        <div class="card-body">
            <form method="get" class="form-inline">
                <div class="form-group mr-2">
                    <label for="crew" class="mr-2">Crew:</label>
                    <select name="crew" id="crew" class="form-control">
                        <option value="">All Crews</option>
                        {% for crew in crews %}
                        <option value="{{ crew.id }}" {% if request.GET.crew == crew.id|stringformat:"s" %}selected{% endif %}>{{ crew.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group mr-2">
                    <label for="status" class="mr-2">Status:</label>
                    <select name="status" id="status" class="form-control">
                        <option value="">All Statuses</option>
                        <option value="PENDING" {% if request.GET.status == 'PENDING' %}selected{% endif %}>Pending</option>
                        <option value="RUNNING" {% if request.GET.status == 'RUNNING' %}selected{% endif %}>Running</option>
                        <option value="COMPLETED" {% if request.GET.status == 'COMPLETED' %}selected{% endif %}>Completed</option>
                        <option value="FAILED" {% if request.GET.status == 'FAILED' %}selected{% endif %}>Failed</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Filter</button>
            </form>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3>Execution List</h3>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Crew</th>
                        <th>Status</th>
                        <th>Started</th>
                        <th>Last Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for execution in executions %}
                    <tr>
                        <td>{{ execution.crew.name }}</td>
                        <td>
                            <span class="badge badge-{% if execution.status == 'COMPLETED' %}success{% elif execution.status == 'FAILED' %}danger{% elif execution.status == 'RUNNING' %}warning{% else %}secondary{% endif %}">
                                {{ execution.get_status_display }}
                            </span>
                        </td>
                        <td>{{ execution.created_at|date:"Y-m-d H:i:s" }}</td>
                        <td>{{ execution.updated_at|date:"Y-m-d H:i:s" }}</td>
                        <td>
                            <a href="{% url 'agents:execution_detail' execution.id %}" class="btn btn-sm btn-info">View Details</a>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5">No executions found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>

            {% if is_paginated %}
            <nav aria-label="Execution list pagination">
                <ul class="pagination justify-content-center">
                    {% if page_obj.has_previous %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    {% endif %}

                    {% for num in page_obj.paginator.page_range %}
                    {% if page_obj.number == num %}
                    <li class="page-item active"><a class="page-link" href="#">{{ num }}</a></li>
                    {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                    <li class="page-item"><a class="page-link" href="?page={{ num }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">{{ num }}</a></li>
                    {% endif %}
                    {% endfor %}

                    {% if page_obj.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.next_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/manage_agents_card_view.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Agents - Card View {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
            <h6 class="mb-0">Agents</h6>
            <p class="text-sm mb-0">
                View and manage your AI agents.
            </p>
            </div>
            <div class="d-flex align-items-center">
            <a href="{% url 'agents:manage_agents' %}" class="btn btn-sm  me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
            </a>
            <a href="{% url 'agents:manage_agents_card_view' %}" class="btn btn-sm  me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
            </a>
            <a href="{% url 'agents:add_agent' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Agent</a>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="p-3">
            <div class="row g-3 mb-4">
              <div class="col-md-6">
                <input type="text" id="searchInput" class="form-control" placeholder="Search agents...">
              </div>
              <div class="col-md-6">
                <select id="roleFilter" class="form-select">
                  <option value="">All Roles</option>
                  <option value="Analyst">Analyst</option>
                  <option value="Support">Support</option>
                  <option value="Creator">Creator</option>
                  <option value="Engineer">Engineer</option>
                  <option value="Manager">Manager</option>
                </select>
              </div>
            </div>
            <div class="row" id="agentCards">
              {% for agent in agents %}
              <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100">
                  <div class="card-header p-3 pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h5 class="mb-0">{{ agent.name }}</h5>
                        <p class="text-sm mb-0">{{ agent.role }}</p>
                      </div>
                      <div class="avatar avatar-xl position-relative">
                        <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="Agent avatar" class="w-100 border-radius-lg shadow-sm">
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-3">
                    <p class="text-sm mb-2"><strong>Goal:</strong> {{ agent.goal|truncatechars:100 }}</p>
                    <p class="text-sm mb-2"><strong>LLM:</strong> {{ agent.llm }}</p>
                    <p class="text-sm mb-2"><strong>Crews:</strong> 
                      {% for crew in agent.crew_set.all %}
                        <span class="badge bg-gradient-primary">{{ crew.name }}</span>
                      {% empty %}
                        <span class="text-muted">No crews</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-2"><strong>Tasks:</strong> 
                      {% for task in agent.task_set.all %}
                        <span class="badge bg-gradient-info">{{ task.description|truncatechars:20 }}</span>
                      {% empty %}
                        <span class="text-muted">No tasks</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-0"><strong>Tools:</strong></p>
                    <div class="d-flex flex-wrap gap-1 mb-2">
                      {% for tool in agent.tools.all %}
                        <span class="badge bg-gradient-success">{{ tool.name }}</span>
                      {% empty %}
                        <span class="text-muted">No tools</span>
                      {% endfor %}
                    </div>
                  </div>
                  <div class="card-footer p-3">
                    <div class="d-flex justify-content-between">
                        <a href="{% url 'agents:edit_agent' agent.id %}?next={{ request.path|urlencode }}" class="btn btn-link text-dark mb-0 ps-0" data-toggle="tooltip" data-original-title="Edit agent">
                          <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>Edit
                        </a>
                        <a href="{% url 'agents:delete_agent' agent.id %}" class="btn btn-link text-danger mb-0 pe-0" data-toggle="tooltip" data-original-title="Delete agent">
                          <i class="far fa-trash-alt me-2"></i>Delete
                        </a>
                      </div>
                  </div>
                </div>
              </div>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create/Edit Agent Modal -->
<div class="modal fade" id="agentModal" tabindex="-1" role="dialog" aria-labelledby="agentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="agentModalLabel">Create New Agent</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="agentForm">
          <div class="form-group mb-3">
            <label for="agentName" class="form-control-label">Name</label>
            <input type="text" class="form-control" id="agentName" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentRole" class="form-control-label">Role</label>
            <input type="text" class="form-control" id="agentRole" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentGoal" class="form-control-label">Goal</label>
            <textarea class="form-control" id="agentGoal" rows="3" required></textarea>
          </div>
          <div class="form-group mb-3">
            <label for="agentLLM" class="form-control-label">LLM</label>
            <input type="text" class="form-control" id="agentLLM" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentAvatar" class="form-control-label">Avatar</label>
            <select class="form-control" id="agentAvatar" name="avatar" required>
              {% for avatar in form.avatar.field.choices %}
                <option value="{{ avatar.0 }}" data-img="{% static 'assets/img/'|add:avatar.0 %}">Avatar {{ forloop.counter }}</option>
              {% endfor %}
            </select>
          </div>
          <div class="text-center">
            <img id="avatarPreview" src="" alt="Avatar preview" class="img-fluid rounded-circle" style="width: 100px; height: 100px; object-fit: cover;">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="saveAgent()">Save Agent</button>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  let currentAgentId = null;

  function editAgent(agentId) {
    currentAgentId = agentId;
    // Fetch agent details and populate the form
    // This is a placeholder - you'll need to implement the actual data fetching
    $('#agentModalLabel').text('Edit Agent');
    $('#agentModal').modal('show');
  }

  function saveAgent() {
    const agentData = {
      name: $('#agentName').val(),
      role: $('#agentRole').val(),
      goal: $('#agentGoal').val(),
      llm: $('#agentLLM').val(),
      avatar: $('#agentAvatar').val(),
      // Add more fields as needed
    };

    const url = currentAgentId ? `/agents/manage/agents/${currentAgentId}/update/` : '/agents/manage/agents/add/';
    const method = currentAgentId ? 'PUT' : 'POST';

    $.ajax({
      url: url,
      method: method,
      data: JSON.stringify(agentData),
      contentType: 'application/json',
      success: function(response) {
        $('#agentModal').modal('hide');
        // Refresh the page or update the cards
        location.reload();
      },
      error: function(error) {
        console.error('Error saving agent:', error);
      }
    });
  }

  function deleteAgent(agentId) {
    if (confirm('Are you sure you want to delete this agent?')) {
      $.ajax({
        url: `/agents/manage/agents/${agentId}/delete/`,
        method: 'DELETE',
        success: function(response) {
          // Remove the agent card or refresh the page
          location.reload();
        },
        error: function(error) {
          console.error('Error deleting agent:', error);
        }
      });
    }
  }

  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("#agentCards .col-md-4").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });

    $('#roleFilter, #statusFilter').on('change', function() {
      var roleValue = $('#roleFilter').val().toLowerCase();
      var statusValue = $('#statusFilter').val().toLowerCase();
      $("#agentCards .col-md-4").filter(function() {
        var roleMatch = roleValue === '' || $(this).find('.text-capitalize').text().toLowerCase().indexOf(roleValue) > -1;
        var statusMatch = statusValue === '' || $(this).find('.badge').text().toLowerCase().indexOf(statusValue) > -1;
        $(this).toggle(roleMatch && statusMatch);
      });
    });

    // Avatar preview functionality
    $('#agentAvatar').change(function() {
      const selectedOption = $(this).find('option:selected');
      const imgSrc = selectedOption.data('img');
      $('#avatarPreview').attr('src', imgSrc);
    });

    // Trigger change event to show initial avatar
    $('#agentAvatar').trigger('change');
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/manage_agents.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Agents {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
              <h5 class="mb-0">Agents</h5>
              <p class="text-sm mb-0">
                  View and manage your AI agents.
              </p>
          </div>
          <div class="d-flex align-items-center">
              <!-- Removed btn-group to separate the icons -->
              <a href="{% url 'agents:manage_agents' %}" class="btn btn-sm  me-2" title="Table View">
                  <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_agents_card_view' %}" class="btn btn-sm  me-2" title="Card View">
                  <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_agent' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Agent</a>
          </div>
      </div>
        <div class="table-responsive">
          <table class="table table-flush" id="agents-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Avatar</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Role</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">LLM</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for agent in agents %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="{{ agent.name }}'s avatar" class="avatar avatar-sm rounded-circle me-2">
                </td>
                <td class="text-sm font-weight-normal">
                  {{ agent.name }}
                </td>
                <td class="text-sm font-weight-normal">{{ agent.role }}</td>
                <td class="text-sm font-weight-normal">{{ agent.llm }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_agent' agent.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit agent">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_agent' agent.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete agent">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="5" class="text-sm font-weight-normal">No agents found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>

{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/sweetalert.min.js' %}"></script>

  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#agents-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_crews_card_view.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Crews - Card View {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="mb-0">Crews</h6>
              <p class="text-sm mb-0">
                View and manage your AI agent crews.
              </p>
            </div>
            <div class="d-flex align-items-center">
              <a href="{% url 'agents:manage_crews' %}" class="btn btn-sm me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_crews_card_view' %}" class="btn btn-sm me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_crew' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Crew</a>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="p-3">
            <div class="row g-3 mb-4">
              <div class="col-md-6">
                <input type="text" id="searchInput" class="form-control" placeholder="Search crews...">
              </div>
              <div class="col-md-6">
                <select id="processFilter" class="form-select">
                  <option value="">All Processes</option>
                  <option value="Sequential">Sequential</option>
                  <option value="Parallel">Parallel</option>
                  <option value="Hierarchical">Hierarchical</option>
                </select>
              </div>
            </div>
            <div class="row" id="crewCards">
              {% for crew in crews %}
              <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100">
                  <div class="card-header p-3 pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h5 class="mb-0">{{ crew.name }}</h5>
                        <p class="text-sm mb-0">{{ crew.get_process_display }}</p>
                      </div>
                      <div class="avatar-group">
                        {% for agent in crew.agents.all|slice:":3" %}
                          <a href="javascript:;" class="avatar avatar-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ agent.name }}">
                            <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="{{ agent.name }}">
                          </a>
                        {% endfor %}
                        {% if crew.agents.count > 3 %}
                          <a href="javascript:;" class="avatar avatar-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ crew.agents.count|add:'-3' }} more">
                            <span class="avatar-text bg-gradient-primary">+{{ crew.agents.count|add:'-3' }}</span>
                          </a>
                        {% endif %}
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-3">
                    <p class="text-sm mb-2"><strong>Agents:</strong> 
                      {% for agent in crew.agents.all %}
                        <span class="badge bg-gradient-info">{{ agent.name }}</span>
                      {% empty %}
                        <span class="text-muted">No agents</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-2"><strong>Tasks:</strong> 
                      {% for task in crew.tasks.all %}
                        <span class="badge bg-gradient-success">{{ task.description|truncatechars:20 }}</span>
                      {% empty %}
                        <span class="text-muted">No tasks</span>
                      {% endfor %}
                    </p>
                  </div>
                  <div class="card-footer p-3">
                    <div class="d-flex justify-content-between">
                      <a href="{% url 'agents:edit_crew' crew.id %}?next={{ request.path|urlencode }}" class="btn btn-link text-dark mb-0 ps-0" data-toggle="tooltip" data-original-title="Edit crew">
                        <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>Edit
                      </a>
                      <a href="{% url 'agents:delete_crew' crew.id %}" class="btn btn-link text-danger mb-0 pe-0" data-toggle="tooltip" data-original-title="Delete crew">
                        <i class="far fa-trash-alt me-2"></i>Delete
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("#crewCards .col-lg-4").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });

    $('#processFilter').on('change', function() {
      var processValue = $(this).val().toLowerCase();
      $("#crewCards .col-lg-4").filter(function() {
        var processMatch = processValue === '' || $(this).find('.text-sm').text().toLowerCase().indexOf(processValue) > -1;
        $(this).toggle(processMatch);
      });
    });

    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl)
    });
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/manage_crews.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Crews {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="mb-0">Crews</h6>
              <p class="text-sm mb-0">
                View and manage your AI agent crews.
              </p>
            </div>
            <div class="d-flex align-items-center">
              <a href="{% url 'agents:manage_crews' %}" class="btn btn-sm me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_crews_card_view' %}" class="btn btn-sm me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_crew' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Crew</a>
            </div>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="crews-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Process</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agents</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tasks</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for crew in crews %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_crew' crew.id %}">{{ crew.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ crew.get_process_display }}</td>
                <td class="text-sm font-weight-normal">
                  {% for agent in crew.agents.all %}
                    {{ agent.name }}{% if not forloop.last %}, {% endif %}
                  {% endfor %}
                </td>
                <td class="text-sm font-weight-normal">
                  {% for task in crew.tasks.all %}
                    {{ task.description|truncatechars:30 }}{% if not forloop.last %}, {% endif %}
                  {% endfor %}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_crew' crew.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit crew">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_crew' crew.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete crew">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="5" class="text-sm font-weight-normal">No crews found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#crews-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_pipelines.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Pipelines {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Pipeline Dashboard</h6>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <div class="d-flex justify-content-between align-items-center mb-3 px-3">
              <div class="d-flex align-items-center">
                <span class="mr-2">Search:</span>
                <input type="text" id="searchInput" class="form-control form-control-sm" placeholder="Search pipelines...">
              </div>
              <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createPipelineModal">
                <i class="fas fa-plus"></i> Create Pipeline
              </button>
            </div>
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Pipeline</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Stages</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for pipeline in pipelines %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ pipeline.name }}</h6>
                        <p class="text-xs text-secondary mb-0">{{ pipeline.description }}</p>
                      </div>
                    </div>
                  </td>
                  <td>
                    <span class="badge badge-sm bg-gradient-{{ pipeline.status|lower }}">{{ pipeline.status }}</span>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ pipeline.stages.count }} stages</p>
                  </td>
                  <td class="align-middle">
                    <div class="dropdown">
                      <a href="#" class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown" id="navbarDropdownMenuLink2">
                        <i class="fa fa-ellipsis-v text-xs"></i>
                      </a>
                      <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink2">
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Running')">
                            <i class="fas fa-play text-success"></i> Start
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Paused')">
                            <i class="fas fa-pause text-warning"></i> Pause
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Idle')">
                            <i class="fas fa-stop text-danger"></i> Stop
                          </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="editPipeline({{ pipeline.id }})">
                            <i class="fas fa-edit text-info"></i> Edit
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="deletePipeline({{ pipeline.id }})">
                            <i class="fas fa-trash text-danger"></i> Delete
                          </a>
                        </li>
                      </ul>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create/Edit Pipeline Modal -->
<div class="modal fade" id="pipelineModal" tabindex="-1" role="dialog" aria-labelledby="pipelineModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="pipelineModalLabel">Create New Pipeline</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="pipelineForm">
          <div class="form-group">
            <label for="pipelineName">Name</label>
            <input type="text" class="form-control" id="pipelineName" required>
          </div>
          <div class="form-group">
            <label for="pipelineDescription">Description</label>
            <textarea class="form-control" id="pipelineDescription" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="savePipeline()">Save Pipeline</button>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script>
  let currentPipelineId = null;

  function editPipeline(pipelineId) {
    currentPipelineId = pipelineId;
    // Fetch pipeline details and populate the form
    // This is a placeholder - you'll need to implement the actual data fetching
    $('#pipelineModalLabel').text('Edit Pipeline');
    $('#pipelineModal').modal('show');
  }

  function savePipeline() {
    const pipelineData = {
      name: $('#pipelineName').val(),
      description: $('#pipelineDescription').val(),
    };

    const url = currentPipelineId ? `/agents/pipelines/${currentPipelineId}/update/` : '/agents/pipelines/create/';
    const method = currentPipelineId ? 'PUT' : 'POST';

    $.ajax({
      url: url,
      method: method,
      data: JSON.stringify(pipelineData),
      contentType: 'application/json',
      success: function(response) {
        $('#pipelineModal').modal('hide');
        // Refresh the page or update the table
        location.reload();
      },
      error: function(error) {
        console.error('Error saving pipeline:', error);
      }
    });
  }

  function deletePipeline(pipelineId) {
    if (confirm('Are you sure you want to delete this pipeline?')) {
      $.ajax({
        url: `/agents/pipelines/${pipelineId}/delete/`,
        method: 'DELETE',
        success: function(response) {
          // Remove the pipeline from the table or refresh the page
          location.reload();
        },
        error: function(error) {
          console.error('Error deleting pipeline:', error);
        }
      });
    }
  }

  function changePipelineStatus(pipelineId, newStatus) {
    $.ajax({
      url: `/agents/pipelines/${pipelineId}/change-status/`,
      method: 'POST',
      data: JSON.stringify({ status: newStatus }),
      contentType: 'application/json',
      success: function(response) {
        // Update the status in the table or refresh the page
        location.reload();
      },
      error: function(error) {
        console.error('Error changing pipeline status:', error);
      }
    });
  }

  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("table tbody tr").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });
  });
</script>
{% endblock javascripts %}

================
File: templates/agents/manage_tasks.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tasks {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tasks</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tasks.
            </p>
          </div>
          <div>
            <a href="{% url 'agents:add_task' %}" class="btn btn-primary btn-sm">Add New Task</a>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tasks-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agent</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Async Execution</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Human Input</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Output Type</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for task in tasks %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}">{{ task.description|truncatechars:50 }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ task.agent.name|default:"N/A" }}</td>
                <td class="text-sm font-weight-normal">{% if task.async_execution %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">{% if task.human_input %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">
                  {% if task.output_json %}JSON
                  {% elif task.output_pydantic %}Pydantic
                  {% elif task.output_file %}File
                  {% else %}Default
                  {% endif %}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit task">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_task' task.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete task">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="6" class="text-sm font-weight-normal">No tasks found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tasks-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_tools.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tools {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tools</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tools.
            </p>
          </div>
          <a href="{% url 'agents:add_tool' %}" class="btn btn-primary btn-sm">Add New Tool</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tools-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tool Class</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for tool in tools %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}">{{ tool.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ tool.description|truncatechars:50 }}</td>
                <td class="text-sm font-weight-normal">{{ tool.tool_class }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit tool">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_tool' tool.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete tool">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="4" class="text-sm font-weight-normal">No tools found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tools-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/task_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if task %}Edit Task{% else %}Add Task{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if task %}Edit Task{% else %}Add Task{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.description.id_for_label }}" class="form-control-label">Description</label>
                                    {{ form.description }}
                                    {% if form.description.errors %}
                                        <div class="text-danger">
                                            {{ form.description.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.agent.id_for_label }}" class="form-control-label">Agent</label>
                                    {{ form.agent }}
                                    {% if form.agent.errors %}
                                        <div class="text-danger">
                                            {{ form.agent.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.expected_output.id_for_label }}" class="form-control-label">Expected Output</label>
                                    {{ form.expected_output }}
                                    {% if form.expected_output.errors %}
                                        <div class="text-danger">
                                            {{ form.expected_output.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.tools.id_for_label }}" class="form-control-label">Tools</label>
                                    {{ form.tools }}
                                    {% if form.tools.errors %}
                                        <div class="text-danger">
                                            {{ form.tools.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="{{ form.context.id_for_label }}" class="form-control-label">Context</label>
                                    {{ form.context }}
                                    {% if form.context.errors %}
                                        <div class="text-danger">
                                            {{ form.context.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.config.id_for_label }}" class="form-control-label">Config (JSON)</label>
                                    {{ form.config }}
                                    {% if form.config.errors %}
                                        <div class="text-danger">
                                            {{ form.config.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.converter_cls.id_for_label }}" class="form-control-label">Converter Class</label>
                                    {{ form.converter_cls }}
                                    {% if form.converter_cls.errors %}
                                        <div class="text-danger">
                                            {{ form.converter_cls.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_json.id_for_label }}" class="form-control-label">Output JSON</label>
                                    {{ form.output_json }}
                                    {% if form.output_json.errors %}
                                        <div class="text-danger">
                                            {{ form.output_json.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_pydantic.id_for_label }}" class="form-control-label">Output Pydantic</label>
                                    {{ form.output_pydantic }}
                                    {% if form.output_pydantic.errors %}
                                        <div class="text-danger">
                                            {{ form.output_pydantic.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_file.id_for_label }}" class="form-control-label">Output File</label>
                                    {{ form.output_file }}
                                    {% if form.output_file.errors %}
                                        <div class="text-danger">
                                            {{ form.output_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    {{ form.async_execution }}
                                    <label class="form-check-label" for="{{ form.async_execution.id_for_label }}">Async Execution</label>
                                    {% if form.async_execution.errors %}
                                        <div class="text-danger">
                                            {{ form.async_execution.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    {{ form.human_input }}
                                    <label class="form-check-label" for="{{ form.human_input.id_for_label }}">Human Input</label>
                                    {% if form.human_input.errors %}
                                        <div class="text-danger">
                                            {{ form.human_input.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{% url 'agents:manage_tasks' %}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Task</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });

        // Add classes to form elements
        var formElements = document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]), select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        var checkboxInputs = document.querySelectorAll('input[type="checkbox"], input[type="radio"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });

        // JSON validation for config field
        var configField = document.getElementById('{{ form.config.id_for_label }}');
        if (configField) {
            configField.addEventListener('blur', function() {
                try {
                    JSON.parse(this.value);
                    this.classList.remove('is-invalid');
                } catch (error) {
                    this.classList.add('is-invalid');
                    alert('Invalid JSON format in Config field');
                }
            });
        }
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/tool_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if tool %}Edit Tool{% else %}Add Tool{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">{% if tool %}Edit Tool{% else %}Add Tool{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post" id="toolForm">
                        {% csrf_token %}
                        <div class="mb-4">
                            <label for="{{ form.tool_class.id_for_label }}" class="form-label">Tool Class</label><br>
                            {{ form.tool_class }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Name</label><br>
                            <input type="text" id="tool_name" name="name" class="form-control" readonly>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label><br>
                            <textarea id="tool_description" name="description" class="form-control" readonly rows="4"></textarea>
                        </div>
                        <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_tools' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" id="submitButton" class="btn btn-primary" disabled>Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extrastyle %}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 150px;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0,0,0,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }
    @keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    @-webkit-keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
</style>
{% endblock extrastyle %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });

        var toolClassSelect = document.getElementById('{{ form.tool_class.id_for_label }}');
        var toolNameInput = document.getElementById('tool_name');
        var toolDescriptionInput = document.getElementById('tool_description');
        var submitButton = document.getElementById('submitButton');
        var errorMessageDiv = document.getElementById('errorMessage');

        function setLoading(isLoading) {
            if (isLoading) {
                toolNameInput.value = 'Loading...';
                toolDescriptionInput.value = 'Loading...';
                submitButton.innerHTML = '<span class="loading"></span> Loading';
            } else {
                submitButton.innerHTML = 'Save';
            }
            submitButton.disabled = isLoading;
        }

        function showError(message) {
            errorMessageDiv.textContent = message;
            errorMessageDiv.style.display = 'block';
        }

        function hideError() {
            errorMessageDiv.style.display = 'none';
        }

        toolClassSelect.addEventListener('change', function() {
            var selectedTool = this.value;
            if (selectedTool) {
                setLoading(true);
                hideError();
                fetch(`/agents/get_tool_info/?tool_class=${selectedTool}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch tool information');
                        }
                        return response.json();
                    })
                    .then(data => {
                        toolNameInput.value = data.name;
                        toolDescriptionInput.value = data.description;
                        submitButton.disabled = false;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError('Failed to load tool information. Please try again.');
                        toolNameInput.value = '';
                        toolDescriptionInput.value = '';
                        submitButton.disabled = true;
                    })
                    .finally(() => {
                        setLoading(false);
                    });
            } else {
                toolNameInput.value = '';
                toolDescriptionInput.value = '';
                submitButton.disabled = true;
                hideError();
            }
        });

        // Trigger the change event on page load if a tool is already selected (for edit mode)
        if (toolClassSelect.value) {
            toolClassSelect.dispatchEvent(new Event('change'));
        }
    });
</script>
{% endblock extra_js %}
