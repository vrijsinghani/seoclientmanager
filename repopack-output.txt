This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-06T21:13:49.855Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
apps/
  common/
    tools/
      google_analytics_tool.py
  seo_manager/
    templates/
      seo_manager/
        client_analytics.html
    views.py

================================================================
Repository Files
================================================================

================
File: apps/common/tools/google_analytics_tool.py
================
import os
import logging
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google.auth.exceptions import RefreshError
from datetime import datetime

logger = logging.getLogger(__name__)

class GoogleAnalyticsToolSchema(BaseModel):
    """Input schema for GoogleAnalyticsTool."""
    property_id: str = Field(..., description="The Google Analytics property ID.")
    start_date: str = Field(..., description="The start date for the data range (YYYY-MM-DD).")
    end_date: str = Field(..., description="The end date for the data range (YYYY-MM-DD).")
    credentials: dict = Field(..., description="The Google Analytics credentials.")

class GoogleAnalyticsTool(BaseTool):
    name: str = "Google Analytics Data Fetcher"
    description: str = "Fetches Google Analytics data for a given property and date range."
    args_schema: Type[BaseModel] = GoogleAnalyticsToolSchema
    
    def _run(
        self, 
        property_id: str,
        start_date: str,
        end_date: str,
        credentials: dict,
        **kwargs: Any
    ) -> Any:
        try:
            analytics_client = self._get_analytics_service(credentials)
            analytics_data = self._get_analytics_data(analytics_client, property_id, start_date, end_date)
            summary_data = self._get_analytics_summary(analytics_client, property_id, start_date, end_date)
            
            return {
                'analytics_data': self._process_analytics_data(analytics_data),
                'summary_data': summary_data
            }
        except RefreshError:
            logger.error("Token refresh failed. User needs to re-authenticate.")
            return {
                'error': "Authentication failed. Please reconnect your Google Analytics account.",
                'analytics_data': [],
                'summary_data': {
                    'users': 0,
                    'new_users': 0,
                    'sessions': 0,
                    'page_views': 0
                }
            }
        except Exception as e:
            logger.error(f"Error in GoogleAnalyticsTool._run: {str(e)}")
            return {
                'error': f"Error fetching Google Analytics data: {str(e)}",
                'analytics_data': [],
                'summary_data': {
                    'users': 0,
                    'new_users': 0,
                    'sessions': 0,
                    'page_views': 0
                }
            }

    def _get_analytics_service(self, credentials):
        try:
            creds = Credentials(
                token=credentials.get('access_token'),
                refresh_token=credentials.get('refresh_token'),
                token_uri=credentials.get('token_uri'),
                client_id=credentials.get('ga_client_id'),
                client_secret=credentials.get('client_secret')
            )

            if creds.expired and creds.refresh_token:
                creds.refresh(Request())
                self._update_credentials(credentials.get('ga_client_id'), creds)
            elif creds.expired:
                raise RefreshError("Credentials are expired and can't be refreshed.")

            return BetaAnalyticsDataClient(credentials=creds)
        except RefreshError as e:
            logger.error(f"Error refreshing token: {str(e)}")
            raise
        except Exception as e:
            logger.error(f"Error in _get_analytics_service: {str(e)}")
            raise

    def _update_credentials(self, client_id, creds):
        # This method should be implemented to update the credentials in your database
        # For now, we'll just log the action
        logger.info(f"Updating credentials for client_id: {client_id}")
        # In a real implementation, you would update the database here
        # For example:
        # GoogleAnalyticsCredentials.objects.filter(ga_client_id=client_id).update(
        #     access_token=creds.token,
        #     refresh_token=creds.refresh_token
        # )

    def _get_analytics_data(self, analytics_client, property_id, start_date, end_date):
        try:
            request = {
                'property': f"properties/{property_id}",
                'date_ranges': [{'start_date': start_date, 'end_date': end_date}],
                'dimensions': [{'name': 'date'}, {'name': 'sessionSource'}],
                'metrics': [{'name': 'sessions'}]
            }
            return analytics_client.run_report(request)
        except Exception as e:
            logger.error(f"Error in _get_analytics_data: {str(e)}")
            return None

    def _get_analytics_summary(self, analytics_client, property_id, start_date, end_date):
        try:
            request = {
                'property': f"properties/{property_id}",
                'date_ranges': [{'start_date': start_date, 'end_date': end_date}],
                'metrics': [
                    {'name': 'totalUsers'},
                    {'name': 'newUsers'},
                    {'name': 'sessions'},
                    {'name': 'screenPageViews'}
                ]
            }
            
            response = analytics_client.run_report(request)
            
            if response.rows and len(response.rows) > 0 and len(response.rows[0].metric_values) >= 4:
                return {
                    'users': int(response.rows[0].metric_values[0].value),
                    'new_users': int(response.rows[0].metric_values[1].value),
                    'sessions': int(response.rows[0].metric_values[2].value),
                    'page_views': int(response.rows[0].metric_values[3].value)
                }
        except Exception as e:
            logger.error(f"Error in _get_analytics_summary: {str(e)}")
        
        return {
            'users': 0,
            'new_users': 0,
            'sessions': 0,
            'page_views': 0
        }

    def _process_analytics_data(self, response):
        channel_data = {}
        if not response or not response.rows:
            return []

        for row in response.rows:
            if len(row.dimension_values) < 2 or len(row.metric_values) < 1:
                continue
            date = datetime.strptime(row.dimension_values[0].value, '%Y%m%d').strftime('%Y-%m-%d')
            channel = row.dimension_values[1].value
            sessions = int(row.metric_values[0].value)
            
            if channel not in channel_data:
                channel_data[channel] = []
            
            channel_data[channel].append({
                'date': date,
                'sessions': sessions
            })
        
        processed_data = []
        for channel, data in channel_data.items():
            processed_data.append({
                'channel': channel,
                'data': sorted(data, key=lambda x: x['date'])
            })
        
        return processed_data

# Initialize the tool
google_analytics_tool = GoogleAnalyticsTool()

================
File: apps/seo_manager/templates/seo_manager/client_analytics.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Analytics - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    {% if messages %}
    <div class="messages">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {% endfor %}
    </div>
    {% endif %}

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Analytics for {{ client.name }}</h1>
        <div>
            <button class="btn btn-primary" id="exportBtn">Export</button>
            <div class="btn-group">
                <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Time Range
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" data-range="7">Last 7 days</a></li>
                    <li><a class="dropdown-item" href="#" data-range="30">Last 30 days</a></li>
                    <li><a class="dropdown-item" href="#" data-range="90">Last 90 days</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Users</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ users }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-single-02 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">New Users</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ new_users }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-user-run text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Sessions</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ sessions }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Page Views</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ page_views }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Traffic Channels</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div id="traffic-channels-chart" style="height: 350px;">
                        <div id="chart-loading" class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Search Console Performance Data</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div id="search-console-loading" class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    {% if search_console_data %}
                    <div class="table-responsive p-0">
                        <table class="table table-flush table-striped text-xs table-sm" id="search-console-table">
                            <thead class="thead-light">
                                <tr>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Query</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Impressions</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Clicks</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">CTR</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Position</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in search_console_data %}
                                <tr>
                                    <td class="text-xs font-weight-normal">{{ item.query }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.impressions }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.clicks }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.ctr|floatformat:2 }}%</td>
                                    <td class="text-xs font-weight-normal">{{ item.position|floatformat:1 }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <p class="text-warning">Search Console data is currently unavailable. This may be due to an authentication issue or an error in data retrieval.</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        let analyticsData = [];
        try {
            analyticsData = JSON.parse('{{ analytics_data|safe }}');
        } catch (error) {
            console.error('Error parsing analytics data:', error);
            document.querySelector("#traffic-channels-chart").innerHTML = '<p class="text-danger">Error parsing analytics data. Please try refreshing the page or contact support if the issue persists.</p>';
        }

        const chartContainer = document.querySelector("#traffic-channels-chart");
        const loadingIndicator = document.querySelector("#chart-loading");

        if (analyticsData && analyticsData.length > 0) {
            loadingIndicator.style.display = 'none';
            const series = analyticsData.map(channel => ({
                name: channel.channel,
                data: channel.data.map(item => item.sessions)
            }));
            const categories = analyticsData[0].data.map(item => item.date);

            const chartOptions = {
                series: series,
                chart: {
                    height: 350,
                    type: 'line',
                    zoom: {
                        enabled: false
                    },
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: 'straight'
                },
                title: {
                    text: 'Traffic Channels',
                    align: 'left'
                },
                grid: {
                    row: {
                        colors: ['#f3f3f3', 'transparent'],
                        opacity: 0.5
                    },
                },
                xaxis: {
                    categories: categories,
                },
                yaxis: {
                    title: {
                        text: 'Sessions'
                    }
                },
            };

            const chart = new ApexCharts(chartContainer, chartOptions);
            chart.render();
        } else {
            loadingIndicator.style.display = 'none';
            chartContainer.innerHTML = '<p class="text-warning">No analytics data available for the selected date range.</p>';
        }

        {% if search_console_data %}
        // Initialize DataTable for Search Console data
        const dataTableSearchConsole = new simpleDatatables.DataTable("#search-console-table", {
            searchable: true,
            perPageSelect: [10,25,50,100,200],
            fixedHeight: true,
            classes: {}
        });
        document.querySelector("#search-console-loading").style.display = 'none';
        {% endif %}

        // Export button functionality
        document.getElementById('exportBtn').addEventListener('click', function() {
            const csvContent = [
                ['Date Range', '{{ start_date }} - {{ end_date }}'],
                ['Users', '{{ users }}'],
                ['New Users', '{{ new_users }}'],
                ['Sessions', '{{ sessions }}'],
                ['Page Views', '{{ page_views }}'],
                [],
                ['Traffic Channels'],
                ['Channel', 'Date', 'Sessions'],
                ...(analyticsData ? analyticsData.flatMap(channel => 
                    channel.data.map(item => [channel.channel, item.date, item.sessions])
                ) : []),
                [],
                ['Search Console Performance'],
                ['Query', 'Impressions', 'Clicks', 'CTR', 'Position'],
                {% for item in search_console_data %}
                ['{{ item.query }}', '{{ item.impressions }}', '{{ item.clicks }}', '{{ item.ctr|floatformat:2 }}%', '{{ item.position|floatformat:1 }}'],
                {% endfor %}
            ].map(row => row.join(',')).join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", `analytics_export_{{ client.name }}_{{ start_date }}_{{ end_date }}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        });

        // Time range selection functionality
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const range = parseInt(this.getAttribute('data-range'));
                const endDate = new Date();
                const startDate = new Date(endDate);
                startDate.setDate(endDate.getDate() - range);
                
                const formatDate = (date) => {
                    return date.toISOString().split('T')[0];
                };

                window.location.href = `?start_date=${formatDate(startDate)}&end_date=${formatDate(endDate)}`;
            });
        });
    });
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/views.py
================
import json
import logging
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from .models import Client, SEOData, GoogleAnalyticsCredentials, SearchConsoleCredentials, UserActivity
from .services import get_analytics_service, get_analytics_data
from .google_auth import get_google_auth_flow, get_analytics_accounts_oauth, get_analytics_accounts_service_account, get_search_console_properties
from datetime import datetime, timedelta
from google_auth_oauthlib.flow import Flow
from django.urls import reverse
from google.auth.exceptions import RefreshError
from googleapiclient.errors import HttpError
from .forms import ClientForm, BusinessObjectiveForm
from apps.common.tools.user_activity_tool import user_activity_tool
from apps.common.tools.google_analytics_tool import google_analytics_tool
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request

logger = logging.getLogger(__name__)

@login_required
def dashboard(request):
    clients = Client.objects.all().order_by('name')
    return render(request, 'seo_manager/dashboard.html', {'clients': clients})

@login_required
def client_list(request):
    clients = Client.objects.all().order_by('name').select_related('group')
    return render(request, 'seo_manager/client_list.html', {'clients': clients})

@login_required
def add_client(request):
    if request.method == 'POST':
        form = ClientForm(request.POST)
        if form.is_valid():
            client = form.save()
            user_activity_tool.run(user=request.user, category='create', action=f"Added new client: {client.name}", client=client)
            messages.success(request, f"Client '{client.name}' has been added successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        form = ClientForm()
    return render(request, 'seo_manager/add_client.html', {'form': form})

@login_required
def client_detail(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    seo_data = SEOData.objects.filter(client=client).order_by('-date')[:30]
    
    credential_keys = ['accounts', 'properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret', 'service_account_json']
    for key in credential_keys:
        request.session.pop(key, None)
    
    if request.method == 'POST':
        form = BusinessObjectiveForm(request.POST)
        if form.is_valid():
            new_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': datetime.now().isoformat(),
                'date_last_modified': datetime.now().isoformat(),
            }
            client.business_objectives.append(new_objective)
            client.save()
            user_activity_tool.run(user=request.user, category='create', action=f"Added business objective for client: {client.name}", client=client, details=new_objective)
            messages.success(request, "Business objective added successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        form = BusinessObjectiveForm()
    
    user_activity_tool.run(user=request.user, category='view', action=f"Viewed client details: {client.name}", client=client)
    
    client_activities = UserActivity.objects.filter(client=client).order_by('-timestamp')
    
    context = {
        'client': client,
        'seo_data': seo_data,
        'business_objectives': client.business_objectives,
        'form': form,
        'client_activities': client_activities,
    }
    
    return render(request, 'seo_manager/client_detail.html', context)

@login_required
def edit_client(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if request.method == 'POST':
        form = ClientForm(request.POST, instance=client)
        if form.is_valid():
            form.save()
            user_activity_tool.run(user=request.user, category='update', action=f"Updated client details: {client.name}", client=client)
            messages.success(request, f"Client '{client.name}' has been updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        form = ClientForm(instance=client)
    
    return render(request, 'seo_manager/edit_client.html', {'form': form, 'client': client})

@login_required
def edit_business_objective(request, client_id, objective_index):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        form = BusinessObjectiveForm(request.POST)
        if form.is_valid():
            updated_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': client.business_objectives[objective_index]['date_created'],
                'date_last_modified': datetime.now().isoformat(),
            }
            client.business_objectives[objective_index] = updated_objective
            client.save()
            user_activity_tool.run(user=request.user, category='update', action=f"Updated business objective for client: {client.name}", client=client, details=updated_objective)
            messages.success(request, "Business objective updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        objective = client.business_objectives[objective_index]
        initial_data = {
            'goal': objective['goal'],
            'metric': objective['metric'],
            'target_date': datetime.fromisoformat(objective['target_date']),
            'status': objective['status'],
        }
        form = BusinessObjectiveForm(initial=initial_data)
    
    context = {
        'client': client,
        'form': form,
        'objective_index': objective_index,
    }
    
    return render(request, 'seo_manager/edit_business_objective.html', context)

@login_required
def delete_business_objective(request, client_id, objective_index):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        deleted_objective = client.business_objectives.pop(objective_index)
        client.save()
        user_activity_tool.run(user=request.user, category='delete', action=f"Deleted business objective for client: {client.name}", client=client, details=deleted_objective)
        messages.success(request, "Business objective deleted successfully.")
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def delete_client(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        user_activity_tool.run(user=request.user, category='delete', action=f"Deleted client: {client.name}", client=client)
        client.delete()
        return JsonResponse({'success': True})
    return JsonResponse({'success': False}, status=400)

def update_ga_credentials(client, new_credentials):
    ga_credentials = GoogleAnalyticsCredentials.objects.get(client=client)
    ga_credentials.access_token = new_credentials.token
    ga_credentials.refresh_token = new_credentials.refresh_token
    ga_credentials.token_uri = new_credentials.token_uri
    ga_credentials.save()
    logger.info(f"Updated Google Analytics credentials for client: {client.name}")

@login_required
def client_analytics(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    ga_credentials = get_object_or_404(GoogleAnalyticsCredentials, client=client)
    sc_credentials = get_object_or_404(SearchConsoleCredentials, client=client)
    
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')

    if request.GET.get('start_date') and request.GET.get('end_date'):
        start_date = request.GET.get('start_date')
        end_date = request.GET.get('end_date')

    context = {
        'client': client,
        'start_date': start_date,
        'end_date': end_date,
        'analytics_data': '[]',  # Initialize with an empty JSON array
        'search_console_data': [],
        'users': 0,
        'new_users': 0,
        'sessions': 0,
        'page_views': 0,
    }

    try:
        property_id = ga_credentials.view_id.replace('properties/', '')
        credentials = Credentials(
            token=ga_credentials.access_token,
            refresh_token=ga_credentials.refresh_token,
            token_uri=ga_credentials.token_uri,
            client_id=ga_credentials.ga_client_id,
            client_secret=ga_credentials.client_secret
        )

        if credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
            update_ga_credentials(client, credentials)

        credentials_dict = {
            'access_token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'token_uri': credentials.token_uri,
            'ga_client_id': ga_credentials.ga_client_id,
            'client_secret': ga_credentials.client_secret,
        }

        analytics_result = google_analytics_tool.run(
            property_id=property_id,
            start_date=start_date,
            end_date=end_date,
            credentials=credentials_dict
        )

        if 'error' not in analytics_result:
            analytics_data = analytics_result.get('analytics_data', [])
            context['analytics_data'] = json.dumps(analytics_data) if analytics_data else '[]'
            context.update(analytics_result.get('summary_data', {}))
        else:
            logger.error(f"Error fetching Google Analytics data: {analytics_result['error']}")
            messages.error(request, f"An error occurred while fetching Google Analytics data: {analytics_result['error']}")

    except RefreshError as e:
        logger.error(f"Error refreshing token: {str(e)}")
        messages.error(request, "Your Google Analytics access has expired. Please reconnect your account.")
        return redirect('seo_manager:add_ga_credentials_oauth', client_id=client.id)
    except Exception as e:
        logger.error(f"Error fetching Google Analytics data: {str(e)}")
        messages.error(request, f"An error occurred while fetching Google Analytics data: {str(e)}")

    try:
        search_console_client = get_search_console_service(sc_credentials, request)
        search_console_data = get_search_console_data(search_console_client, sc_credentials.property_url, start_date, end_date)
        context['search_console_data'] = search_console_data
    except Exception as e:
        logger.error(f"Error fetching Search Console data: {str(e)}")
        messages.error(request, f"An error occurred while fetching Search Console data: {str(e)}")

    return render(request, 'seo_manager/client_analytics.html', context)

@login_required
def client_search_console(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    user_activity_tool.run(user=request.user, category='view', action=f"Viewed search console data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_search_console.html', {'client': client})

@login_required
def client_ads(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    user_activity_tool.run(user=request.user, category='view', action=f"Viewed ads data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_ads.html', {'client': client})

@login_required
def client_dataforseo(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    user_activity_tool.run(user=request.user, category='view', action=f"Viewed DataForSEO data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_dataforseo.html', {'client': client})

def test_view(request):
    return HttpResponse("This is a test view.")

@login_required
def add_ga_credentials_oauth(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        selected_account = request.POST.get('selected_account')
        if selected_account:
            accounts = request.session.get('accounts', [])
            account_data = next((account for account in accounts if account['property_id'] == selected_account), None)
            if account_data:
                GoogleAnalyticsCredentials.objects.update_or_create(
                    client=client,
                    defaults={
                        'access_token': request.session.get('access_token', ''),
                        'refresh_token': request.session.get('refresh_token', ''),
                        'token_uri': request.session.get('token_uri', ''),
                        'ga_client_id': request.session.get('client_id', ''),
                        'client_secret': request.session.get('client_secret', ''),
                        'use_service_account': False,
                        'view_id': account_data['property_id'],
                    }
                )
                user_activity_tool.run(user=request.user, category='create', action=f"Added Google Analytics credentials (OAuth) for client: {client.name}", client=client)
                messages.success(request, "Google Analytics credentials (OAuth) added successfully.")
                return redirect('seo_manager:client_detail', client_id=client.id)
            else:
                messages.error(request, "Selected account not found. Please try again.")
        else:
            messages.error(request, "Please select an account.")
    
    if 'accounts' in request.session:
        return render(request, 'seo_manager/select_analytics_account.html', {
            'client': client,
            'accounts': request.session['accounts'],
        })
    
    flow = get_google_auth_flow(request)
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        state=f"{client_id}_ga",
        prompt='consent'
    )
    request.session['oauth_state'] = state
    return redirect(authorization_url)

@login_required
def add_ga_credentials_service_account(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        if 'selected_account' in request.POST:
            selected_account = request.POST.get('selected_account')
            if selected_account:
                accounts = request.session.get('accounts', [])
                account_data = next((account for account in accounts if account['property_id'] == selected_account), None)
                if account_data:
                    GoogleAnalyticsCredentials.objects.update_or_create(
                        client=client,
                        defaults={
                            'service_account_json': request.session.get('service_account_json', ''),
                            'use_service_account': True,
                            'view_id': account_data['property_id'],
                        }
                    )
                    user_activity_tool.run(user=request.user, category='create', action=f"Added Google Analytics credentials (Service Account) for client: {client.name}", client=client)
                    messages.success(request, "Google Analytics credentials (Service Account) added successfully.")
                    return redirect('seo_manager:client_detail', client_id=client.id)
                else:
                    messages.error(request, "Selected account not found. Please try again.")
            else:
                messages.error(request, "Please select an account.")
        elif 'service_account_file' in request.FILES:
            service_account_file = request.FILES['service_account_file']
            try:
                service_account_info = json.load(service_account_file)
                service_account_json = json.dumps(service_account_info)
                accounts = get_analytics_accounts_service_account(service_account_json)
                request.session['accounts'] = accounts
                request.session['service_account_json'] = service_account_json
                return render(request, 'seo_manager/select_analytics_account.html', {
                    'client': client,
                    'accounts': accounts,
                })
            except json.JSONDecodeError:
                messages.error(request, "Invalid JSON file. Please upload a valid service account JSON file.")
        else:
            messages.error(request, "No file uploaded. Please select a service account JSON file.")
    
    if 'accounts' in request.session:
        return render(request, 'seo_manager/select_analytics_account.html', {
            'client': client,
            'accounts': request.session['accounts'],
        })
    
    return render(request, 'seo_manager/add_ga_credentials_service_account.html', {'client': client})

@login_required
def google_oauth_callback(request):
    state = request.GET.get('state')
    stored_state = request.session.pop('oauth_state', None)
    
    if state != stored_state:
        messages.error(request, "Invalid state parameter. Please try again.")
        return redirect('seo_manager:client_list')
    
    client_id, credential_type = state.split('_')
    client = get_object_or_404(Client, id=client_id)
    
    flow = get_google_auth_flow(request)
    flow.fetch_token(code=request.GET.get('code'))
    
    credentials = flow.credentials
    
    if credential_type == 'ga':
        accounts = get_analytics_accounts_oauth(credentials)
        request.session['accounts'] = accounts
        request.session['access_token'] = credentials.token
        request.session['refresh_token'] = credentials.refresh_token
        request.session['token_uri'] = credentials.token_uri
        request.session['client_id'] = credentials.client_id
        request.session['client_secret'] = credentials.client_secret
        return redirect('seo_manager:add_ga_credentials_oauth', client_id=client_id)
    elif credential_type == 'sc':
        properties = get_search_console_properties(credentials)
        request.session['properties'] = properties
        request.session['access_token'] = credentials.token
        request.session['refresh_token'] = credentials.refresh_token
        request.session['token_uri'] = credentials.token_uri
        request.session['client_id'] = credentials.client_id
        request.session['client_secret'] = credentials.client_secret
        return redirect('seo_manager:add_sc_credentials', client_id=client_id)
    else:
        messages.error(request, "Invalid credential type.")
        return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def remove_ga_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if client.ga_credentials:
        client.ga_credentials.delete()
        user_activity_tool.run(user=request.user, category='delete', action=f"Removed Google Analytics credentials for client: {client.name}", client=client)
        messages.success(request, "Google Analytics credentials removed successfully.")
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def add_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        selected_property = request.POST.get('selected_property')
        if selected_property:
            try:
                SearchConsoleCredentials.objects.update_or_create(
                    client=client,
                    defaults={
                        'property_url': selected_property,
                        'access_token': request.session.get('access_token', ''),
                        'refresh_token': request.session.get('refresh_token', ''),
                        'token_uri': request.session.get('token_uri', ''),
                        'sc_client_id': request.session.get('client_id', ''),
                        'client_secret': request.session.get('client_secret', ''),
                    }
                )
                user_activity_tool.run(user=request.user, category='create', action=f"Added Search Console credentials for client: {client.name}", client=client)
                messages.success(request, "Search Console credentials added successfully.")
                
                for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
                    request.session.pop(key, None)
                
                return redirect('seo_manager:client_detail', client_id=client.id)
            except Exception as e:
                messages.error(request, f"Error saving Search Console credentials: {str(e)}")
        else:
            messages.error(request, "Please select a property.")
    
    if 'properties' in request.session:
        return render(request, 'seo_manager/select_search_console_property.html', {
            'client': client,
            'properties': request.session['properties'],
        })
    
    if hasattr(client, 'sc_credentials'):
        messages.warning(request, "Search Console credentials already exist for this client. Remove them first to add new ones.")
        return redirect('seo_manager:client_detail', client_id=client.id)
    
    flow = get_google_auth_flow(request)
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        state=f"{client_id}_sc",
        prompt='consent'
    )
    request.session['oauth_state'] = state
    return redirect(authorization_url)

@login_required
def remove_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    try:
        if hasattr(client, 'sc_credentials'):
            client.sc_credentials.delete()
            user_activity_tool.run(user=request.user, category='delete', action=f"Removed Search Console credentials for client: {client.name}", client=client)
            messages.success(request, "Search Console credentials removed successfully.")
        else:
            messages.warning(request, "No Search Console credentials found for this client.")
    except Exception as e:
        messages.error(request, f"Error removing Search Console credentials: {str(e)}")
    
    for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
        request.session.pop(key, None)
    
    return redirect('seo_manager:client_detail', client_id=client.id)

def get_search_console_service(credentials, request):
    from googleapiclient.discovery import build
    from google.oauth2.credentials import Credentials
    
    creds = Credentials(
        token=credentials.access_token,
        refresh_token=credentials.refresh_token,
        token_uri=credentials.token_uri,
        client_id=credentials.sc_client_id,
        client_secret=credentials.client_secret
    )
    
    return build('searchconsole', 'v1', credentials=creds)

def get_search_console_data(service, property_url, start_date, end_date):
    try:
        response = service.searchanalytics().query(
            siteUrl=property_url,
            body={
                'startDate': start_date,
                'endDate': end_date,
                'dimensions': ['query'],
                'rowLimit': 1000
            }
        ).execute()
        
        search_console_data = []
        for row in response.get('rows', []):
            search_console_data.append({
                'query': row['keys'][0],
                'clicks': row['clicks'],
                'impressions': row['impressions'],
                'ctr': row['ctr'] * 100,  # Convert to percentage
                'position': row['position']
            })
        
        search_console_data.sort(key=lambda x: x['impressions'], reverse=True)
        
        return search_console_data
    except HttpError as error:
        print(f"An error occurred: {error}")
        return []

@login_required
def activity_log(request):
    activities = UserActivity.objects.all().order_by('-timestamp')
    user_activity_tool.run(user=request.user, category='view', action="Viewed activity log")
    return render(request, 'seo_manager/activity_log.html', {'activities': activities})
