This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-02T16:44:17.147Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
apps/
  agents/
    management/
      commands/
        debug_crew_execution.py
        replay_crew.py
    templates/
      agents/
        tool_form.html
    templatetags/
      __init__.py
      agent_filters.py
      agent_tags.py
    tools/
      browser_tool/
        browser_tool.py
        test_browser_tool.py
      competitor_tools/
        competitor_tools.py
      crawl_website_tool/
        crawl_website_tool.py
        test_crawl_website_tool.py
      csv_search_tool/
        csv_search_tool.py
      directory_read_tool/
        directory_read_tool.py
      directory_search_tool/
        directory_search_tool.py
      docx_search_tool/
        docx_search_tool.py
      file_read_tool/
        file_read_tool.py
      file_writer_tool/
        file_writer_tool.py
      google_analytics_tool/
        google_analytics_tool.py
      google_report_tool/
        google_rankings_tool.py
        google_report_tool.py
      google_suggestions_tool/
        __init__.py
        google_suggestions_tool.py
      keyword_tools/
        keyword_tools.py
        ranked_keywords_tool.py
      rag/
        rag_tool.py
      screenshot_tool/
        screenshot_tool.py
      search_context_tool/
        search_context_tool.py
        test_search_context_tool.py
      searxng_tool/
        searxng_tool.py
      base_tool.py
    admin.py
    apps.py
    celery.py
    consumers.py
    forms.py
    models.py
    routing.py
    tasks.py
    tests.py
    urls.py
    utils.py
    views_agents.py
    views_crews.py
    views_tasks.py
    views_tools.py
    views.py
  api/
    serializers.py
    urls.py
    views.py
  charts/
    admin.py
    apps.py
    models.py
    tests.py
    urls.py
    views.py
  common/
    tools/
      async_crawl_website_tool.py
      browser_tools.py
      crawl_website_search_tool.py
      crawl_website_tool.py
      ExaSearchTool.py
      google_suggestions_tool.py
      keyword_tools.py
      keywords_for_site_tool.py
      rag_tool.py
      screenshot_tool.py
      searxng_tool.py
      summarizer.py
      user_activity_tool.py
      website_search_tool.py
    admin.py
    apps.py
    browser_tool.py
    chat_model_handler.py
    compression_manager.py
    content_loader.py
    models.py
    summarization_manager.py
    summarizer.py
    tests.py
    utils.py
    views.py
  crawl_website/
    templates/
      crawl_website/
        index.html
    admin.py
    apps.py
    models.py
    tests.py
    urls.py
    views.py
  file_manager/
    templatetags/
      file_extension.py
      file_manager_extras.py
      info_value.py
    admin.py
    apps.py
    models.py
    tests.py
    urls.py
    views.py
  seo_manager/
    management/
      commands/
        backfill_rankings.py
        generate_monthly_report.py
    templates/
      seo_manager/
        keywords/
          keyword_list_table.html
          keyword_list.html
          ranking_history.html
        projects/
          edit_project.html
          project_detail.html
          project_list_table.html
          project_list.html
        reports/
          monthly_report.html
        activity_log.html
        add_client.html
        add_ga_credentials_service_account.html
        base.html
        client_analytics copy 2.html
        client_analytics.html
        client_detail.html
        client_form.html
        client_list.html
        dashboard.html
        edit_business_objective.html
        edit_client.html
        input_view_id.html
        ranking_data_management.html
        select_analytics_account.html
        select_search_console_property.html
        setup_service_account.html
    templatetags/
      __init__.py
      custom_filters.py
      seo_manager_filters.py
      seo_tags.py
    views/
      keyword_views.py
      project_views.py
      ranking_views.py
    admin.py
    apps.py
    forms.py
    google_auth.py
    models.py
    services.py
    sitemap_extractor.py
    urls.py
    utils.py
    views_analytics.py
    views_summarizer.py
    views.py
  tables/
    templatetags/
      get_attribute.py
    admin.py
    apps.py
    forms.py
    models.py
    tests.py
    urls.py
    utils.py
    views.py
  tasks/
    templatetags/
      formats.py
    admin.py
    apps.py
    celery.py
    models.py
    tasks.py
    tests.py
    urls.py
    views.py
  users/
    admin.py
    apps.py
    forms.py
    models.py
    signals.py
    tests.py
    urls.py
    views.py
config/
  settings.py
core/
  __init__.py
  asgi.py
  routing.py
  settings.py
  urls.py
  wsgi.py
home/
  templatetags/
    admin_soft.py
    replace_value.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  utils.py
  views.py
templates/
  accounts/
    change/
      basic.html
    complete/
      basic.html
    done/
      basic.html
      change-done.html
      cover.html
      illustration.html
    error/
      404.html
      500.html
    lock/
      basic.html
      cover.html
      illustration.html
    reset/
      basic.html
      cover.html
      illustration.html
    reset-confirm/
      basic.html
    signin/
      basic.html
      cover.html
      illustration.html
    signup/
      basic.html
      cover.html
      illustration.html
    verification/
      basic.html
      cover.html
      illustration.html
    illustration-login.html
  admin/
    auth/
      user/
        add_form.html
        change_password.html
    edit_inline/
      stacked.html
      tabular.html
    includes/
      fieldset.html
      object_delete_summary.html
    actions.html
    change_form_object_tools.html
    change_form.html
    change_list_object_tools.html
    change_list_results.html
    change_list.html
    delete_confirmation.html
    delete_selected_confirmation.html
    filter.html
    index.html
    invalid_setup.html
    login.html
    object_history.html
    pagination.html
    search_form.html
    submit_line.html
  agents/
    agent_form.html
    base_agents.html
    confirm_delete.html
    connection_test.html
    crew_detail.html
    crew_form.html
    crew_list.html
    crewai_home.html
    dashboard_home.html
    execution_detail.html
    execution_list.html
    manage_agents_card_view.html
    manage_agents.html
    manage_crews_card_view.html
    manage_crews.html
    manage_pipelines.html
    manage_tasks.html
    manage_tools.html
    task_form.html
    tool_form.html
  home/
    llm-dashboard.html
  includes/
    fixed-plugin.html
    footer-fullscreen.html
    footer-rtl.html
    footer.html
    head.html
    items-table.html
    menu-list-general.html
    menu-list.html
    navigation-dark.html
    navigation-fullscreen.html
    navigation-rtl.html
    navigation-shadow.html
    navigation.html
    scripts.html
    sidebar-general.html
    sidebar-rtl.html
    sidebar.html
    subdirectories.html
  layouts/
    base-fullscreen.html
    base-general.html
    base-rtl.html
    base-shadow.html
    base.html
  registration/
    logged_out.html
    password_change_done.html
    password_change_form.html
add_dependencies.py
docker-compose.yml
package.json

================================================================
Repository Files
================================================================

================
File: apps/agents/management/commands/debug_crew_execution.py
================
from django.core.management.base import BaseCommand
import logging
from apps.agents.models import Crew, Agent, Task, CrewExecution
from apps.agents.tasks import execute_crew
from crewai import Crew as CrewAI
from crewai import Agent as CrewAgent
from crewai import Task as CrewAITask

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Debug crew execution'

    def handle(self, *args, **kwargs):
        self.stdout.write("Starting crew creation and execution debug test")
        agents = self.create_test_agents()
        tasks = self.create_test_tasks()
        crew = self.create_crew(agents, tasks)

        if crew:
            self.execute_test_crew(crew)

    def create_test_agents(self):
        agents = [
            CrewAgent(role="Web Crawler", goal="Extract relevant information from web pages", backstory="You are a web crawler tasked with gathering data from various online sources to support research and analysis."),
        ]
        logger.debug(f"Created agents: {agents}")
        return agents

    def create_test_tasks(self):
        tasks = [
            CrewAITask(description="Crawl specified websites to extract its contents.", expected_output="A marked down file of the contents of a website"),
        ]
        logger.debug(f"Created tasks: {tasks}")
        return tasks

    def create_crew(self, agents, tasks) -> CrewAI:
        try:
            crew = CrewAI(
                agents=agents,
                tasks=tasks,
                process='sequential',
                verbose=True,
                manager_llm='gpt-4o-mini',
                function_calling_llm='gpt-4o-mini',
                language='English',
            )
            logger.debug(f"Crew created successfully: {crew}")
            return crew
        except Exception as e:
            logger.error(f"Error creating crew: {e}")
            return None

    def execute_test_crew(self, crew):
        try:
            execution = CrewExecution(crew=crew, user=None)
            execution.save()
            execute_crew.delay(execution.id)
            logger.debug(f"Crew execution started for execution ID: {execution.id}")
        except Exception as e:
            logger.error(f"Error executing crew: {e}")

================
File: apps/agents/management/commands/replay_crew.py
================
from django.core.management.base import BaseCommand
from apps.agents.models import CrewExecution
from apps.agents.tasks import run_crew

class Command(BaseCommand):
    help = 'Replay a crew execution from a specific task'

    def add_arguments(self, parser):
        parser.add_argument('execution_id', type=int, help='The ID of the CrewExecution to replay')
        parser.add_argument('-t', '--task_id', type=str, help='The ID of the task to start from')

    def handle(self, *args, **options):
        execution_id = options['execution_id']
        task_id = options['task_id']

        try:
            execution = CrewExecution.objects.get(id=execution_id)
            result = run_crew(execution, start_from_task=task_id)
            self.stdout.write(self.style.SUCCESS(f'Replay completed. Result: {result}'))
        except CrewExecution.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'CrewExecution with id {execution_id} does not exist'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Error during replay: {str(e)}'))

================
File: apps/agents/templates/agents/tool_form.html
================


================
File: apps/agents/templatetags/__init__.py
================
# Empty file to make the directory a Python package

================
File: apps/agents/templatetags/agent_filters.py
================
from django import template

register = template.Library()

@register.filter
def has_force_output_enabled(agent, tool):
    """Template filter to check if force output is enabled for a tool."""
    if not agent:
        return False
    tool_setting = agent.tool_settings.filter(tool=tool).first()
    return tool_setting.force_output_as_result if tool_setting else False

================
File: apps/agents/templatetags/agent_tags.py
================
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

================
File: apps/agents/tools/browser_tool/browser_tool.py
================
import json
import os
from typing import Any, Type, Set
import logging
import re
from tenacity import retry, stop_after_attempt, wait_exponential

import requests
from pydantic import BaseModel, Field
import html2text
from crewai_tools import BaseTool
from urllib.parse import urljoin, urlparse
import dotenv
from bs4 import BeautifulSoup
import trafilatura
from readability.readability import Document

dotenv.load_dotenv()

logger = logging.getLogger(__name__)

class BrowserToolSchema(BaseModel):
  """Input for BrowserTool."""
  website: str = Field(..., title="Website", description="Full URL of the website to scrape (e.g., https://google.com)")

class BrowserTool(BaseTool):
  name: str = "Scrape website content"
  description: str = "A tool that can be used to scrape website content. Pass a string with only the full URL, no need for a final slash `/`."
  args_schema: Type[BaseModel] = BrowserToolSchema
  api_key: str = Field(default=os.environ.get('BROWSERLESS_API_KEY'))
  base_url: str = Field(default="https://browserless.rijsinghani.us/scrape")

  def __init__(self, **data):
      super().__init__(**data)
      if not self.api_key:
          logger.error("BROWSERLESS_API_KEY is not set in the environment variables.")

  def _run(
      self,
      website: str,
      **kwargs: Any,
  ) -> Any:
      """Scrape website content."""
      logger.info(f"Scraping website: {website}")
      content = self.get_content(website)
      return f'\nContent of {website}: {content}\n'

  def clean_content(self, content: str) -> str:
      """Clean and structure extracted content"""
      if not content:
          return ""
          
      # Remove excessive whitespace
      content = re.sub(r'\s+', ' ', content)
      
      # Remove common boilerplate phrases
      boilerplate = [
          'cookie policy',
          'accept cookies',
          'privacy policy',
          'terms of service',
          'subscribe to our newsletter',
          'sign up for our newsletter',
          'all rights reserved',
      ]
      for phrase in boilerplate:
          content = re.sub(rf'(?i){phrase}.*?[\.\n]', '', content)
      
      # Remove email addresses and phone numbers
    #   content = re.sub(r'\S+@\S+', '[EMAIL]', content)
    #   content = re.sub(r'\+?\d{1,3}[-.\s]?$?\d{3}$?[-.\s]?\d{3}[-.\s]?\d{4}', '[PHONE]', content)
      
      return content.strip()

  def detect_content_type(self, url: str, html_content: str) -> str:
      """Detect type of content for specialized handling"""
      patterns = {
          'article': r'article|post|blog',
          'product': r'product|item|price',
          'documentation': r'docs|documentation|api|reference',
      }
      
      for content_type, pattern in patterns.items():
          if re.search(pattern, url, re.I) or re.search(pattern, html_content, re.I):
              return content_type
      return 'general'

  def extract_content(self, url: str, html_content: str) -> dict:
      """Multi-strategy content extraction"""
      content = {
          'title': '',
          'text': '',
          'metadata': {}
      }
      
      try:
          # Strategy 1: Trafilatura
          trafilatura_content = trafilatura.extract(html_content, include_comments=False, 
                                                  include_tables=True, 
                                                  include_links=False)
          
          # Strategy 2: Readability
          doc = Document(html_content)
          readable_article = doc.summary()
          doc_title = doc.title()
          
          # Strategy 3: BeautifulSoup fallback
          soup = BeautifulSoup(html_content, 'lxml')
          
          # Combine results with priority
          if trafilatura_content:
              content['text'] = trafilatura_content
          elif readable_article:
              soup_readable = BeautifulSoup(readable_article, 'lxml')
              content['text'] = soup_readable.get_text(separator=' ', strip=True)
          else:
              content['text'] = soup.get_text(separator=' ', strip=True)
              
          # Extract title
          content['title'] = doc_title or soup.title.string if soup.title else ''
          
          # Extract basic metadata
          meta_tags = soup.find_all('meta')
          content['metadata'] = {
              'description': next((tag.get('content', '') for tag in meta_tags if tag.get('name', '').lower() == 'description'), ''),
              'keywords': next((tag.get('content', '').split(',') for tag in meta_tags if tag.get('name', '').lower() == 'keywords'), []),
              'author': next((tag.get('content', '') for tag in meta_tags if tag.get('name', '').lower() == 'author'), '')
          }
          
      except Exception as e:
          logger.error(f"Error in content extraction: {str(e)}")
          # Fallback to basic HTML extraction
          content['text'] = html2text.html2text(html_content)
              
      return content

#  @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
  def get_content(self, url: str) -> str:
      """Scrape website content with retry mechanism."""
      payload = {
          "url": url,
          "elements": [{"selector": "body"}]
      }
      headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
      
      try:
          response = requests.post(f"{self.base_url}?token={self.api_key}", 
                                headers=headers, 
                                json=payload,
                                timeout=30)
          response.raise_for_status()
          data = response.json()
          html_content = data['data'][0]['results'][0]['html']
          # Detect content type
          content_type = self.detect_content_type(url, html_content)
          # Extract and process content
          extracted_content = self.extract_content(url, html_content)
          # Format the final output
          result = f"Title: {extracted_content['title']}\n\n"
          result += f"Content Type: {content_type}\n\n"
          result += extracted_content['text']

          # Add metadata if available
          if extracted_content['metadata'].get('description'):
              result += f"\n\nDescription: {extracted_content['metadata']['description']}"
          if extracted_content['metadata'].get('author'):
              result += f"\nAuthor: {extracted_content['metadata']['author']}"
          if extracted_content['metadata'].get('keywords'):
              result += f"\nKeywords: {', '.join(extracted_content['metadata']['keywords'])}"
          return result
          
      except requests.exceptions.RequestException as e:
          logger.error(f"Failed to fetch content for {url}: {str(e)}")
          logger.error(f"Response status code: {getattr(response, 'status_code', 'N/A')}")
          logger.error(f"Response content: {getattr(response, 'text', 'N/A')}")
          return ""

  def get_links(self, url: str) -> Set[str]:
      """Extract links from the webpage."""
      payload = {
          "url": url,
          "elements": [
              {"selector": "a"}
          ]
      }
      headers = {'Cache-Control': 'no-cache', 'Content-Type': 'application/json'}
      try:
          response = requests.post(f"{self.base_url}?token={self.api_key}", 
                                headers=headers, 
                                json=payload,
                                timeout=30)
          response.raise_for_status()
          data = response.json()
          links = set()
          base_domain = urlparse(url).netloc
          for element in data['data'][0]['results']:
              for attr in element['attributes']:
                  if attr['name'] == 'href':
                      full_url = urljoin(url, attr['value'])
                      if urlparse(full_url).netloc == base_domain:
                          links.add(full_url)
          return links
      except requests.exceptions.RequestException as e:
          logger.error(f"Failed to fetch links for {url}: {str(e)}")
          logger.error(f"Response status code: {getattr(response, 'status_code', 'N/A')}")
          logger.error(f"Response content: {getattr(response, 'text', 'N/A')}")
          return set()

================
File: apps/agents/tools/browser_tool/test_browser_tool.py
================
import logging
import sys
import os

# Add the project root to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))
sys.path.insert(0, project_root)

from apps.agents.tools.browser_tool.browser_tool import BrowserTool

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_browser_tool():
    # Initialize the tool
    browser = BrowserTool()

    # Test get_content
    test_url = "https://brandon.neuralami.com"
    logger.info(f"Testing get_content for {test_url}")
    content = browser.get_content(test_url)
    logger.info(f"Content length: {len(content)}")
    logger.info(f"Content preview: {content[:200]}...")
    print(content[:200])

    # Test get_links
    logger.info(f"Testing get_links for {test_url}")
    links = browser.get_links(test_url)
    logger.info(f"Number of links found: {len(links)}")
    logger.info(f"Links: {links}")
    print(links)
if __name__ == "__main__":
    test_browser_tool()

================
File: apps/agents/tools/competitor_tools/competitor_tools.py
================
import os
import requests
from typing import Any, Type, List, Dict
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
import logging
import pandas as pd
from urllib.parse import urlparse

logger = logging.getLogger(__name__)

BASE_URL = os.getenv('DATAFORSEO_BASE_URL', 'https://api.dataforseo.com')

class CompetitorsDomainInput(BaseModel):
    website_url: str = Field(description="Fully qualified domain name (FQDN) for competitor analysis")
    location_code: int = Field(default=2840, description="Location code for the analysis", exclude=True)
    language_code: str = Field(default="en", description="Language code for the analysis", exclude=True)

    @classmethod
    def get_fqdn(cls, url: str) -> str:
        parsed_url = urlparse(url)
        return parsed_url.netloc or parsed_url.path

class CompetitorsDomainTool(BaseTool):
    name: str = "Competitors Domain"
    description: str = "Provides a list of competitor domains with various metrics"
    args_schema: Type[BaseModel] = CompetitorsDomainInput

    def _run(self, website_url: str, location_code: int = 2840, language_code: str = "en", **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/dataforseo_labs/google/competitors_domain/live"
        
        # Extract FQDN from the provided URL
        fqdn = CompetitorsDomainInput.get_fqdn(website_url)
        
        payload = [
            {
                "target": fqdn,
                "location_code": location_code,
                "language_code": language_code,
                "exclude_top_domains": False,
                "include_clickstream_data": False,
                "item_types": ["organic"],
                "limit": 100,
                "order_by": ["intersections,desc"]
            }
        ]
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(url, json=payload, headers=headers, auth=cred)
            response.raise_for_status()
        except Exception as e:
            logger.error(f"Error making request to DataForSEO: {e}")
            raise e

        try:
            results = self._transform_competitor_data(response.json())
        except Exception as e:
            logger.error(f"Error transforming competitor data: {e}")
            raise e

        return results

    def _transform_competitor_data(self, data: Dict) -> str:
        try:
            if data.get('tasks_error', 0) > 0:
                error_message = data.get('tasks', [{}])[0].get('status_message', 'Unknown error')
                return f"Error: {error_message}"

            all_results = data.get('tasks', [])[0].get('result', [])[0].get('items', [])
            if not all_results:
                return "Error: No results found in the response"

            # Create a DataFrame from the results
            df = pd.DataFrame(all_results)

            # Extract necessary fields and calculate additional metrics
            df['avg_position'] = df['avg_position'].round(2)
            df['etv'] = df['full_domain_metrics'].apply(lambda x: x['organic']['etv'])
            df['estimated_paid_traffic_cost'] = df['full_domain_metrics'].apply(lambda x: x['organic']['estimated_paid_traffic_cost'])
            df['rank_distribution_top_10'] = df['full_domain_metrics'].apply(lambda x: x['organic']['pos_4_10'])
            df['rank_distribution_11_20'] = df['full_domain_metrics'].apply(lambda x: x['organic']['pos_11_20'])
            df['rank_distribution_21_100'] = df['full_domain_metrics'].apply(lambda x: sum(x['organic'][f'pos_{i}_{i+9}'] for i in range(21, 100, 10)))

            # Define the columns to include in the output
            columns = [
                'domain', 'avg_position', 'intersections', 'etv', 
                'estimated_paid_traffic_cost', 'rank_distribution_top_10', 
                'rank_distribution_11_20', 'rank_distribution_21_100'
            ]
            result_df = df[columns]

            # Convert the DataFrame to CSV format
            csv_output = result_df.to_csv(index=False)
            return csv_output

        except Exception as e:
            logger.error(f"Error transforming competitor data: {e}")
            return f"Error: {str(e)}"

class KeywordTools:
    @staticmethod
    def _dataforseo_credentials():
        login = os.environ["DATAFORSEO_EMAIL"]
        password = os.environ["DATAFORSEO_PASSWORD"]
        return login, password

================
File: apps/agents/tools/crawl_website_tool/crawl_website_tool.py
================
import logging
from typing import Optional, Type, Any, List, Set
from pydantic.v1 import BaseModel, Field
from crewai_tools import BaseTool
from urllib.parse import urljoin, urlparse
from spider_rs import Website, Page
from trafilatura import extract


logger = logging.getLogger(__name__)

class FixedCrawlWebsiteToolSchema(BaseModel):
    """Input for CrawlWebsiteTool."""
    pass

class CrawlWebsiteToolSchema(FixedCrawlWebsiteToolSchema):
    """Input for CrawlWebsiteTool."""
    website_url: str = Field(..., description="Mandatory website url to crawl and read content")

class CrawlWebsiteTool(BaseTool):
    name: str = "Crawl and read website content"
    description: str = "A tool that can be used to crawl a website and read its content, including content from internal links on the same page."
    args_schema: Type[BaseModel] = CrawlWebsiteToolSchema
    website_url: Optional[str] = None

    def __init__(self, website_url: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if website_url is not None:
            self.website_url = website_url
            self.description = f"A tool that can be used to crawl {website_url} and read its content, including content from internal links on the same page."
            self.args_schema = FixedCrawlWebsiteToolSchema

    def _run(self, website_url: str) -> str:
        url = website_url or self.website_url
        if not url:
            raise ValueError("No website URL provided")

        logger.info(f"Starting crawl for URL: {url}")
        
        try:
            result = self._crawl_website(url)  # Changed website_url to url
            # Remove the log statement that was causing the error
            return result
        except Exception as e:
            logger.error(f"Error during crawl: {e}")
            raise

    def _crawl_website(self, start_url: str) -> str:  # Changed return type to str
        website = Website(start_url)
        website.with_budget({"*": 50})  # Set a limit for crawling
        website.with_respect_robots_txt(True)
        website.with_subdomains(False)  # Stick to the main domain
        website.with_tld(False)  # Don't crawl top-level domain
        website.with_delay(1)  # Be respectful with a 1-second delay between requests
        content = ""

        website.scrape()
        
        pages = website.get_pages()
        
        for page in pages:
            page_content = self._extract_content(page)
            content += page_content
        
        return content  # Return the content directly

    def _extract_content(self, page: Page) -> str:
        try:
            html_content = page.content
            extracted_content = extract(html_content)
            logger.info(f"Extracted content length for {page.url}: {len(extracted_content) if extracted_content else 0}")
            return f"---link: {page.url}\n{extracted_content}\n---page-end---\n" if extracted_content else ""
        except Exception as e:
            logger.error(f"Error extracting content from {page.url}: {e}")
            return ""

================
File: apps/agents/tools/crawl_website_tool/test_crawl_website_tool.py
================
import logging
import sys
import os

# Add the project root to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))
sys.path.insert(0, project_root)

from apps.agents.tools.crawl_website_tool.crawl_website_tool import CrawlWebsiteTool

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_crawl_website():
    # Initialize the tool
    crawler = CrawlWebsiteTool()

    # Test with a real website
    test_url = "https://proplankohio.com"
    logger.info(f"Starting crawl of {test_url}")
    print(f"Starting crawl of {test_url}")
    result = crawler._run(test_url)

    # Print the result
    logger.info(f"Crawl result for {test_url}:")
    logger.info(result)
    print(result)

    # You can add more assertions here to verify the output

if __name__ == "__main__":
    test_crawl_website()

================
File: apps/agents/tools/csv_search_tool/csv_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.models.data_type import DataType
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedCSVSearchToolSchema(BaseModel):
    """Input for CSVSearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the CSV's content",
    )


class CSVSearchToolSchema(FixedCSVSearchToolSchema):
    """Input for CSVSearchTool."""

    csv: str = Field(..., description="Mandatory csv path you want to search")


class CSVSearchTool(RagTool):
    name: str = "Search a CSV's content"
    description: str = (
        "A tool that can be used to semantic search a query from a CSV's content."
    )
    args_schema: Type[BaseModel] = CSVSearchToolSchema

    def __init__(self, csv: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if csv is not None:
            self.add(csv)
            self.description = f"A tool that can be used to semantic search a query the {csv} CSV's content."
            self.args_schema = FixedCSVSearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.CSV
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "csv" in kwargs:
            self.add(kwargs["csv"])

    def _run(
        self,
        search_query: str,
        **kwargs: Any,
    ) -> Any:
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/directory_read_tool/directory_read_tool.py
================
import os
from typing import Any, Optional, Type

from pydantic import BaseModel, Field

from crewai_tools import BaseTool as CrewAIBaseTool


class FixedDirectoryReadToolSchema(BaseModel):
    """Input for DirectoryReadTool."""

    pass


class DirectoryReadToolSchema(FixedDirectoryReadToolSchema):
    """Input for DirectoryReadTool."""

    directory: str = Field(..., description="Mandatory directory to list content")


class DirectoryReadTool(CrewAIBaseTool):
    name: str = "List files in directory"
    description: str = (
        "A tool that can be used to recursively list a directory's content."
    )
    args_schema: Type[BaseModel] = DirectoryReadToolSchema
    directory: Optional[str] = None

    def __init__(self, directory: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if directory is not None:
            self.directory = directory
            self.description = f"A tool that can be used to list {directory}'s content."
            self.args_schema = FixedDirectoryReadToolSchema

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        directory = kwargs.get("directory", self.directory)
        if directory[-1] == "/":
            directory = directory[:-1]
        files_list = [
            f"{directory}/{(os.path.join(root, filename).replace(directory, '').lstrip(os.path.sep))}"
            for root, dirs, files in os.walk(directory)
            for filename in files
        ]
        files = "\n- ".join(files_list)
        return f"File paths: \n-{files}"

================
File: apps/agents/tools/directory_search_tool/directory_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.loaders.directory_loader import DirectoryLoader
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedDirectorySearchToolSchema(BaseModel):
    """Input for DirectorySearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the directory's content",
    )


class DirectorySearchToolSchema(FixedDirectorySearchToolSchema):
    """Input for DirectorySearchTool."""

    directory: str = Field(..., description="Mandatory directory you want to search")


class DirectorySearchTool(RagTool):
    name: str = "Search a directory's content"
    description: str = (
        "A tool that can be used to semantic search a query from a directory's content."
    )
    args_schema: Type[BaseModel] = DirectorySearchToolSchema

    def __init__(self, directory: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if directory is not None:
            self.add(directory)
            self.description = f"A tool that can be used to semantic search a query the {directory} directory's content."
            self.args_schema = FixedDirectorySearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["loader"] = DirectoryLoader(config=dict(recursive=True))
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "directory" in kwargs:
            self.add(kwargs["directory"])

    def _run(
        self,
        search_query: str,
        **kwargs: Any,
    ) -> Any:
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/docx_search_tool/docx_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.models.data_type import DataType
from pydantic import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedDOCXSearchToolSchema(BaseModel):
    """Input for DOCXSearchTool."""

    docx: Optional[str] = Field(
        ..., description="Mandatory docx path you want to search"
    )
    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the DOCX's content",
    )


class DOCXSearchToolSchema(FixedDOCXSearchToolSchema):
    """Input for DOCXSearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search the DOCX's content",
    )


class DOCXSearchTool(RagTool):
    name: str = "Search a DOCX's content"
    description: str = (
        "A tool that can be used to semantic search a query from a DOCX's content."
    )
    args_schema: Type[BaseModel] = DOCXSearchToolSchema

    def __init__(self, docx: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if docx is not None:
            self.add(docx)
            self.description = f"A tool that can be used to semantic search a query the {docx} DOCX's content."
            self.args_schema = FixedDOCXSearchToolSchema
            self._generate_description()

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.DOCX
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "docx" in kwargs:
            self.add(kwargs["docx"])

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        search_query = kwargs.get("search_query")
        if search_query is None:
            search_query = kwargs.get("query")

        docx = kwargs.get("docx")
        if docx is not None:
            self.add(docx)
        return super()._run(query=search_query, **kwargs)

================
File: apps/agents/tools/file_read_tool/file_read_tool.py
================
from typing import Any, Optional, Type

from pydantic import BaseModel, Field

from ..base_tool import BaseTool


class FixedFileReadToolSchema(BaseModel):
    """Input for FileReadTool."""

    pass


class FileReadToolSchema(FixedFileReadToolSchema):
    """Input for FileReadTool."""

    file_path: str = Field(..., description="Mandatory file full path to read the file")


class FileReadTool(BaseTool):
    name: str = "Read a file's content"
    description: str = "A tool that can be used to read a file's content."
    args_schema: Type[BaseModel] = FileReadToolSchema
    file_path: Optional[str] = None

    def __init__(self, file_path: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if file_path is not None:
            self.file_path = file_path
            self.description = f"A tool that can be used to read {file_path}'s content."
            self.args_schema = FixedFileReadToolSchema
            self._generate_description()

    def _run(
        self,
        **kwargs: Any,
    ) -> Any:
        try:
            file_path = kwargs.get("file_path", self.file_path)
            with open(file_path, "r") as file:
                return file.read()
        except Exception as e:
            return f"Fail to read the file {file_path}. Error: {e}"

================
File: apps/agents/tools/file_writer_tool/file_writer_tool.py
================
import os
from typing import Any, Optional, Type

from pydantic import BaseModel

from ..base_tool import BaseTool


class FileWriterToolInput(BaseModel):
    filename: str
    content: str
    directory: Optional[str] = None
    overwrite: bool = False


class FileWriterTool(BaseTool):
    name: str = "File Writer Tool"
    description: str = (
        "A tool to write content to a specified file. Accepts filename, content, and optionally a directory path and overwrite flag as input."
    )
    args_schema: Type[BaseModel] = FileWriterToolInput

    def _run(self, **kwargs: Any) -> str:
        try:
            # Create the directory if it doesn't exist
            if kwargs["directory"] and not os.path.exists(kwargs["directory"]):
                os.makedirs(kwargs["directory"])

            # Construct the full path
            filepath = os.path.join(kwargs["directory"] or "", kwargs["filename"])

            # Check if file exists and overwrite is not allowed
            if os.path.exists(filepath) and not kwargs["overwrite"]:
                return f"File {filepath} already exists and overwrite option was not passed."

            # Write content to the file
            mode = "w" if kwargs["overwrite"] else "x"
            with open(filepath, mode) as file:
                file.write(kwargs["content"])
            return f"Content successfully written to {filepath}"
        except FileExistsError:
            return (
                f"File {filepath} already exists and overwrite option was not passed."
            )
        except Exception as e:
            return f"An error occurred while writing to the file: {str(e)}"

================
File: apps/agents/tools/google_analytics_tool/google_analytics_tool.py
================
import os
import json
import logging
import sys
from typing import Any, Type, List, Optional
from pydantic.v1 import BaseModel, Field, validator
from crewai_tools.tools.base_tool import BaseTool
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange, Metric, Dimension, RunReportRequest
from google.auth.transport.requests import Request
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class GACredentials(BaseModel):
  view_id: str = None
  client_id: Optional[str] = None
  access_token: str = None
  refresh_token: str = None
  token_uri: str = None
  ga_client_id: str = None
  client_secret: str = None
  use_service_account: bool = False
  service_account_json: Optional[str] = None
  user_email: str
  scopes: List[str] = []

class GoogleAnalyticsToolInput(BaseModel):
  """Input schema for GoogleAnalyticsTool."""
  start_date: str = Field(..., description="The start date for the analytics data (YYYY-MM-DD).")
  end_date: str = Field(..., description="The end date for the analytics data (YYYY-MM-DD).")
  credentials: GACredentials = Field(..., description="The credentials for the Google Analytics API.")
  @validator("start_date", "end_date")
  def validate_dates(cls, value):
        try:
            datetime.strptime(value, "%Y-%m-%d")
            return value
        except ValueError:
            raise ValueError("Invalid date format. Use YYYY-MM-DD.")
        
class GoogleAnalyticsTool(BaseTool):
  name: str = "Google Analytics Data Fetcher"
  description: str = "Fetches Google Analytics data for a specified property and date range."
  credentials: GACredentials = None
  args_schema: Type[BaseModel] = GoogleAnalyticsToolInput

  def __init__(self, **kwargs):
      super().__init__()
      print("GoogleAnalyticsTool initialized", file=sys.stderr)
      logger.info("GoogleAnalyticsTool initialized")
      self.credentials = kwargs.get('credentials')

  def set_credentials(self, credentials: GACredentials):
    if not isinstance(credentials, GACredentials):
        raise TypeError("credentials must be an instance of GACredentials")
    self.credentials = credentials
    logger.info(f"Credentials set: {self.credentials}")
      
  def _get_analytics_service(self):
    logger.info("Entering GoogleAnalyticsTool._get_analytics_service")
    if not self.credentials:
        raise ValueError("Credentials have not been set. Use set_credentials() method to set them.")
    
    try:
        logger.info(f"Creating analytics service for client")
        if self.credentials.use_service_account:
            logger.info("Using service account")
            service_account_info = json.loads(self.credentials.service_account_json)
            creds = service_account.Credentials.from_service_account_info(
                service_account_info,
                scopes=self.credentials.scopes or ['https://www.googleapis.com/auth/analytics.readonly']
            )
        else:
            logger.info("Using OAuth credentials")
            creds = Credentials(
                token=self.credentials.access_token,
                refresh_token=self.credentials.refresh_token,
                token_uri=self.credentials.token_uri,
                client_id=self.credentials.ga_client_id,
                client_secret=self.credentials.client_secret,
                scopes=self.credentials.scopes or ['https://www.googleapis.com/auth/analytics.readonly']
            )
        
        logger.info("Credentials created, refreshing...")
        request = Request()
        creds.refresh(request)
        logger.info("Credentials refreshed successfully")
        
        analytics_client = BetaAnalyticsDataClient(credentials=creds)
        logger.info("Analytics client created successfully")
        return analytics_client
    except Exception as e:
        logger.error(f"Error creating analytics service: {str(e)}", exc_info=True)
        raise
  
  def _run(self, start_date: str, end_date: str, credentials: dict, **kwargs: Any) -> Any:
    print(f"GoogleAnalyticsTool._run called with dates: {start_date} to {end_date}", file=sys.stderr)
    logger.info(f"GoogleAnalyticsTool._run called with dates: {start_date} to {end_date}")
    try:
        logger.info(f"Entering GoogleAnalyticsTool._run with start_date: {start_date}, end_date: {end_date}")
        logger.info(f"Credentials received: {json.dumps(credentials, default=str)}")
        
        if credentials is not None:
            # Convert the dictionary to a GoogleAnalyticsCredentials object
            credentials_obj = GACredentials(**credentials)
            self.set_credentials(credentials_obj)
        
        if not self.credentials:
            raise ValueError(f"Credentials have not been set. Use set_credentials() method to set them. inputs: {start_date} - {end_date} - {kwargs}")
        
        client = self._get_analytics_service()
        
        property_id = self.credentials.view_id.replace('properties/', '')
        
        logger.info(f"Fetching analytics data for Property ID: {property_id}, Start Date: {start_date}, End Date: {end_date}")
        
        request = RunReportRequest(
            property=f"properties/{property_id}",
            date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
            metrics=[Metric(name="activeUsers"), Metric(name="sessions")],
            dimensions=[Dimension(name="date")]
        )        
        response = client.run_report(request)
        logger.info("Analytics data fetched successfully")
        
        processed_data = self._process_analytics_data(response)
        
        result = {
            'analytics_data': json.dumps(processed_data),
            'start_date': start_date,
            'end_date': end_date
        }
        logger.info(f"Returning result: {json.dumps(result, default=str)}")
        return result
    except Exception as e:
        logger.error(f"Failed to fetch Google Analytics data. Error: {str(e)}", exc_info=True)
        print(f"GoogleAnalyticsTool error: {str(e)}")  # Print to stdout for immediate visibility
        return {
            'analytics_data': json.dumps([]),
            'start_date': start_date,
            'end_date': end_date,
            'error': str(e)
        }

  def _process_analytics_data(self, response):
    processed_data = []
    try:
        for row in response.rows:
            date = datetime.strptime(row.dimension_values[0].value, '%Y%m%d').strftime('%Y-%m-%d')
            active_users = int(row.metric_values[0].value)
            sessions = int(row.metric_values[1].value)
            processed_data.append({
                'date': date,
                'active_users': active_users,
                'sessions': sessions
            })
        processed_data.sort(key=lambda x: x['date'])
    except Exception as e:
        logger.error(f"Error processing analytics data: {str(e)}", exc_info=True)
        print(f"Error processing analytics data: {str(e)}")  # Print to stdout for immediate visibility
    return processed_data

================
File: apps/agents/tools/google_report_tool/google_rankings_tool.py
================
import os
import json
import logging
import sys
from typing import Any, Type, List, Optional
from pydantic.v1 import BaseModel, Field, validator
from crewai_tools.tools.base_tool import BaseTool
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange, Metric, Dimension, RunReportRequest, OrderBy
from google.auth.transport.requests import Request
from datetime import datetime, timedelta
import pandas as pd
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.auth.exceptions import RefreshError
import google.auth.transport.requests

# Import Django models
from django.core.exceptions import ObjectDoesNotExist
from apps.seo_manager.models import (
    Client, 
    GoogleAnalyticsCredentials, 
    SearchConsoleCredentials,
    KeywordRankingHistory,
    TargetedKeyword
)
from django.db import transaction

# Add this import at the top with other imports
from apps.seo_manager.utils import get_monthly_date_ranges

logger = logging.getLogger(__name__)

class AuthError(Exception):
    """Custom exception for authentication errors"""
    pass

class GoogleRankingsToolInput(BaseModel):
    """Input schema for GoogleReportTool."""
    start_date: str = Field(..., description="The start date for the analytics data (YYYY-MM-DD).")
    end_date: str = Field(..., description="The end date for the analytics data (YYYY-MM-DD).")
    client_id: int = Field(..., description="The ID of the client to fetch Google Analytics data for.")

    @validator("start_date", "end_date")
    def validate_dates(cls, value):
        try:
            datetime.strptime(value, "%Y-%m-%d")
            return value
        except ValueError:
            raise ValueError("Invalid date format. Use YYYY-MM-DD.")

class GoogleRankingsTool(BaseTool):
    name: str = "Google Analytics and Search Console Report Fetcher"
    description: str = "Fetches Google Analytics and Search Console reports for a specified client and date range."
    args_schema: Type[BaseModel] = GoogleRankingsToolInput

    def __init__(self, **kwargs):
        super().__init__()

    def _refresh_oauth_credentials(self, credentials_obj, stored_credentials):
        """Helper method to refresh OAuth credentials"""
        try:
            # Create a session for token validation
            session = google.auth.transport.requests.AuthorizedSession(credentials_obj)
            
            # Force token refresh
            request = google.auth.transport.requests.Request()
            credentials_obj.refresh(request)
            
            # Update stored credentials
            stored_credentials.access_token = credentials_obj.token
            stored_credentials.save()
            
            logger.info("Successfully refreshed and validated OAuth credentials")
            return credentials_obj
            
        except Exception as e:
            logger.error(f"Failed to refresh OAuth credentials: {str(e)}")
            raise AuthError(f"Failed to refresh OAuth credentials: {str(e)}")

    def _get_search_console_service(self, credentials):
        try:
            logger.info("Using OAuth credentials for Search Console")
            
            # Create credentials object
            creds = Credentials(
                token=credentials.access_token,
                refresh_token=credentials.refresh_token,
                token_uri=credentials.token_uri,
                client_id=credentials.sc_client_id,
                client_secret=credentials.client_secret,
                scopes=['https://www.googleapis.com/auth/webmasters.readonly']
            )
            
            # Always refresh token before use
            creds = self._refresh_oauth_credentials(creds, credentials)
            
            return build('searchconsole', 'v1', credentials=creds, cache_discovery=False)

        except Exception as e:
            logger.error(f"Error in _get_search_console_service: {str(e)}", exc_info=True)
            raise AuthError(f"Failed to initialize Search Console service: {str(e)}")

    def _run(self, start_date: str, end_date: str, client_id: int, **kwargs: Any) -> Any:
        try:
            client = Client.objects.get(id=client_id)
            sc_credentials = client.sc_credentials
            
            if not sc_credentials:
                raise ValueError("Missing Search Console credentials")
            
            search_console_service = self._get_search_console_service(sc_credentials)
            property_url = sc_credentials.property_url
            
            # Check if specific dates were provided (for collect_rankings)
            if start_date and end_date:
                date_ranges = [(
                    datetime.strptime(start_date, '%Y-%m-%d').date(),
                    datetime.strptime(end_date, '%Y-%m-%d').date()
                )]
            else:
                # For backfill_rankings, get last 12 months
                date_ranges = get_monthly_date_ranges(12)
            
            for start_date, end_date in date_ranges:
                try:
                    logger.info(f"Fetching data for period: {start_date} to {end_date}")
                    
                    keyword_data = self._get_search_console_data(
                        search_console_service, 
                        property_url, 
                        start_date.strftime('%Y-%m-%d'),
                        end_date.strftime('%Y-%m-%d'),
                        'query'
                    )
                    
                    # Calculate monthly averages and store
                    self._log_monthly_rankings(client, keyword_data, start_date)
                    
                except Exception as e:
                    logger.error(f"Error fetching data for period {start_date} to {end_date}: {str(e)}")
                    continue
            
            return {
                'success': True,
                'message': f"Processed ranking data for {len(date_ranges)} period(s)"
            }
            
        except Exception as e:
            logger.error(f"Error in ranking tool: {str(e)}")
            return {'success': False, 'error': str(e)}

    @transaction.atomic
    def _log_monthly_rankings(self, client, keyword_data, month_date):
        """Log monthly average rankings"""
        try:
            # Get all targeted keywords for this client
            targeted_keywords = {
                kw.keyword.lower(): kw 
                for kw in TargetedKeyword.objects.filter(client=client)
            }
            
            # Delete existing rankings for this month
            KeywordRankingHistory.objects.filter(
                client=client,
                date__year=month_date.year,
                date__month=month_date.month
            ).delete()
            
            # Process and store rankings
            rankings_to_create = []
            
            for data in keyword_data:
                keyword_text = data['Keyword']
                
                ranking = KeywordRankingHistory(
                    client=client,
                    keyword_text=keyword_text,
                    date=month_date,  # Use first day of month as reference date
                    impressions=data['Impressions'],
                    clicks=data['Clicks'],
                    ctr=data['CTR (%)'] / 100,
                    average_position=data['Avg Position']
                )
                
                # Link to TargetedKeyword if exists
                targeted_keyword = targeted_keywords.get(keyword_text.lower())
                if targeted_keyword:
                    ranking.keyword = targeted_keyword
                
                rankings_to_create.append(ranking)
            
            # Bulk create new rankings
            KeywordRankingHistory.objects.bulk_create(
                rankings_to_create,
                batch_size=1000
            )
            
            logger.info(
                f"Stored {len(rankings_to_create)} rankings for {month_date.strftime('%B %Y')}"
            )
            
        except Exception as e:
            logger.error(f"Error logging monthly rankings: {str(e)}")
            raise

    def _get_search_console_data(self, service, property_url, start_date, end_date, dimension):
        try:
            response = service.searchanalytics().query(
                siteUrl=property_url,
                body={
                    'startDate': start_date,
                    'endDate': end_date,
                    'dimensions': [dimension],
                    'rowLimit': 1000
                }
            ).execute()
            
            search_console_data = []
            for row in response.get('rows', []):
                search_console_data.append({
                    'Keyword' if dimension == 'query' else 'Landing Page': row['keys'][0],
                    'Clicks': row['clicks'],
                    'Impressions': row['impressions'],
                    'CTR (%)': round(row['ctr'] * 100, 2),
                    'Avg Position': round(row['position'], 1)
                })
            
            search_console_data.sort(key=lambda x: x['Impressions'], reverse=True)
            return search_console_data[:1000]
        except HttpError as error:
            logger.error(f"An error occurred while fetching Search Console data: {error}")
            print(f"An error occurred while fetching Search Console data: {error}")
            return []

================
File: apps/agents/tools/google_report_tool/google_report_tool.py
================
import os
import json
import logging
import sys
from typing import Any, Type, List, Optional
from pydantic.v1 import BaseModel, Field, validator
from crewai_tools.tools.base_tool import BaseTool
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange, Metric, Dimension, RunReportRequest, OrderBy
from google.auth.transport.requests import Request
from datetime import datetime, timedelta
import pandas as pd
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.auth.exceptions import RefreshError
import google.auth.transport.requests

# Import Django models
from django.core.exceptions import ObjectDoesNotExist
from apps.seo_manager.models import Client, GoogleAnalyticsCredentials, SearchConsoleCredentials

logger = logging.getLogger(__name__)

class AuthError(Exception):
    """Custom exception for authentication errors"""
    pass

class GoogleReportToolInput(BaseModel):
    """Input schema for GoogleReportTool."""
    start_date: str = Field(..., description="The start date for the analytics data (YYYY-MM-DD).")
    end_date: str = Field(..., description="The end date for the analytics data (YYYY-MM-DD).")
    client_id: int = Field(..., description="The ID of the client to fetch Google Analytics data for.")

    @validator("start_date", "end_date")
    def validate_dates(cls, value):
        try:
            datetime.strptime(value, "%Y-%m-%d")
            return value
        except ValueError:
            raise ValueError("Invalid date format. Use YYYY-MM-DD.")

class GoogleReportTool(BaseTool):
    name: str = "Google Analytics and Search Console Report Fetcher"
    description: str = "Fetches Google Analytics and Search Console reports for a specified client and date range."
    args_schema: Type[BaseModel] = GoogleReportToolInput

    def __init__(self, **kwargs):
        super().__init__()

    def _refresh_oauth_credentials(self, credentials_obj, stored_credentials):
        """Helper method to refresh OAuth credentials"""
        try:
            # Create a session for token validation
            session = google.auth.transport.requests.AuthorizedSession(credentials_obj)
            
            # Force token refresh
            request = google.auth.transport.requests.Request()
            credentials_obj.refresh(request)
            
            # Update stored credentials
            stored_credentials.access_token = credentials_obj.token
            stored_credentials.save()
            
            logger.info("Successfully refreshed and validated OAuth credentials")
            return credentials_obj
            
        except Exception as e:
            logger.error(f"Failed to refresh OAuth credentials: {str(e)}")
            raise AuthError(f"Failed to refresh OAuth credentials: {str(e)}")

    def _get_analytics_service(self, credentials):        
        try:
            if credentials.use_service_account:
                logger.info("Using service account for Google Analytics")
                service_account_info = json.loads(credentials.service_account_json)
                creds = service_account.Credentials.from_service_account_info(
                    service_account_info,
                    scopes=['https://www.googleapis.com/auth/analytics.readonly']
                )
            else:
                logger.info("Using OAuth credentials for Google Analytics")
                
                # Create credentials object
                creds = Credentials(
                    token=credentials.access_token,
                    refresh_token=credentials.refresh_token,
                    token_uri=credentials.token_uri,
                    client_id=credentials.ga_client_id,
                    client_secret=credentials.client_secret,
                    scopes=['https://www.googleapis.com/auth/analytics.readonly']
                )
                
                # Always refresh token before use
                creds = self._refresh_oauth_credentials(creds, credentials)
            
            analytics_client = BetaAnalyticsDataClient(credentials=creds)
            return analytics_client

        except Exception as e:
            logger.error(f"Error in _get_analytics_service: {str(e)}", exc_info=True)
            raise AuthError(f"Failed to initialize Analytics service: {str(e)}")

    def _get_search_console_service(self, credentials):
        try:
            logger.info("Using OAuth credentials for Search Console")
            
            # Create credentials object
            creds = Credentials(
                token=credentials.access_token,
                refresh_token=credentials.refresh_token,
                token_uri=credentials.token_uri,
                client_id=credentials.sc_client_id,
                client_secret=credentials.client_secret,
                scopes=['https://www.googleapis.com/auth/webmasters.readonly']
            )
            
            # Always refresh token before use
            creds = self._refresh_oauth_credentials(creds, credentials)
            
            return build('searchconsole', 'v1', credentials=creds, cache_discovery=False)

        except Exception as e:
            logger.error(f"Error in _get_search_console_service: {str(e)}", exc_info=True)
            raise AuthError(f"Failed to initialize Search Console service: {str(e)}")

    def _run(self, start_date: str, end_date: str, client_id: int, **kwargs: Any) -> Any:
        try:
            # Retrieve the client's credentials
            try:
                client = Client.objects.get(id=client_id)
                ga_credentials = client.ga_credentials
                sc_credentials = client.sc_credentials
                
                if not ga_credentials or not sc_credentials:
                    raise ValueError("Missing Google Analytics or Search Console credentials")
                
                # Log credential details for debugging
                logger.info(f"GA Credentials - Token URI: {ga_credentials.token_uri}, Has refresh token: {bool(ga_credentials.refresh_token)}")
                logger.info(f"SC Credentials - Token URI: {sc_credentials.token_uri}, Has refresh token: {bool(sc_credentials.refresh_token)}")
                
            except ObjectDoesNotExist:
                raise ValueError(f"Client with id {client_id} not found or has missing credentials")

            # Initialize services with proper error handling
            try:
                analytics_client = self._get_analytics_service(ga_credentials)
                property_id = ga_credentials.view_id
                if not property_id:
                    raise ValueError("Missing Google Analytics property ID")
                    
                # Clean up property ID - ensure it's just the numeric ID
                property_id = property_id.replace('properties/', '')
                if not property_id.isdigit():
                    raise ValueError(f"Invalid Google Analytics property ID format. Expected numeric ID, got: {property_id}")
                    
            except AuthError as e:
                logger.error(f"Failed to initialize Google Analytics service: {str(e)}")
                raise
            except Exception as e:
                logger.error(f"Failed to initialize Google Analytics service: {str(e)}")
                raise

            try:
                search_console_service = self._get_search_console_service(sc_credentials)
                property_url = sc_credentials.property_url
                if not property_url:
                    raise ValueError("Missing Search Console property URL")
            except AuthError as e:
                logger.error(f"Failed to initialize Search Console service: {str(e)}")
                raise
            except Exception as e:
                logger.error(f"Failed to initialize Search Console service: {str(e)}")
                raise
                      
            # Fetch general analytics data
            try:
                general_request = RunReportRequest(
                    property=f"properties/{property_id}",
                    date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
                    dimensions=[
                        Dimension(name="sessionSourceMedium"),
                    ],
                    metrics=[
                        Metric(name="totalUsers"),
                        Metric(name="sessions"),
                        Metric(name="bounceRate"),
                        Metric(name="averageSessionDuration"),
                    ],
                    order_bys=[
                        OrderBy(metric=OrderBy.MetricOrderBy(metric_name="totalUsers"), desc=True)
                    ],
                    limit=10
                )        
                general_response = analytics_client.run_report(general_request)
            except Exception as e:
                logger.error(f"Failed to fetch analytics data: {str(e)}")
                raise
            
            # Fetch Search Console data
            try:
                keyword_data = self._get_search_console_data(search_console_service, property_url, start_date, end_date, 'query')
                landing_page_data = self._get_search_console_data(search_console_service, property_url, start_date, end_date, 'page')
            except Exception as e:
                logger.error(f"Failed to fetch Search Console data: {str(e)}")
                raise
            
            processed_general_data = self._process_analytics_data(general_response)
            
            result = {
                'analytics_data': json.dumps(processed_general_data),
                'keyword_data': json.dumps(keyword_data),
                'landing_page_data': json.dumps(landing_page_data),
                'start_date': start_date,
                'end_date': end_date,
                'client_id': client_id
            }
            
            # # Create CSV files
            # keyword_df = pd.DataFrame(keyword_data)
            # if not keyword_df.empty:
            #     keyword_df.to_csv('keyword_data.csv', index=False)
            
            # landing_page_df = pd.DataFrame(landing_page_data)
            # if not landing_page_df.empty:
            #     landing_page_df.to_csv('landing_page_data.csv', index=False)
            
            return result
        except AuthError as e:
            logger.error(f"Authentication error: {str(e)}")
            return {
                'analytics_data': json.dumps([]),
                'keyword_data': json.dumps([]),
                'landing_page_data': json.dumps([]),
                'start_date': start_date,
                'end_date': end_date,
                'client_id': client_id,
                'error': str(e)
            }
        except Exception as e:
            logger.error(f"Failed to fetch Google Analytics or Search Console data. Error: {str(e)}", exc_info=True)
            print(f"GoogleReportTool error: {str(e)}")  # Print to stdout for immediate visibility
            return {
                'analytics_data': json.dumps([]),
                'keyword_data': json.dumps([]),
                'landing_page_data': json.dumps([]),
                'start_date': start_date,
                'end_date': end_date,
                'client_id': client_id,
                'error': str(e)
            }
            
    def _process_analytics_data(self, response):
        processed_data = []
        try:
            for row in response.rows:
                source_medium = row.dimension_values[0].value
                total_users = int(row.metric_values[0].value)
                sessions = int(row.metric_values[1].value)
                bounce_rate = float(row.metric_values[2].value)
                avg_session_duration = float(row.metric_values[3].value)
                
                processed_data.append({
                    'source_medium': source_medium,
                    'total_users': total_users,
                    'sessions': sessions,
                    'bounce_rate': bounce_rate,
                    'avg_session_duration': avg_session_duration
                })
            
            processed_data.sort(key=lambda x: x['total_users'], reverse=True)
        except Exception as e:
            logger.error(f"Error processing analytics data: {str(e)}", exc_info=True)
            print(f"Error processing analytics data: {str(e)}")
        return processed_data

    def _get_search_console_data(self, service, property_url, start_date, end_date, dimension):
        try:
            response = service.searchanalytics().query(
                siteUrl=property_url,
                body={
                    'startDate': start_date,
                    'endDate': end_date,
                    'dimensions': [dimension],
                    'rowLimit': 1000
                }
            ).execute()
            
            search_console_data = []
            for row in response.get('rows', []):
                search_console_data.append({
                    'Keyword' if dimension == 'query' else 'Landing Page': row['keys'][0],
                    'Clicks': row['clicks'],
                    'Impressions': row['impressions'],
                    'CTR (%)': round(row['ctr'] * 100, 2),
                    'Avg Position': round(row['position'], 1)
                })
            
            search_console_data.sort(key=lambda x: x['Impressions'], reverse=True)
            return search_console_data[:50]
        except HttpError as error:
            logger.error(f"An error occurred while fetching Search Console data: {error}")
            print(f"An error occurred while fetching Search Console data: {error}")
            return []

================
File: apps/agents/tools/google_suggestions_tool/__init__.py
================
from .google_suggestions_tool import GoogleSuggestionsTool

================
File: apps/agents/tools/google_suggestions_tool/google_suggestions_tool.py
================
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
import requests
import xml.etree.ElementTree as ET

class GoogleSuggestionsInput(BaseModel):
    keyword: str = Field(description="The keyword to get suggestions for")
    country_code: str = Field(default="us", description="The country code for localized suggestions")

class GoogleSuggestionsTool(BaseTool):
    name: str = "Google Suggestions Fetcher"
    description: str = "Retrieves Google search suggestions for a given keyword."
    args_schema: Type[BaseModel] = GoogleSuggestionsInput

    def _run(self, keyword: str, country_code: str = "us", **kwargs: Any) -> Any:
        """Use the tool to get Google search suggestions."""
        # Build the Google Search query URL
        search_query = f"is {keyword}"
        google_search_url = f"http://google.com/complete/search?output=toolbar&gl={country_code}&q={search_query}"

        # Call the URL and read the data
        result = requests.get(google_search_url)
        tree = ET.ElementTree(ET.fromstring(result.content))
        root = tree.getroot()

        # Extract the suggestions from the XML response
        suggestions = []
        for suggestion in root.findall('CompleteSuggestion'):
            question = suggestion.find('suggestion').attrib.get('data')
            suggestions.append(question)

        # Return the suggestions as a comma-separated string
        return ", ".join(suggestions)

    async def _arun(self, keyword: str, country_code: str = "us", **kwargs: Any) -> Any:
        """Use the tool asynchronously."""
        raise NotImplementedError("GoogleSuggestionsTool does not support async")

================
File: apps/agents/tools/keyword_tools/keyword_tools.py
================
import os
import requests
from typing import Any, Type, List, Dict, Tuple
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
import logging
import json
import csv
import io
import pandas as pd
import numpy as np
from urllib.parse import urlparse

logger = logging.getLogger(__name__)

BASE_URL = os.getenv('DATAFORSEO_BASE_URL', 'https://api.dataforseo.com')

class KeywordsForSiteInput(BaseModel):
  website_url: str = Field(description="Fully qualified domain name (FQDN) for keyword analysis")

  @classmethod
  def get_fqdn(cls, url: str) -> str:
      parsed_url = urlparse(url)
      return parsed_url.netloc or parsed_url.path


class KeywordSuggestionsInput(BaseModel):
    seed_keyword: str = Field(description="Seed keyword for suggestions")
    filters: List[Tuple[str, str, float]] = Field(description="List of filters", default=[])

class KeywordIdeasInput(BaseModel):
    keywords: List[str] = Field(description="List of keywords")
    filters: List[Tuple[str, str, float]] = Field(description="List of filters", default=[])

class SearchVolumeInput(BaseModel):
    keywords: List[str] = Field(description="List of keywords to get search volume for")
    sort_by: str = Field(default="relevance", description="Sort results by this field")

class KeywordsForSiteTool(BaseTool):
    name: str = "Keywords for Site"
    description: str = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"
    args_schema: Type[BaseModel] = KeywordsForSiteInput

    def _run(self, website_url: str, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/keywords_data/google_ads/keywords_for_site/live"
        
        # Extract FQDN from the provided URL
        fqdn = KeywordsForSiteInput.get_fqdn(website_url)
        
        payload = [
            {
                "target": fqdn,
                "language_code": "en",
                "location_code": 2840,
            }
        ]
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(url, json=payload, headers=headers, auth=cred)
            response.raise_for_status()  # Raise an exception for non-2xx status codes

        except Exception as e:
            logger.error(f"Error making request to DataForSEO: {e}")
            raise e

        try:
            results = KeywordTools._transform_keyword_data(response.json())
        except Exception as e:
            # Handle the exception as needed
            logger.error(f"Error transforming keyword data: {e}")
            raise e

        return results

    async def _arun(self, target: str, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordsForSiteTool does not support async")
        
class KeywordSuggestionsTool(BaseTool):
    name: str = "Keyword Suggestions"
    description: str = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"
    args_schema: Type[BaseModel] = KeywordSuggestionsInput

    def _run(self, seed_keyword: str, filters: List = None, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/dataforseo_labs/google/keyword_suggestions/live"
        payload = [
            {
                "keyword": seed_keyword,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "include_seed_keyword": True,
                "limit": 50,
            }
        ]
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        try:
            results = KeywordTools._transform_keyword_data(response.json())
        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            raise e
        
        return results

    async def _arun(self, seed_keyword: str, filters: List = None, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordSuggestionsTool does not support async")

class KeywordIdeasTool(BaseTool):
    name: str = "Keyword Ideas"
    description: str = "Provides search terms that are relevant to the product or service categories of the specified keywords. The algorithm selects the keywords which fall into the same categories as the seed keywords specified"
    args_schema: Type[BaseModel] = KeywordIdeasInput

    def _run(self, keywords: List[str], filters: List[Tuple[str, str, float]] = None, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/dataforseo_labs/google/keyword_ideas/live"
        payload = [
            {
                "keywords": keywords,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "limit": 100,
            }
        ]
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes

        try:
            results = KeywordTools._transform_keyword_data(response.json())
        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            raise e
        return results

    async def _arun(self, keywords: List[str], filters: List[Tuple[str, str, float]] = None, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordIdeasTool does not support async")
    
class SearchVolumeTool(BaseTool):
    name: str = "Search Volume"
    description: str = "Provides search volume data for a list of keywords"
    args_schema: Type[BaseModel] = SearchVolumeInput

    def _run(self, keywords: List[str], sort_by: str = "relevance", **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/keywords_data/google_ads/search_volume/live"
        payload = [
            {
                "keywords": keywords,
                "sort_by": sort_by
            }
        ]
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(url, json=payload, headers=headers, auth=cred)
            response.raise_for_status()
        except Exception as e:
            logger.error(f"Error making request to DataForSEO: {e}")
            raise e

        try:
            results = KeywordTools._transform_keyword_data(response.json())
        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            raise e
        return results

    async def _arun(self, keywords: List[str], sort_by: str = "relevance", **kwargs: Any) -> Any:
        raise NotImplementedError("SearchVolumeTool does not support async")

class KeywordTools:
    @staticmethod
    def tools():
        return [KeywordsForSiteTool(), KeywordSuggestionsTool(), KeywordIdeasTool(), SearchVolumeTool()]


    @staticmethod
    def _dataforseo_credentials():
        login = os.environ["DATAFORSEO_EMAIL"]
        password = os.environ["DATAFORSEO_PASSWORD"]
        return login, password

    def _transform_keyword_data(data: Dict) -> str:
        """Transforms the keyword data into CSV format based on the detected tool type."""
        try:
            # Check if there's an error in the response
            if data.get('tasks_error', 0) > 0:
                error_message = data.get('tasks', [{}])[0].get('status_message', 'Unknown error')
                return f"Error: {error_message}"

            # Detect tool type from the response
            path = data.get('tasks', [{}])[0].get('path', [])
            if len(path) >= 4:
                tool_type = path[3]  # The fourth element in the path array
            else:
                return "Error: Unable to determine tool type from response"

            # Get the result based on the tool type
            if tool_type == "keywords_for_site":
                all_results = data.get('tasks', [])[0].get('result', [])
            elif tool_type in ["keyword_suggestions", "keyword_ideas"]:
                result = data.get('tasks', [])[0].get('result', [])
                if result:
                    all_results = result[0].get('items', [])
                else:
                    return "Error: No results found in the response"
            elif tool_type == "search_volume":
                all_results = data.get('tasks', [])[0].get('result', [])
            else:
                return f"Error: Unknown tool type: {tool_type}"

            # Check if we have any results
            if not all_results:
                return "Error: No results found in the response"

            df = pd.DataFrame(all_results)

            # Select columns based on tool type
            columns = ['keyword', 'search_volume', 'cpc', 'competition']
            if 'keyword_info' in df.columns:
                df['search_volume'] = df['keyword_info'].apply(lambda x: x.get('search_volume', 0))
                df['cpc'] = df['keyword_info'].apply(lambda x: x.get('cpc', 0))
                df['competition'] = df['keyword_info'].apply(lambda x: x.get('competition', 0))
            if 'keyword_properties' in df.columns:
                df['keyword_difficulty'] = df['keyword_properties'].apply(lambda x: x.get('keyword_difficulty', 0))
                columns.append('keyword_difficulty')
            if 'low_top_of_page_bid' in df.columns:
                columns.extend(['low_top_of_page_bid', 'high_top_of_page_bid'])

            result_df = df[columns]
            result_df = result_df.rename(columns={
                'search_volume': 'avg_search_volume',
                'keyword_difficulty': 'difficulty',
                'low_top_of_page_bid': 'low_top_bid',
                'high_top_of_page_bid': 'high_top_bid'
            })

            # Convert competition to numeric value if it's categorical
            if 'competition' in result_df.columns and result_df['competition'].dtype == 'object':
                competition_map = {'LOW': 0, 'MEDIUM': 0.5, 'HIGH': 1}
                result_df['competition'] = result_df['competition'].map(competition_map)

            # Fill NaN values
            fill_values = {col: 0 for col in result_df.columns if col != 'keyword'}
            fill_values['keyword'] = 'N/A'
            result_df = result_df.fillna(fill_values)

            # Sort by avg_search_volume in descending order
            result_df = result_df.sort_values('cpc', ascending=False)
            result_df = result_df[result_df['avg_search_volume'] >= 500]

            # Convert to CSV
            csv_output = result_df.to_csv(index=False)
            return csv_output

        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            return f"Error: {str(e)}"

================
File: apps/agents/tools/keyword_tools/ranked_keywords_tool.py
================
import os
import requests
from typing import Any, Type, List, Dict
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
import logging
import pandas as pd
from urllib.parse import urlparse

logger = logging.getLogger(__name__)

BASE_URL = os.getenv('DATAFORSEO_BASE_URL', 'https://api.dataforseo.com')

class RankedKeywordsInput(BaseModel):
    website_url: str = Field(description="Domain or webpage for keyword ranking analysis")

    @classmethod
    def get_fqdn(cls, url: str) -> str:
        parsed_url = urlparse(url)
        return parsed_url.netloc or parsed_url.path

class RankedKeywordsTool(BaseTool):
    name: str = "Ranked Keywords"
    description: str = "Provides a list of ranked keywords with various metrics"
    args_schema: Type[BaseModel] = RankedKeywordsInput

    def _run(self, website_url: str, location_code: int = 2840, language_code: str = "en", **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = f"{BASE_URL}/v3/dataforseo_labs/google/ranked_keywords/live"
        fqdn = RankedKeywordsInput.get_fqdn(website_url)

        payload = [
            {
                "target": fqdn,
                "location_code": location_code,
                "language_code": language_code,
                "limit": 100,
                "order_by": ["keyword_data.keyword_info.search_volume,desc"]
            }
        ]
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(url, json=payload, headers=headers, auth=cred)
            response.raise_for_status()
        except Exception as e:
            logger.error(f"Error making request to DataForSEO: {e}")
            raise e

        try:
            results = self._transform_keyword_data(response.json())
        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            raise e

        return results

    def _transform_keyword_data(self, data: Dict) -> str:
        try:
            if data.get('tasks_error', 0) > 0:
                error_message = data.get('tasks', [{}])[0].get('status_message', 'Unknown error')
                return f"Error: {error_message}"

            all_results = data.get('tasks', [])[0].get('result', [])[0].get('items', [])
            if not all_results:
                return "Error: No results found in the response"

            # Create a DataFrame from the results
            df = pd.DataFrame(all_results)

            # Extract necessary fields and calculate additional metrics
            df['keyword'] = df['keyword_data'].apply(lambda x: x.get('keyword', 'N/A'))
            df['search_volume'] = df['keyword_data'].apply(lambda x: x.get('keyword_info', {}).get('search_volume', 0))
            df['keyword_difficulty'] = df['keyword_data'].apply(lambda x: x.get('keyword_properties', {}).get('keyword_difficulty', 0))
            df['competition_level'] = df['keyword_data'].apply(lambda x: x.get('keyword_info', {}).get('competition_level', 'N/A'))
            df['main_intent'] = df['keyword_data'].apply(lambda x: x.get('search_intent_info', {}).get('main_intent', 'N/A'))
            df['absolute_rank'] = df['ranked_serp_element'].apply(lambda x: x.get('serp_item', {}).get('rank_absolute', 0))
            df['etv'] = df['ranked_serp_element'].apply(lambda x: x.get('serp_item', {}).get('etv', 0))
            df['cpc'] = df['keyword_data'].apply(lambda x: x.get('keyword_info', {}).get('cpc', 0))

            # Define the columns to include in the output
            columns = [
                'keyword', 'search_volume', 'keyword_difficulty', 'competition_level',
                'main_intent', 'absolute_rank', 'etv'
            ]
            result_df = df[columns]

            # Convert the DataFrame to CSV format
            csv_output = result_df.to_csv(index=False, lineterminator='\n')
            return csv_output

        except Exception as e:
            logger.error(f"Error transforming keyword data: {e}")
            return f"Error: {str(e)}"

class KeywordTools:
    @staticmethod
    def _dataforseo_credentials():
        login = os.environ["DATAFORSEO_EMAIL"]
        password = os.environ["DATAFORSEO_PASSWORD"]
        return login, password

================
File: apps/agents/tools/rag/rag_tool.py
================
from abc import ABC, abstractmethod
from typing import Any

from pydantic import BaseModel, Field, model_validator

from crewai_tools.tools.base_tool import BaseTool


class Adapter(BaseModel, ABC):
    class Config:
        arbitrary_types_allowed = True

    @abstractmethod
    def query(self, question: str) -> str:
        """Query the knowledge base with a question and return the answer."""

    @abstractmethod
    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        """Add content to the knowledge base."""


class RagTool(BaseTool):
    class _AdapterPlaceholder(Adapter):
        def query(self, question: str) -> str:
            raise NotImplementedError

        def add(self, *args: Any, **kwargs: Any) -> None:
            raise NotImplementedError

    name: str = "Knowledge base"
    description: str = "A knowledge base that can be used to answer questions."
    summarize: bool = False
    adapter: Adapter = Field(default_factory=_AdapterPlaceholder)
    config: dict[str, Any] | None = None

    @model_validator(mode="after")
    def _set_default_adapter(self):
        if isinstance(self.adapter, RagTool._AdapterPlaceholder):
            from embedchain import App

            from crewai_tools.adapters.embedchain_adapter import EmbedchainAdapter

            app = App.from_config(config=self.config) if self.config else App()
            self.adapter = EmbedchainAdapter(
                embedchain_app=app, summarize=self.summarize
            )

        return self

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        self.adapter.add(*args, **kwargs)

    def _run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        self._before_run(query, **kwargs)

        return f"Relevant Content:\n{self.adapter.query(query)}"

    def _before_run(self, query, **kwargs):
        pass

================
File: apps/agents/tools/screenshot_tool/screenshot_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from django.conf import settings
from urllib.parse import urlparse
import re
"""
You can use the ScreenshotTool by 
 1. importing 'from apps.common.tools.screenshot_tool import screenshot_tool'' and 
 2. calling its run method with a URL as the argument: 'result = screenshot_tool.run(url=url)'
 """

class ScreenshotToolSchema(BaseModel):
    """Input schema for ScreenshotTool."""
    url: str = Field(..., description="The URL of the website to capture a screenshot.")

class ScreenshotTool(BaseTool):
    name: str = "Capture Website Screenshot"
    description: str = "Captures a screenshot of a given website URL."
    args_schema: Type[BaseModel] = ScreenshotToolSchema
    
    def _run(
        self, 
        url: str, 
        **kwargs: Any
    ) -> Any:
        browserless_url = os.getenv('BROWSERLESS_BASE_URL')
        api_key = os.getenv('BROWSERLESS_API_KEY')
        
        if not browserless_url or not api_key:
            return {'error': 'Browserless configuration is missing'}
        
        screenshot_url = f"{browserless_url}/screenshot?token={api_key}"
        
        payload = {
            "url": url,
            "options": {
                "fullPage": False,
                "type": "png"
            }
        }
        
        response = requests.post(screenshot_url, json=payload)
        
        if response.status_code == 200:
            # Generate a sanitized filename based on the URL
            parsed_url = urlparse(url)
            sanitized_name = re.sub(r'[^\w\-_\. ]', '_', parsed_url.netloc + parsed_url.path)
            filename = f"{sanitized_name[:200]}.png"  # Limit filename length
            filepath = os.path.join(settings.MEDIA_ROOT, 'crawled_screenshots', filename)
            # Ensure the directory exists
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            
            # Save the image
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            # Generate the URL for the saved image
            image_url = f"{settings.MEDIA_URL}crawled_screenshots/{filename}"
            
            return {'screenshot_url': image_url}
        else:
            return {'error': f'Failed to get screenshot. Status code: {response.status_code}'}

# Initialize the tool
screenshot_tool = ScreenshotTool()

================
File: apps/agents/tools/search_context_tool/search_context_tool.py
================
import os
from typing import Any, Type, List, Dict
from pydantic import BaseModel, Field
from crewai_tools import BaseTool
from apps.agents.tools.searxng_tool.searxng_tool import SearxNGSearchTool
from apps.agents.tools.browser_tool.browser_tool import BrowserTool
from apps.common.utils import get_llm as utils_get_llm
from langchain.prompts.chat import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import json
import logging

logger = logging.getLogger(__name__)

class SearchContextToolSchema(BaseModel):
    """Input schema for SearchContextTool."""
    question: str = Field(..., description="The user's question to research and answer.")

class SearchContextTool(BaseTool):
    name: str = "Search and provide contextual answer"
    description: str = "Searches the internet, gathers context from multiple sources, and provides a detailed answer with follow-up questions."
    args_schema: Type[BaseModel] = SearchContextToolSchema
    
    # Define the tools as fields
    search_tool: SearxNGSearchTool = Field(default_factory=SearxNGSearchTool)
    browser_tool: BrowserTool = Field(default_factory=BrowserTool)
    model_name: str = Field(default="anthropic/claude-3-haiku-20240307")
    llm: Any = None
    token_counter_callback: Any = None

    def __init__(self, **data):
        super().__init__(**data)
        self.llm, self.token_counter_callback = utils_get_llm(self.model_name, temperature=0.7)

# Add this method to the SearchContextTool class:
    def _reformulate_question(self, original_question: str) -> str:
        "Reformulate the user's question into an optimized search query."
        
        reformulation_prompt = ChatPromptTemplate.from_messages([
            ("system", """You are an expert at reformulating questions into optimal search queries. 
            Your task is to analyze the user's question and create a more effective search query that will yield the most relevant results.
            
            Follow these guidelines:
            1. Identify Core Concepts:
                - Extract the main topics and key concepts
                - Identify any implicit assumptions or context
            
            2. Add Critical Context:
                - Include relevant technical terms
                - Add synonyms for important concepts
                - Specify time period if relevant (e.g., "2024", "recent", "latest")
            
            3. Optimize for Search:
                - Use boolean operators when helpful (AND, OR)
                - Include specific phrases in quotes for exact matches
                - Remove unnecessary words (articles, prepositions)
                - Add clarifying terms to disambiguate
            
            4. Enhance Specificity:
                - Add domain-specific terminology
                - Include relevant qualifiers
                - Specify desired information type (research, news, analysis, etc.)
            
            Return only the reformulated search query, without explanation or additional text."""),
            ("human", """Original question: {question}
            
            Create an optimized search query that will find the most relevant and comprehensive information to answer this question.""")
        ])

        reformulation_chain = reformulation_prompt | self.llm | StrOutputParser()

        try:
            optimized_query = reformulation_chain.invoke({
                'question': original_question
            })
            logger.info(f"Reformulated question: {optimized_query}")
            return optimized_query
        except Exception as e:
            logger.error(f"Error reformulating question: {str(e)}")
            return original_question

# Then modify the _run method to use the reformulated question:

    def _extract_urls(self, search_results: str) -> List[str]:
        """Extract URLs from search results."""
        urls = []
        for line in search_results.split('\n'):
            if line.startswith('Link: '):
                urls.append(line.replace('Link: ', '').strip())
        return urls[:6]  # Get top 6 results

    def _gather_context(self, urls: List[str]) -> str:
        """Gather context from URLs."""
        contexts = []
        for url in urls:
            try:
                content = self.browser_tool._run(website=url)
                if content and len(content) > 100:  # Basic validation
                    contexts.append(f"Source ({url}):\n{content}")
            except Exception as e:
                logger.error(f"Error scraping {url}: {str(e)}")
        return "\n\n".join(contexts)

    def _generate_answer(self, question: str, context: str) -> str:
        """Generate answer using LLM."""
        answer_prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a helpful AI assistant. Using the provided context, 
            answer the user's question thoroughly and accurately. Cite sources when possible.
            Format your response in markdown."""),
            ("human", """
            Question: {question}
            
            Context: {context}
            
            Please provide a detailed answer based on the context provided.
            """)
        ])
        
        answer_chain = answer_prompt | self.llm | StrOutputParser()
        return answer_chain.invoke({
            'question': question,
            'context': context
        })

    def _generate_follow_up_questions(self, question: str, answer: str) -> List[str]:
        """Generate follow-up questions based on the answer."""
        followup_prompt = ChatPromptTemplate.from_messages([
            ("system", """Based on the original question and answer provided, 
            generate exactly 3 relevant follow-up questions that would help explore 
            the topic further. Format as a markdown list."""),
            ("human", """
            Original Question: {question}
            Answer: {answer}
            
            Generate 3 follow-up questions:
            """)
        ])
        
        followup_chain = followup_prompt | self.llm | StrOutputParser()
        return followup_chain.invoke({
            'question': question,
            'answer': answer
        })

    def _run(
        self,
        question: str,
        **kwargs: Any
        ) -> Any:
        """Execute the search context tool pipeline."""
        try:
            # 0. Reformulate the question for better search results
            optimized_query = self._reformulate_question(question)
            logger.info(f"Original question: {question}")
            logger.info(f"Optimized query: {optimized_query}")
            
            # 1. Search for relevant results using optimized query
            search_results = self.search_tool._run(search_query=optimized_query)
            
            # 2. Extract URLs and gather context
            urls = self._extract_urls(search_results)
            context = self._gather_context(urls)
            
            # 3. Generate answer (using original question for better context)
            answer = self._generate_answer(question, context)
            
            # 4. Generate follow-up questions
            follow_up = self._generate_follow_up_questions(question, answer)
            
            # 5. Format and return results
            result = {
                "original_question": question,
                "optimized_query": optimized_query,
                "answer": answer,
                "follow_up_questions": follow_up,
                "sources": urls
            }
            
            return json.dumps(result, indent=2)

        except Exception as e:
            logger.error(f"Error in SearchContextTool: {str(e)}")
            return f"An error occurred while processing your request: {str(e)}"

================
File: apps/agents/tools/search_context_tool/test_search_context_tool.py
================
import logging
import sys
import os

# Add the project root to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))
sys.path.insert(0, project_root)

# Set up Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')  # Adjust this to your project's settings module
import django
django.setup()

from apps.agents.tools.search_context_tool.search_context_tool import SearchContextTool

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_search_context():
  # Initialize the tool
  search_tool = SearchContextTool()

  # Test question
  test_question = "as of october 29, 2024 what are the latest flooring trends in ottumwa that consumers are looking for and elaborate on the reasons why?"
  
  logger.info(f"Starting search context analysis for question: {test_question}")
  print(f"Starting search context analysis for question: {test_question}")
  
  try:
      # Get results
      result = search_tool._run(test_question)
      
      # Log and print the results
      logger.info("Search Context Results:")
      logger.info(result)
      print("\nSearch Context Results:")
      print(result)
      
  except Exception as e:
      logger.error(f"Error during search context analysis: {str(e)}")
      print(f"Error: {str(e)}")

if __name__ == "__main__":
  test_search_context()

================
File: apps/agents/tools/searxng_tool/searxng_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool

class SearxNGToolSchema(BaseModel):
    """Input schema for SearxNGSearchTool."""
    search_query: str = Field(..., description="The search query to be used.")

class SearxNGSearchTool(BaseTool):
    name: str = "Search the internet"
    description: str = "Searches the internet displaying titles, links, snippets, engines, and categories."
    args_schema: Type[BaseModel] = SearxNGToolSchema
    search_url: str = "https://search.neuralami.com"
    n_results: int = None
    
    def _run(
		self, 
		search_query: str, 
		**kwargs: Any
		) -> Any:
        payload = {        
            'q': search_query,
            'format': 'json',
            'pageno': '1',
            'language': 'en-US'
        }
        response = requests.get(self.search_url, params=payload)
        if response.ok:
            results = response.json()['results']
            formatted_results = []
            for result in results:
                try:
                    engines = ', '.join(result['engines']) if 'engines' in result else 'N/A'
                    formatted_results.append('\n'.join([
                            f"Title: {result.get('title', 'No Title')}",
                            f"Link: {result.get('url', 'No Link')}",
                            f"Score: {result.get('score', 'No Score')}",
                            f"Snippet: {result.get('content', 'No Snippet')}",
                            f"Engines: {engines}",
                            f"Category: {result.get('category', 'No Category')}",
                            "---"
                    ]))
                except KeyError as e:
                    print(f"Skipping an entry due to missing key: {e}")
                    continue

            content = '\n'.join(formatted_results)
            return f"Search results:\n{content}"
        else:
            return f"Failed to fetch search results. Status code: {response.status_code}"

================
File: apps/agents/tools/base_tool.py
================
from abc import ABC, abstractmethod
from typing import Any, Callable, Optional, Type

from langchain_core.tools import StructuredTool
from pydantic import BaseModel, ConfigDict, Field, validator
from pydantic import BaseModel as PydanticBaseModel


class BaseTool(BaseModel, ABC):
    class _ArgsSchemaPlaceholder(PydanticBaseModel):
        pass

    model_config = ConfigDict()

    name: str
    """The unique name of the tool that clearly communicates its purpose."""
    description: str
    """Used to tell the model how/when/why to use the tool."""
    args_schema: Type[PydanticBaseModel] = Field(default_factory=_ArgsSchemaPlaceholder)
    """The schema for the arguments that the tool accepts."""
    description_updated: bool = False
    """Flag to check if the description has been updated."""
    cache_function: Optional[Callable] = lambda _args, _result: True
    """Function that will be used to determine if the tool should be cached, should return a boolean. If None, the tool will be cached."""
    result_as_answer: bool = False
    """Flag to check if the tool should be the final agent answer."""

    @validator("args_schema", always=True, pre=True)
    def _default_args_schema(
        cls, v: Type[PydanticBaseModel]
    ) -> Type[PydanticBaseModel]:
        if not isinstance(v, cls._ArgsSchemaPlaceholder):
            return v

        return type(
            f"{cls.__name__}Schema",
            (PydanticBaseModel,),
            {
                "__annotations__": {
                    k: v for k, v in cls._run.__annotations__.items() if k != "return"
                },
            },
        )

    def model_post_init(self, __context: Any) -> None:
        self._generate_description()

        super().model_post_init(__context)

    def run(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> Any:
        print(f"Using Tool: {self.name}")
        return self._run(*args, **kwargs)

    @abstractmethod
    def _run(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> Any:
        """Here goes the actual implementation of the tool."""

    def to_langchain(self) -> StructuredTool:
        self._set_args_schema()
        return StructuredTool(
            name=self.name,
            description=self.description,
            args_schema=self.args_schema,
            func=self._run,
        )

    def _set_args_schema(self):
        if self.args_schema is None:
            class_name = f"{self.__class__.__name__}Schema"
            self.args_schema = type(
                class_name,
                (PydanticBaseModel,),
                {
                    "__annotations__": {
                        k: v
                        for k, v in self._run.__annotations__.items()
                        if k != "return"
                    },
                },
            )

    def _generate_description(self):
        args = []
        args_description = []
        for arg, attribute in self.args_schema.schema()["properties"].items():
            if "type" in attribute:
                args.append(f"{arg}: '{attribute['type']}'")
            if "description" in attribute:
                args_description.append(f"{arg}: '{attribute['description']}'")

        description = self.description.replace("\n", " ")
        self.description = f"{self.name}({', '.join(args)}) - {description} {', '.join(args_description)}"


class Tool(BaseTool):
    func: Callable
    """The function that will be executed when the tool is called."""

    def _run(self, *args: Any, **kwargs: Any) -> Any:
        return self.func(*args, **kwargs)


def to_langchain(
    tools: list[BaseTool | StructuredTool],
) -> list[StructuredTool]:
    return [t.to_langchain() if isinstance(t, BaseTool) else t for t in tools]


def tool(*args):
    """
    Decorator to create a tool from a function.
    """

    def _make_with_name(tool_name: str) -> Callable:
        def _make_tool(f: Callable) -> BaseTool:
            if f.__doc__ is None:
                raise ValueError("Function must have a docstring")
            if f.__annotations__ is None:
                raise ValueError("Function must have type annotations")

            class_name = "".join(tool_name.split()).title()
            args_schema = type(
                class_name,
                (PydanticBaseModel,),
                {
                    "__annotations__": {
                        k: v for k, v in f.__annotations__.items() if k != "return"
                    },
                },
            )

            return Tool(
                name=tool_name,
                description=f.__doc__,
                func=f,
                args_schema=args_schema,
            )

        return _make_tool

    if len(args) == 1 and callable(args[0]):
        return _make_with_name(args[0].__name__)(args[0])
    if len(args) == 1 and isinstance(args[0], str):
        return _make_with_name(args[0])
    raise ValueError("Invalid arguments")

================
File: apps/agents/admin.py
================
from django.contrib import admin
from .models import Crew, CrewExecution, CrewMessage, Agent, Task, Tool, CrewTask, Pipeline, PipelineStage, PipelineRoute, PipelineExecution, PipelineRunResult
from .forms import AgentForm, TaskForm, CrewForm

class CrewTaskInline(admin.TabularInline):
    model = CrewTask
    extra = 1

@admin.register(Crew)
class CrewAdmin(admin.ModelAdmin):
    list_display = ('name', 'process', 'verbose')
    filter_horizontal = ('agents',)
    inlines = [CrewTaskInline]
    fieldsets = (
        (None, {
            'fields': ('name', 'agents', 'process', 'verbose', 'manager_llm', 'function_calling_llm', 'config', 'max_rpm', 'language', 'language_file', 'memory', 'cache', 'embedder', 'full_output', 'share_crew', 'output_log_file', 'manager_agent', 'manager_callbacks', 'prompt_file', 'planning', 'planning_llm')
        }),
    )

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        form.base_fields['agents'].widget.can_add_related = True
        form.base_fields['agents'].widget.can_change_related = True
        return form

@admin.register(CrewExecution)
class CrewExecutionAdmin(admin.ModelAdmin):
    list_display = ('crew', 'user', 'client', 'status', 'created_at', 'updated_at')
    list_filter = ('status', 'created_at', 'updated_at')
    search_fields = ('crew__name', 'user__username', 'client__name')
    readonly_fields = ('created_at', 'updated_at', 'human_input_request', 'human_input_response')
    fieldsets = (
        (None, {
            'fields': ('crew', 'user', 'client', 'status', 'inputs', 'outputs')
        }),
        ('Human Input', {
            'fields': ('human_input_request', 'human_input_response')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at')
        }),
    )

@admin.register(CrewMessage)
class CrewMessageAdmin(admin.ModelAdmin):
    list_display = ('execution', 'timestamp')
    list_filter = ('timestamp',)
    search_fields = ('execution__crew__name', 'content')

@admin.register(Agent)
class AgentAdmin(admin.ModelAdmin):
    form = AgentForm
    list_display = ('name', 'role', 'llm', 'function_calling_llm', 'verbose', 'allow_delegation', 'allow_code_execution')
    list_filter = ('verbose', 'allow_delegation', 'allow_code_execution', 'use_system_prompt', 'respect_context_window')
    search_fields = ('name', 'role', 'goal', 'backstory')
    filter_horizontal = ('tools',)
    fieldsets = (
        (None, {
            'fields': ('name', 'role', 'goal', 'backstory', 'llm', 'tools')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('function_calling_llm', 'max_iter', 'max_rpm', 'max_execution_time', 'verbose', 'allow_delegation', 'step_callback', 'cache', 'system_template', 'prompt_template', 'response_template', 'allow_code_execution', 'max_retry_limit', 'use_system_prompt', 'respect_context_window'),
        }),
    )

@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    form = TaskForm
    list_display = ('description', 'agent', 'async_execution', 'human_input', 'output_type')
    list_filter = ('async_execution', 'human_input')
    filter_horizontal = ('tools', 'context')
    search_fields = ('description', 'agent__name', 'expected_output')
    readonly_fields = ('output',)

    def output_type(self, obj):
        if obj.output_json:
            return 'JSON'
        elif obj.output_pydantic:
            return 'Pydantic'
        elif obj.output_file:
            return 'File'
        else:
            return 'Default'
    output_type.short_description = 'Output Type'

    fieldsets = (
        (None, {
            'fields': ('description', 'agent', 'expected_output', 'tools', 'async_execution', 'context')
        }),
        ('Advanced options', {
            'classes': ('collapse',),
            'fields': ('config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls'),
        }),
        ('Output', {
            'fields': ('output',),
        }),
    )

@admin.register(Tool)
class ToolAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ('name', 'description', 'function')

# Register other models
admin.site.register(Pipeline)
admin.site.register(PipelineStage)
admin.site.register(PipelineRoute)
admin.site.register(PipelineExecution)
admin.site.register(PipelineRunResult)

================
File: apps/agents/apps.py
================
from django.apps import AppConfig


class AgentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.agents'
    verbose_name = 'CrewAI Agents'

    def ready(self):
        pass  # We'll add any necessary imports or setup here later if needed

================
File: apps/agents/celery.py
================
from celery import Celery
import os
from django.conf import settings

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

app = Celery('core')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)

================
File: apps/agents/consumers.py
================
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from .models import CrewExecution, CrewMessage
from django.core.cache import cache
from apps.common.utils import format_message
import logging

logger = logging.getLogger(__name__)

class ConnectionTestConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()
        await self.send(text_data=json.dumps({
            'message': 'Connected to server'
        }))

    async def disconnect(self, close_code):
        pass

    async def receive(self, text_data):
        try:
            text_data_json = json.loads(text_data)
            message = text_data_json['message']

            # Echo the received message back to the client
            await self.send(text_data=json.dumps({
                'message': f'Server received: {message}'
            }))
        except json.JSONDecodeError:
            await self.send(text_data=json.dumps({
                'error': 'Invalid JSON format'
            }))
        except KeyError:
            await self.send(text_data=json.dumps({
                'error': 'Missing "message" key in JSON'
            }))

class CrewExecutionConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.execution_id = self.scope['url_route']['kwargs']['execution_id']
        self.execution_group_name = f'crew_execution_{self.execution_id}'

        # Join room group
        await self.channel_layer.group_add(
            self.execution_group_name,
            self.channel_name
        )

        await self.accept()

        # Send initial status
        await self.send_execution_status()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.execution_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message_type = text_data_json.get('type')

        if message_type == 'human_input':
            input_key = text_data_json.get('input_key')
            user_input = text_data_json.get('input')
            await self.handle_human_input(input_key, user_input)

    async def crew_execution_update(self, event):
        status = event.get('status', '')  # No formatting applied
        formatted_messages = [
            {
                'agent': msg.get('agent', 'System'),
                'content': format_message(msg.get('content', ''))
            } for msg in event.get('messages', []) if msg.get('content')
        ]
        # logger.info(f"Sending status: {status}")
        # logger.info(f"Sending formatted messages: {formatted_messages}")
        await self.send(text_data=json.dumps({
            'status': status,
            'messages': formatted_messages,
            'human_input_request': event.get('human_input_request')
        }))

    @database_sync_to_async
    def handle_human_input(self, input_key, user_input):
        cache.set(f"{input_key}_response", user_input, timeout=3600)
        execution = CrewExecution.objects.get(id=self.execution_id)
        CrewMessage.objects.create(
            execution=execution,
            agent='Human',
            content=f"Human input received: {user_input}"
        )

    @database_sync_to_async
    def get_execution_status(self):
        execution = CrewExecution.objects.get(id=self.execution_id)
        messages = CrewMessage.objects.filter(execution=execution).order_by('-timestamp')[:10]
        return {
            'status': execution.status,
            'messages': [{'agent': msg.agent, 'content': msg.content} for msg in messages],
        }

    async def send_execution_status(self):
        status_data = await self.get_execution_status()
        status = status_data['status']  # No formatting applied
        formatted_messages = [
            {
                'agent': msg['agent'],
                'content': format_message(msg['content'])
            } for msg in status_data['messages'] if msg.get('content')
        ]
        
        # logger.info(f"Sending status: {status}")
        # logger.info(f"Sending formatted messages: {formatted_messages}")
        
        await self.send(text_data=json.dumps({
            'status': status,
            'messages': formatted_messages,
        }))

================
File: apps/agents/forms.py
================
import random
from django.conf import settings
from django import forms
from .models import CrewExecution, Agent, Task, Tool, Crew, get_available_tools, AVATAR_CHOICES
from apps.seo_manager.models import Client
from apps.common.utils import get_models
import json
import logging
from .utils import get_available_tools, get_tool_classes

logger = logging.getLogger(__name__)

class CrewExecutionForm(forms.ModelForm):
    inputs = forms.JSONField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = CrewExecution
        fields = ['inputs']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['inputs'].widget.attrs['class'] = 'form-control'
        self.fields['inputs'].help_text = 'Enter JSON formatted inputs for the crew execution.'

    def clean_inputs(self):
        inputs = self.cleaned_data.get('inputs')
        if inputs:
            try:
                return json.loads(inputs)
            except json.JSONDecodeError:
                raise forms.ValidationError("Invalid JSON format in inputs field")
        return {}

class HumanInputForm(forms.Form):
    response = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=True)

class AgentForm(forms.ModelForm):
    avatar = forms.ChoiceField(
        choices=[(choice, choice) for choice in AVATAR_CHOICES],
        widget=forms.RadioSelect(),
        required=False
    )
    llm = forms.ChoiceField(
        choices=[(model, model) for model in get_models()],
        widget=forms.Select(attrs={'class': 'form-select'}),
        required=True
    )
    function_calling_llm = forms.ChoiceField(
        choices=[(model, model) for model in get_models()],
        widget=forms.Select(attrs={'class': 'form-select'}),
        required=False
    )
    
    tools = forms.ModelMultipleChoiceField(
        queryset=Tool.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False
    )

    class Meta:
        model = Agent
        fields = '__all__'  # Include all fields from the model
        widgets = {
            'goal': forms.Textarea(attrs={'rows': 3}),
            'backstory': forms.Textarea(attrs={'rows': 3}),
            'system_template': forms.Textarea(attrs={'rows': 4}),
            'prompt_template': forms.Textarea(attrs={'rows': 4}),
            'response_template': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.SelectMultiple(attrs={'class': 'form-select'}),
            'llm': forms.Select(attrs={'class': 'form-select'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            if isinstance(self.fields[field].widget, forms.CheckboxInput):
                self.fields[field].widget.attrs['class'] = 'form-check-input'
            elif not isinstance(self.fields[field].widget, (forms.SelectMultiple, forms.RadioSelect)):
                self.fields[field].widget.attrs['class'] = 'form-control'

        # Ensure avatar choices are set
        self.fields['avatar'].choices = [(choice, choice) for choice in AVATAR_CHOICES]

        # Ensure the initial values are set correctly
        self.initial['llm'] = self.initial.get('llm', settings.GENERAL_MODEL)
        self.initial['function_calling_llm'] = self.initial.get('function_calling_llm', settings.GENERAL_MODEL)

    def clean(self):
        cleaned_data = super().clean()
        logger.debug(f"Cleaned form data: {cleaned_data}")
        return cleaned_data

    def save(self, commit=True):
        logger.debug(f"Saving form with data: {self.cleaned_data}")
        instance = super().save(commit=False)
        # Ensure LLM values are set on the instance
        instance.llm = self.cleaned_data.get('llm')
        instance.function_calling_llm = self.cleaned_data.get('function_calling_llm')
        if commit:
            instance.save()
            self.save_m2m()
        logger.debug(f"Saved instance: {instance.__dict__}")
        return instance

class TaskForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)

    class Meta:
        model = Task
        fields = ['description', 'agent', 'expected_output', 'tools', 'async_execution', 'context', 'config', 'output_json', 'output_pydantic', 'output_file', 'human_input', 'converter_cls']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'expected_output': forms.Textarea(attrs={'rows': 4}),
            'tools': forms.CheckboxSelectMultiple(),
            'context': forms.CheckboxSelectMultiple(),
            'output_json': forms.TextInput(),
            'output_pydantic': forms.TextInput(),
            'output_file': forms.TextInput(attrs={'placeholder': 'e.g., outputs/task_result.txt'}),
            'converter_cls': forms.TextInput(),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)

    def clean_config(self):
        config = self.cleaned_data.get('config')
        if config:
            try:
                return json.loads(config)
            except json.JSONDecodeError:
                raise forms.ValidationError("Invalid JSON format in config field")
        return None

    def clean_output_file(self):
        output_file = self.cleaned_data.get('output_file')
        if output_file:
            # You can add additional validation here if needed
            # For example, check if the path is within allowed directories
            pass
        return output_file

class ToolForm(forms.ModelForm):
    tool_class = forms.ChoiceField(
        choices=[],
        widget=forms.Select(attrs={'class': 'form-control'}),
        required=True
    )
    tool_subclass = forms.ChoiceField(
        choices=[],
        widget=forms.Select(attrs={'class': 'form-control'}),
        required=True
    )
    description = forms.CharField(widget=forms.Textarea(attrs={'readonly': 'readonly'}), required=False)

    class Meta:
        model = Tool
        fields = ['tool_class', 'tool_subclass', 'name', 'description']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        available_tools = get_available_tools()
        self.fields['tool_class'].choices = [(tool, tool) for tool in available_tools]
        self.fields['name'].widget = forms.HiddenInput()
        self.fields['name'].required = False
        
        if self.data.get('tool_class'):
            self.fields['tool_subclass'].choices = self.get_subclass_choices(self.data['tool_class'])
        elif self.instance.pk:
            self.fields['tool_subclass'].choices = self.get_subclass_choices(self.instance.tool_class)

    def get_subclass_choices(self, tool_class):
        subclasses = get_tool_classes(tool_class)
        return [(cls.__name__, cls.__name__) for cls in subclasses]

    def clean(self):
        cleaned_data = super().clean()
        tool_class = cleaned_data.get('tool_class')
        tool_subclass = cleaned_data.get('tool_subclass')

        if tool_class:
            self.fields['tool_subclass'].choices = self.get_subclass_choices(tool_class)

        if tool_class and tool_subclass:
            subclasses = dict(self.fields['tool_subclass'].choices)
            if tool_subclass not in subclasses:
                raise forms.ValidationError(f"Invalid tool subclass '{tool_subclass}' for tool class '{tool_class}'")

        # Set the name field to the value of tool_subclass
        cleaned_data['name'] = tool_subclass

        return cleaned_data

    def save(self, commit=True):
        instance = super().save(commit=False)
        instance.name = self.cleaned_data['tool_subclass']
        if commit:
            instance.save()
        return instance

class CrewForm(forms.ModelForm):
    config = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)
    manager_callbacks = forms.CharField(widget=forms.Textarea(attrs={'rows': 4}), required=False)
    agents = forms.ModelMultipleChoiceField(
        queryset=Agent.objects.all(),
        required=False,
        widget=forms.SelectMultiple(attrs={'class': 'form-control form-select'})
    )

    class Meta:
        model = Crew
        fields = [
            'name', 'agents', 'tasks', 'process', 'verbose', 'manager_llm',
            'function_calling_llm', 'config', 'max_rpm', 'language',
            'language_file', 'memory', 'cache', 'embedder', 'full_output',
            'share_crew', 'output_log_file', 'manager_agent', 'manager_callbacks',
            'prompt_file', 'planning', 'planning_llm'
        ]
        # Note: input_variables is not included here as it's handled separately in the view

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        available_models = get_models()
        self.fields['manager_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['function_calling_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['planning_llm'] = forms.ChoiceField(
            choices=[(model, model) for model in available_models],
            widget=forms.Select(attrs={'class': 'form-control'}),
            required=False
        )
        self.fields['max_rpm'].widget.attrs['min'] = 0
        self.fields['max_rpm'].widget.attrs['step'] = 1

        if self.instance.config:
            self.initial['config'] = json.dumps(self.instance.config, indent=2)
        if self.instance.manager_callbacks:
            self.initial['manager_callbacks'] = json.dumps(self.instance.manager_callbacks, indent=2)
        if self.instance.embedder:
            self.initial['embedder'] = json.dumps(self.instance.embedder, indent=2)

        # Remove the 'required' attribute from the agents field
        if 'agents' in self.fields:
            self.fields['agents'].required = False

        print(f"Initial manager_llm: {self.initial.get('manager_llm')}")  # Debugging line
        print(f"Initial function_calling_llm: {self.initial.get('function_calling_llm')}")  # Debugging line

    def clean_config(self):
        return self._clean_json_field('config')

    def clean_manager_callbacks(self):
        return self._clean_json_field('manager_callbacks')

    def clean_embedder(self):
        return self._clean_json_field('embedder')

    def _clean_json_field(self, field_name):
        data = self.cleaned_data.get(field_name)
        if data:
            try:
                return json.loads(data)
            except json.JSONDecodeError:
                raise forms.ValidationError(f"Invalid JSON format in {field_name} field")
        return None

================
File: apps/agents/models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from apps.common.utils import get_models
from pydantic import BaseModel
import os
import importlib
import logging
import uuid
import random
import json
from django.contrib.postgres.fields import ArrayField
from django.conf import settings
from apps.agents.utils import load_tool, get_tool_description

logger = logging.getLogger(__name__)

User = get_user_model()

AVATAR_CHOICES = [
    'user.jpg', 'team-5.jpg', 'team-4.jpg', 'team-3.jpg', 'team-2.jpg', 'kal-visuals-square.jpg',
    'team-1.jpg', 'marie.jpg', 'ivana-squares.jpg', 'ivana-square.jpg'
]

def random_avatar():
    return random.choice(AVATAR_CHOICES)

def get_available_tools():
    tools_dir = os.path.join('apps', 'agents', 'tools')
    available_tools = []

    for root, dirs, files in os.walk(tools_dir):
        for dir_name in dirs:
            if not dir_name.startswith('__'):  # Exclude directories like __pycache__
                tool_path = os.path.relpath(os.path.join(root, dir_name), tools_dir)
                available_tools.append(tool_path.replace(os.path.sep, '.'))

    return available_tools

def default_embedder():
    return {'provider': 'openai'}

def user_directory_path(instance, filename):
    # File will be uploaded to MEDIA_ROOT/user_<id>/<filename>
    return f'user_{instance.crew_execution.user.id}/{filename}'

class Tool(models.Model):
    tool_class = models.CharField(max_length=255)
    tool_subclass = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    module_path = models.CharField(max_length=255)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.module_path:
            self.module_path = f"apps.agents.tools.{self.tool_class}"
        
        try:
            tool = load_tool(self)
            if tool:
                self.name = getattr(tool, 'name', self.tool_subclass)
                self.description = get_tool_description(tool.__class__)
            else:
                raise ValueError(f"Failed to load tool: {self.module_path}.{self.tool_subclass}. Check the logs for more details.")
        except Exception as e:
            logger.error(f"Error in Tool.save: {str(e)}")
            raise ValidationError(f"Error loading tool: {str(e)}")

        super().save(*args, **kwargs)

class Agent(models.Model):
    name = models.CharField(max_length=255)
    role = models.CharField(max_length=100)
    goal = models.TextField()
    backstory = models.TextField()
    llm = models.CharField(max_length=100, default=settings.GENERAL_MODEL)
    tools = models.ManyToManyField(Tool, blank=True)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True, default=settings.GENERAL_MODEL)
    max_iter = models.IntegerField(default=25)
    max_rpm = models.IntegerField(null=True, blank=True)
    max_execution_time = models.IntegerField(null=True, blank=True)
    verbose = models.BooleanField(default=False)
    allow_delegation = models.BooleanField(default=False)
    step_callback = models.CharField(max_length=255, null=True, blank=True)
    cache = models.BooleanField(default=True)
    system_template = models.TextField(null=True, blank=True)
    prompt_template = models.TextField(null=True, blank=True)
    response_template = models.TextField(null=True, blank=True)
    allow_code_execution = models.BooleanField(default=False)
    max_retry_limit = models.IntegerField(default=2)
    use_system_prompt = models.BooleanField(default=True)
    respect_context_window = models.BooleanField(default=True)
    avatar = models.CharField(max_length=100, default=random_avatar)

    def __str__(self):
        return self.name

    def clean(self):
        super().clean()
        available_models = get_models()
        if self.llm not in available_models:
            raise ValidationError({'llm': f"Selected LLM '{self.llm}' is not available. Please choose from: {', '.join(available_models)}"})

    def get_tool_settings(self, tool):
        """Get settings for a specific tool."""
        return self.tool_settings.filter(tool=tool).first()

    def get_forced_output_tools(self):
        """Get all tools that have force_output_as_result=True."""
        return self.tools.filter(
            id__in=self.tool_settings.filter(
                force_output_as_result=True
            ).values_list('tool_id', flat=True)
        )

    def has_force_output_enabled(self, tool):
        """Check if force output is enabled for a specific tool."""
        tool_setting = self.tool_settings.filter(tool=tool).first()
        return tool_setting.force_output_as_result if tool_setting else False

class Task(models.Model):
    description = models.TextField()
    agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True)
    expected_output = models.TextField()
    tools = models.ManyToManyField(Tool, blank=True)
    async_execution = models.BooleanField(default=False)
    context = models.ManyToManyField('self', symmetrical=False, blank=True)
    config = models.JSONField(null=True, blank=True)
    output_json = models.CharField(max_length=255, null=True, blank=True)
    output_pydantic = models.CharField(max_length=255, null=True, blank=True)
    output_file = models.CharField(max_length=255, null=True, blank=True)
    output = models.TextField(null=True, blank=True)
    callback = models.CharField(max_length=255, null=True, blank=True)
    human_input = models.BooleanField(default=False)
    converter_cls = models.CharField(max_length=255, null=True, blank=True)
    crew_execution = models.ForeignKey('CrewExecution', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return self.description[:50]

    def save_output_file(self, content):
        if self.output_file:
            file_name = os.path.basename(self.output_file)
        else:
            file_name = f"task_{self.id}_output.txt"
        
        file_path = user_directory_path(self, file_name)
        full_path = os.path.join(settings.MEDIA_ROOT, file_path)
        
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        
        with open(full_path, 'w') as f:
            f.write(content)
        
        self.output_file = file_path
        self.save()

class Crew(models.Model):
    name = models.CharField(max_length=100)
    agents = models.ManyToManyField(Agent)
    tasks = models.ManyToManyField(Task, through='CrewTask')
    process = models.CharField(max_length=20, choices=[('sequential', 'Sequential'), ('hierarchical', 'Hierarchical')], default='sequential')
    verbose = models.BooleanField(default=False)
    manager_llm = models.CharField(max_length=100, null=True, blank=True, default=settings.GENERAL_MODEL)
    function_calling_llm = models.CharField(max_length=100, null=True, blank=True, default=settings.GENERAL_MODEL)
    config = models.JSONField(null=True, blank=True)
    max_rpm = models.IntegerField(null=True, blank=True)
    language = models.CharField(max_length=50, default='English')
    language_file = models.CharField(max_length=255, null=True, blank=True)
    memory = models.BooleanField(default=False)
    cache = models.BooleanField(default=True)
    embedder = models.JSONField(default=default_embedder)
    full_output = models.BooleanField(default=False)
    share_crew = models.BooleanField(default=False)
    output_log_file = models.CharField(max_length=255, null=True, blank=True)
    manager_agent = models.ForeignKey(Agent, on_delete=models.SET_NULL, null=True, blank=True, related_name='managed_crews')
    manager_callbacks = models.JSONField(null=True, blank=True)
    prompt_file = models.CharField(max_length=255, null=True, blank=True)
    planning = models.BooleanField(default=False)
    planning_llm = models.CharField(max_length=100, null=True, blank=True, default=settings.GENERAL_MODEL)
    input_variables = ArrayField(
        models.CharField(max_length=100),
        blank=True,
        null=True,
        default=list
    )

    def __str__(self):
        return self.name

class CrewExecution(models.Model):
    crew = models.ForeignKey(Crew, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    client = models.ForeignKey('seo_manager.Client', on_delete=models.SET_NULL, null=True, blank=True)
    inputs = models.JSONField()
    outputs = models.JSONField(null=True, blank=True)
    status = models.CharField(max_length=25, choices=[
        ('PENDING', 'Pending'),
        ('RUNNING', 'Running'),
        ('WAITING_FOR_HUMAN_INPUT', 'Waiting for Human Input'),
        ('COMPLETED', 'Completed'),
        ('FAILED', 'Failed')
    ], default='PENDING')
    human_input_request = models.JSONField(null=True, blank=True)
    human_input_response = models.JSONField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    error_message = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.crew.name} - {self.created_at}"

    def save_task_output_file(self, task, content):
        task.crew_execution = self
        task.save_output_file(content)

class CrewMessage(models.Model):
    execution = models.ForeignKey(CrewExecution, on_delete=models.CASCADE, related_name='messages')
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    agent = models.CharField(max_length=255, null=True, blank=True)  # Add this line

    def __str__(self):
        return f"Message for execution {self.execution.id} at {self.timestamp}"

class Pipeline(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    status = models.CharField(max_length=20, default='Idle')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def clean(self):
        # Validate that stages are properly structured
        stages = self.stages.all().order_by('order')
        for stage in stages:
            if stage.is_parallel:
                if stage.crew is not None:
                    raise ValidationError("Parallel stages should not have a single crew assigned.")
            else:
                if stage.crew is None:
                    raise ValidationError("Sequential stages must have a crew assigned.")

class PipelineStage(models.Model):
    pipeline = models.ForeignKey(Pipeline, related_name='stages', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    crew = models.ForeignKey('Crew', on_delete=models.SET_NULL, null=True, blank=True)
    order = models.PositiveIntegerField()
    is_parallel = models.BooleanField(default=False)
    is_router = models.BooleanField(default=False)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.pipeline.name} - {self.name}"

    def clean(self):
        if self.is_router and self.crew is not None:
            raise ValidationError("Router stages should not have a crew assigned.")

class PipelineRoute(models.Model):
    stage = models.ForeignKey(PipelineStage, related_name='routes', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    condition = models.TextField()  # This would store a serialized form of the condition
    target_pipeline = models.ForeignKey(Pipeline, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.stage.name} - {self.name}"

class PipelineExecution(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    pipeline = models.ForeignKey(Pipeline, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, default='Pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.pipeline.name} Execution - {self.created_at}"

class PipelineRunResult(models.Model):
    execution = models.ForeignKey(PipelineExecution, related_name='run_results', on_delete=models.CASCADE)
    raw_output = models.TextField(blank=True)
    json_output = models.JSONField(null=True, blank=True)
    pydantic_output = models.TextField(null=True, blank=True)  # This would store a serialized form of the Pydantic model
    token_usage = models.JSONField(null=True, blank=True)
    trace = models.JSONField(null=True, blank=True)

    def __str__(self):
        return f"Run Result for {self.execution.pipeline.name}"

class CrewOutput(models.Model):
    execution = models.OneToOneField(CrewExecution, on_delete=models.CASCADE, related_name='crew_output')
    raw = models.TextField()
    pydantic = models.JSONField(null=True, blank=True)
    json_dict = models.JSONField(null=True, blank=True)
    token_usage = models.JSONField(null=True, blank=True)

    @property
    def json(self):
        return json.dumps(self.json_dict) if self.json_dict else None

    def to_dict(self):
        return self.json_dict or (self.pydantic.dict() if self.pydantic else None) or {}

    def __str__(self):
        if self.pydantic:
            return str(self.pydantic)
        elif self.json_dict:
            return json.dumps(self.json_dict)
        else:
            return self.raw

    def save(self, *args, **kwargs):
        # Convert UsageMetrics to a dictionary if it's not already
        if self.token_usage and hasattr(self.token_usage, 'dict'):
            self.token_usage = self.token_usage.dict()
        super().save(*args, **kwargs)

class CrewTask(models.Model):
    crew = models.ForeignKey(Crew, on_delete=models.CASCADE, related_name='crew_tasks')
    task = models.ForeignKey(Task, on_delete=models.CASCADE)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']
        unique_together = ('crew', 'task')

    def __str__(self):
        return f"{self.crew.name} - {self.task.description} (Order: {self.order})"

class AgentToolSettings(models.Model):
    agent = models.ForeignKey('Agent', on_delete=models.CASCADE, related_name='tool_settings')
    tool = models.ForeignKey('Tool', on_delete=models.CASCADE)
    force_output_as_result = models.BooleanField(default=False)

    class Meta:
        unique_together = ('agent', 'tool')

================
File: apps/agents/routing.py
================
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/connection_test/$', consumers.ConnectionTestConsumer.as_asgi()),
    re_path(r'ws/crew_execution/(?P<execution_id>\w+)/$', consumers.CrewExecutionConsumer.as_asgi()),
]

================
File: apps/agents/tasks.py
================
from celery import shared_task
from .models import CrewExecution, Tool, CrewMessage, Task, Agent as AgentModel, CrewOutput, CrewTask
from apps.seo_manager.models import Client, GoogleAnalyticsCredentials, SearchConsoleCredentials
from crewai import Crew, Agent, Task as CrewAITask
from langchain.tools import BaseTool
from django.apps import apps
from django.core.exceptions import ObjectDoesNotExist
import logging
from apps.common.utils import get_llm
from django.conf import settings
import builtins
from django.core.cache import cache
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
import time
import json
from io import StringIO
from crewai.tasks.task_output import TaskOutput
from functools import partial
import threading
import sys
from contextlib import contextmanager
import importlib
from crewai_tools import BaseTool as CrewAIBaseTool
from langchain.tools import BaseTool as LangChainBaseTool
from django.shortcuts import get_object_or_404
#from langchain.tools import tool as langchain_tool
import os
from apps.agents.utils import get_tool_info
from django.forms.models import model_to_dict
from datetime import datetime
from crewai.agents.parser import AgentAction, AgentFinish
from crewai.project import callback
from typing import Union

logger = logging.getLogger(__name__)
channel_layer = get_channel_layer()   

def load_tool_in_task(tool_model):
    tool_info = get_tool_info(tool_model)
    
    try:
        print(f"Attempting to load tool: {tool_model.tool_class}.{tool_model.tool_subclass}", file=sys.stderr)
        logger.info(f"Attempting to load tool: {tool_model.tool_class}.{tool_model.tool_subclass}")
        
        module = importlib.import_module(tool_info['module_path'])
        tool_class = getattr(module, tool_info['class_name'])
        
        if issubclass(tool_class, (CrewAIBaseTool, LangChainBaseTool)):
            tool_instance = tool_class()
            print(f"Tool loaded successfully: {tool_class.__name__}", file=sys.stderr)
            logger.info(f"Tool loaded successfully: {tool_class.__name__}")
            return tool_instance
        else:
            logger.error(f"Unsupported tool class: {tool_class}")
            return None
    except Exception as e:
        logger.error(f"Error loading tool {tool_model.tool_class}.{tool_model.tool_subclass}: {str(e)}", exc_info=True)
        print(f"Error loading tool {tool_model.tool_class}.{tool_model.tool_subclass}: {str(e)}", file=sys.stderr)
        return None

def custom_input_handler(prompt, execution_id):
    logger.debug(f"Custom input handler called for execution {execution_id} with prompt: {prompt}")
    execution = CrewExecution.objects.get(id=execution_id)
    update_execution_status(execution, 'WAITING_FOR_HUMAN_INPUT')
    log_crew_message(execution, prompt or "Input required", agent='Human Input Requested', human_input_request=prompt or "Input required")
    
    input_key = f'human_input_request_{execution_id}'
    response_key = f"{input_key}_response"
    cache.set(input_key, prompt or "Input required", timeout=3600)
    
    async_to_sync(channel_layer.group_send)(
        f"crew_execution_{execution_id}",
        {
            "type": "crew_execution_update",
            "status": "WAITING_FOR_HUMAN_INPUT",
            "human_input_request": prompt or "Input required"
        }
    )
    
    # Wait for the input (with a timeout)
    timeout = 300  # 5 minutes timeout
    poll_interval = 1  # Check every second
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        user_input = cache.get(response_key)
        
        if user_input is not None:
            # Clear the cache
            cache.delete(input_key)
            cache.delete(response_key)
            
            log_crew_message(execution, f"Received human input: {user_input}", agent='Human')
            update_execution_status(execution, 'RUNNING')
            
            return user_input
       
        time.sleep(poll_interval)
    
    logger.warning(f"Timeout waiting for human input in execution {execution_id}")
    raise TimeoutError("No user input received within the timeout period")

class WebSocketStringIO(StringIO):
    def __init__(self, execution_id, send_to_original_stdout=True, send_to_websocket=True, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.execution_id = execution_id
        self.last_position = 0
        self.send_to_original_stdout = send_to_original_stdout
        self.should_send_to_websocket = send_to_websocket  
        self.original_stdout = sys.stdout

    def write(self, s):
        super().write(s)
        if self.send_to_original_stdout:
            self.original_stdout.write(s)
            self.original_stdout.flush()  # Ensure immediate output
        if self.should_send_to_websocket:  
            self.send_to_websocket()

    def send_to_websocket(self):
        current_position = self.tell()
        if current_position > self.last_position:
            self.seek(self.last_position)
            new_content = self.read(current_position - self.last_position)
            self.seek(current_position)
            self.last_position = current_position

            async_to_sync(channel_layer.group_send)(
                f"crew_execution_{self.execution_id}",
                {
                    "type": "crew_execution_update",
                    "status": "RUNNING",
                    "messages": [{"agent": "System", "content": new_content.strip()}]
                }
            )

@contextmanager
def capture_stdout(execution_id, send_to_original_stdout=True, send_to_websocket=True):
    original_stdout = sys.stdout
    custom_stdout = WebSocketStringIO(execution_id, send_to_original_stdout, send_to_websocket)
    sys.stdout = custom_stdout
    try:
        yield custom_stdout
    finally:
        sys.stdout = original_stdout

def stdout_monitor(custom_stdout):
    while True:
        custom_stdout.send_to_websocket()
        time.sleep(0.1)  # Check every 100ms

@shared_task(bind=True)
def execute_crew(self, execution_id):
    logger.debug(f"Attempting to start crew execution for id: {execution_id} (task_id: {self.request.id})")
    
    # Try to acquire a lock
    lock_id = f'crew_execution_lock_{execution_id}'
    if not cache.add(lock_id, 'locked', timeout=3600):  # 1 hour timeout
        logger.warning(f"Execution {execution_id} is already in progress. Skipping this task.")
        return
    
    try:
        logger.debug(f"Starting crew execution for id: {execution_id} (task_id: {self.request.id})")
        execution = CrewExecution.objects.get(id=execution_id)
        
        # Store the original input function
        original_input = builtins.input
        
        def custom_input_wrapper(prompt=''):
            return custom_input_handler(prompt, execution_id)
        
        # Replace the input function with our custom wrapper
        builtins.input = custom_input_wrapper
        
        log_crew_message(execution, f"Starting execution for crew: {execution.crew.name}")
        
        with capture_stdout(execution_id, send_to_original_stdout=True, send_to_websocket=True) as custom_stdout:
            # Start the stdout monitor in a separate thread
            monitor_thread = threading.Thread(target=stdout_monitor, args=(custom_stdout,))
            monitor_thread.daemon = True
            monitor_thread.start()

            try:
                crew = initialize_crew(execution)
                result = run_crew(self.request.id, crew, execution)
                if result == "Execution cancelled by user":
                    update_execution_status(execution, 'CANCELLED')
                    return execution.id
                update_execution_status(execution, 'COMPLETED', result)
                
                # Convert UsageMetrics to a dictionary
                token_usage = result.token_usage.dict() if hasattr(result.token_usage, 'dict') else result.token_usage

                CrewOutput.objects.create(
                    execution=execution,
                    raw=str(result),
                    pydantic=result.pydantic.dict() if result.pydantic else None,
                    json_dict=result.json_dict,
                    token_usage=token_usage
                )
                
                # Save the result to a file
                save_result_to_file(execution, result)
                
                log_message = f"Crew execution completed successfully. Output: {result}"
                
                log_crew_message(execution, log_message, agent="System")
                log_message = f"Token Usage: {token_usage}"
                log_crew_message(execution, log_message, agent="System")
            except Exception as e:
                handle_execution_error(execution, e)
            finally:
                # Restore the original input function
                builtins.input = original_input
    finally:
        # Release the lock
        cache.delete(lock_id)

    logger.debug(f"Execution completed for CrewExecution id: {execution_id}")
    return execution.id

def save_result_to_file(execution, result):
    timestamp = datetime.now().strftime("%y-%m-%d-%H-%M")
    crew_name = execution.crew.name.replace(' ', '_')
    client = get_object_or_404(Client, id=execution.client_id)
    # Directly create flattened client inputs
    
    client_name = client.name.replace(' ', '_')
    file_name = f"{client_name}-finaloutput_{timestamp}.txt"
    
    # Create the directory path
    dir_path = os.path.join(settings.MEDIA_ROOT, str(execution.user.id), 'crew_runs', crew_name)
    os.makedirs(dir_path, exist_ok=True)
    
    # Create the full file path
    file_path = os.path.join(dir_path, file_name)
    
    # Write the result to the file
    with open(file_path, 'w') as f:
        f.write(str(result))
    
    # Log the file creation
    relative_path = os.path.relpath(file_path, settings.MEDIA_ROOT)
    log_message = f"Final output saved to: {relative_path}"
    log_crew_message(execution, log_message, agent="System")
    logger.info(log_message)

def initialize_crew(execution):
    agents = create_crewai_agents(execution.crew.agents.all(), execution.id)
    
    # Fetch and order the tasks based on CrewTask
    ordered_tasks = Task.objects.filter(
        crewtask__crew=execution.crew
    ).order_by('crewtask__order')
    
    tasks = create_crewai_tasks(ordered_tasks, agents, execution)
    
    if not tasks:
        raise ValueError("No valid tasks for crew execution")

    crew_params = {
        'agents': agents,
        'tasks': tasks,
        'process': execution.crew.process,
        'verbose': execution.crew.verbose,
        'step_callback': partial(step_callback, execution_id=execution.id),
        'task_callback': partial(task_callback, execution_id=execution.id),
        'execution_id': execution.id,
    }

    # Handle additional LLM fields for Crew
    llm_fields = ['manager_llm', 'function_calling_llm', 'planning_llm']
    for field in llm_fields:
        value = getattr(execution.crew, field)
        if value:
            crew_llm, _ = get_llm(value)
            crew_params[field] = crew_llm

    optional_params = [
        'memory', 'max_rpm', 'language', 'language_file', 'full_output',
        'share_crew', 'output_log_file', 'planning', 'manager_agent',
        'manager_callbacks', 'prompt_file', 'cache', 'embedder'
    ]

    for param in optional_params:
        value = getattr(execution.crew, param, None)
        if value is not None:
            crew_params[param] = value

    return Crew(**crew_params)


def run_crew(task_id, crew, execution):
    log_crew_message(execution, f"Running crew")
    inputs = execution.inputs or {}
    inputs["execution_id"] = execution.id
    inputs["current_date"] = datetime.now().strftime("%Y-%m-%d")
    client = get_object_or_404(Client, id=execution.client_id)
    # Directly create flattened client inputs
    inputs["client_id"] = client.id
    inputs["client_name"] = client.name
    inputs["client_website_url"] = client.website_url
    inputs["client_business_objectives"] = client.business_objectives
    inputs["client_target_audience"] = client.target_audience
    inputs["client_profile"] = client.client_profile

    logger.info(f"Crew inputs: {inputs}")
    logger.info(f"Crew process type: {execution.crew.process}")
    update_execution_status(execution, 'RUNNING')

    try:
        if execution.crew.process == 'sequential':
            logger.debug("Starting sequential crew execution")
            result = crew.kickoff(inputs=inputs)
        elif execution.crew.process == 'hierarchical':
            logger.debug("Starting hierarchical crew execution")
            result = crew.kickoff(inputs=inputs)
        elif execution.crew.process == 'for_each':
            logger.debug("Starting for_each crew execution")
            inputs_array = inputs.get('inputs_array', [])
            result = crew.kickoff_for_each(inputs=inputs_array)
        elif execution.crew.process == 'async':
            logger.debug("Starting async crew execution")
            result = crew.kickoff_async(inputs=inputs)
        elif execution.crew.process == 'for_each_async':
            logger.debug("Starting for_each_async crew execution")
            inputs_array = inputs.get('inputs_array', [])
            result = crew.kickoff_for_each_async(inputs=inputs_array)
        else:
            raise ValueError(f"Unknown process type: {execution.crew.process}")

        return result
    except Exception as e:
        logger.error(f"Error during crew execution: {str(e)}", exc_info=True)
        raise

def create_crewai_agents(agent_models, execution_id):
    agents = []
    for agent_model in agent_models:
        try:
            agent_params = {
                'role': agent_model.role,
                'goal': agent_model.goal,
                'backstory': agent_model.backstory,
                'verbose': agent_model.verbose,
                'allow_delegation': agent_model.allow_delegation,
                'step_callback': partial(detailed_step_callback, execution_id=execution_id),
                'human_input_handler': partial(human_input_handler, execution_id=execution_id),
                'tools': [],
                'execution_id': execution_id
            }

            # Handle LLM fields for Agent
            llm_fields = ['llm', 'function_calling_llm']
            for field in llm_fields:
                value = getattr(agent_model, field)
                if value:
                    logger.debug(f"Using LLM: {value}")
                    agent_llm, _ = get_llm(value)
                    agent_params[field] = agent_llm

            # Load tools with their settings
            for tool in agent_model.tools.all():
                loaded_tool = load_tool_in_task(tool)
                if loaded_tool:
                    # Get tool settings
                    tool_settings = agent_model.get_tool_settings(tool)
                    if tool_settings and tool_settings.force_output_as_result:
                        # Apply the force output setting
                        loaded_tool = type(loaded_tool)(
                            result_as_answer=True,
                            **{k: v for k, v in loaded_tool.__dict__.items() if k != 'result_as_answer'}
                        )
                    agent_params['tools'].append(loaded_tool)
                    logger.debug(f"Added tool {tool.name} to agent {agent_model.name}")
                else:
                    logger.warning(f"Failed to load tool {tool.name} for agent {agent_model.name}")

            optional_params = ['max_iter', 'max_rpm', 'system_template', 'prompt_template', 'response_template']
            agent_params.update({param: getattr(agent_model, param) for param in optional_params if getattr(agent_model, param) is not None})
            
            agent = Agent(**agent_params)
            logger.debug(f"CrewAI Agent created successfully for agent id: {agent_model.id} with {len(agent_params['tools'])} tools")
            agents.append(agent)
        except Exception as e:
            logger.error(f"Error creating CrewAI Agent for agent {agent_model.id}: {str(e)}")
    return agents

def human_input_handler(prompt, execution_id):
    execution = CrewExecution.objects.get(id=execution_id)
    update_execution_status(execution, 'WAITING_FOR_HUMAN_INPUT')
    log_crew_message(execution, f"Human input required: {prompt}", agent='Human Input Requested', human_input_request=prompt)
    
    input_key = f"human_input_{execution_id}_{prompt[:20]}"
    cache.set(input_key, prompt, timeout=3600)  # 1 hour timeout
    
    async_to_sync(channel_layer.group_send)(
        f"crew_execution_{execution_id}",
        {
            "type": "crew_execution_update",
            "status": "WAITING_FOR_HUMAN_INPUT",
            "human_input_request": prompt
        }
    )
    
    max_wait_time = 3600  # 1 hour
    start_time = time.time()
    while time.time() - start_time < max_wait_time:
        response = cache.get(f"{input_key}_response")
        if response:
            cache.delete(input_key)
            cache.delete(f"{input_key}_response")
            return response
        time.sleep(1)
    
    return "No human input received within the specified time."

def create_crewai_tasks(task_models, agents, execution):
    tasks = []
    for task_model in task_models:
        logger.debug(f"Creating CrewAITask for task: {task_model.id}-{task_model.description}-{task_model.agent_id}-{agents}")
        try:
            crewai_agent = next((agent for agent in agents if agent.role == AgentModel.objects.get(id=task_model.agent_id).role), None)
            if not crewai_agent:
                logger.warning(f"No matching CrewAI agent found for task {task_model.id}")
                continue

            task_tools = []
            for tool_model in task_model.tools.all():
                tool = load_tool_in_task(tool_model)
                if tool:
                    task_tools.append(tool)

            task_dict = {
                'description': task_model.description,
                'agent': crewai_agent,
                'expected_output': task_model.expected_output,
                'async_execution': task_model.async_execution,
                'human_input': task_model.human_input,
                'tools': task_tools,
                'execution_id': execution.id  # Add this line
            }
            logger.info(f"Task dict: {task_dict}")
            optional_fields = ['output_json', 'output_pydantic', 'converter_cls']
            task_dict.update({field: getattr(task_model, field) for field in optional_fields if getattr(task_model, field) is not None})

            # Handle output_file separately
            if task_model.output_file:
                description_part = task_model.description[:20]  # Adjust the slice as needed
                
                # Generate a pithy timestamp
                timestamp = datetime.now().strftime("%y-%m-%d-%H-%M")
                
                # Get the file name and extension
                file_name, file_extension = os.path.splitext(task_model.output_file)
                
                # Append the timestamp to the file name
                new_file_name = f"{file_name}_{timestamp}{file_extension}"

                # Construct the full path using MEDIA_ROOT
                full_path = os.path.join(settings.MEDIA_URL, str(execution.user.id), description_part, new_file_name)
                logger.debug(f"Full path for output_file: {full_path}")
                log_crew_message(execution, f"Task output will be saved to: {full_path}", agent='System')

                task_dict['output_file'] = full_path

            tasks.append(CrewAITask(**task_dict))
            logger.debug(f"CrewAITask created successfully for task: {task_model.id}")
        except Exception as e:
            logger.error(f"Error creating CrewAITask for task {task_model.id}: {str(e)}", exc_info=True)
    return tasks

def step_callback(step_output, execution_id):
    logger.info(f"Step callback: {step_output}")
    execution = CrewExecution.objects.get(id=execution_id)
    log_crew_message(execution, f"Step callback: {step_output}", agent='Interim Step')

def task_callback(task_output: TaskOutput, execution_id):
    execution = CrewExecution.objects.get(id=execution_id)
    log_message = f"Task callback:\n{task_output.raw}"
    agent = task_output.agent
    if task_output.raw:
        log_crew_message(execution, log_message, agent=agent)

def update_execution_status(execution, status, result=None):
    execution.status = status
    if result:
        if isinstance(result, dict) and 'final_output' in result:
            execution.outputs = {
                'final_output': result['final_output'],
                'tasks_outputs': result.get('tasks_outputs', [])
            }
        else:
            execution.outputs = {'final_output': str(result)}
    execution.save()

    async_to_sync(channel_layer.group_send)(
        f'crew_execution_{execution.id}',
        {
            'type': 'crew_execution_update',
            'status': status,
            'messages': []
        }
    )

def log_crew_message(execution, content, agent=None, human_input_request=None):
    if content:  # Only create a message if there's content
        message = CrewMessage.objects.create(execution=execution, content=content, agent=agent)
        
        async_to_sync(channel_layer.group_send)(
            f'crew_execution_{execution.id}',
            {
                'type': 'crew_execution_update',
                'status': execution.status,
                'messages': [{'agent': message.agent or 'System', 'content': message.content}],
                'human_input_request': human_input_request
            }
        )
        
        logger.debug(f"Sent message to WebSocket: {content[:100]}")
    else:
        logger.warning("Attempted to log an empty message, skipping.")

def handle_execution_error(execution, exception):
    logger.error(f"Error during crew execution: {str(exception)}", exc_info=True)
    update_execution_status(execution, 'FAILED')
    error_message = f"Crew execution failed: {str(exception)}"
    log_crew_message(execution, error_message, agent=None)
    execution.error_message = error_message
    execution.save()

    # Print the full traceback to stdout
    import traceback
    print("Full traceback:")
    traceback.print_exc()

def detailed_step_callback(event: Union[AgentAction, AgentFinish], execution_id):
    """
    This callback is triggered after each step in an agent's execution.

    Args:
        event (Union[AgentAction, AgentFinish]):  Either an AgentAction (if a tool was used) or an AgentFinish (if the agent completed its task).
        execution_id (int): ID of the crew execution
    """
    execution = CrewExecution.objects.get(id=execution_id)
    if isinstance(event, AgentAction):
        logger.info(f"Detailed step callback: Action - {event.tool}, Input - {event.tool_input}, Thought - {event.thought}")
    elif isinstance(event, AgentFinish):
        logger.info(f"Detailed step callback: Final Answer - {event.output}, Reasoning - {event.reasoning}")
    else:
        logger.info(f"Detailed step callback: Unknown event type - {event}")

    # Extract agent role from the event text
    # Extract agent role safely
    role_parts = event.text.split("Role:")
    agent_role = role_parts[1].split("\n")[0].strip() if len(role_parts) > 1 else "Agent"

    content = f"Agent '{agent_role}' step callback triggered."  # Include agent role

    if isinstance(event, AgentAction):
        content += f"\n Thought: {event.thought}"
        content += f"\n Action: {event.tool}"
        content += f"\n Action Input: {event.tool_input}"
        content += f"\n Tool Output: {event.result}"
    elif isinstance(event, AgentFinish):
        content += f"\n Final Answer: {event.output}"

    log_crew_message(execution, content, agent='Step Callback')  # Log the complete content

from crewai.tools.tool_usage_events import ToolUsageError
from crewai.utilities.events import on

@on(ToolUsageError)
def tool_error_callback(source, event: ToolUsageError):
    """
    This callback is triggered whenever a tool encounters an error during execution.

    Args:
        source: The source of the event (likely the ToolUsage instance).
        event (ToolUsageError): The ToolUsageError event containing error details.
    """
    execution_id = source.task.execution_id  # Assuming you've stored execution_id in the Task
    execution = CrewExecution.objects.get(id=execution_id)
    agent_role = event.agent_role

    error_message = f"Tool '{event.tool_name}' failed for agent '{agent_role}'."
    error_message += f"\n Error: {event.error}"
    error_message += f"\n Tool Arguments: {event.tool_args}"
    error_message += f"\n Run Attempts: {event.run_attempts}"
    error_message += f"\n Delegations: {event.delegations}"
    
    log_crew_message(execution, error_message, agent='Tool Error Callback')
    logger.error(error_message)

================
File: apps/agents/tests.py
================
from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Crew, CrewExecution, CrewMessage
from .tasks import execute_crew, resume_crew_execution
from unittest.mock import patch

User = get_user_model()

class CrewExecutionTestCase(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.crew = Crew.objects.create(name='Test Crew', process='sequential')
        self.execution = CrewExecution.objects.create(
            crew=self.crew,
            user=self.user,
            inputs={'test_input': 'value'}
        )

    @patch('apps.agents.tasks.run_crew')
    def test_execute_crew(self, mock_run_crew):
        mock_run_crew.return_value = {'test_output': 'result'}
        
        execute_crew(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'COMPLETED')
        self.assertEqual(self.execution.outputs, {'test_output': 'result'})

    @patch('apps.agents.tasks.run_crew')
    def test_execute_crew_human_input_required(self, mock_run_crew):
        from .tasks import HumanInputRequired
        mock_run_crew.side_effect = HumanInputRequired('Test human input required')
        
        execute_crew(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'WAITING_FOR_HUMAN_INPUT')
        self.assertEqual(self.execution.human_input_request, 'Test human input required')

    @patch('apps.agents.tasks.run_crew')
    def test_resume_crew_execution(self, mock_run_crew):
        mock_run_crew.return_value = {'test_output': 'result after human input'}
        
        self.execution.status = 'WAITING_FOR_HUMAN_INPUT'
        self.execution.human_input_response = 'Test human input'
        self.execution.save()
        
        resume_crew_execution(self.execution.id)
        
        self.execution.refresh_from_db()
        self.assertEqual(self.execution.status, 'COMPLETED')
        self.assertEqual(self.execution.outputs, {'test_output': 'result after human input'})

    def test_crew_message_creation(self):
        CrewMessage.objects.create(
            execution=self.execution,
            content='Test message'
        )
        
        self.assertEqual(CrewMessage.objects.count(), 1)
        self.assertEqual(CrewMessage.objects.first().content, 'Test message')

================
File: apps/agents/urls.py
================
from django.urls import path
from . import views
from . import views_agents
from . import views_tasks
from . import views_tools
from . import views_crews


app_name = 'agents'

urlpatterns = [
    path('', views.crewai_home, name='crewai_home'),
    path('crews/', views.crew_list, name='crew_list'),
    path('crew/<int:crew_id>/', views.crew_detail, name='crew_detail'),
    path('executions/', views.execution_list, name='execution_list'),
    path('execution/<int:execution_id>/', views.execution_detail, name='execution_detail'),
    path('execution/<int:execution_id>/status/', views.execution_status, name='execution_status'),
    path('execution/<int:execution_id>/submit_human_input/', views.submit_human_input, name='submit_human_input'),
    
    # Admin views
    path('manage/agents/', views_agents.manage_agents, name='manage_agents'),
    path('manage/agents/add/', views_agents.add_agent, name='add_agent'),
    path('manage/agents/edit/<int:agent_id>/', views_agents.edit_agent, name='edit_agent'),
    path('manage/agents/delete/<int:agent_id>/', views_agents.delete_agent, name='delete_agent'),
    
    path('manage/tasks/', views_tasks.manage_tasks, name='manage_tasks'),
    path('manage/tasks/add/', views_tasks.add_task, name='add_task'),
    path('manage/tasks/edit/<int:task_id>/', views_tasks.edit_task, name='edit_task'),
    path('manage/tasks/delete/<int:task_id>/', views_tasks.delete_task, name='delete_task'),
    
    path('manage/tools/', views_tools.manage_tools, name='manage_tools'),
    path('manage/tools/add/', views_tools.add_tool, name='add_tool'),
    path('manage/tools/edit/<int:tool_id>/', views_tools.edit_tool, name='edit_tool'),
    path('manage/tools/delete/<int:tool_id>/', views_tools.delete_tool, name='delete_tool'),
    path('get_tool_info/', views_tools.get_tool_info, name='get_tool_info'),
    path('get_tool_schema/<int:tool_id>/', views_tools.get_tool_schema, name='get_tool_schema'),
    path('test_tool/<int:tool_id>/', views_tools.test_tool, name='test_tool'),

    path('manage/crews/', views_crews.manage_crews, name='manage_crews'),
    path('manage/crews/add/', views_crews.crew_create_or_update, name='add_crew'),
    path('manage/crews/edit/<int:crew_id>/', views_crews.crew_create_or_update, name='edit_crew'),
    path('manage/crews/delete/<int:crew_id>/', views_crews.delete_crew, name='delete_crew'),
    path('manage/crews/update_agents/<int:crew_id>/', views_crews.update_crew_agents, name='update_crew_agents'),
    
    path('pipelines/', views.manage_pipelines, name='manage_pipelines'),
    path('manage/agents/card-view/', views.manage_agents_card_view, name='manage_agents_card_view'),
    path('manage/crews/card-view/', views_crews.manage_crews_card_view, name='manage_crews_card_view'),
    
    path('connection-test/', views.connection_test, name='connection_test'),
]

================
File: apps/agents/utils.py
================
import os
import importlib
from crewai_tools import BaseTool as CrewAIBaseTool
from langchain.tools import BaseTool as LangChainBaseTool
import logging
import crewai_tools
from typing import Optional
from django.core.cache import cache

logger = logging.getLogger(__name__)

def get_available_tools():
    tools_dir = os.path.join('apps', 'agents', 'tools')
    available_tools = []

    for root, dirs, files in os.walk(tools_dir):
        for item in dirs + files:
            if item.endswith('.py') and not item.startswith('__'):
                rel_path = os.path.relpath(os.path.join(root, item), tools_dir)
                module_path = os.path.splitext(rel_path)[0].replace(os.path.sep, '.')
                available_tools.append(module_path)

    return available_tools

def get_tool_classes(tool_path):
    module_path = f"apps.agents.tools.{tool_path}"
    if module_path.endswith('.py'):
        module_path = module_path[:-3]
    try:
        module = importlib.import_module(module_path)
    except ImportError as e:
        logger.error(f"Failed to import module {module_path}: {e}")
        return []
    
    tool_classes = []
    for name, obj in module.__dict__.items():
        if isinstance(obj, type) and name.endswith('Tool'):
            try:
                if issubclass(obj, (CrewAIBaseTool, LangChainBaseTool)) or (hasattr(obj, '_run') and callable(getattr(obj, '_run'))):
                    if not any(issubclass(other, obj) and other != obj for other in module.__dict__.values() if isinstance(other, type)):
                        tool_classes.append(obj)
            except TypeError:
                # This can happen if obj is not a class or doesn't inherit from the expected base classes
                logger.warning(f"Skipping {name} as it's not a valid tool class")
    
    logger.debug(f"Found tool classes for {tool_path}: {[cls.__name__ for cls in tool_classes]}")
    return tool_classes

def get_tool_description(tool_class_obj):
    logger.debug(f"Attempting to get description for {tool_class_obj}")

    if hasattr(tool_class_obj, 'description'):
        description = getattr(tool_class_obj, 'description')
        if isinstance(description, str):
            logger.debug(f"Found description class attribute: {description}")
            return description

    if hasattr(tool_class_obj, 'name'):
        name = getattr(tool_class_obj, 'name')
        if isinstance(name, str):
            logger.debug(f"Found name class attribute: {name}")
            return name

    if hasattr(tool_class_obj, '__annotations__') and 'description' in tool_class_obj.__annotations__:
        description = tool_class_obj.__annotations__['description']
        if isinstance(description, str):
            logger.debug(f"Found description in class annotations: {description}")
            return description

    if hasattr(tool_class_obj, 'model_fields') and 'description' in tool_class_obj.model_fields:
        description = tool_class_obj.model_fields['description'].default
        if isinstance(description, str):
            logger.debug(f"Found description in model_fields: {description}")
            return description

    if tool_class_obj.__doc__:
        docstring = tool_class_obj.__doc__.strip()
        logger.debug(f"Found docstring: {docstring}")
        return docstring

    #  Corrected schema handling: Access the description directly if it exists.
    if hasattr(tool_class_obj, 'schema') and callable(tool_class_obj.schema):
        try:
            schema = tool_class_obj.schema()
            if isinstance(schema, dict) and 'description' in schema and isinstance(schema['description'], str):
                 logger.debug(f"Found description in schema: {schema['description']}")
                 return schema['description']
        except Exception as e:
            logger.warning(f"Error getting schema for {tool_class_obj.__name__}: {str(e)}")


    default_description = f"A tool of type {tool_class_obj.__name__}"
    logger.debug(f"Using default description: {default_description}")
    return default_description

def get_tool_class_obj(tool_class, tool_subclass):
    try:
        module = importlib.import_module(f"apps.agents.tools.{tool_class}")  # Ensure correct module path
        return getattr(module, tool_subclass)
    except (ImportError, AttributeError) as e:
        logger.error(f"Error importing tool class: {e}")
        return None

def load_tool(tool_model) -> Optional[CrewAIBaseTool]:
    logger.info(f"Attempting to load tool: {tool_model.tool_class}.{tool_model.tool_subclass}")
    
    try:
        # Check if it's a pre-built CrewAI tool
        if hasattr(crewai_tools, tool_model.tool_class):
            logger.info(f"Loading pre-built CrewAI tool: {tool_model.tool_class}")
            tool_class = getattr(crewai_tools, tool_model.tool_class)
            return tool_class()

        # If not, try to import a custom tool
        full_module_path = f"apps.agents.tools.{tool_model.tool_class}"
        logger.info(f"Attempting to import custom tool module: {full_module_path}")
        module = importlib.import_module(full_module_path)
        tool_class = getattr(module, tool_model.tool_subclass)
        
        if issubclass(tool_class, CrewAIBaseTool):
            logger.info(f"Loaded custom CrewAI tool: {tool_model.tool_subclass}")
            return tool_class()
        elif issubclass(tool_class, LangChainBaseTool):
            logger.info(f"Loaded and wrapped LangChain tool: {tool_model.tool_subclass}")
            # Wrap LangChain tool in CrewAI compatible class
            class WrappedLangChainTool(CrewAIBaseTool):
                name = tool_class.name
                description = get_tool_description(tool_class)

                def _run(self, *args, **kwargs):
                    return tool_class()(*args, **kwargs)

            return WrappedLangChainTool()
        else:
            raise ValueError(f"Unsupported tool class: {tool_class}")

    except ImportError as e:
        logger.error(f"Error importing tool module {full_module_path}: {str(e)}")
    except AttributeError as e:
        logger.error(f"Error finding tool class {tool_model.tool_subclass} in module {full_module_path}: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error loading tool {full_module_path}.{tool_model.tool_subclass}: {str(e)}")
    
    return None

def get_tool_info(tool_model):
    logger.info(f"Getting tool info for: {tool_model.tool_class}.{tool_model.tool_subclass}")
    
    full_module_path = f"apps.agents.tools.{tool_model.tool_class}"
    
    return {
        'module_path': full_module_path,
        'class_name': tool_model.tool_subclass
    }

================
File: apps/agents/views_agents.py
================
import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from .models import Agent, AgentToolSettings
from .forms import AgentForm
import traceback
from django.conf import settings

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def manage_agents(request):
    agents = Agent.objects.all()
    return render(request, 'agents/manage_agents.html', {'agents': agents})

@login_required
@user_passes_test(is_admin)
def add_agent(request):
    if request.method == 'POST':
        form = AgentForm(request.POST)
        if form.is_valid():
            try:
                agent = form.save(commit=False)
                agent.avatar = form.cleaned_data['avatar']
                agent.save()
                
                # Save many-to-many fields
                form.save_m2m()
                
                # Handle tool settings
                for tool in agent.tools.all():
                    force_output = request.POST.get(f'force_tool_output_{tool.id}') == 'on'
                    AgentToolSettings.objects.create(
                        agent=agent,
                        tool=tool,
                        force_output_as_result=force_output
                    )
                
                messages.success(request, 'Agent added successfully.')
                return redirect('agents:manage_agents')
            except Exception as e:
                messages.error(request, f"Error adding agent: {str(e)}")
    else:
        form = AgentForm()
    return render(request, 'agents/agent_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        form = AgentForm(request.POST, instance=agent)
        if form.is_valid():
            try:
                agent = form.save(commit=False)
                agent.avatar = form.cleaned_data['avatar']
                agent.save()
                form.save_m2m()
                
                # Update tool settings
                agent.tool_settings.all().delete()  # Remove existing settings
                for tool in agent.tools.all():
                    force_output = request.POST.get(f'force_tool_output_{tool.id}') == 'on'
                    AgentToolSettings.objects.create(
                        agent=agent,
                        tool=tool,
                        force_output_as_result=force_output
                    )
                
                messages.success(request, 'Agent updated successfully.')
                return redirect('agents:manage_agents')
            except Exception as e:
                messages.error(request, f"Error updating agent: {str(e)}")
    else:
        form = AgentForm(instance=agent)
    return render(request, 'agents/agent_form.html', {'form': form, 'agent': agent})

@login_required
@user_passes_test(is_admin)
def delete_agent(request, agent_id):
    agent = get_object_or_404(Agent, id=agent_id)
    if request.method == 'POST':
        agent.delete()
        messages.success(request, 'Agent deleted successfully.')
        return redirect('agents:manage_agents')
    return render(request, 'agents/confirm_delete.html', {'object': agent, 'type': 'agent'})

================
File: apps/agents/views_crews.py
================
# This file was previously named views_admin.py
# The content remains the same, but you might want to remove any unused imports

import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from .models import Crew, CrewTask
from .forms import CrewForm
import json
from apps.seo_manager.models import Client
from django.conf import settings

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def manage_crews(request):
    crews = Crew.objects.all()
    
    # Get the selected client_id from the session
    selected_client_id = request.session.get('selected_client_id')
    selected_client = None
    
    if selected_client_id:
        selected_client = get_object_or_404(Client, id=selected_client_id)
        # Optionally, you can filter crews by the selected client if there's a relationship
        # crews = crews.filter(client=selected_client)
    
    context = {
        'crews': crews,
        'selected_client': selected_client,
    }
    return render(request, 'agents/manage_crews.html', context)

@login_required
@user_passes_test(is_admin)
def add_crew(request):
    if request.method == 'POST':
        form = CrewForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew added successfully.')
            return redirect('agents:manage_crews')
    else:
        initial_data = {
            'manager_llm': settings.GENERAL_MODEL,
            'function_calling_llm': settings.GENERAL_MODEL
        }
        logger.debug(f"Initial data for form: {initial_data}")
        form = CrewForm(initial=initial_data)
    return render(request, 'agents/crew_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        form = CrewForm(request.POST, instance=crew)
        if form.is_valid():
            form.save()
            messages.success(request, 'Crew updated successfully.')
            return redirect('agents:manage_crews')
    else:
        form = CrewForm(instance=crew, initial={
            'manager_llm': settings.GENERAL_MODEL,
            'function_calling_llm': settings.GENERAL_MODEL
        })
    return render(request, 'agents/crew_form.html', {'form': form, 'crew': crew})

@login_required
@user_passes_test(is_admin)
def delete_crew(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        crew.delete()
        messages.success(request, 'Crew deleted successfully.')
        return redirect('agents:manage_crews')
    return render(request, 'agents/confirm_delete.html', {'object': crew, 'type': 'crew'})

@login_required
@user_passes_test(is_admin)
def update_crew_agents(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    if request.method == 'POST':
        agent_ids = request.POST.getlist('agents')
        crew.agents.set(agent_ids)
        
        # Update manager_agent if it's in the POST data
        manager_agent_id = request.POST.get('manager_agent')
        if manager_agent_id:
            crew.manager_agent_id = manager_agent_id
        else:
            crew.manager_agent = None
        
        crew.save()
        messages.success(request, 'Crew agents updated successfully.')
    return redirect('agents:manage_crews')

@login_required
@user_passes_test(is_admin)
def manage_crews_card_view(request):
    crews = Crew.objects.all()
    
    # Get the selected client_id from the session
    selected_client_id = request.session.get('selected_client_id')
    selected_client = None
    
    if selected_client_id:
        selected_client = get_object_or_404(Client, id=selected_client_id)
        # Optionally, you can filter crews by the selected client if there's a relationship
        # crews = crews.filter(client=selected_client)
    
    context = {
        'crews': crews,
        'selected_client': selected_client,
    }
    return render(request, 'agents/manage_crews_card_view.html', context)

@login_required
def crew_create_or_update(request, crew_id=None):
    if crew_id:
        crew = get_object_or_404(Crew, id=crew_id)
    else:
        crew = None

    next_url = request.GET.get('next') or request.POST.get('next')

    if request.method == 'POST':
        form = CrewForm(request.POST, instance=crew)
        if form.is_valid():
            crew = form.save(commit=False)
            
            # Handle input variables
            input_variables = request.POST.getlist('input_variables[]')
            crew.input_variables = input_variables
            
            crew.save()
            form.save_m2m()  # This is important for saving many-to-many relationships
            
            # Handle task order
            task_order = request.POST.getlist('task_order[]')
            CrewTask.objects.filter(crew=crew).delete()
            for index, task_id in enumerate(task_order):
                CrewTask.objects.create(crew=crew, task_id=task_id, order=index)
            
            messages.success(request, f'Crew {"updated" if crew_id else "created"} successfully.')
            
            if next_url:
                return redirect(next_url)
            else:
                return redirect('agents:manage_crews')
        else:
            messages.error(request, f'Error {"updating" if crew_id else "creating"} crew. Please check the form.')
    else:
        form = CrewForm(instance=crew)
        input_variables = crew.input_variables if crew else []

    context = {
        'form': form,
        'crew': crew,
        'input_variables_json': json.dumps(input_variables),
        'next': next_url,
    }

    return render(request, 'agents/crew_form.html', context)

================
File: apps/agents/views_tasks.py
================
import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from .models import Task
from .forms import TaskForm

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def manage_tasks(request):
    tasks = Task.objects.all()
    return render(request, 'agents/manage_tasks.html', {'tasks': tasks})

@login_required
@user_passes_test(is_admin)
def add_task(request):
    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task added successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm()
    return render(request, 'agents/task_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            messages.success(request, 'Task updated successfully.')
            return redirect('agents:manage_tasks')
    else:
        form = TaskForm(instance=task)
    return render(request, 'agents/task_form.html', {'form': form, 'task': task})

@login_required
@user_passes_test(is_admin)
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        task.delete()
        messages.success(request, 'Task deleted successfully.')
        return redirect('agents:manage_tasks')
    return render(request, 'agents/confirm_delete.html', {'object': task, 'type': 'task'})

================
File: apps/agents/views_tools.py
================
import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.views.decorators.http import require_http_methods
from django.http import JsonResponse
import traceback
from .models import Tool
from .forms import ToolForm
from .utils import get_available_tools, get_tool_classes, get_tool_description, get_tool_class_obj, load_tool
from pydantic import BaseModel
import inspect
import json
import tiktoken
import csv
from io import StringIO

logger = logging.getLogger(__name__)

def is_admin(user):
    return user.is_staff or user.is_superuser

def count_tokens(text):
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    return len(encoding.encode(text))

@login_required
@user_passes_test(is_admin)
def manage_tools(request):
    tools = Tool.objects.all().order_by('-id')
    return render(request, 'agents/manage_tools.html', {'tools': tools})

@login_required
@user_passes_test(is_admin)
def add_tool(request):
    if request.method == 'POST':
        form = ToolForm(request.POST)
        logger.debug(f"POST data: {request.POST}")
        if form.is_valid():
            tool = form.save(commit=False)
            tool_class = form.cleaned_data['tool_class']
            tool_subclass = form.cleaned_data['tool_subclass']
            
            logger.debug(f"Adding tool: class={tool_class}, subclass={tool_subclass}")
            
            # Get the tool class object and its description
            tool_classes = get_tool_classes(tool_class)
            logger.debug(f"Available tool classes: {[cls.__name__ for cls in tool_classes]}")
            if tool_classes:
                tool_class_obj = next((cls for cls in tool_classes if cls.__name__ == tool_subclass), None)
                if tool_class_obj:
                    logger.debug(f"Tool class object: {tool_class_obj}")
                    
                    tool.description = get_tool_description(tool_class_obj)
                    logger.debug(f"Tool description: {tool.description}")
                    
                    # Save the tool
                    tool.save()
                    
                    messages.success(request, 'Tool added successfully.')
                    return redirect('agents:manage_tools')
                else:
                    messages.error(request, f'Tool subclass {tool_subclass} not found.')
            else:
                messages.error(request, 'Tool class not found.')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field}: {error}")
            logger.error(f"Form errors: {form.errors}")
    else:
        form = ToolForm()
    return render(request, 'agents/tool_form.html', {'form': form})

@login_required
@user_passes_test(is_admin)
def edit_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        form = ToolForm(request.POST, instance=tool)
        if form.is_valid():
            tool = form.save(commit=False)
            tool.name = form.cleaned_data['tool_subclass']
            tool_class = form.cleaned_data['tool_class']
            tool_subclass = form.cleaned_data['tool_subclass']
            
            tool_class_obj = get_tool_class_obj(tool_class, tool_subclass)
            tool.description = get_tool_description(tool_class_obj)
            tool.save()
            messages.success(request, 'Tool updated successfully.')
            return redirect('agents:manage_tools')
    else:
        form = ToolForm(instance=tool)
    return render(request, 'agents/tool_form.html', {'form': form, 'tool': tool})

@login_required
@user_passes_test(is_admin)
def delete_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    if request.method == 'POST':
        tool.delete()
        messages.success(request, 'Tool deleted successfully.')
        return redirect('agents:manage_tools')
    return render(request, 'agents/confirm_delete.html', {'object': tool, 'type': 'tool'})

@login_required
@user_passes_test(is_admin)
def get_tool_info(request):
    tool_class = request.GET.get('tool_class')
    logger.info(f"Received request for tool_class: {tool_class}")
    
    if tool_class:
        try:
            tool_objects = get_tool_classes(tool_class)
            logger.debug(f"Found tool objects: {[obj.__name__ for obj in tool_objects]}")
            
            class_info = []
            for obj in tool_objects:
                description = get_tool_description(obj)
                logger.debug(f"Tool: {obj.__name__}, Description: {description}")
                class_info.append({
                    'name': obj.__name__,
                    'description': description
                })
            
            logger.debug(f"Returning class_info: {class_info}")
            return JsonResponse({
                'classes': class_info
            })
        except ImportError as e:
            logger.error(f"ImportError: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': f"Failed to import tool module: {str(e)}"}, status=500)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({'error': f"An unexpected error occurred: {str(e)}"}, status=500)
    
    logger.warning("Invalid request: tool_class parameter is missing")
    return JsonResponse({'error': 'Invalid request: tool_class parameter is missing'}, status=400)

@login_required
@user_passes_test(is_admin)
def get_tool_schema(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    try:
        tool_class = get_tool_class_obj(tool.tool_class, tool.tool_subclass)

        if tool_class is None:
            return JsonResponse({'error': 'Failed to load tool class'}, status=400)

        manual_schema = {
            "type": "object",
            "properties": {}
        }

        if hasattr(tool_class, 'args_schema') and issubclass(tool_class.args_schema, BaseModel):
            # Use Pydantic v2 method if available
            if hasattr(tool_class.args_schema, 'model_json_schema'):
                schema = tool_class.args_schema.model_json_schema()
            else:
                # Fallback for Pydantic v1
                schema = tool_class.args_schema.schema()

            for field_name, field_schema in schema.get('properties', {}).items():
                manual_schema['properties'][field_name] = {
                    "type": field_schema.get('type', 'string'),
                    "title": field_schema.get('title', field_name.capitalize()),
                    "description": field_schema.get('description', '')
                }
        else:
            # Fallback for tools without args_schema
            for param_name, param in inspect.signature(tool_class._run).parameters.items():
                if param_name not in ['self', 'kwargs']:
                    manual_schema['properties'][param_name] = {
                        "type": "string",
                        "title": param_name.capitalize(),
                        "description": ""
                    }

        if not manual_schema["properties"]:
            logger.error(f"No input fields found for tool: {tool_class}")
            return JsonResponse({'error': 'No input fields found for this tool'}, status=400)

        logger.debug(f"Generated schema for tool {tool_id}: {manual_schema}")
        return JsonResponse(manual_schema)
    except Exception as e:
        logger.error(f"Error getting tool schema: {str(e)}")
        return JsonResponse({'error': f'Error getting tool schema: {str(e)}'}, status=500)

@login_required
@user_passes_test(is_admin)
@require_http_methods(["POST"])
def test_tool(request, tool_id):
    tool = get_object_or_404(Tool, id=tool_id)
    tool_instance = load_tool(tool)

    if tool_instance is None:
        return JsonResponse({'error': 'Failed to load tool'}, status=400)

    inputs = {key: value for key, value in request.POST.items() if key != 'csrfmiddlewaretoken'}

    try:
        # Check if the tool has an args_schema
        if hasattr(tool_instance, 'args_schema'):
            # Pre-process inputs
            processed_inputs = {}
            for key, value in inputs.items():
                if value != '':
                    try:
                        # Try to parse as JSON (for lists and dicts)
                        processed_inputs[key] = json.loads(value)
                    except json.JSONDecodeError:
                        # If it's not valid JSON, keep the original string
                        processed_inputs[key] = value

            # Validate and convert inputs using the args_schema
            validated_inputs = tool_instance.args_schema(**processed_inputs)
            result = tool_instance._run(**validated_inputs.dict())
        else:
            # If no args_schema, pass inputs directly
            result = tool_instance._run(**inputs)
        
        # Convert result to string if it's not already
        if not isinstance(result, str):
            result = str(result)
        
        # Count tokens
        token_count = count_tokens(result)
        
        return JsonResponse({'result': result, 'token_count': token_count})
    except Exception as e:
        logger.error(f"Error testing tool: {str(e)}")
        return JsonResponse({'error': str(e), 'token_count': 0}, status=400)

================
File: apps/agents/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.views.decorators.http import require_POST, require_http_methods
from django.views.decorators.csrf import csrf_exempt, csrf_protect
from .models import Crew, CrewExecution, CrewMessage, Pipeline, Agent
from .forms import CrewExecutionForm, HumanInputForm, AgentForm
from .tasks import execute_crew
from django.core.exceptions import ValidationError
import logging
import json
from django.urls import reverse
from django.core.cache import cache
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.conf import settings
import os
from apps.seo_manager.models import Client  # Import the Client model
from markdown_it import MarkdownIt  # Import markdown-it

logger = logging.getLogger(__name__)
channel_layer = get_channel_layer()

# Initialize the MarkdownIt instance
md = MarkdownIt()

@login_required
def crewai_home(request):
    crews = Crew.objects.all()  # Get the first 3 crews for the summary
    recent_executions = CrewExecution.objects.filter(user=request.user).order_by('-created_at')[:10]
    clients = Client.objects.all()  # Get all clients
    
    # Get the selected client_id from the request, fallback to session
    selected_client_id = request.GET.get('client_id') or request.session.get('selected_client_id')
    
    if selected_client_id:
        request.session['selected_client_id'] = selected_client_id
    else:
        # If no client is selected, remove it from the session
        request.session.pop('selected_client_id', None)
    
    context = {
        'crews': crews,
        'recent_executions': recent_executions,
        'clients': clients,
        'selected_client_id': selected_client_id,
    }
    return render(request, 'agents/crewai_home.html', context)

@login_required
def crew_list(request):
    logger.debug("Entering crew_list view")
    crews = Crew.objects.all()
    return render(request, 'agents/crew_list.html', {'crews': crews})

@login_required
def crew_detail(request, crew_id):
    crew = get_object_or_404(Crew, id=crew_id)
    recent_executions = CrewExecution.objects.filter(crew=crew).order_by('-created_at')[:5]
    
    # Get the selected client_id from the session
    selected_client_id = request.session.get('selected_client_id')
    selected_client = None
    if selected_client_id:
        selected_client = get_object_or_404(Client, id=selected_client_id)
    
    if request.method == 'POST':
        form = CrewExecutionForm(request.POST)
        if form.is_valid():
            execution = form.save(commit=False)
            execution.crew = crew
            execution.user = request.user
            execution.client = selected_client  # Associate the selected client with the execution
            
            # Handle input variables
            input_variables = json.loads(request.POST.get('input_variables', '{}'))
            execution.inputs = input_variables
            
            execution.save()
            
            # Start the execution
            execute_crew.delay(execution.id)
            
            messages.success(request, 'Crew execution started.')
            return JsonResponse({'status': 'success', 'execution_id': execution.id})
    else:
        form = CrewExecutionForm()
    
    context = {
        'crew': crew,
        'form': form,
        'recent_executions': recent_executions,
        'selected_client': selected_client,
    }
    return render(request, 'agents/crew_detail.html', context)

@login_required
def execution_list(request):
    logger.debug("Entering execution_list view")
    executions = CrewExecution.objects.filter(user=request.user).order_by('-created_at')
    crews = Crew.objects.all()

    # Apply filters
    crew_id = request.GET.get('crew')
    status = request.GET.get('status')

    if crew_id:
        executions = executions.filter(crew_id=crew_id)
    if status:
        executions = executions.filter(status=status)

    # Pagination
    paginator = Paginator(executions, 10)  # Show 10 executions per page
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'executions': page_obj,
        'crews': crews,
    }
    return render(request, 'agents/execution_list.html', context)

@login_required
def execution_detail(request, execution_id):
    execution = get_object_or_404(CrewExecution, id=execution_id)

    messages = CrewMessage.objects.filter(execution=execution).order_by('timestamp')
    
    # Convert markdown to HTML for each message using markdown-it
    for message in messages:
        message.content_html = md.render(message.content)  # Use markdown-it for conversion

    # Convert markdown in outputs if they exist
    if execution.outputs:
        outputs_html = {}
        for key, value in execution.outputs.items():
            if isinstance(value, (str, int, float, bool)):
                outputs_html[key] = md.render(str(value))  # Use markdown-it for conversion
            elif value is None:
                outputs_html[key] = ''
            else:
                # For complex types like dicts or lists, format them nicely
                outputs_html[key] = f'<pre>{json.dumps(value, indent=2)}</pre>'
        execution.outputs_html = outputs_html
    
    status_classes = {
        'PENDING': 'info',
        'RUNNING': 'primary',
        'WAITING_FOR_HUMAN_INPUT': 'warning',
        'COMPLETED': 'success',
        'FAILED': 'danger'
    }
    status_class = status_classes.get(execution.status, 'secondary')

    context = {
        'execution': execution,
        'messages': messages,
        'status_class': status_class,
    }
    return render(request, 'agents/execution_detail.html', context)

@login_required
def execution_status(request, execution_id):
    try:
        execution = CrewExecution.objects.get(id=execution_id, user=request.user)
        
        # Get the last message ID from the request
        last_message_id = request.GET.get('last_message_id')
        
        # Only fetch new messages if there are any
        if last_message_id:
            messages = CrewMessage.objects.filter(
                execution=execution,
                id__gt=last_message_id
            ).order_by('timestamp')
        else:
            messages = CrewMessage.objects.filter(
                execution=execution
            ).order_by('timestamp')
        
        # Get status badge class
        status_classes = {
            'PENDING': 'info',
            'RUNNING': 'primary',
            'WAITING_FOR_HUMAN_INPUT': 'warning',
            'COMPLETED': 'success',
            'FAILED': 'danger'
        }
        status_class = status_classes.get(execution.status, 'secondary')
        
        response_data = {
            'status': execution.get_status_display(),
            'status_class': status_class,
            'updated_at': execution.updated_at.isoformat(),
            'outputs': execution.outputs,
            'human_input_request': execution.human_input_request,
            'messages': [{
                'id': msg.id,
                'agent': msg.agent,
                'content': msg.content,
                'timestamp': msg.timestamp.strftime("%d %b %H:%M")
            } for msg in messages],
        }
        return JsonResponse(response_data)
    except CrewExecution.DoesNotExist:
        return JsonResponse({'error': 'Execution not found'}, status=404)

@login_required
@csrf_protect
@require_POST
def provide_human_input(request, execution_id):
    try:
        execution = CrewExecution.objects.get(id=execution_id, user=request.user)
        if execution.status != 'WAITING_FOR_HUMAN_INPUT':
            return JsonResponse({'error': 'Execution is not waiting for human input'}, status=400)

        data = json.loads(request.body)
        user_input = data.get('input')

        if user_input is None:
            return JsonResponse({'error': 'No input provided'}, status=400)

        # Store the user input in the cache
        cache.set(f'human_input_response_{execution_id}', user_input, timeout=3600)

        logger.info(f"Stored user input for execution {execution_id}: {user_input}")

        # Update execution status
        execution.status = 'RUNNING'
        execution.save()

        # Send a WebSocket message to update the frontend
        async_to_sync(channel_layer.group_send)(
            f'crew_execution_{execution_id}',
            {
                'type': 'crew_execution_update',
                'status': 'RUNNING',
                'messages': [{'agent': 'Human', 'content': f'Input provided: {user_input}'}],
            }
        )

        # Return the actual user input
        return JsonResponse({'message': 'Human input received and processing resumed', 'input': user_input})
    except CrewExecution.DoesNotExist:
        return JsonResponse({'error': 'Execution not found'}, status=404)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Error in provide_human_input: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@login_required
def manage_pipelines(request):
    pipelines = Pipeline.objects.all()
    context = {
        'pipelines': pipelines,
    }
    return render(request, 'agents/manage_pipelines.html', context)

@login_required
def manage_agents_card_view(request):
    agents = Agent.objects.prefetch_related('crew_set', 'task_set', 'tools').all()
    form = AgentForm()  # Now AgentForm is defined
    context = {
        'agents': agents,
        'form': form,
    }
    return render(request, 'agents/manage_agents_card_view.html', context)

@login_required
def manage_crews(request):
    crews = Crew.objects.all()
    
    # Get the selected client_id from the session
    selected_client_id = request.session.get('selected_client_id')
    selected_client = None
    
    if selected_client_id:
        selected_client = get_object_or_404(Client, id=selected_client_id)
        # Optionally, you can filter crews by the selected client if there's a relationship
        # crews = crews.filter(client=selected_client)
    
    context = {
        'crews': crews,
        'selected_client': selected_client,
    }
    return render(request, 'agents/manage_crews.html', context)

@login_required
def manage_crews_card_view(request):
    crews = Crew.objects.all()
    
    # Get the selected client_id from the session
    selected_client_id = request.session.get('selected_client_id')
    selected_client = None
    
    if selected_client_id:
        selected_client = get_object_or_404(Client, id=selected_client_id)
        # Optionally, you can filter crews by the selected client if there's a relationship
        # crews = crews.filter(client=selected_client)
    
    context = {
        'crews': crews,
        'selected_client': selected_client,
    }
    return render(request, 'agents/manage_crews_card_view.html', context)

def connection_test(request):
    return render(request, 'agents/connection_test.html')@csrf_exempt

@login_required
@require_POST
def submit_human_input(request, execution_id):
    input_key = request.POST.get('input_key')
    response = request.POST.get('response')
    
    if not input_key or not response:
        return JsonResponse({'error': 'Missing input_key or response'}, status=400)
    
    execution = get_object_or_404(CrewExecution, id=execution_id, user=request.user)
    
    # Store the response in the cache
    cache_key = f"{input_key}_response"
    cache.set(cache_key, response, timeout=3600)
    
    # Verify that the input was stored correctly
    stored_value = cache.get(cache_key)
    logger.info(f"Stored human input in cache for execution {execution_id}: key={cache_key}, value={response}")
    
    # Update execution status
    execution.status = 'RUNNING'
    execution.save()
    
    return JsonResponse({'message': 'Human input received and processed'})

================
File: apps/api/serializers.py
================
from rest_framework import serializers

try:
    from apps.common.models import Sales
except:
    pass 
class SalesSerializer(serializers.ModelSerializer):
    class Meta:
        try:
            model = Sales
        except:
            pass    
        fields = '__all__'

================
File: apps/api/urls.py
================
from django.urls import re_path
from django.views.decorators.csrf import csrf_exempt

from apps.api.views import *

urlpatterns = [
	re_path("sales/((?P<pk>\d+)/)?", csrf_exempt(SalesView.as_view())),
]

================
File: apps/api/views.py
================
from http import HTTPStatus
from django.http import Http404
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.generics import get_object_or_404
from rest_framework.permissions import IsAuthenticatedOrReadOnly

from apps.api.serializers import *

try:
    from apps.common.models import Sales
except:
    pass

class SalesView(APIView):
    permission_classes = (IsAuthenticatedOrReadOnly,)
    
    def post(self, request):
        serializer = SalesSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(data={
                **serializer.errors,
                'success': False
            }, status=HTTPStatus.BAD_REQUEST)
        serializer.save()
        return Response(data={
            'message': 'Record Created.',
            'success': True
        }, status=HTTPStatus.OK)

    def get(self, request, pk=None):
        if not pk:
            return Response({
                'data': [SalesSerializer(instance=obj).data for obj in Sales.objects.all()],
                'success': True
            }, status=HTTPStatus.OK)
        try:
            obj = get_object_or_404(Sales, pk=pk)
        except Http404:
            return Response(data={
                'message': 'object with given id not found.',
                'success': False
            }, status=HTTPStatus.NOT_FOUND)
        return Response({
            'data': SalesSerializer(instance=obj).data,
            'success': True
        }, status=HTTPStatus.OK)

    def put(self, request, pk):
        try:
            obj = get_object_or_404(Sales, pk=pk)
        except Http404:
            return Response(data={
                'message': 'object with given id not found.',
                'success': False
            }, status=HTTPStatus.NOT_FOUND)
        serializer = SalesSerializer(instance=obj, data=request.data, partial=True)
        if not serializer.is_valid():
            return Response(data={
                **serializer.errors,
                'success': False
            }, status=HTTPStatus.BAD_REQUEST)
        serializer.save()
        return Response(data={
            'message': 'Record Updated.',
            'success': True
        }, status=HTTPStatus.OK)

    def delete(self, request, pk):
        try:
            obj = get_object_or_404(Sales, pk=pk)
        except Http404:
            return Response(data={
                'message': 'object with given id not found.',
                'success': False
            }, status=HTTPStatus.NOT_FOUND)
        obj.delete()
        return Response(data={
            'message': 'Record Deleted.',
            'success': True
        }, status=HTTPStatus.OK)

================
File: apps/charts/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/charts/apps.py
================
from django.apps import AppConfig


class ChartsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.charts'

================
File: apps/charts/models.py
================
from django.db import models

# Create your models here.

================
File: apps/charts/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/charts/urls.py
================
from django.urls import path

from apps.charts import views

urlpatterns = [
    path("", views.index, name="charts"),
]

================
File: apps/charts/views.py
================
from django.shortcuts import render
from apps.common.models import Sales
from django.core import serializers
import csv

# Create your views here.

def index(request):
    filter_data = {}
    if from_date := request.GET.get('from'):
        filter_data['PurchaseDate__gte'] = from_date
    
    if to_date := request.GET.get('to'):
        filter_data['PurchaseDate__lte'] = to_date

    sales = serializers.serialize('json', Sales.objects.filter(**filter_data))
    context = {
        'segment'  : 'charts',
        'parent'   : 'apps',
        'sales': sales
    }
    return render(request, 'pages/apps/charts.html', context)

================
File: apps/common/tools/async_crawl_website_tool.py
================
import asyncio
from typing import Optional, Type, List, Dict, Any
from pydantic import BaseModel, Field
from crewai_tools import BaseTool
from urllib.parse import urlparse
from trafilatura import extract
from celery import shared_task
from celery.contrib.abortable import AbortableTask
from django.contrib.auth.models import User
from django.conf import settings
import logging
import os
import re
from apps.crawl_website.models import CrawlResult
from spider_rs import Website, Page
from concurrent.futures import ThreadPoolExecutor

logger = logging.getLogger(__name__)

class AsyncCrawlWebsiteToolSchema(BaseModel):
    """Input for AsyncCrawlWebsiteTool."""
    website_url: str = Field(..., description="Mandatory website URL to crawl and read content")

class AsyncCrawlWebsiteTool(BaseTool):
    name: str = "Async Crawl and Read Website Content"
    description: str = "An asynchronous tool that can crawl a website and read its content, including content from internal links on the same page."
    args_schema: Type[BaseModel] = AsyncCrawlWebsiteToolSchema
    website_url: Optional[str] = None

    def __init__(self, website_url: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if website_url:
            self.website_url = website_url
            self.description = f"An asynchronous tool to crawl {website_url} and read its content, including content from internal links."

    async def _run(self, website_url: str = None) -> dict:
        url = website_url or self.website_url
        if not url:
            raise ValueError("No website URL provided")

        logger.info(f"Starting crawl for URL: {url}")
        
        try:
            result = await self.crawl_website(url)
            logger.info(f"Crawl completed. Total links: {result['total_links']}, Links visited: {len(result['links_visited'])}")
            return result
        except Exception as e:
            logger.error(f"Error during crawl: {e}")
            raise

    async def crawl_website(self, url: str) -> Dict[str, Any]:
        website = Website(url)
        website.with_budget({"*": 1000})  # Set a high limit for comprehensive crawling
        website.with_respect_robots_txt(True)
        website.with_subdomains(False)  # Stick to the main domain
        website.with_tld(False)  # Don't crawl top-level domain
        website.with_delay(1)  # Be respectful with a 1-second delay between requests

        pages_queue = asyncio.Queue()
        total_links = 0
        links_visited = set()
        content = ""
        crawl_complete = asyncio.Event()
        semaphore = asyncio.Semaphore(5)  # Limit concurrent processing

        def on_page_event(page: Page):
            nonlocal total_links
            total_links += 1
            logger.info(f"Received page: {page.url}")
            asyncio.run_coroutine_threadsafe(pages_queue.put_nowait(page), asyncio.get_event_loop())

        logger.info("Starting website crawl")
        with ThreadPoolExecutor() as executor:
            crawl_future = executor.submit(website.crawl, on_page_event=on_page_event)

        async def process_pages():
            nonlocal content
            while True:
                try:
                    page = await asyncio.wait_for(pages_queue.get(), timeout=5.0)
                    async with semaphore:
                        logger.info(f"Processing page: {page.url}")
                        page_content = await self._extract_content(page)
                        content += page_content
                        links_visited.add(self._get_relative_path(page.url))
                        pages_queue.task_done()
                        logger.info(f"Processed page: {page.url}, Content length: {len(page_content)}")
                except asyncio.TimeoutError:
                    if crawl_complete.is_set() and pages_queue.empty():
                        logger.info("No more pages to process")
                        break
                    logger.info("Waiting for more pages...")
                except Exception as e:
                    logger.error(f"Error processing page: {e}")

        async def monitor_crawl():
            while not crawl_future.done():
                await asyncio.sleep(1)
            crawl_complete.set()
            logger.info("Crawl completed")

        processing_task = asyncio.create_task(process_pages())
        monitoring_task = asyncio.create_task(monitor_crawl())

        await asyncio.gather(processing_task, monitoring_task)

        if not crawl_future.done():
            logger.warning("Crawl future not completed, waiting for completion")
            crawl_future.result()  # This will raise any exceptions that occurred during crawling

        logger.info(f"Crawl finished. Total links: {total_links}, Links visited: {len(links_visited)}")

        return {
            "content": content,
            "links_visited": list(links_visited),
            "total_links": total_links,
            "links_to_visit": list(set(page.url for page in website.get_pages()) - links_visited)
        }

    async def _extract_content(self, page: Page) -> str:
        try:
            html_content = page.content
            extracted_content = extract(html_content)
            logger.info(f"Extracted content length for {page.url}: {len(extracted_content) if extracted_content else 0}")
            return f"---link: {page.url}\n{extracted_content}\n---page-end---\n" if extracted_content else ""
        except Exception as e:
            logger.error(f"Error extracting content from {page.url}: {e}")
            return ""

    @staticmethod
    def _get_relative_path(url: str) -> str:
        parsed_url = urlparse(url)
        return parsed_url.path or '/'

def sanitize_url(url: str) -> str:
    """Sanitize the URL to create a valid folder name."""
    url = re.sub(r'^https?://(www\.)?', '', url)
    return re.sub(r'[^a-zA-Z0-9]', '_', url)

def save_crawl_result(user_id: int, website_url: str, content: str, links_visited: List[str], total_links: int, links_to_visit: List[str]) -> str:
    """Save the crawl result to a file in the user's directory."""
    sanitized_url = sanitize_url(website_url)
    user_dir = os.path.join(settings.MEDIA_ROOT, f'{user_id}', 'Crawled Websites')
    result_dir = os.path.join(user_dir, sanitized_url)
    os.makedirs(result_dir, exist_ok=True)

    file_path = os.path.join(result_dir, f'{sanitized_url}--content.txt')
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(f"Website URL: {website_url}\n\n")
        f.write(f"Links Visited:\n{', '.join(links_visited)}\n\n")
        f.write(f"Total Links: {total_links}\n\n")
        f.write("Content:\n")
        f.write(content)

    return file_path

@shared_task(bind=True, base=AbortableTask)
def crawl_website_task(self, website_url: str, user_id: int):
    logger.info(f"Starting crawl_website_task for URL: {website_url}")
    
    try:
        user = User.objects.get(id=user_id)
    except User.DoesNotExist:
        logger.error(f"User with id {user_id} not found")
        return None

    async_tool = AsyncCrawlWebsiteTool(website_url=website_url)
    
    async def run_crawl():
        return await async_tool._run(website_url)

    try:
        result = asyncio.run(run_crawl())
        logger.info(f"Crawl completed. Total links: {result['total_links']}, Links visited: {len(result['links_visited'])}")
    except Exception as e:
        logger.error(f"Error during crawl: {e}")
        return None

    file_path = save_crawl_result(
        user_id,
        website_url,
        result["content"],
        result["links_visited"],
        result["total_links"],
        result["links_to_visit"]
    )

    crawl_result = CrawlResult.objects.create(
        user=user,
        website_url=website_url,
        content=result["content"],
        links_visited=result["links_visited"],
        total_links=result["total_links"],
        links_to_visit=result["links_to_visit"],
        result_file_path=file_path
    )
    
    logger.info(f"Crawl task completed for URL: {website_url}")
    return crawl_result.id

================
File: apps/common/tools/browser_tools.py
================
import json
import os

import requests
from langchain.tools import tool
from unstructured.partition.html import partition_html
from trafilatura import fetch_url, extract, sitemaps, spider
from summarizer import summarize

class BrowserTools():

  @tool("Scrape and summarize website content")
  def scrape_and_summarize_website(website):
    """Useful to scrape and summarize a website content, just pass a string with
    only the full url, no need for a final slash `/`, eg: https://google.com or https://clearbit.com/about-us"""
    url = f"https://browserless.neuralami.com/content?token={os.environ['BROWSERLESS_API_KEY']}"
    payload = json.dumps({"url": website})
    headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
    print(f"Browsin': {website}")
    response = requests.request("POST", url, headers=headers, data=payload)
    content = extract(response.text)
    summary = summarize(content)
    print(f"summary: '{summary}'")
    content = summary

    return f'\nSummary of {website}: {content}\n'

  @tool("Scrape website content")
  def scrape_website(website):
    """Useful to scrape website content, just pass a string with
    only the full url, no need for a final slash `/`, eg: https://google.com or https://clearbit.com/about-us"""
    url = f"https://browserless.neuralami.com/content?token={os.environ['BROWSERLESS_API_KEY']}"
    payload = json.dumps({"url": website})
    headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
    print(f"Browsin': {website}")
    response = requests.request("POST", url, headers=headers, data=payload)
    content = extract(response.text)
    return f'\nContent of {website}: {content}\n'

================
File: apps/common/tools/crawl_website_search_tool.py
================
from typing import Optional, Type, Any, List

from embedchain.models.data_type import DataType
from pydantic.v1 import BaseModel, Field

from crewai_tools import RagTool

from tools.custom_browserless_loader import CustomBrowserlessLoader
from trafilatura import fetch_url, extract, sitemaps, spider

import os

class FixedCrawlWebsiteSearchToolSchema(BaseModel):
    """Input for CrawlWebsiteTool."""

    search_query: str = Field(
        ...,
        description = "Mandatory search query  you want to use to search a specific website and it's internal pages."
    )
    pass

class CrawlWebsiteSearchToolSchema(FixedCrawlWebsiteSearchToolSchema):
    """Input for CrawlWebsiteTool."""
    website: str = Field(
        ..., 
        description="Mandatory website url to crawl and read content")

class CrawlWebsiteSearchTool(RagTool):
    name: str = "Crawl and search website content"
    description: str = "A tool that can be used to crawl a website and read its content, including content from internal links on the same page."
    args_schema: Type[BaseModel] = CrawlWebsiteSearchToolSchema
    # website: Optional[str] = None
    # api_token: str = ""
    # base_url: str = ""

    def __init__(self, website: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        # self.api_token = os.environ.get("BROWSERLESS_API_KEY")
        # self.base_url = os.environ.get("BROWSERLESS_BASE_URL")
        if website is not None:
            self._crawl_website(website)
            self.description = f"A tool that can be used to crawl {website} and read its content, including content from internal links on the same page."
            self.args_schema = FixedCrawlWebsiteSearchToolSchema

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.WEB_PAGE
        super().add(*args, **kwargs)

    def _crawl_website(self, url: str) -> str:
        links_to_visit = self._get_links_to_visit(url)
        print(f"Reading {len(links_to_visit)} pages.")
        for link in links_to_visit:
            try:
                self.add(link) # Assuming this is a method that adds the link to some data structure
            except Exception as e:
                print(f"Failed to read page at '{link}'. Error: {e}")

        
    def _get_links_to_visit(self, url: str) -> List[str]:
        sitemap_links = sitemaps.sitemap_search(url)
        # if sitemap_links:
        if 0:
            print(f"Found {len(sitemap_links)} pages from sitemap.")
            return sitemap_links
        else:
            _, known_urls = spider.focused_crawler(url, max_seen_urls=10, max_known_urls=50)
            print(f"Found {len(known_urls)} from crawling the website.")
            return list(known_urls)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "website" in kwargs:
            self.add(kwargs["website"])

    def _run(
        self,
        search_query: str,
        **kwargs: Any,
    )-> Any:
        return super()._run(query=search_query)

================
File: apps/common/tools/crawl_website_tool.py
================
import requests
from bs4 import BeautifulSoup
from typing import Optional, Type, Any, List
from pydantic.v1 import BaseModel, Field
from crewai_tools import BaseTool
from urllib.parse import urljoin
from trafilatura import fetch_url, extract, sitemaps, spider

class FixedCrawlWebsiteToolSchema(BaseModel):
    """Input for CrawlWebsiteTool."""
    pass

class CrawlWebsiteToolSchema(FixedCrawlWebsiteToolSchema):
    """Input for CrawlWebsiteTool."""
    website_url: str = Field(..., description="Mandatory website url to crawl and read content")

class CrawlWebsiteTool(BaseTool):
    name: str = "Crawl and read website content"
    description: str = "A tool that can be used to crawl a website and read its content, including content from internal links on the same page."
    args_schema: Type[BaseModel] = CrawlWebsiteToolSchema
    website_url: Optional[str] = None
    headers: Optional[dict] = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
        'Accept-Language': 'en-US,en;q=0.5',
        'Referer': 'https://www.google.com/'
    }

    def __init__(self, website_url: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if website_url is not None:
            self.website_url = website_url
            self.description = f"A tool that can be used to crawl {website_url} and read its content, including content from internal links on the same page."
            self.args_schema = FixedCrawlWebsiteToolSchema

    def _run(self, **kwargs: Any) -> str:
        website_url = kwargs.get('website_url', self.website_url)
        print(f"Processing {website_url}")
        content = self._crawl_website(website_url)
        return content

    def _crawl_website(self, url: str) -> str:
        links_to_visit = self._get_links_to_visit(url)
        content = ""
        print(f"Reading {len(links_to_visit)} pages.")
        for link in links_to_visit:
            page_content = self._fetch_and_extract_content(link)
            content += page_content
        
        return content

    def _get_links_to_visit(self, url: str) -> List[str]:
#        sitemap_links = sitemaps.sitemap_search(url)
        sitemap_links = []
        if sitemap_links:
            print(f"Found {len(sitemap_links)} pages from sitemap.")
            return sitemap_links
        else:
            _, known_urls = spider.focused_crawler(url, max_seen_urls=10, max_known_urls=1000)
            print(f"Found {len(known_urls)} from crawling the website.")
            return list(known_urls)

    def _fetch_and_extract_content(self, url: str) -> str:
        html_content = fetch_url(url)
        if html_content:
            extracted_content = f"---link: {url}\n{extract(html_content,url=url)}\n---page-end---\n"
            return extracted_content or ""
        else:
            return ""

================
File: apps/common/tools/ExaSearchTool.py
================
import os
from exa_py import Exa
from langchain.agents import tool

class ExaSearchTool:
	@tool
	def search(query: str):
		"""Search for a webpage based on the query."""
		return ExaSearchTool._exa().search(f"{query}", use_autoprompt=True, num_results=3)

	@tool
	def find_similar(url: str):
		"""Search for webpages similar to a given URL.
		The url passed in should be a URL returned from `search`.
		"""
		return ExaSearchTool._exa().find_similar(url, num_results=3)

	@tool
	def get_contents(ids: str):
		"""Get the contents of a webpage.
		The ids must be passed in as a list, a list of ids returned from `search`.
		"""
		ids = eval(ids)
		contents = str(ExaSearchTool._exa().get_contents(ids))
		print(contents)
		contents = contents.split("URL:")
		contents = [content[:1000] for content in contents]
		return "\n\n".join(contents)

	def tools():
		return [ExaSearchTool.search, ExaSearchTool.find_similar, ExaSearchTool.get_contents]

	def _exa():
		return Exa(api_key=os.environ["EXA_API_KEY"])

================
File: apps/common/tools/google_suggestions_tool.py
================
from crewai_tools import tool
import requests
import xml.etree.ElementTree as ET

@tool("Google Suggestions")
def google_suggestions_tool(argument: str) -> str:
    """Retrieve Google search suggestions for a given keyword."""
    # Parse the argument to extract the keyword and other parameters
    keyword = argument.split(",")[0].strip()
    country_code = argument.split(",")[1].strip() if "," in argument else "us"

    # Build the Google Search query URL
    search_query = f"is {keyword}"
    google_search_url = f"http://google.com/complete/search?output=toolbar&gl={country_code}&q={search_query}"

    # Call the URL and read the data
    result = requests.get(google_search_url)
    tree = ET.ElementTree(ET.fromstring(result.content))
    root = tree.getroot()

    # Extract the suggestions from the XML response
    suggestions = []
    for suggestion in root.findall('CompleteSuggestion'):
        question = suggestion.find('suggestion').attrib.get('data')
        suggestions.append(question)

    # Return the suggestions as a comma-separated string
    return ", ".join(suggestions)

================
File: apps/common/tools/keyword_tools.py
================
import os
import requests
from typing import Any, Type, List, Dict, Tuple
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool


class KeywordsInput(BaseModel):
    keywords: List[str] = Field(description="list of keywords")
    filters: List[Tuple[str, str, float]] = Field(description="list of filters")


class KeywordsForSiteTool(BaseTool):
    name: str = "Keywords for Site"
    description: str = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"
    args_schema: Type[BaseModel] = BaseModel

    def _run(self, target: str, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live"
        payload = [
            {
                "target": target,
                "language_code": "en",
                "location_code": 2840,
            }
        ]
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        return results["tasks"][0]["result"]

    async def _arun(self, target: str, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordsForSiteTool does not support async")


class KeywordSuggestionsTool(BaseTool):
    name: str = "Keyword Suggestions"
    description: str = "Provides a list of keywords relevant to the target domain. Each keyword is supplied with relevant categories, search volume data for the last month, cost-per-click, competition, and search volume trend values for the past 12 months"
    args_schema: Type[BaseModel] = BaseModel

    def _run(self, seed_keyword: str, filters: List = None, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/dataforseo_labs/google/keyword_suggestions/live"
        payload = [
            {
                "keyword": seed_keyword,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "include_seed_keyword": True,
                "limit": 50,
            }
        ]
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        return results

    async def _arun(self, seed_keyword: str, filters: List = None, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordSuggestionsTool does not support async")


class KeywordIdeasTool(BaseTool):
    name: str = "Keyword Ideas"
    description: str = "Provides search terms that are relevant to the product or service categories of the specified keywords. The algorithm selects the keywords which fall into the same categories as the seed keywords specified"
    args_schema: Type[BaseModel] = KeywordsInput

    def _run(self, keywords: List[str], filters: List[str] = None, **kwargs: Any) -> Any:
        login, password = KeywordTools._dataforseo_credentials()
        cred = (login, password)
        url = "https://api.dataforseo.com/v3/dataforseo_labs/google/keyword_ideas/live"
        payload = [
            {
                "keywords": keywords,
                "location_code": 2840,
                "language_code": "en",
                "include_serp_info": True,
                "limit": 100,
            }
        ]
        payload[0]["order_by"] = "keyword_info.search_volume,desc"
        if filters:
            payload[0]["filters"] = filters
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers, auth=cred)
        response.raise_for_status()  # Raise an exception for non-2xx status codes
        results = response.json()
        return results

    async def _arun(self, keywords: List[str], filters: List[str] = None, **kwargs: Any) -> Any:
        raise NotImplementedError("KeywordIdeasTool does not support async")


class KeywordTools:
    @staticmethod
    def tools():
        return [KeywordsForSiteTool(), KeywordSuggestionsTool(), KeywordIdeasTool()]

    @staticmethod
    def _dataforseo_credentials():
        login = os.environ["DATAFORSEO_LOGIN"]
        password = os.environ["DATAFORSEO_PASSWORD"]
        return login, password

================
File: apps/common/tools/keywords_for_site_tool.py
================
import os
import requests
from crewai import Agent
from langchain.tools import tool

@tool("DataForSEO Keywords for Site")
def keywords_for_site_tool(target: str) -> str:
    """
    Retrieves a list of SEO keywords relevant to the specified site using the DataForSEO API.
    """
    login = os.environ["DATAFORSEO_LOGIN"]
    password = os.environ["DATAFORSEO_PASSWORD"]
    cred = (login, password)
    url = "https://api.dataforseo.com/v3/dataforseo_labs/google/keywords_for_site/live"

    payload = [
        {
            "target": target,
            "language_code": "en",
            "location_code": 2840,
        }
    ]

    headers = {"Content-Type": "application/json"}

    response = requests.post(url, json=payload, headers=headers, auth=cred)
    results = response.json()

    # Process the results and return the desired output
    # ...

    return results

================
File: apps/common/tools/rag_tool.py
================
from abc import ABC, abstractmethod
from typing import Any

from pydantic import BaseModel, Field, model_validator

from crewai_tools.tools.base_tool import BaseTool


class Adapter(BaseModel, ABC):
    class Config:
        arbitrary_types_allowed = True

    @abstractmethod
    def query(self, question: str) -> str:
        """Query the knowledge base with a question and return the answer."""

    @abstractmethod
    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        """Add content to the knowledge base."""


class RagTool(BaseTool):
    class _AdapterPlaceholder(Adapter):
        def query(self, question: str) -> str:
            raise NotImplementedError

        def add(self, *args: Any, **kwargs: Any) -> None:
            raise NotImplementedError

    name: str = "Knowledge base"
    description: str = "A knowledge base that can be used to answer questions."
    summarize: bool = False
    adapter: Adapter = Field(default_factory=_AdapterPlaceholder)
    config: dict[str, Any] | None = None

    @model_validator(mode="after")
    def _set_default_adapter(self):
        if isinstance(self.adapter, RagTool._AdapterPlaceholder):
            from embedchain import App

            from crewai_tools.adapters.embedchain_adapter import EmbedchainAdapter

            app = App.from_config(config=self.config) if self.config else App()
            self.adapter = EmbedchainAdapter(
                embedchain_app=app, summarize=self.summarize
            )

        return self

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        self.adapter.add(*args, **kwargs)

    def _run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        self._before_run(query, **kwargs)

        return f"Relevant Content:\n{self.adapter.query(query)}"

    def _before_run(self, query, **kwargs):
        pass

================
File: apps/common/tools/screenshot_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from django.conf import settings
from urllib.parse import urlparse
import re
"""
You can use the ScreenshotTool by 
 1. importing 'from apps.common.tools.screenshot_tool import screenshot_tool'' and 
 2. calling its run method with a URL as the argument: 'result = screenshot_tool.run(url=url)'
 """

class ScreenshotToolSchema(BaseModel):
    """Input schema for ScreenshotTool."""
    url: str = Field(..., description="The URL of the website to capture a screenshot.")

class ScreenshotTool(BaseTool):
    name: str = "Capture Website Screenshot"
    description: str = "Captures a screenshot of a given website URL."
    args_schema: Type[BaseModel] = ScreenshotToolSchema
    
    def _run(
        self, 
        url: str, 
        **kwargs: Any
    ) -> Any:
        browserless_url = os.getenv('BROWSERLESS_BASE_URL')
        api_key = os.getenv('BROWSERLESS_API_KEY')
        
        if not browserless_url or not api_key:
            return {'error': 'Browserless configuration is missing'}
        
        screenshot_url = f"{browserless_url}/screenshot?token={api_key}"
        
        payload = {
            "url": url,
            "options": {
                "fullPage": False,
                "type": "png"
            }
        }
        
        response = requests.post(screenshot_url, json=payload)
        
        if response.status_code == 200:
            # Generate a sanitized filename based on the URL
            parsed_url = urlparse(url)
            sanitized_name = re.sub(r'[^\w\-_\. ]', '_', parsed_url.netloc + parsed_url.path)
            filename = f"{sanitized_name[:200]}.png"  # Limit filename length
            filepath = os.path.join(settings.MEDIA_ROOT, 'crawled_screenshots', filename)
            # Ensure the directory exists
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            
            # Save the image
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            # Generate the URL for the saved image
            image_url = f"{settings.MEDIA_URL}crawled_screenshots/{filename}"
            
            return {'screenshot_url': image_url}
        else:
            return {'error': f'Failed to get screenshot. Status code: {response.status_code}'}

# Initialize the tool
screenshot_tool = ScreenshotTool()

================
File: apps/common/tools/searxng_tool.py
================
import os
import requests
import json
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool

class SearxNGToolSchema(BaseModel):
    """Input schema for SearxNGSearchTool."""
    search_query: str = Field(..., description="The search query to be used.")

class SearxNGSearchTool(BaseTool):
    name: str = "Search the internet"
    description: str = "Searches the internet displaying titles, links, snippets, engines, and categories."
    args_schema: Type[BaseModel] = SearxNGToolSchema
    search_url: str = "https://search.neuralami.com"
    n_results: int = None
    
    def _run(
		self, 
		search_query: str, 
		**kwargs: Any
		) -> Any:
        payload = {        
            'q': search_query,
            'format': 'json',
            'pageno': '1',
            'language': 'en-US'
        }
        response = requests.get(self.search_url, params=payload)
        if response.ok:
            results = response.json()['results']
            formatted_results = []
            for result in results:
                try:
                    engines = ', '.join(result['engines']) if 'engines' in result else 'N/A'
                    formatted_results.append('\n'.join([
                            f"Title: {result.get('title', 'No Title')}",
                            f"Link: {result.get('url', 'No Link')}",
                            f"Score: {result.get('score', 'No Score')}",
                            f"Snippet: {result.get('content', 'No Snippet')}",
                            f"Engines: {engines}",
                            f"Category: {result.get('category', 'No Category')}",
                            "---"
                    ]))
                except KeyError as e:
                    print(f"Skipping an entry due to missing key: {e}")
                    continue

            content = '\n'.join(formatted_results)
            return f"Search results:\n{content}"
        else:
            return f"Failed to fetch search results. Status code: {response.status_code}"

================
File: apps/common/tools/summarizer.py
================
from langchain.chat_models import ChatOllama
from langchain.prompts.chat import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from langchain_core.output_parsers import StrOutputParser

def summarize(query, base_url="http://192.168.30.100:11434"):
    """
    Generate a response to a user's query using the ChatOllama model.

    Args:
        query (str): The user's query.
        base_url (str, optional): The base URL for the API endpoint. Defaults to "https://api.example.com/v1/chat".

    Returns:
        str: The response to the user's query, formatted in Markdown.
    """
    
    # Initialize the ChatOllama model with the base_url parameter
    llm = ChatOllama(model="mistral", base_url=base_url)

    # Define a chat prompt template
    prompt = ChatPromptTemplate.from_messages([
    ("system", "Extract all relevant facts from the text."),
    ("human", "{query}"),
    ])

    # prompt = ChatPromptTemplate(
    #     messages=[
    #         SystemMessagePromptTemplate(
    #             prompt=("You are a helpful AI assistant for summarization. "
    #                     "Provide a concise summary of the users input, just the summary, no extra commentary.")
    #         ),
    #         HumanMessagePromptTemplate(input_variables=["query"]),
    #     ]
    # )
    chain = prompt | llm | StrOutputParser()
    # Define an output parser to handle Markdown responses
    # Generate a response to the user's query
    response = chain.invoke({'query':query})
    result = response

    return result

================
File: apps/common/tools/user_activity_tool.py
================
from typing import Any, Type
from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from apps.seo_manager.models import UserActivity
import logging

logger = logging.getLogger(__name__)

"""
You can use the UserActivityTool by 
 1. importing 'from apps.common.tools.user_activity_tool import user_activity_tool' and 
 2. calling its run method with the required arguments: 'result = user_activity_tool.run(user=user, category=category, action=action, client=client, details=details)'
"""

class UserActivityToolSchema(BaseModel):
    """Input schema for UserActivityTool."""
    user: Any = Field(..., description="The user performing the action.")
    category: str = Field(..., description="The category of the action.")
    action: str = Field(..., description="The action performed.")
    client: Any = Field(None, description="The client associated with the action (optional).")
    details: str = Field(None, description="Additional details about the action (optional).")

class UserActivityTool(BaseTool):
    name: str = "Log User Activity"
    description: str = "Logs user activity in the system."
    args_schema: Type[BaseModel] = UserActivityToolSchema
    
    def _run(
        self, 
        user: Any,
        category: str,
        action: str,
        client: Any = None,
        details: str = None,
        **kwargs: Any
    ) -> Any:
        try:
            UserActivity.objects.create(
                user=user,
                client=client,
                category=category,
                action=action,
                details=details
            )
            logger.debug(f"User activity logged: {user.username} - {category} - {action} - {client} - {details}")
            return {"success": True, "message": "User activity logged successfully."}
        except Exception as e:
            return {"success": False, "error": str(e)}

# Initialize the tool
user_activity_tool = UserActivityTool()

================
File: apps/common/tools/website_search_tool.py
================
from typing import Any, Optional, Type

from embedchain.models.data_type import DataType
from pydantic.v1 import BaseModel, Field

from ..rag.rag_tool import RagTool


class FixedWebsiteSearchToolSchema(BaseModel):
    """Input for WebsiteSearchTool."""

    search_query: str = Field(
        ...,
        description="Mandatory search query you want to use to search a specific website",
    )


class WebsiteSearchToolSchema(FixedWebsiteSearchToolSchema):
    """Input for WebsiteSearchTool."""

    website: str = Field(
        ..., description="Mandatory valid website URL you want to search on"
    )


class WebsiteSearchTool(RagTool):
    name: str = "Search in a specific website"
    description: str = "A tool that can be used to semantic search a query from a specific URL content."
    args_schema: Type[BaseModel] = WebsiteSearchToolSchema

    def __init__(self, website: Optional[str] = None, **kwargs):
        super().__init__(**kwargs)
        if website is not None:
            self.add(website)
            self.description = f"A tool that can be used to semantic search a query from {website} website content."
            self.args_schema = FixedWebsiteSearchToolSchema

    def add(
        self,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        kwargs["data_type"] = DataType.WEB_PAGE
        super().add(*args, **kwargs)

    def _before_run(
        self,
        query: str,
        **kwargs: Any,
    ) -> Any:
        if "website" in kwargs:
            self.add(kwargs["website"])

================
File: apps/common/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/common/apps.py
================
from django.apps import AppConfig


class CommonConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.common'

================
File: apps/common/browser_tool.py
================
import json
import os

import requests
from langchain.tools import tool
from unstructured.partition.html import partition_html
from trafilatura import fetch_url, extract, sitemaps, spider

class BrowserTools():

  @tool("Scrape website content")
  def scrape_website(website):
    """Useful to scrape website content, just pass a string with
    only the full url, no need for a final slash `/`, eg: https://google.com or https://clearbit.com/about-us"""
    url = f"https://browserless.rijsinghani.us/content?token={os.environ['BROWSERLESS_API_KEY']}"
    payload = json.dumps({"url": website})
    headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}
    print(f"Browsin': {website}")
    response = requests.request("POST", url, headers=headers, data=payload)
    content = extract(response.text)
    return f'\nContent of {website}: {content}\n'

================
File: apps/common/chat_model_handler.py
================
from apps.common.utils import get_llm

from langchain.prompts.chat import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from langchain.schema import AIMessage, HumanMessage, SystemMessage

class ChatModelHandler:
    def __init__(self, model_name: str):
        self.model_name = model_name
        self.chat_model, _ = get_llm(model=model_name, temperature=0.05)
        self.summarize_prompt = self._create_summarize_prompt()

    def _create_summarize_prompt(self) -> ChatPromptTemplate:
        """ Create a prompt template for summarization """
        system_message_prompt = SystemMessagePromptTemplate.from_template(
            "You are an AI assistant that summarizes text while preserving key details, using markdown formatting."
        )
        human_message_prompt = HumanMessagePromptTemplate.from_template("{text}")
        return ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])

    def _generate_messages(self, query: str) -> list:
        """ Generate messages for the chat model based on the query """
        human_message = HumanMessage(content=self.summarize_prompt.format_prompt(text=query).to_messages()[1].content)
        return [human_message]

    def generate_response(self, query: str) -> str:
        """ Generate a response from the chat model based on the query """
        messages = self._generate_messages(query)
        response = self.chat_model(messages)
        return response.content

================
File: apps/common/compression_manager.py
================
from .utils import tokenize, get_llm,  TokenCounterCallback
from langchain.text_splitter import TokenTextSplitter
from langchain.prompts.chat import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import tiktoken
from django.conf import settings
import logging
from langchain.callbacks.manager import CallbackManager
import os
import errno

class CompressionManager:
    def __init__(self, model_name:str, task_instance = None):
        self.tokenizer = tiktoken.get_encoding("cl100k_base")
        #self.llm=get_llm(model_name, temperature=0.0)
        self.model_name = model_name
        self.task_instance = task_instance
        self.llm, self.token_counter_callback = get_llm(model_name, temperature=0.0)

 
    
    def compress_content(self, content: str, max_tokens: int) -> str:
        content_tokens = tokenize(content, self.tokenizer)
        #logging.info(f"Compressing content: {len(content)} chars and {content_tokens} tokens")
        if content_tokens < 20:
            return content,0,0
        else:        
            logging.info(f"Compressing content: {len(content)} chars and {content_tokens} tokens and {max_tokens} max tokens.")
            return self._compress_iteratively(content, max_tokens)

    def _compress_iteratively(self, content: str, max_tokens: int) -> str:
        """ Compress content iteratively until it fits within max_tokens """
        chunk_size = int(max_tokens) // 3 # max_tokens #* 3 # 3x the max_tokens -> if split with chars
        overlap = 25
        text_splitter = TokenTextSplitter(chunk_size=chunk_size, chunk_overlap=overlap)
        logging.info(f"Chunk size: {chunk_size} tokens")
        compress_prompt = ChatPromptTemplate.from_messages([
            ("human", """
- Carefully read through the text and take detailed notes, do not lose any information, but remove content nonrelated to the main topic like promotions, advertisements, calls to action, etc.
- Focus on including every detail 
- long form outline format
- No preambles, post ambles, summaries, just the notes.
- Write at a 16 year old level.
\n\n```{content}```\n\n""")
        ])

        compress_chain = compress_prompt| self.llm | StrOutputParser()

        compressed_chunks = []
        chunks = text_splitter.split_text(content)
        num_chunks = len(chunks)
        iteration = 1

        last_iteration_size = tokenize(content,self.tokenizer)
        path=f'{settings.DOWNLOAD_FOLDER}/summarizer/compress_content-{str(iteration)}'
        if not os.path.exists(path):
            try:
                os.makedirs(os.path.dirname(path))
                logging.info("Created directory for compressed content")
            except FileExistsError:
                pass
        while True:
        #if True: # temporary to only do 1 pass
            #logging.info(f"Compression iteration {iteration} with {len(chunks)} chunks...")

            self.task_instance.update_state(
                state=f'reading content...',
                meta={'current_chunk': 0, 'total_chunks': num_chunks}
            )
            current_chunk = 0
            for chunk in chunks:
                #logging.info(f"Compressing chunk of length {tokenize(chunk,self.tokenizer)} tokens...")
                current_chunk += 1
                compressed_chunk = compress_chain.invoke({'content':chunk})
                #logging.info(f"Compressed chunk: {current_chunk} of {num_chunks} chunks of length {tokenize(compressed_chunk, self.tokenizer)} tokens...")
                self.task_instance.update_state(
                    state='processing',
                    meta={'current_chunk': current_chunk, 'total_chunks': num_chunks}
                )
                with open(f'{settings.DOWNLOAD_FOLDER}/summarizer/chunk-{current_chunk}-{iteration}','w') as f:
                    f.write(chunk)
                with open(f'{settings.DOWNLOAD_FOLDER}/summarizer/compressed-chunk-{current_chunk}-{iteration}','w') as f:
                    f.write(compressed_chunk)
                    
                

                compressed_chunks.append(compressed_chunk)

            compressed_content = "\n".join(compressed_chunks)
            token_count = tokenize(compressed_content, self.tokenizer)
            with open(f'{settings.DOWNLOAD_FOLDER}/summarizer/compress_content-{iteration}','w') as f:
                f.write(compressed_content)
                
            if token_count <= max_tokens or token_count > .75*last_iteration_size:
                break
            else:
                chunks = text_splitter.split_text(compressed_content)
                compressed_chunks = []
                num_chunks= len(chunks)
                iteration += 1
                last_iteration_size = token_count

        input_tokens = self.token_counter_callback.input_tokens
        output_tokens = self.token_counter_callback.output_tokens
        logging.info(f"Compression Input tokens: {input_tokens}, output tokens: {output_tokens}")
        return compressed_content, input_tokens, output_tokens

================
File: apps/common/content_loader.py
================
from .utils import is_pdf_url, is_youtube, is_stock_symbol
from .browser_tool import BrowserTools
from langchain_community.document_loaders import YoutubeLoader, PyMuPDFLoader
import logging
from sec_edgar_downloader import Downloader
import os
from bs4 import BeautifulSoup
from django.conf import settings

logger = logging.getLogger(__name__)

class ContentLoader:
    def __init__(self):
        self.browser_tool = BrowserTools()

    def load_content(self, query: str) -> str:
        """ Load and return content from a URL """
        logging.info("Loading content")
        if len(query) > 500:
            logger.info("Content too long to be anything but text")
            return query 
        if query.startswith("http"):
            url = query
            if is_youtube(url):
                logger.info(f"Loading content from YouTube: {url}")
                return self._load_from_youtube(url)
            elif is_pdf_url(url):
                logger.info(f"Loading content from PDF: {url}")
                return self._load_from_pdf(url)
            else:
                logger.info(f"Loading content from website: {url}")
                return self.browser_tool.scrape_website(url)
        elif is_stock_symbol(query):
                logger.info(f"Loading content from SEC EDGAR: {query}")
                return self._load_from_sec(query)
        else:
            logger.info("Loading as text")
            return query

    def _load_from_youtube(self, url: str) -> str:
        loader = YoutubeLoader.from_youtube_url(url)
        docs = loader.load()
        page_content = "".join(doc.page_content for doc in docs)
        metadata = docs[0].metadata
        # Create output string with metadata and page_content
        output = f"Title: {metadata.get('title')}\n\n"
        output += f"Description: {metadata.get('description')}\n\n"
        output += f"View Count: {metadata.get('view_count')}\n\n"
        output += f"Author: {metadata.get('author')}\n\n"
        output += f"Category: {metadata.get('category')}\n\n"
        output += f"Source: {metadata.get('source')}\n\n"
        output += f"Page Content:\n{page_content}"
        return output

    def _load_from_pdf(self, url: str) -> str:
        # Simulated PDF content loading method
        loader = PyMuPDFLoader(url)
        docs = loader.load()
        return "".join(doc.page_content for doc in docs)

    def _load_from_sec(self, query: str) -> str:
        """ Load and return content from SEC EDGAR """
        # Provide a company name and email address to comply with SEC EDGAR's fair access policy
        company_name = settings.COMPANY_NAME
        email_address = settings.EMAIL_ADDRESS

        # Create a Downloader instance with the specified download folder
        download_folder = settings.DOWNLOAD_FOLDER + "/sec-edgar-files"
        
        if not os.path.exists (download_folder):
            try:
                 os.makedirs (download_folder)
            except FileExistsError:
                pass
                  
        
        dl = Downloader(company_name, email_address, download_folder)

        num_filings_downloaded = dl.get("10-K", query, limit=1, download_details=True)
        logging.info(f"Downloaded {num_filings_downloaded} 10-K filing(s) for {query}.")

        print(f"Downloaded {num_filings_downloaded} 10-K filing(s) for {query}.")

        # Access the downloaded HTML filing
        if num_filings_downloaded > 0:
            logging.info("getting filings dir")
            filings_dir = os.path.join(download_folder, "sec-edgar-filings", query, "10-K")
            filing_subdirs = os.listdir(filings_dir)
            # latest_filing_subdir = sorted(filing_subdirs)[-1]
            # latest_filing_path = os.path.join(filings_dir, latest_filing_subdir, "primary-document.html")
            logging.info("getting latest_filings_subdir")
            latest_filing_subdir = sorted(filing_subdirs)[-1]
            # Convert set to string if necessary
            if not isinstance(latest_filing_subdir, str):
                latest_filing_subdir = str(latest_filing_subdir)
            logging.info("getting latest_filing_path")
            latest_filing_path = os.path.join(filings_dir, latest_filing_subdir, "primary-document.html")

            
            
            with open(latest_filing_path, "r") as f:
                html_content = f.read()
            
            # Parse the HTML content using BeautifulSoup
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # Extract the text content
            text_content = soup.get_text()
            
            return text_content

================
File: apps/common/models.py
================
from django.db import models

# Create your models here.
        
# Don't remove this mark
### ### Below code is Generated ### ###

from django.db import models

class RefundedChoices(models.TextChoices):
	YES = 'YES', 'Yes'
	NO = 'NO', 'No'

class CurrencyChoices(models.TextChoices):
	USD = 'USD', 'USD'
	EUR = 'EUR', 'EUR'
	
class Sales(models.Model):
	ID = models.AutoField(primary_key=True)
	Product = models.TextField(blank=True, null=True)
	BuyerEmail = models.EmailField(blank=True, null=True)
	PurchaseDate = models.DateField(blank=True, null=True)
	Country = models.TextField(blank=True, null=True)
	Price = models.FloatField(blank=True, null=True)
	Refunded = models.CharField(max_length=20, choices=RefundedChoices.choices, default=RefundedChoices.NO)
	Currency = models.CharField(max_length=10, choices=CurrencyChoices.choices, default=CurrencyChoices.USD)
	Quantity = models.IntegerField(blank=True, null=True)

================
File: apps/common/summarization_manager.py
================
from apps.common.utils import get_llm as utils_get_llm  # Rename the import
from .utils import tokenize
from langchain.text_splitter import TokenTextSplitter
from langchain.prompts.chat import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import tiktoken
from django.conf import settings
import logging
from langchain.callbacks.manager import CallbackManager
from apps.common.utils import TokenCounterCallback
from django.utils import timezone
import pprint

logger = logging.getLogger(__name__)

class SummarizationManager:
    def __init__(self, model_name:str, task_instance = None):
        self.tokenizer = tiktoken.get_encoding("cl100k_base")
        #self.llm=get_llm(model_name, temperature=0.0)
        self.model_name = model_name
        self.task_instance = task_instance
        self.llm, self.token_counter_callback = utils_get_llm(model_name, temperature=0.0)  # Use the imported function
        
    def summarize_content(self, content: str) -> str:
        
        content_tokens = tokenize(content, self.tokenizer)
        #logging.info(f'summarize_content {content_tokens} tokens: {content[:100]}')

        if content_tokens < 20:
            return f"##### TITLE: {content}",0,0
        todays_date=timezone.now().strftime("%Y-%m-%d")
        summarize_prompt = ChatPromptTemplate.from_messages([
            ("human", 
            """
            You are an AI assistant designed to perform the initial extraction of key information from various types of content. Your task is to identify and select the most important elements from the given text, creating a concise yet comprehensive foundation for further refinement. Follow these guidelines:
Identify Key Information:
Extract main ideas, critical facts, and essential data points
Include relevant statistics, dates, and figures if present
Capture the core argument or thesis of the content
Maintain Original Structure:
Preserve the logical flow of ideas from the source material
Keep extracted sentences in their original order when possible
Focus on Relevance:
Prioritize information that is central to the main topic
Exclude tangential or less important details
Capture Diverse Elements:
Include a mix of introductory, supporting, and concluding information
Ensure representation of different viewpoints if present in the original text
Preserve Context:
Include enough surrounding information to maintain clarity
Ensure extracted portions can be understood without the full original text
Handle Quotations:
Include direct quotes only if they are crucial to the main points
Properly attribute any extracted quotes
Technical Content:
For specialized topics, retain key technical terms and their explanations
Include critical methodologies or processes if relevant
Avoid Bias:
Extract information objectively, without introducing personal interpretation
Maintain the tone and intent of the original content
Formatting:
form of an engaging, easy to read, well marked down long form blog post like the style of Neil Patel.
Input: {content}                   
            """),
        ])
        logging.info(f"summarize_prompt: {summarize_prompt}")
        summarize_chain = summarize_prompt| self.llm | StrOutputParser()

        self.task_instance.update_state(
            state='summarizing content',
            meta={'current_chunk': 0, 'total_chunks': 1}           
        )

        summary = summarize_chain.invoke({'content':content, 'date':todays_date})

        input_tokens = self.token_counter_callback.input_tokens
        output_tokens = self.token_counter_callback.output_tokens
        #logging.info(f"Summarization Input tokens: {input_tokens}, output tokens: {output_tokens}")
        return summary, input_tokens, output_tokens

================
File: apps/common/summarizer.py
================
from langchain_community.chat_models import ChatOllama
from langchain.prompts.chat import (
    ChatPromptTemplate,
)
from langchain_core.output_parsers import StrOutputParser
import re
import tiktoken

from langchain_community.document_loaders import YoutubeLoader
from .browser_tool import BrowserTools
from django.utils import timezone
from apps.seo_manager.models import SummarizerUsage
from langchain.text_splitter import TokenTextSplitter

class Summarizer:
    def __init__(self):
        self.llm_tokens_sent=0
        self.llm_tokens_r=0
        self.encoder=tiktoken.get_encoding("gpt2")

def is_pdf_url(url: str) -> bool:
    """
    Returns True if the URL points to a PDF, False otherwise.
    """
    try:
        # 1. Check if the URL has a .pdf extension
        parsed_url = urllib.parse.urlparse(url)
        if parsed_url.path.endswith('.pdf'):
            return True

        # 2. Send a HEAD request to the URL to get the Content-Type header
        response = requests.head(url, allow_redirects=True, timeout=5)

        # 3. Check if the Content-Type header is application/pdf
        content_type = response.headers.get('Content-Type')
        if content_type and content_type.startswith('application/pdf'):
            return True

        # 4. Check if the URL returns a PDF MIME type
        mime_type, _ = mimetypes.guess_type(url)
        if mime_type and mime_type.startswith('application/pdf'):
            return True

        # 5. If all else fails, try to download a small chunk of the file and check its magic number
        response = requests.get(url, stream=True, timeout=5)
        chunk = response.raw.read(1024)
        if chunk.startswith(b'%PDF-'):
            return True

        # If none of the above checks pass, it's likely not a PDF
        return False

    except requests.exceptions.RequestException as e:
        # Handle requests exceptions (e.g. connection errors, timeouts)
        print(f"Error checking URL: {e}")
        return False

    except Exception as e:
        # Handle any other unexpected exceptions
        print(f"Error checking URL: {e}")
        return False



    def compress_content(self, content, llm , task_instance, max_tokens):
        """
        Compress the given content using the provided compression chain.
        The content is split into chunks with an overlap of 100 characters, and each chunk is compressed.
        The compressed chunks are then combined, and the process is repeated if the total token count is still greater than the max_tokens.

        Args:
            content (str): The content to be compressed.
            compression_chain: The chain to use for compressing the content.
            max_tokens (int): The maximum number of tokens allowed for the compressed content.

        Returns:
            str: The compressed content.
        """
        tokenizer = tiktoken.get_encoding("gpt2")
        
        chunk_size = max_tokens*3
        overlap = round(chunk_size*.1)

        compressed_content = ""

        compress_prompt = ChatPromptTemplate.from_messages([
            ("system",
            """
            <INSTRUCTION>
            Process the text in the following guidelines, no preamble or postamble:
            <GUIDELINES>
            - preserve all details
            - use markdown
            - do not summarize
            - remove redundancies, fluff, filler content, advertisements, sponsors, and other distracting elements    
            </GUIDELINES>
            """),
            ("human", "<TEXT>{query}</TEXT>"),
        ])

        text_splitter = TokenTextSplitter(chunk_size=chunk_size, chunk_overlap=overlap)

        chunks = text_splitter.split_text(content)
        compress_chain = compress_prompt | llm | StrOutputParser()
        i=0
        chunks = [content[i:i+chunk_size] for i in range(0, len(content), chunk_size-overlap)]
        continue_compression = True
        last_chunk_size=len(chunks)
        while continue_compression:
            i+=1
            compressed_chunks = []
            last_token_size=0
            num_chunks = len(chunks)
            last_chunk_size=num_chunks
            print(f"Compressing iteration {i} with {num_chunks} chunks...")
            j=0
            task_instance.update_state(
                state='start compressing',
                meta={'current_chunk': j, 'total_chunks': num_chunks}
            )
            for chunk in chunks:
                j+=1
                print(f"Compressing chunk {j} of {num_chunks}...")
                compressed_chunk = compress_chain.invoke({'query': chunk})
                compressed_chunks.append(compressed_chunk)
                self.llm_tokens_sent += len(self.encoder.encode(compress_prompt.format(query=chunk), disallowed_special=()))
                self.llm_tokens_r += len(self.encoder.encode(compressed_chunk))
                print (f"LLM tokens received: {len(self.encoder.encode(compressed_chunk))}")
                # Send progress update
                task_instance.update_state(
                    state='compressing',
                    meta={'current_chunk': j, 'total_chunks': num_chunks}
                )

            compressed_content = "\n".join(compressed_chunks)
            print(compressed_content)
            compressed_tokens = tokenizer.encode(compressed_content, disallowed_special=())
            compressed_token_count = len(compressed_tokens)
            print(f"The compressed content has {compressed_token_count} tokens.")

            if compressed_token_count <= max_tokens:
                continue_compression = False
            else:
                chunks = text_splitter.split_text(compressed_content)
                print(f"Splitting into {len(chunks)} chunks. Last chunk size: {last_chunk_size}")
                if len(chunks) >= last_chunk_size: # if compression isn't getting much smaller then stop
                    continue_compression= False 

        return compressed_content

    def summarize(self, query, user, task_instance, base_url="http://192.168.30.100:11434"):
        """
        Generate a response to a user's query using the ChatOllama model.

        Args:
            query (str): The user's query (text or URL).
            base_url (str, optional): The base URL for the API endpoint. Defaults to "https://api.example.com/v1/chat".

        Returns:
            str: The response to the user's query, formatted in Markdown.
        """
        
        max_tokens=8192

        start_time = timezone.now()
        model = 'wizardlm2:7b-q8_0' # very very good
        #model = 'qwen:1.8b'        # bad
        #model = 'phi:latest'        # bad
        #model = 'openhermes:latest' # bad
        #model = 'mistral:7b-instruct-v0.2-q6_K' # ok
        #model = 'nous-hermes2-mixtral:8x7b-dpo-q4_K_M' # good
        #model = 'gemma:7b-instruct-v1.1-q8_0'  # worth investigating more, but not bad
        #model = 'adrienbrault/nous-hermes2pro:Q8_0' # not good
        #model = 'command-r:latest'
        #model = 'eramax/senku:latest' # bad
        #model = 'yi:6b-200k-fp16' # not enough vram
        #model = 'yi:6b-chat-fp16' # only outputted chinese -> didn't pursue
        #model = 'qwen:32b' # not great
        #model = 'dolphin-llama3:8b-v2.9-q8_0'
        #model = 'phi3:3.8b-mini-instruct-4k-fp16' # not that good
        #model = 'llama3:8b-instruct-fp16' # broken
        #model = 'dolphin-llama3:latest' # not that good
        #model = 'mixtral:8x7b-instruct-v0.1-q4_K_M'
        #model = 'herald/phi3-128k'


        # Initialize the ChatOllama model with the base_url parameter
        llm = ChatOllama(model=model, base_url=base_url, temperature=0.4, num_ctx=max_tokens)
        #    llm = ChatOllama(model="llama3:latest", base_url=base_url, num_ctx="8000",)

        # Define the prompt templates
        summarize_prompt = ChatPromptTemplate.from_messages([
            ("system",
            """
            <INSTRUCTION>
            Process the text in the following guidelines, no preamble or postamble:
            <GUIDELINES>
            - preserve all details
            - use markdown
            - do not summarize
            - remove redundancies, fluff, filler content, advertisements, sponsors, and other distracting elements    
            </GUIDELINES>
            </INSTRUCTION>
            """),
            ("human", """<TEXT>{query}\n</TEXT>
            <EXPECTED OUTPUT>
            "##### Title: create a pithy and insightful title\n
            ##### Date: provide the date if cited in source material, else 'not indicated'\n
            ##### Author(s): list the author(s) of the content(if available), else 'not indicated'\n
            ###### TLDR: write a concise, pithy summary of the content and it's conclusions\n\n

            """),
        ])

        summarize_chain = summarize_prompt | llm | StrOutputParser()

        # Check if the input is a URL
        url_pattern = r'^https?://\S+$'
        if re.match(url_pattern, query):
            # Scrape the website content
            youtube_regex = r"(?:https?:\/\/)?(?:www\.)?youtu(?:\.be|be\.com)\/(?:watch\?v=)?([\w-]{11})"
            match = re.match(youtube_regex, query)
            if match:
                # Use langchain YoutubeLoader to get the transcription
                loader = YoutubeLoader.from_youtube_url(query)
                docs = loader.load()

                content = ""
                for doc in docs:
                    content += doc.page_content + "\n"  # Combine page contents

            else: 
                if self.is_pdf_url(query):
                    pdfloader = PDFDocumentLoad()
                    docs = pdfloader.load_from_url(query)
                    content = ""
                    for doc in docs:
                        content += doc.page_content + "\n"  # Combine page contents
                else:
                    # assume it's text
                    browser_tools = BrowserTools()
                    content = browser_tools.scrape_website(query)

            #print("scraped content: ", content)
        else:
            # Summarize the provided text
            content = query

        tokenizer = tiktoken.get_encoding("gpt2")
        print(f"The content precompression has {len(tokenizer.encode(content,disallowed_special=()))} tokens.")
        cleaned_content=""
        cleaned_content = self.summarize_nlp(content)
        if cleaned_content:
            content = cleaned_content
        #print(f"cleaned content: {content}")
#        print(f"The content is:\n{content}")
        # Count the tokens in the content using tiktoken
        tokens = tokenizer.encode(content, disallowed_special=())
        token_count = len(tokens)

        print(f"The content now has {len(tokenizer.encode(content,disallowed_special=()))} tokens.")

        # Compress the content if it's greater than max tokens
        if token_count > max_tokens:
            compressed_content = self.compress_content(content, llm, task_instance, max_tokens)

            token_count = len(tokenizer.encode(compressed_content,disallowed_special=()))
            print(f"The compressed_content has {token_count} tokens.")
            # Update state to indicate summarization
            content=compressed_content

        task_instance.update_state(
            state='summarizing',
            meta={'current_chunk': 1,  'total_chunks': 1}
        )

        response = summarize_chain.invoke({'query': content})

        result = response

        end_time = timezone.now()
        duration = end_time - start_time
        
        #save the usage data to the database
        usage = SummarizerUsage.objects.create(
            user=user,
            query=query,
            response=result,
            duration = duration,
            content_token_size=token_count,
            content_character_count=len(content),
            total_input_tokens=self.llm_tokens_sent,
            total_output_tokens=self.llm_tokens_r,
            model_used = model
        )
        usage.save()
        return result

================
File: apps/common/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/common/utils.py
================
import requests
import mimetypes
import urllib.parse
import re
from django.core.cache import cache
import logging
import tiktoken
from django.conf import settings
from langchain_openai import ChatOpenAI
from langchain_community.chat_models import ChatLiteLLM
from langchain.callbacks.base import BaseCallbackHandler
from langchain.callbacks.manager import CallbackManager
import openai
from langchain.schema import HumanMessage
from markdown_it import MarkdownIt
from bs4 import BeautifulSoup

# Initialize markdown-it instance at module level for reuse
md = MarkdownIt({"html": True})

class TokenCounterCallback(BaseCallbackHandler):
    def __init__(self, tokenizer):
        self.llm = None
        self.input_tokens = 0
        self.output_tokens = 0
        self.tokenizer = tokenizer

    def on_llm_start(self, serialized, prompts, **kwargs):
        for prompt in prompts:
            self.input_tokens += len(self.tokenizer.encode(prompt, disallowed_special=()))

    def on_llm_end(self, response, **kwargs):
        for generation in response.generations:
            for result in generation:
                self.output_tokens += len(self.tokenizer.encode(result.text, disallowed_special=()))

def get_models():
    data = ""
    url = f'{settings.API_BASE_URL}/models'
    headers = {'accept': 'application/json', 'Authorization': f'Bearer {settings.LITELLM_MASTER_KEY}'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()['data']
        # Sort the data by 'id' in ascending order
        data.sort(key=lambda x: x['id'])
        return [item['id'] for item in data]
    return []  # Return empty list instead of None

def get_llm(model_name:str, temperature=0.0):
    tokenizer=tiktoken.get_encoding("cl100k_base")
    token_counter_callback = TokenCounterCallback(tokenizer)
     
    callback_manager = CallbackManager([token_counter_callback])  

    llm = ChatOpenAI(model=model_name, 
                     base_url=settings.API_BASE_URL, 
                     api_key=settings.LITELLM_MASTER_KEY, 
                     temperature=temperature, 
                     callbacks=callback_manager)

    token_counter_callback.llm = llm
    return llm, token_counter_callback


def is_pdf_url(url: str) -> bool:
    """Determine if the given URL points to a PDF document."""
    try:
        parsed_url = urllib.parse.urlparse(url)
        if parsed_url.path.endswith('.pdf'):
            return True
        response = requests.head(url, allow_redirects=True, timeout=5)
        content_type = response.headers.get('Content-Type')
        if content_type and content_type.startswith('application/pdf'):
            return True
        mime_type, _ = mimetypes.guess_type(url)
        if mime_type and mime_type.startswith('application/pdf'):
            return True
        response = requests.get(url, stream=True, timeout=5)
        return response.raw.read(1024).startswith(b'%PDF-')
    except requests.exceptions.RequestException:
        return False

def is_youtube(url: str) -> bool:
    return "youtube.com" in url or "youtu.be" in url

def is_stock_symbol(query):
    url = f'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords={query}&apikey={settings.ALPHA_VANTAGE_API_KEY}'
    r=requests.get(url)
    data = r.json()
    print(data)
    if 'bestMatches' in data and len(data['bestMatches']) > 0:
        return True
    else:
        return False

def tokenize(text: str, tokenizer = "cl100k_base") -> int:
    """ Helper function to tokenize text and return token count """
    #logging.info(f'tokenize text: {text[:50]}...')
    return len(tokenizer.encode(text, disallowed_special=()))

def extract_top_level_domain(url):
  """Extracts only the top-level domain (TLD) from a URL, handling various cases.

  Args:
    url: The URL to extract the TLD from.

  Returns:
    The top-level domain (TLD) as a string (without protocol or subdomains), 
    or None if the TLD cannot be determined or if None is passed in.
  """
  if url is None:
    return None  # Handle None input explicitly

  try:
    # Remove protocol (http://, https://)
    url = url.split("//")[-1]  
    # Remove trailing slash
    url = url.rstrip("/")
    # Split into parts and extract TLD using the previous logic
    url_parts = url.split(".")
    if len(url_parts) > 1 and url_parts[-1] in {"com", "org", "net", "edu", "gov", "mil"}:
      return url_parts[-2]  # Return TLD (e.g., sld.com, sld.org)
    elif len(url_parts) > 2 and url_parts[-3] in {"co", "ac"}:
      return ".".join(url_parts[-2:])  # Handle "sld.co.uk", etc.
    else:
      return url_parts[-1]  # Default to last part 
  except IndexError:
    return None 

def normalize_url(url):
    """Normalize a single URL"""
    url = url.lower()
    parsed_url = urllib.parse.urlparse(url)
    if parsed_url.port == 80 and parsed_url.scheme == 'http':
        parsed_url = parsed_url._replace(netloc=parsed_url.netloc.split(':')[0])
    url = urllib.parse.urlunparse(parsed_url)
    url = url.rstrip('/')
    url = urllib.parse.urldefrag(url)[0]
    url = urllib.parse.unquote(url)
    return url

def compare_urls(url1, url2):
    """Compare two URLs after normalizing them"""
    url1 = normalize_url(url1)
    url2 = normalize_url(url2)
    return url1 == url2

def format_message(content):
    if not content:
        return ''
    
    # Process ANSI color codes
    color_map = {
        '\x1b[1m': '<strong>',
        '\x1b[0m': '</strong>',
        '\x1b[93m': '<span class="text-warning">',  # Yellow
        '\x1b[92m': '<span class="text-success">',  # Green
        '\x1b[95m': '<span class="text-info">',     # Light Blue (for magenta)
        '\x1b[91m': '<span class="text-danger">',   # Red
        '\x1b[94m': '<span class="text-primary">',  # Blue
    }

    # Replace color codes with Bootstrap classes
    for code, html in color_map.items():
        content = content.replace(code, html)

    # Remove any remaining ANSI escape sequences
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    content = ansi_escape.sub('', content)

    # Convert Markdown to HTML using markdown-it
    html_content = md.render(content)

    # Parse the HTML with BeautifulSoup
    soup = BeautifulSoup(html_content, 'html.parser')

    # Add Bootstrap classes to elements
    for tag in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):
        tag['class'] = tag.get('class', []) + ['mt-3', 'mb-2']
    
    for tag in soup.find_all('p'):
        tag['class'] = tag.get('class', []) + ['mb-2']
    
    for tag in soup.find_all('ul', 'ol'):
        tag['class'] = tag.get('class', []) + ['pl-4']
    
    for tag in soup.find_all('code'):
        tag['class'] = tag.get('class', []) + ['bg-light', 'p-1', 'rounded']

    # Convert back to string
    formatted_content = str(soup)

    # Ensure all spans are closed
    open_spans = formatted_content.count('<span')
    close_spans = formatted_content.count('</span>')
    if open_spans > close_spans:
        formatted_content += '</span>' * (open_spans - close_spans)

    return formatted_content

================
File: apps/common/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: apps/crawl_website/templates/crawl_website/index.html
================
{% extends "layouts/base.html" %}

{% block title %} Crawl Website {% endblock %}

<!-- Specific Page CSS goes HERE  -->
{% block stylesheets %}
<style>
    .progress {
        height: 20px;
    }
    .list-group-item {
        padding: 0.5rem 1rem;
    }
    #visitors-chart-container {
        height: 300px;
        position: relative;
    }
    .timeline-block {
        margin-bottom: 1rem;
    }
    .timeline-step {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 0.75rem;
    }
    .timeline-content {
        flex: 1;
    }
</style>
{% endblock stylesheets %}

{% block content %}

    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-12 col-xl-4">
                <div class="card h-100">
                    <div class="card-header pb-0 p-3">
                        <h6 class="mb-0">Site to crawl</h6>
                    </div>
                    <div class="card-body p-3">
                        <form id="crawl-form">
                            <div class="mb-3">
                                <label for="url" class="form-label">URL to crawl</label>
                                <input type="url" class="form-control" id="url" name="url" placeholder="https://example.com" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Initiate Crawl</button>
                        </form>
                        <div id="screenshot-container" class="mt-3">
                            <!-- Screenshot will be displayed here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-xl-4">
                <div class="card h-100">
                    <div class="card-header pb-0 p-3">
                        <h6 class="mb-0">Crawl Progress</h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="progress mb-3">
                            <div id="crawl-progress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                        </div>
                        <div id="total-pages" class="mb-3">
                            <h4>Total Pages: <span id="total-pages-count">0</span></h4>
                            <p>Links Visited: <span id="links-visited">0</span> (<span id="percent-complete">0%</span>)</p>
                        </div>
                        <div id="visitors-chart-container">
                            <canvas id="visitors-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-xl-4">
                <div class="card h-100">
                    <div class="card-header pb-0">
                        <h6 class="mb-0">Links to Visit</h6>
                        <p class="text-sm">
                            <i class="fa fa-arrow-up text-success" aria-hidden="true"></i>
                            <span class="font-weight-bold">Crawl Progress</span>
                        </p>
                    </div>
                    <div class="card-body p-3">
                        <div class="timeline timeline-one-side" id="links-to-visit" style="max-height: 400px; overflow-y: auto;">
                            <!-- Links to visit will be displayed here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% endblock content %}

<!-- Specific Page JS goes HERE  -->
{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let chart;
let taskId;
const MAX_DATA_POINTS = 20;

document.getElementById('crawl-form').addEventListener('submit', function(e) {
    e.preventDefault();
    const url = document.getElementById('url').value;
    if (url) {
        fetch('/crawl_website/initiate_crawl/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'
            },
            body: JSON.stringify({url: url})
        })
        .then(response => response.json())
        .then(data => {
            if (data.task_id) {
                taskId = data.task_id;
                updateProgress();
            }
        })
        .catch(error => console.error('Error:', error));
    }
});

function updateProgress() {
    fetch(`/crawl_website/get_crawl_progress/?task_id=${taskId}`)
        .then(response => response.json())
        .then(data => {
            const progressBar = document.getElementById('crawl-progress');
            const totalPagesCount = document.getElementById('total-pages-count');
            const linksVisited = document.getElementById('links-visited');
            const percentComplete = document.getElementById('percent-complete');

            const current = data.current;
            const total = data.total;
            const percentCompleteValue = total > 0 ? Math.round((current / total) * 100) : 0;

            progressBar.style.width = `${percentCompleteValue}%`;
            progressBar.setAttribute('aria-valuenow', percentCompleteValue);
            progressBar.textContent = `${percentCompleteValue}%`;

            totalPagesCount.textContent = total;
            linksVisited.textContent = current;
            percentComplete.textContent = `${percentCompleteValue}%`;

            updateChart(current, total);
            updateLinksList(data.links_to_visit);

            if (data.state !== 'SUCCESS') {
                setTimeout(updateProgress, 5000);
            }
        })
        .catch(error => console.error('Error:', error));
}

function updateChart(current, total) {
    if (!chart) {
        const ctx = document.getElementById('visitors-chart').getContext('2d');
        chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Percent Complete',
                    data: [],
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        title: {
                            display: true,
                            text: 'Percent Complete'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                },
                animation: {
                    duration: 0
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    const percentComplete = total > 0 ? Math.round((current / total) * 100) : 0;
    chart.data.labels.push(new Date().toLocaleTimeString());
    chart.data.datasets[0].data.push(percentComplete);

    // Limit the number of data points
    if (chart.data.labels.length > MAX_DATA_POINTS) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
    }

    chart.update();
}

function updateLinksList(links) {
    const linksList = document.getElementById('links-to-visit');
    linksList.innerHTML = '';
    links.forEach((link, index) => {
        const timelineBlock = document.createElement('div');
        timelineBlock.className = 'timeline-block mb-3';
        timelineBlock.innerHTML = `
            <span class="timeline-step">
                <i class="ni ni-bell-55 text-success text-gradient"></i>
            </span>
            <div class="timeline-content">
                <h6 class="text-dark text-sm font-weight-bold mb-0">${link}</h6>
                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">Link ${index + 1}</p>
            </div>
        `;
        linksList.appendChild(timelineBlock);
    });
}

document.getElementById('url').addEventListener('change', function() {
    const url = this.value;
    if (url) {
        fetch('/crawl_website/get_screenshot/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'
            },
            body: JSON.stringify({url: url})
        })
        .then(response => response.json())
        .then(data => {
            if (data.screenshot_url) {
                const img = document.createElement('img');
                img.src = data.screenshot_url;
                img.className = 'img-fluid';
                document.getElementById('screenshot-container').innerHTML = '';
                document.getElementById('screenshot-container').appendChild(img);
            }
        })
        .catch(error => console.error('Error:', error));
    }
});
</script>
{% endblock extra_js %}

================
File: apps/crawl_website/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/crawl_website/apps.py
================
from django.apps import AppConfig


class CrawlWebsiteConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.crawl_website'

================
File: apps/crawl_website/models.py
================
from django.db import models
from django.contrib.auth.models import User

class CrawlResult(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    website_url = models.URLField()
    content = models.TextField()
    links_visited = models.JSONField()
    total_links = models.IntegerField()
    links_to_visit = models.JSONField()
    result_file_path = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Crawl Result for {self.website_url} by {self.user.username}"

    class Meta:
        ordering = ['-created_at']

================
File: apps/crawl_website/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/crawl_website/urls.py
================
from django.urls import path
from . import views

app_name = 'crawl_website'

urlpatterns = [
    path('', views.index, name='index'),
    path('initiate_crawl/', views.initiate_crawl, name='initiate_crawl'),
    path('get_crawl_progress/', views.get_crawl_progress, name='get_crawl_progress'),
    path('get_crawl_result/<str:task_id>/', views.get_crawl_result, name='get_crawl_result'),
    path('get_screenshot/', views.get_screenshot, name='get_screenshot'),
    path('download_crawl_result/<int:result_id>/', views.download_crawl_result, name='download_crawl_result'),
]

================
File: apps/crawl_website/views.py
================
import json
import logging
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from celery.result import AsyncResult
from apps.common.tools.async_crawl_website_tool import crawl_website_task
from django.contrib.auth.decorators import login_required
from apps.crawl_website.models import CrawlResult
from apps.common.tools.screenshot_tool import screenshot_tool
from django.contrib import messages
from django.urls import reverse

logger = logging.getLogger(__name__)

@login_required
def index(request):
    logger.debug("Rendering index page for crawl_website")
    return render(request, 'crawl_website/index.html')

@csrf_exempt
@login_required
def initiate_crawl(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            url = data.get('url')
            
            if not url:
                return JsonResponse({'error': 'URL is required'}, status=400)
            
            # Initiate the Celery task
            task = crawl_website_task.delay(url, request.user.id)
            
            return JsonResponse({'task_id': task.id})
        except Exception as e:
            logger.exception(f"An error occurred: {str(e)}")
            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)
    
    return JsonResponse({'error': 'Invalid request method'}, status=405)

@csrf_exempt
@login_required
def get_crawl_progress(request):
    if request.method == 'GET':
        task_id = request.GET.get('task_id')
        if not task_id:
            return JsonResponse({'error': 'Task ID is required'}, status=400)
        
        result = AsyncResult(task_id)
        if result.state == 'PENDING':
            response = {
                'state': result.state,
                'current': 0,
                'total': 0,
                'status': 'Pending...',
                'links_to_visit': []
            }
        elif result.state == 'PROGRESS':
            response = {
                'state': result.state,
                'current': result.info.get('current', 0),
                'total': result.info.get('total', 0),
                'status': result.info.get('status', ''),
                'links_to_visit': result.info.get('links_to_visit', [])
            }
        elif result.state == 'SUCCESS':
            crawl_result = CrawlResult.objects.get(id=result.result)
            response = {
                'state': result.state,
                'current': len(crawl_result.links_visited),
                'total': crawl_result.total_links,
                'status': 'Completed',
                'links_to_visit': crawl_result.links_to_visit
            }
        else:
            response = {
                'state': result.state,
                'current': 0,
                'total': 1,
                'status': str(result.info),
                'links_to_visit': []
            }
        return JsonResponse(response)
    
    return JsonResponse({'error': 'Invalid request method'}, status=405)

@csrf_exempt
@login_required
def get_crawl_result(request, task_id):
    try:
        result = AsyncResult(task_id)
        if result.state == 'SUCCESS':
            crawl_result = CrawlResult.objects.get(id=result.result)
            file_url = reverse('download_crawl_result', kwargs={'result_id': crawl_result.id})
            messages.success(request, f'Crawl completed! <a href="{file_url}">Download result</a>')
            return JsonResponse({
                'website_url': crawl_result.website_url,
                'links_visited': crawl_result.links_visited,
                'total_links': crawl_result.total_links,
                'links_to_visit': crawl_result.links_to_visit,
                'result_file_path': crawl_result.result_file_path,
                'file_url': file_url
            })
        else:
            return JsonResponse({'error': 'Task not completed yet'}, status=400)
    except CrawlResult.DoesNotExist:
        return JsonResponse({'error': 'Crawl result not found'}, status=404)
    except Exception as e:
        logger.exception(f"An error occurred: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@login_required
def download_crawl_result(request, result_id):
    try:
        crawl_result = CrawlResult.objects.get(id=result_id, user=request.user)
        file_path = crawl_result.result_file_path
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                response = HttpResponse(file.read(), content_type='text/plain')
                response['Content-Disposition'] = f'attachment; filename="{os.path.basename(file_path)}"'
                return response
        else:
            messages.error(request, 'File not found.')
            return redirect('crawl_website:index')
    except CrawlResult.DoesNotExist:
        messages.error(request, 'Crawl result not found.')
        return redirect('crawl_website:index')

@csrf_exempt
@login_required
def get_screenshot(request):
    logger.debug("get_screenshot function called")
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            url = data.get('url')
            logger.debug(f"Received URL: {url}")
            
            if not url:
                logger.error("URL is required")
                return JsonResponse({'error': 'URL is required'}, status=400)
            
            result = screenshot_tool.run(url=url)
            
            if 'error' in result:
                logger.error(f"Failed to get screenshot: {result['error']}")
                return JsonResponse({'error': result['error']}, status=500)
            
            logger.debug(f"Screenshot saved: {result['screenshot_url']}")
            return JsonResponse({'screenshot_url': result['screenshot_url']})
        except Exception as e:
            logger.exception(f"An error occurred: {str(e)}")
            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)
    
    logger.error("Invalid request method")
    return JsonResponse({'error': 'Invalid request method'}, status=405)

================
File: apps/file_manager/templatetags/file_extension.py
================
from django import template
import os
from urllib.parse import quote

register = template.Library()

@register.filter
def file_extension(value):
    _, extension = os.path.splitext(value)
    return extension.lower()


@register.filter
def encoded_file_path(path):
    return path.replace('/', '%slash%')

@register.filter
def encoded_path(path):
    return path.replace('\\', '/')

================
File: apps/file_manager/templatetags/file_manager_extras.py
================
from django import template
import os

register = template.Library()

@register.filter
def basename(value):
    return os.path.basename(value)

================
File: apps/file_manager/templatetags/info_value.py
================
from django import template
from apps.file_manager.models import FileInfo

register = template.Library()

@register.filter
def info_value(path):
    file_info = FileInfo.objects.filter(path=path)
    if file_info.exists():
        return file_info.first().info
    else:
        return ""

================
File: apps/file_manager/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/file_manager/apps.py
================
from django.apps import AppConfig


class FileManagerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.file_manager'

================
File: apps/file_manager/models.py
================
from django.db import models

# Create your models here.


class FileInfo(models.Model):
    path = models.URLField()
    info = models.CharField(max_length=255)

    def __str__(self):
        return self.path

================
File: apps/file_manager/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/file_manager/urls.py
================
from django.urls import path, re_path
from apps.file_manager import views

urlpatterns = [
    re_path(r'^file-manager(?:/(?P<directory>.*?)/?)?$', views.file_manager, name='file_manager'),
    re_path(r'^delete-file/(?P<file_path>.+)/$', views.delete_file, name='delete_file'),
    re_path(r'^download-file/(?P<file_path>.+)/$', views.download_file, name='download_file'),
    path('upload-file/', views.upload_file, name='upload_file'),
    re_path(r'^save-info/(?P<file_path>.+)/$', views.save_info, name='save_info'),
]

================
File: apps/file_manager/views.py
================
import os
import csv
import uuid
import zipfile
import tempfile
from django.shortcuts import render, redirect
from django.http import HttpResponse, Http404
from django.conf import settings
from .models import *
from django.contrib.auth.decorators import login_required
from django.urls import reverse
from urllib.parse import unquote

def convert_csv_to_text(csv_file_path):
    with open(csv_file_path, 'r') as file:
        reader = csv.reader(file)
        rows = list(reader)

    text = ''
    for row in rows:
        text += ','.join(row) + '\n'

    return text

def get_directory_contents(directory_path, user_id):
    contents = []
    if not os.path.exists(directory_path):
        return contents
    
    for name in os.listdir(directory_path):
        path = os.path.join(directory_path, name)
        rel_path = os.path.relpath(path, os.path.join(settings.MEDIA_ROOT, user_id))
        if os.path.isdir(path):
            contents.append({
                'name': name,
                'type': 'directory',
                'path': rel_path
            })
        else:
            _, extension = os.path.splitext(name)
            contents.append({
                'name': name,
                'size' : get_file_size(path),
                'type': 'file',
                'path': rel_path,
                'extension': extension[1:].lower()  # Remove the dot and convert to lowercase
            })

    return sorted(contents, key=lambda x: (x['type'] == 'file', x['name'].lower()))

@login_required(login_url='/accounts/login/basic-login/')
def save_info(request, file_path):
    path = unquote(file_path)
    if request.method == 'POST':
        FileInfo.objects.update_or_create(
            path=path,
            defaults={
                'info': request.POST.get('info')
            }
        )
    
    return redirect(request.META.get('HTTP_REFERER'))

def get_breadcrumbs(request):
    path_components = [unquote(component) for component in request.path.split("/") if component]
    breadcrumbs = []
    url = ''

    for component in path_components:
        url += f'/{component}'
        if component == "file-manager":
            component = "media"

        breadcrumbs.append({'name': component, 'url': url})

    return breadcrumbs

def generate_nested_directory(root_path, current_path):
    directory = {}
    for name in os.listdir(current_path):
        path = os.path.join(current_path, name)
        rel_path = os.path.relpath(path, root_path)
        if os.path.isdir(path):
            directory[rel_path] = {
                'type': 'directory',
                'contents': generate_nested_directory(root_path, path)
            }
        else:
            directory[rel_path] = {
                'type': 'file'
            }
    return directory

@login_required(login_url='/accounts/login/illustration-login/')
def file_manager(request, directory=''):
    user_id = str(request.user.id)
    media_path = os.path.join(settings.MEDIA_ROOT, user_id)

    if not os.path.exists(media_path):
        os.makedirs(media_path)
        
    directory_structure = generate_nested_directory(media_path, media_path)
    
    selected_directory_path = os.path.join(media_path, unquote(directory))
    contents = get_directory_contents(selected_directory_path, user_id)

    breadcrumbs = get_breadcrumbs(request)

    context = {
        'directory': directory_structure, 
        'contents': contents,
        'selected_directory': directory,
        'segment': 'file_manager',
        'parent': 'apps',
        'breadcrumbs': breadcrumbs,
        'user_id': user_id,
    }
    return render(request, 'pages/apps/file-manager.html', context)

@login_required(login_url='/accounts/login/basic-login/')
def delete_file(request, file_path):
    user_id = str(request.user.id)
    path = unquote(file_path)
    absolute_file_path = os.path.join(settings.MEDIA_ROOT, user_id, path)
    if os.path.exists(absolute_file_path):
        if os.path.isdir(absolute_file_path):
            import shutil
            shutil.rmtree(absolute_file_path)
        else:
            os.remove(absolute_file_path)
        print("File/Directory deleted", absolute_file_path)
    return redirect(request.META.get('HTTP_REFERER'))

@login_required(login_url='/accounts/login/basic-login/')
def download_file(request, file_path):
    user_id = str(request.user.id)
    path = unquote(file_path)
    absolute_file_path = os.path.join(settings.MEDIA_ROOT, user_id, path)
    if os.path.exists(absolute_file_path):
        if os.path.isdir(absolute_file_path):
            # Create a temporary zip file
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                with zipfile.ZipFile(temp_file, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                    for root, dirs, files in os.walk(absolute_file_path):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, absolute_file_path)
                            zip_file.write(file_path, arcname)

            # Read the temporary file and create the response
            with open(temp_file.name, 'rb') as f:
                response = HttpResponse(f.read(), content_type='application/zip')
                response['Content-Disposition'] = f'attachment; filename="{os.path.basename(absolute_file_path)}.zip"'

            # Delete the temporary file
            os.unlink(temp_file.name)

            return response
        else:
            with open(absolute_file_path, 'rb') as fh:
                response = HttpResponse(fh.read(), content_type="application/octet-stream")
                response['Content-Disposition'] = 'attachment; filename=' + os.path.basename(absolute_file_path)
                return response
    raise Http404

@login_required(login_url='/accounts/login/basic-login/')
def upload_file(request):
    user_id = str(request.user.id)
    media_user_path = os.path.join(settings.MEDIA_ROOT, user_id)

    if not os.path.exists(media_user_path):
        os.makedirs(media_user_path)

    selected_directory = unquote(request.POST.get('directory', ''))
    selected_directory_path = os.path.join(media_user_path, selected_directory)

    if not os.path.exists(selected_directory_path):
        os.makedirs(selected_directory_path)

    if request.method == 'POST':
        file = request.FILES.get('file')
        file_path = os.path.join(selected_directory_path, file.name)

        with open(file_path, 'wb') as destination:
            for chunk in file.chunks():
                destination.write(chunk)

    return redirect(request.META.get('HTTP_REFERER'))

def get_file_size(file_path):
    try:
        return os.path.getsize(file_path)
    except OSError:
        return 0  # Return 0 if there's an error reading the file size

================
File: apps/seo_manager/management/commands/backfill_rankings.py
================
from django.core.management.base import BaseCommand
from apps.seo_manager.models import Client
from apps.agents.tools.google_report_tool.google_rankings_tool import GoogleRankingsTool

class Command(BaseCommand):
    help = 'Backfill historical ranking data for all clients'

    def handle(self, *args, **options):
        tool = GoogleRankingsTool()
        clients = Client.objects.filter(sc_credentials__isnull=False)
        
        for client in clients:
            self.stdout.write(f"Processing client: {client.name}")
            tool._run(None, None, client.id)

================
File: apps/seo_manager/management/commands/generate_monthly_report.py
================
from django.core.management.base import BaseCommand
from apps.seo_manager.models import Client, KeywordRankingHistory
from datetime import date
from dateutil.relativedelta import relativedelta

class Command(BaseCommand):
    help = 'Generate monthly SEO performance report'

    def handle(self, *args, **options):
        today = date.today()
        last_month = today - relativedelta(months=1)
        
        for client in Client.objects.all():
            # Get last month's rankings
            rankings = KeywordRankingHistory.objects.filter(
                client=client,
                date__year=last_month.year,
                date__month=last_month.month
            )

            # Analyze performance
            report = {
                'client': client.name,
                'period': last_month.strftime('%B %Y'),
                'targeted_keywords': {
                    'total': client.targeted_keywords.count(),
                    'improved': 0,
                    'declined': 0,
                    'unchanged': 0
                },
                'top_improvements': [],
                'needs_attention': []
            }

            # Calculate changes
            for keyword in client.targeted_keywords.all():
                change = keyword.get_position_change()
                if change:
                    if change > 0:
                        report['targeted_keywords']['improved'] += 1
                        if change > 5:  # Significant improvement
                            report['top_improvements'].append({
                                'keyword': keyword.keyword,
                                'improvement': change
                            })
                    elif change < 0:
                        report['targeted_keywords']['declined'] += 1
                        if change < -5:  # Significant decline
                            report['needs_attention'].append({
                                'keyword': keyword.keyword,
                                'decline': change
                            })
                    else:
                        report['targeted_keywords']['unchanged'] += 1

            self.stdout.write(
                self.style.SUCCESS(f"Report generated for {client.name}")
            )
            # You could email this report, save it to a file, etc.

================
File: apps/seo_manager/templates/seo_manager/keywords/keyword_list_table.html
================
{% load seo_tags %}

<table class="table table-flush align-items-center mb-0" id="keywords-table">
  <thead class="thead-light">
    <tr>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Priority</th>
      <th class="text-center text-secondary text-xxs font-weight-bolder opacity-7">Current Position</th>
      <th class="text-center text-secondary text-xxs font-weight-bolder opacity-7">30d Change</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Notes</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
    </tr>
  </thead>
  <tbody>
    {% for keyword in keywords %}
    <tr>
      <td class="align-middle py-2">
        <div class="d-flex px-2">
          <span class="text-xs font-weight-bold">{{ keyword.keyword }}</span>
        </div>
      </td>
      <td class="align-middle py-2">
        <span class="badge badge-sm bg-gradient-{% if keyword.priority == 1 %}danger{% elif keyword.priority == 2 %}warning{% else %}info{% endif %}">
          {{ keyword.get_priority_display }}
        </span>
      </td>
      <td class="text-center">
        {% if keyword.current_position %}
          <span class="text-sm">{{ keyword.current_position }}</span>
        {% else %}
          <span class="text-sm text-secondary">-</span>
        {% endif %}
      </td>
      <td class="text-center">
        {% with change=keyword.get_position_change %}
          {% if change %}
            <div class="d-flex align-items-center justify-content-center">
              {% if keyword.position_trend == 'up' %}
                <i class="fas fa-arrow-up text-success me-1"></i>
              {% elif keyword.position_trend == 'down' %}
                <i class="fas fa-arrow-down text-danger me-1"></i>
              {% else %}
                <i class="fas fa-minus text-secondary me-1"></i>
              {% endif %}
              <span class="text-sm {% if change > 0 %}text-success{% elif change < 0 %}text-danger{% else %}text-secondary{% endif %}">
                {{ change|floatformat:1 }}
              </span>
            </div>
          {% else %}
            <span class="text-sm text-secondary">-</span>
          {% endif %}
        {% endwith %}
      </td>
      <td class="text-sm">{{ keyword.notes|truncatechars:50 }}</td>
      <td>
        <div class="d-flex">
          <a href="#" class="text-secondary font-weight-bold text-xs me-3" data-bs-toggle="modal" data-bs-target="#edit-keyword-{{ keyword.id }}">
            Edit
          </a>
          <a href="#" class="text-info font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#view-history-{{ keyword.id }}">
            History
          </a>
        </div>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<!-- Keyword History Modals -->
{% for keyword in keywords %}
<div class="modal fade" id="view-history-{{ keyword.id }}" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Ranking History: {{ keyword.keyword }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="chart-container-{{ keyword.id }}" class="chart-container" style="position: relative; height: 300px;">
          <canvas id="keyword-chart-{{ keyword.id }}" class="chart-canvas"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>
{% endfor %}

<!-- Edit Keyword Modals -->
{% for keyword in keywords %}
<div class="modal fade" id="edit-keyword-{{ keyword.id }}" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Keyword: {{ keyword.keyword }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_update' client_id=client.id pk=keyword.id %}">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            <label for="keyword-{{ keyword.id }}">Keyword</label>
            <input type="text" class="form-control" id="keyword-{{ keyword.id }}" name="keyword" value="{{ keyword.keyword }}" required>
          </div>
          <div class="form-group mt-3">
            <label for="priority-{{ keyword.id }}">Priority</label>
            <select class="form-control" id="priority-{{ keyword.id }}" name="priority">
              {% for value, label in keyword.PRIORITY_CHOICES %}
                <option value="{{ value }}" {% if keyword.priority == value %}selected{% endif %}>{{ label }}</option>
              {% endfor %}
            </select>
          </div>
          <div class="form-group mt-3">
            <label for="notes-{{ keyword.id }}">Notes</label>
            <textarea class="form-control" id="notes-{{ keyword.id }}" name="notes" rows="3">{{ keyword.notes }}</textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endfor %}

<!-- Replace the existing script block at the bottom -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    {% for keyword in keywords %}
    (function() {
        const modal = document.getElementById('view-history-{{ keyword.id }}');
        if (!modal) return;

        const data = [
            {% for entry in keyword.ranking_data %}
                {
                    date: '{{ entry.date|date:"Y-m-d" }}',
                    position: {{ entry.average_position }},
                }{% if not forloop.last %},{% endif %}
            {% endfor %}
        ];

        console.log('Data for {{ keyword.keyword }}:', data);  // Debug log

        modal.addEventListener('show.bs.modal', function() {
            const ctx = document.getElementById('keyword-chart-{{ keyword.id }}');
            if (!ctx) return;

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(d => d.date),
                    datasets: [{
                        label: 'Position',
                        data: data.map(d => d.position),
                        borderColor: '#5e72e4',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            reverse: true
                        }
                    }
                }
            });
        });
    })();
    {% endfor %}
});
</script>

================
File: apps/seo_manager/templates/seo_manager/keywords/keyword_list.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <!-- Card header -->
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">Targeted Keywords - {{ client.name }}</h5>
              <p class="text-sm mb-0">
                Manage keywords and track their performance
              </p>
            </div>
            <div class="ms-auto my-auto mt-lg-0 mt-4">
              <div class="ms-auto my-auto">
                <a href="{% url 'seo_manager:keyword_create' client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                  <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Keyword
                </a>
                <button type="button" class="btn btn-outline-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#import-keywords">
                  Import CSV
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="card-body px-0 pb-0">
          <div class="table-responsive">
            <table class="table table-flush" id="keywords-list">
              <thead class="thead-light">
                <tr>
                  <th>Keyword</th>
                  <th>Priority</th>
                  <th>Current Position</th>
                  <th>30d Change</th>
                  <th>Notes</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for keyword in keywords %}
                <tr>
                  <td>
                    <div class="d-flex align-items-center">
                      <span class="text-sm">{{ keyword.keyword }}</span>
                    </div>
                  </td>
                  <td>
                    <span class="badge bg-gradient-{% if keyword.priority == 1 %}danger{% elif keyword.priority == 2 %}warning{% else %}info{% endif %}">
                      {{ keyword.get_priority_display }}
                    </span>
                  </td>
                  <td>
                    {% with latest_ranking=keyword.ranking_history.first %}
                      {% if latest_ranking %}
                        {{ latest_ranking.average_position|floatformat:1 }}
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                  <td>
                    {% with change=keyword.get_30_day_change %}
                      {% if change %}
                        <span class="text-{% if change < 0 %}success{% elif change > 0 %}danger{% else %}secondary{% endif %}">
                          {{ change|floatformat:1 }}
                        </span>
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                  <td class="text-sm">{{ keyword.notes|truncatechars:50 }}</td>
                  <td>
                    <a href="{% url 'seo_manager:keyword_edit' keyword.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit keyword">
                      Edit
                    </a>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="import-keywords" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import Keywords</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_import' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            {{ import_form.csv_file }}
            <small class="form-text text-muted">{{ import_form.csv_file.help_text }}</small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Import</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
  $(document).ready(function() {
    $('#keywords-list').DataTable({
      dom: 'Bfrtip',
      buttons: [
        'copy', 'csv', 'excel', 'pdf'
      ]
    });
  });
</script>
{% endblock %}

================
File: apps/seo_manager/templates/seo_manager/keywords/ranking_history.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex align-items-center">
            <div>
              <h5 class="mb-0">Ranking History - {{ keyword.keyword }}</h5>
              <p class="text-sm mb-0">
                Track position changes over time
              </p>
            </div>
            <div class="ms-auto">
              <a href="{% url 'seo_manager:ranking_import' keyword.client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                Import Rankings
              </a>
            </div>
          </div>
        </div>
        
        <div class="card-body pt-4">
          <!-- Performance Metrics -->
          <div class="row">
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Current Position</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.average_position|floatformat:1|default:"-" }}
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">30d Change</p>
                        <h5 class="font-weight-bolder mb-0">
                          <span class="text-{% if thirty_day_change < 0 %}success{% elif thirty_day_change > 0 %}danger{% else %}secondary{% endif %}">
                            {{ thirty_day_change|floatformat:1|default:"-" }}
                          </span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-chart-line text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Impressions</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.impressions|default:"-" }}
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">CTR</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.ctr|floatformat:2|default:"-" }}%
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-curved-next text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Ranking History Chart -->
          <div class="row mt-4">
            <div class="col-12">
              <div class="card z-index-2">
                <div class="card-header pb-0">
                  <h6>Position History</h6>
                </div>
                <div class="card-body p-3">
                  <div class="chart">
                    <canvas id="ranking-history-chart" class="chart-canvas" height="300"></canvas>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Historical Data Table -->
          <div class="row mt-4">
            <div class="col-12">
              <div class="card">
                <div class="table-responsive">
                  <table class="table table-flush" id="ranking-history-table">
                    <thead class="thead-light">
                      <tr>
                        <th>Date</th>
                        <th>Position</th>
                        <th>Impressions</th>
                        <th>Clicks</th>
                        <th>CTR</th>
                      </tr>
                    </thead>
                    <tbody>
                      {% for ranking in ranking_history %}
                      <tr>
                        <td>{{ ranking.date }}</td>
                        <td>{{ ranking.average_position|floatformat:1 }}</td>
                        <td>{{ ranking.impressions }}</td>
                        <td>{{ ranking.clicks }}</td>
                        <td>{{ ranking.ctr|floatformat:2 }}%</td>
                      </tr>
                      {% endfor %}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize DataTable
    $('#ranking-history-table').DataTable({
      order: [[0, 'desc']],
      dom: 'Bfrtip',
      buttons: ['copy', 'csv', 'excel', 'pdf']
    });

    // Initialize Chart
    const ctx = document.getElementById("ranking-history-chart").getContext("2d");
    const chartData = JSON.parse('{{ chart_data|escapejs }}');
    
    new Chart(ctx, {
      type: "line",
      data: {
        labels: chartData.labels,
        datasets: [{
          label: "Position",
          tension: 0.4,
          borderWidth: 0,
          pointRadius: 2,
          pointBackgroundColor: "#cb0c9f",
          borderColor: "#cb0c9f",
          borderWidth: 3,
          data: chartData.positions,
          maxBarThickness: 6,
          fill: false
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            },
            reverse: true
          },
          x: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 10,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });
  });
</script>
{% endblock %}

================
File: apps/seo_manager/templates/seo_manager/projects/edit_project.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Project {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Edit Project</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            
            {% for field in form %}
            <div class="form-group">
              <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
              {{ field }}
              {% if field.help_text %}
                <small class="form-text text-muted">{{ field.help_text }}</small>
              {% endif %}
              {% if field.errors %}
                {% for error in field.errors %}
                  <div class="text-danger">{{ error }}</div>
                {% endfor %}
              {% endif %}
            </div>
            {% endfor %}
            
            <div class="d-flex justify-content-end mt-4">
              <a href="{% url 'seo_manager:client_detail' client_id %}" class="btn btn-light m-0">Cancel</a>
              <button type="submit" class="btn bg-gradient-primary m-0 ms-2">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  // Initialize any special form widgets here if needed
  document.addEventListener('DOMContentLoaded', function() {
    // Example: Initialize date pickers
    flatpickr('.datepicker', {
      dateFormat: 'Y-m-d'
    });
  });
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/projects/project_detail.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12 col-xl-8">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex align-items-center">
            <h5 class="mb-0">{{ project.title }}</h5>
            <a href="{% url 'seo_manager:project_edit' project.id %}" class="btn bg-gradient-primary btn-sm ms-auto">
              Edit Project
            </a>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-control-label">Status</label>
                <div>
                  <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
                    {{ project.get_status_display }}
                  </span>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-control-label">Implementation Date</label>
                <p>{{ project.implementation_date }}</p>
              </div>
            </div>
            <div class="col-md-12">
              <div class="form-group">
                <label class="form-control-label">Description</label>
                <p>{{ project.description }}</p>
              </div>
            </div>
          </div>

          {% if project.documentation_file %}
          <div class="row mt-4">
            <div class="col-12">
              <div class="card card-body border card-plain border-radius-lg">
                <h6 class="mb-0">Documentation</h6>
                <a href="{{ project.documentation_file.url }}" class="text-sm" target="_blank">
                  <i class="fas fa-file-pdf me-2"></i>
                  View Documentation
                </a>
              </div>
            </div>
          </div>
          {% endif %}
        </div>
      </div>
    </div>

    <div class="col-12 col-xl-4">
      <!-- Targeted Keywords Card -->
      <div class="card">
        <div class="card-header pb-0">
          <h6>Targeted Keywords</h6>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th>Keyword</th>
                  <th>Initial Rank</th>
                  <th>Current Rank</th>
                </tr>
              </thead>
              <tbody>
                {% for keyword in project.targeted_keywords.all %}
                <tr>
                  <td>{{ keyword.keyword }}</td>
                  <td>
                    {% with initial_rank=project.initial_rankings|get_item:keyword.keyword %}
                      {{ initial_rank|default:"-" }}
                    {% endwith %}
                  </td>
                  <td>
                    {% with latest_ranking=keyword.ranking_history.first %}
                      {% if latest_ranking %}
                        {{ latest_ranking.average_position|floatformat:1 }}
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Ranking History Chart -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card z-index-2">
        <div class="card-header pb-0">
          <h6>Keyword Rankings Over Time</h6>
        </div>
        <div class="card-body p-3">
          <div class="chart">
            <canvas id="ranking-history-chart" class="chart-canvas" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add this section after the project details -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Project Impact Analysis</h6>
          <p class="text-sm mb-0">
            Comparing keyword performance 30 days before and after implementation
          </p>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th>Keyword</th>
                  <th>Pre-Implementation Avg</th>
                  <th>Post-Implementation Avg</th>
                  <th>Position Improvement</th>
                  <th>Current Position</th>
                </tr>
              </thead>
              <tbody>
                {% for metric in performance_metrics %}
                <tr>
                  <td>{{ metric.keyword }}</td>
                  <td>{{ metric.pre_avg|default:"-" }}</td>
                  <td>{{ metric.post_avg|default:"-" }}</td>
                  <td>
                    {% if metric.improvement %}
                      <span class="text-{% if metric.improvement > 0 %}success{% elif metric.improvement < 0 %}danger{% else %}secondary{% endif %}">
                        {{ metric.improvement|floatformat:1 }}
                      </span>
                    {% else %}
                      -
                    {% endif %}
                  </td>
                  <td>{{ metric.current_position|floatformat:1|default:"-" }}</td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById("ranking-history-chart").getContext("2d");
    const chartData = JSON.parse('{{ ranking_history_data|escapejs }}');
    
    new Chart(ctx, {
      type: "line",
      data: {
        labels: chartData.labels,
        datasets: chartData.datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: true,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            },
            reverse: true
          },
          x: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 10,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });
  });
</script>
{% endblock %}

================
File: apps/seo_manager/templates/seo_manager/projects/project_list_table.html
================
<table class="table table-flush" id="projects-table">
  <thead class="thead-light">
    <tr>
      <th>Project</th>
      <th>Status</th>
      <th>Implementation Date</th>
      <th>Completion Date</th>
      <th>Keywords</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {% for project in projects %}
    <tr>
      <td>
        <div class="d-flex flex-column">
          <h6 class="mb-0 text-sm">{{ project.title }}</h6>
          <p class="text-xs text-secondary mb-0">{{ project.description|truncatechars:50 }}</p>
        </div>
      </td>
      <td>
        <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
          {{ project.get_status_display }}
        </span>
      </td>
      <td>{{ project.implementation_date }}</td>
      <td>{{ project.completion_date|default:"-" }}</td>
      <td>
        <span class="text-sm">{{ project.targeted_keywords.count }} keywords</span>
      </td>
      <td>
        <a href="#" class="text-secondary font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#view-project-{{ project.id }}">
          View Details
        </a>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

================
File: apps/seo_manager/templates/seo_manager/projects/project_list.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">SEO Projects - {{ client.name }}</h5>
              <p class="text-sm mb-0">
                Track and manage SEO implementation projects
              </p>
            </div>
            <div class="ms-auto my-auto mt-lg-0 mt-4">
              <div class="ms-auto my-auto">
                <a href="{% url 'seo_manager:project_create' client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                  <i class="fas fa-plus"></i>&nbsp;&nbsp;New Project
                </a>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pb-0">
          <div class="table-responsive">
            <table class="table table-flush" id="projects-list">
              <thead class="thead-light">
                <tr>
                  <th>Project</th>
                  <th>Status</th>
                  <th>Implementation Date</th>
                  <th>Completion Date</th>
                  <th>Keywords</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for project in projects %}
                <tr>
                  <td>
                    <div class="d-flex flex-column">
                      <h6 class="mb-0 text-sm">{{ project.title }}</h6>
                      <p class="text-xs text-secondary mb-0">{{ project.description|truncatechars:50 }}</p>
                    </div>
                  </td>
                  <td>
                    <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
                      {{ project.get_status_display }}
                    </span>
                  </td>
                  <td>{{ project.implementation_date }}</td>
                  <td>{{ project.completion_date|default:"-" }}</td>
                  <td>
                    <span class="text-sm">{{ project.targeted_keywords.count }} keywords</span>
                  </td>
                  <td>
                    <a href="{% url 'seo_manager:project_detail' project.id %}" class="text-secondary font-weight-bold text-xs">
                      View Details
                    </a>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
  $(document).ready(function() {
    $('#projects-list').DataTable({
      dom: 'Bfrtip',
      buttons: [
        'copy', 'csv', 'excel', 'pdf'
      ]
    });
  });
</script>
{% endblock %}

================
File: apps/seo_manager/templates/seo_manager/reports/monthly_report.html
================
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h4 class="text-dark mb-2">SEO Performance Report - {{ report.period }}</h4>
            <p class="text-secondary mb-4">Generated for {{ client.name }}</p>
        </div>
    </div>

    <!-- Stats Cards Row -->
    <div class="row g-3">
        <!-- Total Keywords Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Total Keywords</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.total }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-dark text-white rounded-circle shadow">
                            <i class="fas fa-key"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Improved Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Improved</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.improved }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-success text-white rounded-circle shadow">
                            <i class="fas fa-arrow-up"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Declined Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Declined</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.declined }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-danger text-white rounded-circle shadow">
                            <i class="fas fa-arrow-down"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unchanged Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Unchanged</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.unchanged }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-info text-white rounded-circle shadow">
                            <i class="fas fa-equals"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tables Row -->
    <div class="row mt-4">
        <!-- Top Improvements Table -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body p-3">
                    <h6 class="text-dark mb-3">Top Improvements</h6>
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Improvement</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in report.top_improvements %}
                                <tr>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{ item.keyword }}</p>
                                    </td>
                                    <td>
                                        <span class="text-success text-sm font-weight-bold">
                                            <i class="fas fa-arrow-up me-1"></i>{{ item.improvement }}
                                        </span>
                                    </td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="2" class="text-center text-sm text-secondary">
                                        No improvements to report
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Needs Attention Table -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body p-3">
                    <h6 class="text-dark mb-3">Needs Attention</h6>
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Decline</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in report.needs_attention %}
                                <tr>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{ item.keyword }}</p>
                                    </td>
                                    <td>
                                        <span class="text-danger text-sm font-weight-bold">
                                            <i class="fas fa-arrow-down me-1"></i>{{ item.decline }}
                                        </span>
                                    </td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="2" class="text-center text-sm text-secondary">
                                        No keywords need immediate attention
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.icon-shape {
    width: 48px;
    height: 48px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    flex-shrink: 0;
    margin-left: 1rem;
}

.icon-shape i {
    font-size: 1.25rem;
    line-height: 1;
    position: relative;
    top: 1px;
}

.card-body {
    padding: 1rem 1.5rem !important;
}

.d-flex.align-items-center {
    min-height: 48px;
}

.card {
    box-shadow: 0 0 2rem 0 rgba(136, 152, 170, .15);
    border: 0;
}

.text-secondary {
    color: #8392ab !important;
}

.font-weight-bold {
    font-weight: 600 !important;
}

.table > :not(caption) > * > * {
    padding: 0.75rem 1.5rem;
}

.bg-gradient-dark {
    background: linear-gradient(310deg, #141727, #3A416F);
}

.bg-gradient-success {
    background: linear-gradient(310deg, #17AD37, #98EC2D);
}

.bg-gradient-danger {
    background: linear-gradient(310deg, #EA0606, #FF667C);
}

.bg-gradient-info {
    background: linear-gradient(310deg, #2152FF, #21D4FD);
}
</style>

================
File: apps/seo_manager/templates/seo_manager/activity_log.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Activity Log</h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side" data-timeline-axis-style="dotted">
                        {% for activity in activities %}
                            <div class="timeline-block mb-0">
                                <span class="timeline-step">
                                    <i class="ni ni-bell-55 text-success text-gradient"></i>
                                </span>
                                <div class="timeline-content">
                                    <p class="text-sm mb-0">
                                        <span class="font-weight-bold">{{ activity.timestamp|date:"d M Y H:i" }}</span> - 
                                        <span class="text-primary">{{ activity.user.username }}</span> 
                                        {{ activity.action }} 
                                        {% if activity.client %}
                                            for client <span class="text-info">{{ activity.client.name }}</span>
                                        {% endif %}
                                        <span class="badge badge-sm bg-gradient-{{ activity.category }}">{{ activity.get_category_display }}</span>
                                    </p>
                                    {% if activity.details %}
                                        <div class="mt-0">
                                            <pre class="text-xs">{{ activity.details|pprint }}</pre>
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script>
    // Any additional JavaScript for the activity log page can be added here
</script>
{% endblock javascripts %}

================
File: apps/seo_manager/templates/seo_manager/add_client.html
================
{% extends "layouts/base.html" %}

{% block title %} Add Client {% endblock %}

{% block content %}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Add New Client</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <div class="card-body">
                            <form method="post">
                                {% csrf_token %}
                                {% for field in form %}
                                    <div class="form-group">
                                        <label for="{{ field.id_for_label }}">{{ field.label }}</label><br>
                                        {{ field }}
                                        {% if field.help_text %}
                                            <small class="form-text text-muted">{{ field.help_text }}</small>
                                        {% endif %}
                                        {% for error in field.errors %}
                                            <div class="invalid-feedback d-block">
                                                {{ error }}
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% endfor %}
                                <button type="submit" class="btn btn-primary">Add Client</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
    // Any additional JavaScript can be added here
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/add_ga_credentials_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Add GA Credentials (Service Account) - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Add Google Analytics Credentials (Service Account) for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_file">Upload Service Account JSON File</label>
              <input type="file" class="form-control-file" id="service_account_file" name="service_account_file" required>
            </div>
            <button type="submit" class="btn btn-primary">Upload and Add Credentials</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: apps/seo_manager/templates/seo_manager/base.html
================
{% extends "layouts/base.html" %}

{% block title %}SEO Client Manager{% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            {% block seo_content %}{% endblock %}
        </div>
    </div>
</div>
{% endblock content %}

================
File: apps/seo_manager/templates/seo_manager/client_analytics copy 2.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Analytics - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    {% if messages %}
    <div class="messages">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {% endfor %}
    </div>
    {% endif %}

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Analytics for {{ client.name }}</h1>
        <div>
            <button class="btn btn-primary" id="exportBtn">Export</button>
            <div class="btn-group">
                <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Time Range
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" data-range="7">Last 7 days</a></li>
                    <li><a class="dropdown-item" href="#" data-range="30">Last 30 days</a></li>
                    <li><a class="dropdown-item" href="#" data-range="90">Last 90 days</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Users</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ users }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-single-02 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">New Users</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ new_users }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-user-run text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Sessions</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ sessions }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Page Views</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{ page_views }}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Traffic Channels</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div id="traffic-channels-chart" style="height: 350px;">
                        <div id="chart-loading" class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Search Console Performance Data</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div id="search-console-loading" class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    {% if search_console_data %}
                    <div class="table-responsive p-0">
                        <table class="table table-flush table-striped text-xs table-sm" id="search-console-table">
                            <thead class="thead-light">
                                <tr>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Query</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Impressions</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Clicks</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">CTR</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Position</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in search_console_data %}
                                <tr>
                                    <td class="text-xs font-weight-normal">{{ item.query }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.impressions }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.clicks }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.ctr|floatformat:2 }}%</td>
                                    <td class="text-xs font-weight-normal">{{ item.position|floatformat:1 }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <p class="text-warning">Search Console data is currently unavailable. This may be due to an authentication issue or an error in data retrieval.</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        let analyticsData = [];
        try {
            analyticsData = JSON.parse('{{ analytics_data|safe }}');
        } catch (error) {
            console.error('Error parsing analytics data:', error);
            document.querySelector("#traffic-channels-chart").innerHTML = '<p class="text-danger">Error parsing analytics data. Please try refreshing the page or contact support if the issue persists.</p>';
        }

        const chartContainer = document.querySelector("#traffic-channels-chart");
        const loadingIndicator = document.querySelector("#chart-loading");

        if (analyticsData && analyticsData.length > 0) {
            loadingIndicator.style.display = 'none';
            const series = analyticsData.map(channel => ({
                name: channel.channel,
                data: channel.data.map(item => item.sessions)
            }));
            const categories = analyticsData[0].data.map(item => item.date);

            const chartOptions = {
                series: series,
                chart: {
                    height: 350,
                    type: 'line',
                    zoom: {
                        enabled: false
                    },
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: 'straight'
                },
                title: {
                    text: 'Traffic Channels',
                    align: 'left'
                },
                grid: {
                    row: {
                        colors: ['#f3f3f3', 'transparent'],
                        opacity: 0.5
                    },
                },
                xaxis: {
                    categories: categories,
                },
                yaxis: {
                    title: {
                        text: 'Sessions'
                    }
                },
            };

            const chart = new ApexCharts(chartContainer, chartOptions);
            chart.render();
        } else {
            loadingIndicator.style.display = 'none';
            chartContainer.innerHTML = '<p class="text-warning">No analytics data available for the selected date range.</p>';
        }

        {% if search_console_data %}
        // Initialize DataTable for Search Console data
        const dataTableSearchConsole = new simpleDatatables.DataTable("#search-console-table", {
            searchable: true,
            perPageSelect: [10,25,50,100,200],
            fixedHeight: true,
            classes: {}
        });
        document.querySelector("#search-console-loading").style.display = 'none';
        {% endif %}

        // Export button functionality
        document.getElementById('exportBtn').addEventListener('click', function() {
            const csvContent = [
                ['Date Range', '{{ start_date }} - {{ end_date }}'],
                ['Users', '{{ users }}'],
                ['New Users', '{{ new_users }}'],
                ['Sessions', '{{ sessions }}'],
                ['Page Views', '{{ page_views }}'],
                [],
                ['Traffic Channels'],
                ['Channel', 'Date', 'Sessions'],
                ...(analyticsData ? analyticsData.flatMap(channel => 
                    channel.data.map(item => [channel.channel, item.date, item.sessions])
                ) : []),
                [],
                ['Search Console Performance'],
                ['Query', 'Impressions', 'Clicks', 'CTR', 'Position'],
                {% for item in search_console_data %}
                ['{{ item.query }}', '{{ item.impressions }}', '{{ item.clicks }}', '{{ item.ctr|floatformat:2 }}%', '{{ item.position|floatformat:1 }}'],
                {% endfor %}
            ].map(row => row.join(',')).join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", `analytics_export_{{ client.name }}_{{ start_date }}_{{ end_date }}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        });

        // Time range selection functionality
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const range = parseInt(this.getAttribute('data-range'));
                const endDate = new Date();
                const startDate = new Date(endDate);
                startDate.setDate(endDate.getDate() - range);
                
                const formatDate = (date) => {
                    return date.toISOString().split('T')[0];
                };

                window.location.href = `?start_date=${formatDate(startDate)}&end_date=${formatDate(endDate)}`;
            });
        });
    });
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/client_analytics.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Analytics - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <h1>Analytics for {{ client.name }}</h1>
    <div class="row">
        <div class="col-12">
            {% if analytics_data %}
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Google Analytics Data</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div id="analytics-line-chart" style="height: 350px;"></div>
                </div>
            </div>
            {% else %}
            <div class="card mb-4">
                <div class="card-body">
                    <p class="text-warning">Google Analytics data is currently unavailable. This may be due to an authentication issue or an error in data retrieval.</p>
                </div>
            </div>
            {% endif %}

            {% if search_console_data %}
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Search Console Performance Data</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table table-flush table-striped text-xs table-sm" id="search-console-table">
                            <thead class="thead-light">
                                <tr>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Query</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Impressions</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Clicks</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">CTR</th>
                                    <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Position</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in search_console_data %}
                                <tr>
                                    <td class="text-xs font-weight-normal">{{ item.query }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.impressions }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.clicks }}</td>
                                    <td class="text-xs font-weight-normal">{{ item.ctr|floatformat:2 }}%</td>
                                    <td class="text-xs font-weight-normal">{{ item.position|floatformat:1 }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            {% else %}
            <div class="card mb-4">
                <div class="card-body">
                    <p class="text-warning">Search Console data is currently unavailable. This may be due to an authentication issue or an error in data retrieval.</p>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        {% if analytics_data %}
        // Google Analytics chart
        const analyticsData = {{ analytics_data|safe }};
        const activeUsers = analyticsData.map(data => ({ x: new Date(data.date).getTime(), y: data.active_users }));
        const sessions = analyticsData.map(data => ({ x: new Date(data.date).getTime(), y: data.sessions }));

        const startDate = '{{ start_date }}';
        const endDate = '{{ end_date }}';
        const formattedStartDate = new Date(startDate).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' });
        const formattedEndDate = new Date(endDate).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' });

        const chartOptions = {
            series: [{
                name: 'Active Users',
                data: activeUsers
            }, {
                name: 'Sessions',
                data: sessions
            }],
            chart: {
                height: 350,
                type: 'line',
                zoom: {
                    enabled: false
                },
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'straight'
            },
            title: {
                text: `${formattedStartDate} - ${formattedEndDate}`,
                align: 'left'
            },
            grid: {
                row: {
                    colors: ['#f3f3f3', 'transparent'],
                    opacity: 0.5
                },
            },
            xaxis: {
                type: 'datetime',
                labels: {
                    formatter: function(value, timestamp) {
                        return new Date(timestamp).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' });
                    }
                }
            },
            yaxis: {
                title: {
                    text: 'Count'
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'right',
                floating: true,
                offsetY: -25,
                offsetX: -5
            }
        };

        const chart = new ApexCharts(document.querySelector("#analytics-line-chart"), chartOptions);
        chart.render();
        {% endif %}

        {% if search_console_data %}
        // Initialize DataTable for Search Console data
        const dataTableSearchConsole = new simpleDatatables.DataTable("#search-console-table", {
            searchable: true,
            perPageSelect: [10,25,50,100,200],
            fixedHeight: true,
            classes: {}
        });
        {% endif %}
    });
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/client_detail.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% load custom_filters %}

{% block title %} Client Detail - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-md-5">
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Client Details: {{ client.name }}</h6>
          <a href="{% url 'seo_manager:edit_client' client.id %}" class="btn btn-xxs btn-primary">Edit</a>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <tbody>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.website_url }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.get_status_display }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Group</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.group.name|default:"N/A" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Target Audience</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.target_audience|default:"N/A" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Created At</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.created_at|date:"F d, Y H:i" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Last Updated</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.updated_at|date:"F d, Y H:i" }}</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-7">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Business Objectives</h6>
        </div>
        <div class="card-body p-3">
          <div class="timeline timeline-one-side">
            {% for objective in business_objectives %}
              <div class="timeline-block mb-3">
                <span class="timeline-step">
                  <i class="ni ni-bell-55 text-success text-gradient"></i>
                </span>
                <div class="timeline-content">
                  <h6 class="text-dark text-sm font-weight-bold mb-0">{{ objective.goal }}</h6>
                  <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">Metric: {{ objective.metric }}</p>
                  <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">Target Date: {{ objective.target_date }}</p>
                  <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">Status: {% if objective.status %}Active{% else %}Inactive{% endif %}</p>
                  <p class="text-secondary text-sm mt-3 mb-2">
                    Created: {{ objective.date_created|format_iso_date:"%Y-%m-%d %H:%M" }} | Last Modified: {{ objective.date_last_modified|format_iso_date:"%Y-%m-%d %H:%M" }}
                  </p>
                  <div class="mt-3">
                    <a href="{% url 'seo_manager:edit_business_objective' client.id forloop.counter0 %}" class="btn btn-sm btn-primary">Edit</a>
                    <form method="post" action="{% url 'seo_manager:delete_business_objective' client.id forloop.counter0 %}" style="display: inline;">
                      {% csrf_token %}
                      <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this objective?')">Delete</button>
                    </form>
                  </div>
                </div>
              </div>
            {% empty %}
              <p style="padding-left: 20px;">No business objectives set for this client.</p>
            {% endfor %}
          </div>
          
          <div class="mt-4">
            <h6>Add New Business Objective</h6>
            <form method="post" action="{% url 'seo_manager:add_business_objective' client.id %}" class="row g-3 align-items-center">
              {% csrf_token %}
              <div class="col-auto">
                {{ form.goal }}
              </div>
              <div class="col-auto">
                {{ form.metric }}
              </div>
              <div class="col-auto">
                {{ form.target_date }}
              </div>
              <div class="col-auto">
                <div class="form-check">
                  {{ form.status }}
                  <label class="form-check-label" for="{{ form.status.id_for_label }}">
                    Active
                  </label>
                </div>
              </div>
              <div class="col-auto">
                <button type="submit" class="btn btn-primary">Add Objective</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Targeted Keywords Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex">
          <div>
            <h5 class="mb-0">Targeted Keywords</h5>
            <p class="text-sm mb-0">
              Manage keywords and track their performance
            </p>
          </div>
          <div class="ms-auto my-auto mt-lg-0 mt-4">
            <div class="ms-auto my-auto">
              <button type="button" class="btn bg-gradient-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#add-keyword">
                <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Keyword
              </button>
              <button type="button" class="btn btn-outline-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#import-keywords">
                Import CSV
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body px-0 pb-0">
        <div class="table-responsive">
          {% include 'seo_manager/keywords/keyword_list_table.html' with keywords=client.targeted_keywords.all %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- SEO Projects Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex">
          <div>
            <h5 class="mb-0">SEO Projects</h5>
            <p class="text-sm mb-0">
              Track and manage SEO implementation projects
            </p>
          </div>
          <div class="ms-auto my-auto mt-lg-0 mt-4">
            <div class="ms-auto my-auto">
              <button type="button" class="btn bg-gradient-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#add-project">
                <i class="fas fa-plus"></i>&nbsp;&nbsp;New Project
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body px-0 pb-0">
        <div class="table-responsive">
          {% include 'seo_manager/projects/project_list_table.html' with projects=client.seo_projects.all %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Keyword Modal -->
<div class="modal fade" id="add-keyword" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Keyword</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_create' client.id %}">
        {% csrf_token %}
        <div class="modal-body">
          {{ keyword_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Keyword</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Import Keywords Modal -->
<div class="modal fade" id="import-keywords" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import Keywords</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_import' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          {{ import_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Import</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add Project Modal -->
<div class="modal fade" id="add-project" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New SEO Project</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:project_create' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          {{ project_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Create Project</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add this after the client details card and before the business objectives -->
<div class="col-md-12">
  <div class="card mb-4 mt-4">
    <div class="card-header pb-0 d-flex justify-content-between align-items-center">
      <div>
        <h5>Client Profile</h5>
        <p class="text-sm text-muted mb-0">Background information on client</p>
      </div>
      {% if client.client_profile %}
        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#edit-profile">
          Edit Profile
        </button>
      {% else %}
        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#add-profile">
          Add Profile
        </button>
      {% endif %}
    </div>
    
    <div class="card-body">
      {% if client_profile_html %}
        <div class="markdown-content">
          {{ client_profile_html|safe }}
        </div>
      {% else %}
        <p class="text-sm text-muted">No profile has been added for this client yet.</p>
      {% endif %}
    </div>
  </div>
</div>

<!-- Add Profile Modal -->
<div class="modal fade" id="add-profile" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Client Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:update_client_profile' client.id %}" id="addProfileForm">
        {% csrf_token %}
        <div class="modal-body">
          <div id="add-profile-editor" class="h-300">
            {{ client.client_profile|default:"" }}
          </div>
          <input type="hidden" name="client_profile" id="add-profile-content">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Save Profile</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Profile Modal -->
<div class="modal fade" id="edit-profile" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Client Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:update_client_profile' client.id %}" id="editProfileForm">
        {% csrf_token %}
        <div class="modal-body">
          <div id="edit-profile-editor" class="h-300">
            {{ client.client_profile|safe }}
          </div>
          <input type="hidden" name="client_profile" id="edit-profile-content">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Update Profile</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Project Details Modals -->
{% for project in client.seo_projects.all %}
<div class="modal fade" id="view-project-{{ project.id }}" tabindex="-1" role="dialog" aria-labelledby="project-modal-{{ project.id }}" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="project-modal-{{ project.id }}">{{ project.title }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-12">
            <h6 class="text-sm">Description</h6>
            <p class="text-sm text-muted">{{ project.description }}</p>
          </div>
        </div>
        
        <div class="row mt-3">
          <div class="col-md-12">
            <h6 class="text-sm">Status</h6>
            <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
              {{ project.get_status_display }}
            </span>
          </div>
        </div>

        <div class="row mt-3">
          <div class="col-md-6">
            <h6 class="text-sm">Implementation Date</h6>
            <p class="text-sm">{{ project.implementation_date }}</p>
          </div>
          <div class="col-md-6">
            <h6 class="text-sm">Completion Date</h6>
            <p class="text-sm">{{ project.completion_date|default:"Not set" }}</p>
          </div>
        </div>

        <div class="row mt-3">
          <div class="col-md-12">
            <h6 class="text-sm">Targeted Keywords</h6>
            <div class="d-flex flex-wrap gap-2">
              {% for keyword in project.targeted_keywords.all %}
                <span class="badge bg-light text-dark">{{ keyword.keyword }}</span>
              {% empty %}
                <p class="text-sm text-muted">No keywords assigned</p>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <a href="{% url 'seo_manager:edit_project' client.id project.id %}" class="btn bg-gradient-primary btn-sm">Edit Project</a>
        <form method="post" action="{% url 'seo_manager:delete_project' client.id project.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn bg-gradient-danger btn-sm" onclick="return confirm('Are you sure you want to delete this project?')">Delete Project</button>
        </form>
        <button type="button" class="btn bg-gradient-secondary btn-sm" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
{% endfor %}

<!-- Add this after the Targeted Keywords Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex">
          <div>
            <h5 class="mb-0">Ranking Data Management</h5>
            <p class="text-sm mb-0">
              Manage Search Console data collection and reporting
              <a href="{% url 'seo_manager:ranking_data_management' client.id %}" class="text-primary">View Details</a>
            </p>
          </div>
          <div class="ms-auto my-auto mt-lg-0 mt-4">
            <div class="ms-auto my-auto">
              <button type="button" class="btn bg-gradient-primary btn-sm mb-0" id="collectRankingsBtn">
                <i class="fas fa-sync"></i>&nbsp;&nbsp;Collect Latest Rankings
              </button>
              <button type="button" class="btn bg-gradient-info btn-sm mb-0" id="generateReportBtn">
                <i class="fas fa-file-alt"></i>&nbsp;&nbsp;Generate Report
              </button>
              <button type="button" class="btn btn-outline-primary btn-sm mb-0" id="backfillRankingsBtn">
                Backfill Historical Data
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body px-0 pb-0">
        <div class="table-responsive">
          <table class="table align-items-center mb-0">
            <thead>
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Last Collection</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Data Coverage</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Keywords Tracked</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Status</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if latest_collection_date %}
                      {{ latest_collection_date|date:"F d, Y" }}
                    {% else %}
                      No data collected yet
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if data_coverage_months %}
                      {{ data_coverage_months }} month{{ data_coverage_months|pluralize }}
                    {% else %}
                      -
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if tracked_keywords_count %}
                      {{ tracked_keywords_count }}
                    {% else %}
                      0
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  {% if latest_collection_date %}
                    <span class="badge badge-sm bg-gradient-success">Active</span>
                  {% else %}
                    <span class="badge badge-sm bg-gradient-warning">No Data</span>
                  {% endif %}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add the Report Modal -->
<div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">SEO Performance Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="reportContent">
          <!-- Report content will be loaded here -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Client Activity Timeline --> 
  <div class="row mt-4">
    <div class="col-md-6">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Client Activity Timeline</h6>
        </div>
        <div class="card-body p-3">
          <div class="timeline timeline-one-side" data-timeline-axis-style="dotted">
            {% for activity in client_activities %}
              <div class="timeline-block mb-3">
                <span class="timeline-step">
                  <i class="ni ni-bell-55 text-success text-gradient"></i>
                </span>
                <div class="timeline-content">
                  <p class="text-sm mb-0">
                    <span class="font-weight-bold">{{ activity.timestamp|date:"d M Y H:i" }}</span> - 
                    <span class="text-primary">{{ activity.user.username }}</span> 
                    {{ activity.action }} 
                    <span class="badge badge-sm bg-gradient-{{ activity.category }}">{{ activity.get_category_display }}</span>
                  </p>
                  {% if activity.details %}
                    <div class="mt-0">
                      <pre class="text-xs">{{ activity.details|pprint }}</pre>
                    </div>
                  {% endif %}
                </div>
              </div>
            {% empty %}
              <p style="padding-left: 20px;">No activity recorded for this client.</p>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      {% if client.ga_credentials %}
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Google Analytics Credentials</h6>
          <a href="{% url 'seo_manager:remove_ga_credentials' client.id %}" class="btn btn-sm btn-danger">Remove Credentials</a>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <tbody>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">View ID</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.ga_credentials.view_id }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">GA Client ID</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.ga_credentials.ga_client_id }}</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      {% else %}
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Google Analytics Credentials</h6>
        </div>
        <div class="card-body">
          <p>No Google Analytics credentials are set for this client.</p>
          <a href="{% url 'seo_manager:add_ga_credentials_oauth' client.id %}" class="btn btn-primary">Add GA Credentials (OAuth)</a>
          <a href="{% url 'seo_manager:add_ga_credentials_service_account' client.id %}" class="btn btn-secondary">Add GA Credentials (Service Account)</a>
        </div>
      </div>
      {% endif %}

      {% if client.sc_credentials %}
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Search Console Credentials</h6>
          <a href="{% url 'seo_manager:remove_sc_credentials' client.id %}" class="btn btn-sm btn-danger">Remove Credentials</a>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <tbody>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Property URL</td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.sc_credentials.property_url }}</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      {% else %}
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Search Console Credentials</h6>
        </div>
        <div class="card-body">
          <p>No Search Console credentials are set for this client.</p>
          <a href="{% url 'seo_manager:add_sc_credentials' client.id %}" class="btn btn-primary">Add Search Console Credentials</a>
        </div>
      </div>
      {% endif %}

      <!-- Add this section below the Search Console Credentials section -->

      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Meta-Tags</h6>
          <a href="#" id="createSnapshotBtn" class="btn btn-sm btn-primary">Create Snapshot</a>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <tbody>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Latest Snapshot</td>
                  <td>
                    {% if meta_tags_files %}
                      <p class="text-xs font-weight-bold mb-0">{{ meta_tags_files.0 }}</p>
                    {% else %}
                      <p class="text-xs font-weight-bold mb-0">No snapshots available</p>
                    {% endif %}
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</td>
                  <td>
                    <a href="{% url 'file_manager' %}/meta-tags" class="btn btn-sm btn-secondary">View All Snapshots</a>
                    {% if meta_tags_files %}
                      <a href="{% url 'download_file' file_path=meta_tags_files.0 %}" class="btn btn-sm btn-info">Download Latest</a>
                    {% endif %}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>


  <!-- Add Delete Client Button -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-body">
          <button id="deleteClientBtn" class="btn btn-danger">Delete Client</button>
        </div>
      </div>
    </div>
  </div>

</div>

<!-- Add this after the existing cards in client_detail.html -->


{% endblock content %}
{% block extra_css %}
<style>
  .h-300 {
    height: 300px !important;
  }
  
  .ql-editor {
    min-height: 200px;
  }
  </style>

<!-- Add some CSS for markdown content -->
<style>
  .markdown-content {
    font-size: 0.875rem;
  }
  
  .markdown-content h1 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
  }
  
  .markdown-content h2 {
    font-size: 1.25rem;
    margin-bottom: 0.875rem;
    font-weight: 600;
  }
  
  .markdown-content h3 {
    font-size: 1.125rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
  }
  
  .markdown-content p {
    margin-bottom: 1rem;
  }
  
  .markdown-content ul, 
  .markdown-content ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }
  
  .markdown-content code {
    background-color: #f8f9fa;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .markdown-content pre {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.375rem;
    margin-bottom: 1rem;
    overflow-x: auto;
  }
  
  .markdown-content a {
    color: #5e72e4;
    text-decoration: none;
  }
  
  .markdown-content a:hover {
    text-decoration: underline;
  }
  
  .markdown-content blockquote {
    border-left: 4px solid #e9ecef;
    padding-left: 1rem;
    margin-left: 0;
    margin-bottom: 1rem;
    color: #6c757d;
  }
  </style>
{% endblock extra_css %}

{% block extra_js %}
{{ block.super }}

<!-- Add Chart.js library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{% static 'assets/js/plugins/quill.min.js' %}"></script>
<!-- Add this after your existing extra_js content -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    {% for keyword in client.targeted_keywords.all %}
    (function() {
        const modal = document.getElementById('view-history-{{ keyword.id }}');
        if (!modal) return;

        // Debug log to see what data we have
        console.log('Keyword: {{ keyword.keyword }}');
        
        const history = [
            {% for entry in keyword.ranking_history.all %}
                {
                    date: '{{ entry.date|date:"M d, Y" }}',
                    position: {{ entry.average_position }},
                    impressions: {{ entry.impressions }},
                    clicks: {{ entry.clicks }},
                    ctr: {{ entry.ctr }}
                }{% if not forloop.last %},{% endif %}
            {% endfor %}
        ];
        
        // Debug log to see the history array
        console.log('History data:', history);

        modal.addEventListener('show.bs.modal', function() {
            const ctx = document.getElementById('keyword-chart-{{ keyword.id }}');
            if (!ctx) {
                console.error('Canvas not found for keyword {{ keyword.id }}');
                return;
            }

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: history.map(entry => entry.date),
                    datasets: [{
                        label: 'Position',
                        data: history.map(entry => entry.position),
                        borderColor: '#5e72e4',
                        backgroundColor: 'rgba(94, 114, 228, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            reverse: true,
                            beginAtZero: false
                        }
                    }
                }
            });

            modal._chart = chart;
        });

        modal.addEventListener('hidden.bs.modal', function() {
            if (modal._chart) {
                modal._chart.destroy();
                modal._chart = null;
            }
        });
    })();
    {% endfor %}
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Collect Rankings Button
  document.getElementById('collectRankingsBtn').addEventListener('click', function() {
    Swal.fire({
      title: 'Collecting Rankings Data',
      text: 'This may take a few minutes...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading()
      }
    });

    fetch('{% url "seo_manager:collect_rankings" client.id %}', {
      method: 'POST',
      headers: {
        'X-CSRFToken': '{{ csrf_token }}'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message
        }).then(() => {
          window.location.reload();
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.error
        });
      }
    });
  });

  // Generate Report Button
  document.getElementById('generateReportBtn').addEventListener('click', function() {
    Swal.fire({
      title: 'Generating Report',
      text: 'Please wait...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading()
      }
    });

    fetch('{% url "seo_manager:generate_report" client.id %}', {
      method: 'POST',
      headers: {
        'X-CSRFToken': '{{ csrf_token }}'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        document.getElementById('reportContent').innerHTML = data.report_html;
        var reportModal = new bootstrap.Modal(document.getElementById('reportModal'));
        Swal.close();
        reportModal.show();
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.error
        });
      }
    });
  });

  // Backfill Rankings Button
  document.getElementById('backfillRankingsBtn').addEventListener('click', function() {
    Swal.fire({
      title: 'Backfill Historical Data',
      text: 'This will collect ranking data for the past 12 months. This may take several minutes. Continue?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, proceed',
      cancelButtonText: 'No, cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire({
          title: 'Collecting Historical Data',
          text: 'This may take several minutes...',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading()
          }
        });

        fetch('{% url "seo_manager:backfill_rankings" client.id %}', {
          method: 'POST',
          headers: {
            'X-CSRFToken': '{{ csrf_token }}'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: data.message
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.error
            });
          }
        });
      }
    });
  });
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize Quill editors
  var toolbarOptions = [
    ['bold', 'italic', 'underline', 'strike'],
    ['blockquote', 'code-block'],
    [{ 'header': 1 }, { 'header': 2 }],
    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    [{ 'script': 'sub'}, { 'script': 'super' }],
    [{ 'indent': '-1'}, { 'indent': '+1' }],
    ['link'],
    ['clean']
  ];

  // Add Profile Editor
  if (document.getElementById('add-profile-editor')) {
    var addProfileEditor = new Quill('#add-profile-editor', {
      theme: 'snow',
      modules: {
        toolbar: toolbarOptions
      }
    });

    // Handle form submission
    document.getElementById('addProfileForm').addEventListener('submit', function(e) {
      var content = addProfileEditor.root.innerHTML;
      document.getElementById('add-profile-content').value = content;
    });
  }

  // Edit Profile Editor
  if (document.getElementById('edit-profile-editor')) {
    var editProfileEditor = new Quill('#edit-profile-editor', {
      theme: 'snow',
      modules: {
        toolbar: toolbarOptions
      }
    });

    // Handle form submission
    document.getElementById('editProfileForm').addEventListener('submit', function(e) {
      var content = editProfileEditor.root.innerHTML;
      document.getElementById('edit-profile-content').value = content;
    });
  }
});
</script>

{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/client_form.html
================
{% extends "layouts/base.html" %}

{% block title %} Create New Client {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Create New Client</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            {% for field in form %}
              <div class="form-group">
                <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
                {{ field }}
                {% if field.errors %}
                  <div class="text-danger">
                    {% for error in field.errors %}
                      {{ error }}
                    {% endfor %}
                  </div>
                {% endif %}
                {% if field.help_text %}
                  <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
              </div>
            {% endfor %}
            <div class="form-group">
              <button type="submit" class="btn btn-primary">Create Client</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block javascripts %}
<!-- Remove any unnecessary JavaScript here -->
{% endblock javascripts %}

================
File: apps/seo_manager/templates/seo_manager/client_list.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Clients {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Clients</h5>
            <p class="text-sm mb-0">
              View and manage your SEO clients.
            </p>
          </div>
          <a href="{% url 'seo_manager:add_client' %}" class="btn btn-primary btn-sm">Add Client</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="clients-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Client Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Group</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Created</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for client in clients %}
              <tr data-id="{{ client.id }}">
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}">{{ client.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{{ client.website_url }}" target="_blank" rel="noopener noreferrer">{{ client.website_url }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ client.status }}</td>
                <td class="text-sm font-weight-normal">{{ client.group }}</td>
                <td class="text-sm font-weight-normal" data-order="{{ client.created_at|date:'Y-m-d' }}">
                  {{ client.created_at|date:"Y-m-d" }}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit client">
                    Edit
                  </a>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#clients-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/dashboard.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card h-100">
        <div class="card-body p-3 d-flex flex-column justify-content-between">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Clients</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ clients.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Updated Meta-Tags Snapshot Card -->
    <div class="col-xl-4 col-sm-6 mb-xl-0 mb-4">
      <div class="card h-100">
        <div class="card-body p-3 d-flex flex-column justify-content-between">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Meta-Tags Snapshot</p>
                <div class="input-group input-group-sm mt-2">
                  <input type="url" id="snapshotUrl" class="form-control" placeholder="Enter URL">
                </div>
              </div>
            </div>
            <div class="col-4 text-end">
              <div id="createSnapshotBtn" class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md" style="cursor: pointer;">
                <i class="ni ni-paper-diploma text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Add more summary cards here -->
  </div>
  
  <!-- Clients Table -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Clients</h5>
            <p class="text-sm mb-0">
              View and manage your SEO clients.
            </p>
          </div>
          <a href="{% url 'seo_manager:add_client' %}" class="btn btn-primary btn-sm">Add Client</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="clients-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Client Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Group</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Created</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for client in clients %}
              <tr data-id="{{ client.id }}">
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}">{{ client.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{{ client.website_url }}" target="_blank" rel="noopener noreferrer">{{ client.website_url }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ client.status }}</td>
                <td class="text-sm font-weight-normal">{{ client.group }}</td>
                <td class="text-sm font-weight-normal" data-order="{{ client.created_at|date:'Y-m-d' }}">
                  {{ client.created_at|date:"Y-m-d" }}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit client">
                    Edit
                  </a>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_css %}
<style>
  .card.h-100 {
    display: flex;
    flex-direction: column;
  }
  .card-body {
    flex: 1 0 auto;
  }
</style>
{% endblock extra_css %}

{% block extra_js %}
  {{ block.super }}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#clients-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });

    // Meta-Tags Snapshot functionality
    document.addEventListener('DOMContentLoaded', function() {
      var createSnapshotBtn = document.getElementById('createSnapshotBtn');
      var snapshotUrlInput = document.getElementById('snapshotUrl');

      if (createSnapshotBtn && snapshotUrlInput) {
        createSnapshotBtn.addEventListener('click', function(e) {
          e.preventDefault();
          
          var url = snapshotUrlInput.value.trim();
          if (!url) {
            Swal.fire({
              title: 'Error!',
              text: 'Please enter a valid URL.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
            return;
          }

          // Show a loading message
          Swal.fire({
            title: 'Creating snapshot...',
            text: 'This may take a few minutes.',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            willOpen: () => {
              Swal.showLoading();
            }
          });
          
          // Send the request to create the snapshot
          fetch('{% url "seo_manager:create_meta_tags_snapshot_url" %}', {
            method: 'POST',
            headers: {
              'X-CSRFToken': '{{ csrf_token }}',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url: url })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success',
                confirmButtonText: 'OK'
              });
            } else {
              Swal.fire({
                title: 'Error!',
                text: data.message,
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: 'An error occurred while creating the snapshot.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          });
        });
      }
    });
  </script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/edit_business_objective.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Business Objective - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Edit Business Objective for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" class="row g-3 align-items-center">
            {% csrf_token %}
            <div class="col-auto">
              {{ form.goal }}
            </div>
            <div class="col-auto">
              {{ form.metric }}
            </div>
            <div class="col-auto">
              {{ form.target_date }}
            </div>
            <div class="col-auto">
              <div class="form-check">
                {{ form.status }}
                <label class="form-check-label" for="{{ form.status.id_for_label }}">
                  Active
                </label>
              </div>
            </div>
            <div class="col-auto">
              <button type="submit" class="btn btn-primary">Update Objective</button>
              <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-secondary">Cancel</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

================
File: apps/seo_manager/templates/seo_manager/edit_client.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Client - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mt-4" id="basic-info">
        <div class="card-header">
          <h5>Edit Client: {{ client.name }}</h5>
        </div>
        <div class="card-body pt-0">
          <form method="post">
            {% csrf_token %}
            <div class="row">
              <div class="col-6">
                <label class="form-label">Name</label><br>
                <div class="input-group">
                  {{ form.name }}
                </div>
              </div>
              <div class="col-6">
                <label class="form-label">Website URL</label><br>
                <div class="input-group">
                  {{ form.website_url }}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-6">
                <label class="form-label mt-4">Status</label><br>
                {{ form.status }}
              </div>
              <div class="col-6">
                <label class="form-label mt-4">Group</label><br>
                {{ form.group }}
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <label class="form-label mt-4">Target Audience</label><br>
                <div class="input-group">
                  {{ form.target_audience }}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-12 mt-4">
                <button type="submit" class="btn bg-gradient-dark btn-sm float-end mt-6 mb-0">Update Client</button>
                <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-outline-secondary btn-sm float-end mt-6 mb-0 me-2">Cancel</a>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  // Add any necessary JavaScript for the edit client form
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/input_view_id.html
================
{% extends "layouts/base.html" %}

{% block title %} Input Google Analytics View ID {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Input Google Analytics View ID for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group">
              <label for="view_id">Google Analytics View ID</label>
              <input type="text" class="form-control" id="view_id" name="view_id" required>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: apps/seo_manager/templates/seo_manager/ranking_data_management.html
================
{% extends "layouts/base.html" %}
{% load static %}
{% load seo_manager_filters %}

{% block title %} Ranking Data Management - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
    <div class="row">
        <div class="d-flex justify-content-between mb-4">
            <div>
                <h5 class="mb-0">Ranking Data Management - {{ client.name }}</h5>
                <p class="text-sm mb-0">Detailed view of Search Console ranking data</p>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn bg-gradient-primary btn-sm" id="collectRankingsBtn">
                    <i class="fas fa-sync"></i>&nbsp;&nbsp;Collect Latest Rankings
                </button>
                <button type="button" class="btn bg-gradient-info btn-sm" id="generateReportBtn">
                    <i class="fas fa-file-alt"></i>&nbsp;&nbsp;Generate Report
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm" id="backfillRankingsBtn">
                    Backfill Historical Data
                </button>
            </div>
        </div>

        <!-- Stats Cards Row -->
        <div class="row mb-4">
            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Last Collection</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {% if latest_collection_date %}
                                            {{ latest_collection_date|date:"M d, Y" }}
                                        {% else %}
                                            No Data
                                        {% endif %}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                    <i class="ni ni-calendar-grid-58 text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Data Coverage</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {{ data_coverage_months }} months
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-info shadow text-center border-radius-md">
                                    <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Keywords Tracked</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {{ tracked_keywords_count }}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                                    <i class="ni ni-collection text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Status</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {% if latest_collection_date %}
                                            <span class="text-success">Active</span>
                                        {% else %}
                                            <span class="text-warning">No Data</span>
                                        {% endif %}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                                    <i class="ni ni-check-bold text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add this section for search and controls -->
        <div class="d-flex justify-content-between mb-4">
            <form class="search">
                <div class="d-flex gap-3 align-items-start">
                    <input type="text" placeholder="Search for keywords" name="search" value="{{ search_query }}" class="form-control">
                    <button type="submit" class="btn btn-primary px-3">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </form>
            <div class="hide-show">
                <form method="post">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Hide / Show Column
                        </button>
                        <div id="dropdownDefaultCheckbox">
                            <ul class="dropdown-menu hide-show-dropdown px-3">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="keyword_text" value="" id="checkbox-keyword">
                                    <label class="form-check-label" for="checkbox-keyword">Keyword</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="position" value="" id="checkbox-position">
                                    <label class="form-check-label" for="checkbox-position">Position</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="change" value="" id="checkbox-change">
                                    <label class="form-check-label" for="checkbox-change">Change</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="impressions" value="" id="checkbox-impressions">
                                    <label class="form-check-label" for="checkbox-impressions">Impressions</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="clicks" value="" id="checkbox-clicks">
                                    <label class="form-check-label" for="checkbox-clicks">Clicks</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="ctr" value="" id="checkbox-ctr">
                                    <label class="form-check-label" for="checkbox-ctr">CTR</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="date" value="" id="checkbox-date">
                                    <label class="form-check-label" for="checkbox-date">Date</label>
                                </div>
                            </ul>
                        </div>
                    </div>
                </form>
            </div>
            <div class="page-size">
                <div class="d-flex gap-2">
                    <form method="post">
                        {% csrf_token %}
                        <select onchange="getPageItems(this)" name="" id="" class="form-select">
                            <option {% if items == 5 %} selected {% endif %} value="5">5 Items</option>
                            <option {% if items == 10 %} selected {% endif %} value="10">10 Items</option>
                            <option {% if items == 25 %} selected {% endif %} value="25">25 Items</option>
                            <option {% if items == 50 %} selected {% endif %} value="50">50 Items</option>
                            <option {% if items == 100 %} selected {% endif %} value="100">100 Items</option>
                        </select>
                    </form>
                    <div class="d-flex">
                        <a data-bs-toggle="modal" data-bs-target="#exportCSV">
                            <img class="export-csv-img" src="{% static 'assets/img/csv.png' %}" alt="">
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Update your table section -->
        <div class="card">
            <div class="card-header">
                <h5>Rankings History</h5>
                <small>Complete history of keyword rankings with filtering and sorting capabilities.</small>
            </div>
            <div class="card-body">
                <div class="dt-responsive table-responsive">
                    <table class="table align-items-center mb-0">
                        <thead>
                            <tr>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                                    <a href="?sort={% if sort_by == 'keyword_text' %}-{% endif %}keyword_text" class="text-secondary">
                                        Keyword
                                        {% if sort_by == 'keyword_text' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-keyword_text' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    <a href="?sort={% if sort_by == 'average_position' %}-{% endif %}average_position" class="text-secondary">
                                        Position
                                        {% if sort_by == 'average_position' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-average_position' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Change</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    <a href="?sort={% if sort_by == 'impressions' %}-{% endif %}impressions" class="text-secondary">
                                        Impressions
                                        {% if sort_by == 'impressions' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-impressions' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    <a href="?sort={% if sort_by == 'clicks' %}-{% endif %}clicks" class="text-secondary">
                                        Clicks
                                        {% if sort_by == 'clicks' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-clicks' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    <a href="?sort={% if sort_by == 'ctr' %}-{% endif %}ctr" class="text-secondary">
                                        CTR
                                        {% if sort_by == 'ctr' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-ctr' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">
                                    <a href="?sort={% if sort_by == 'date' %}-{% endif %}date" class="text-secondary">
                                        Date
                                        {% if sort_by == 'date' %}
                                            <i class="fas fa-sort-up"></i>
                                        {% elif sort_by == '-date' %}
                                            <i class="fas fa-sort-down"></i>
                                        {% else %}
                                            <i class="fas fa-sort"></i>
                                        {% endif %}
                                    </a>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for ranking in rankings %}
                            <tr>
                                <td>
                                    <div class="d-flex px-2 py-1">
                                        <div class="d-flex flex-column justify-content-center">
                                            <h6 class="mb-0 text-sm">{{ ranking.keyword_text }}</h6>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.average_position|floatformat:1 }}</p>
                                </td>
                                <td>
                                    {% with change=ranking.position_change %}
                                        {% if change > 0 %}
                                            <span class="text-success text-sm font-weight-bolder">
                                                <i class="fas fa-arrow-up"></i> {{ change|floatformat:1 }}
                                            </span>
                                        {% elif change < 0 %}
                                            <span class="text-danger text-sm font-weight-bolder">
                                                <i class="fas fa-arrow-down"></i> {{ change|floatformat:1|slice:"1:" }}
                                            </span>
                                        {% else %}
                                            <span class="text-secondary text-sm">
                                                <i class="fas fa-minus"></i>
                                            </span>
                                        {% endif %}
                                    {% endwith %}
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.impressions }}</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.clicks }}</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.ctr|floatformat:2 }}%</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.date|date:"M d, Y" }}</p>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add the export CSV modal -->
<div class="modal fade" id="exportCSV" tabindex="-1" aria-labelledby="exportCSVLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex justify-content-between">
                    <div>
                        <h1 class="modal-title fs-5" id="exportCSVLabel">Export as CSV</h1>
                    </div>
                    <div>
                        <a href="{% url 'seo_manager:export_rankings_csv' client.id %}{% if search_query %}?search={{ search_query }}{% endif %}">
                            <img class="export-img" src="{% static 'assets/img/export.png' %}" alt="">
                        </a>
                    </div>
                    <div>
                        <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <!-- Add a preview table here -->
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
{{ block.super }}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var checkboxes = document.querySelectorAll('#dropdownDefaultCheckbox input[type="checkbox"]');
        
        checkboxes.forEach(function (checkbox) {
            var targetColumnId = checkbox.getAttribute('data-target');
            var targetColumn = document.getElementById('th_' + targetColumnId);
            var targetDataCells = document.querySelectorAll('.td_' + targetColumnId);
            
            checkbox.addEventListener('change', function () {
                var targetColumnId = this.getAttribute('data-target');
                var targetColumn = document.getElementById('th_' + targetColumnId);
                var targetDataCells = document.querySelectorAll('.td_' + targetColumnId);
                
                if (this.checked) {
                    targetColumn.style.display = 'none';
                    targetDataCells.forEach(function (dataCell) {
                        dataCell.style.display = 'none';
                    });
                } else {
                    targetColumn.style.display = '';
                    targetDataCells.forEach(function (dataCell) {
                        dataCell.style.display = '';
                    });
                }
            });
        });
    });

    function getPageItems(selectObject) {
        var value = selectObject.value;
        window.location.href = updateQueryStringParameter(window.location.href, 'items', value);
    }

    function updateQueryStringParameter(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            return uri + separator + key + "=" + value;
        }
    }

    // Collect Rankings Button
    document.getElementById('collectRankingsBtn').addEventListener('click', function() {
        Swal.fire({
            title: 'Collecting Rankings Data',
            text: 'This may take a few minutes...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch('{% url "seo_manager:collect_rankings" client.id %}', {
            method: 'POST',
            headers: {
                'X-CSRFToken': '{{ csrf_token }}'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
        });
    });

    // Add other button handlers...
</script>
{% endblock extra_js %}

{% block extrastyle %}
<style>
    .hide-show-dropdown {
        max-height: 350px;
        overflow-y: scroll;
    }
    .page-size .export-csv-img {
        width: 35px;
        cursor: pointer;
    }
    .export-img {
        width: 30px;
    }
    .modal-header {
        display: block !important;
    }
    .height {
        height: 40px !important;
    }
    th a {
        display: flex;
        align-items: center;
        justify-content: space-between;
        text-decoration: none;
    }
    th a:hover {
        text-decoration: none;
        opacity: 0.8;
    }
    th a i {
        margin-left: 5px;
    }
    .fa-sort {
        color: #ccc;
    }
    .fa-sort-up, .fa-sort-down {
        color: #344767;
    }
</style>
{% endblock %}

================
File: apps/seo_manager/templates/seo_manager/select_analytics_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Analytics Account - {{ client.name }} {% endblock %}

{% block stylesheets %}
{{ block.super }}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
{% endblock stylesheets %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Select Google Analytics Account for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group mt-3">
              <label for="selected_account">Select an Analytics Account:</label>
              <select class="js-example-basic-single" name="selected_account" id="selected_account" style="width: 100%" required>
                <option value="">-- Select an account --</option>
                {% for account in accounts %}
                  <option value="{{ account.property_id }}">
                    {{ account.account_name }} - {{ account.property_name }}
                  </option>
                {% endfor %}
              </select>
            </div>
            <button type="submit" class="btn btn-primary mt-3">Add Selected Account</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
  $(document).ready(function() {
    $('#selected_account').select2({
      placeholder: 'Start typing to search...',
      allowClear: true,
      width: '100%',
      matcher: function(params, data) {
        if ($.trim(params.term) === '') {
          return data;
        }
        if (typeof data.text === 'undefined') {
          return null;
        }
        if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) {
          return data;
        }
        return null;
      }
    });
  });
</script>
{% endblock javascripts %}

================
File: apps/seo_manager/templates/seo_manager/select_search_console_property.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Search Console Property - {{ client.name }} {% endblock %}

{% block stylesheets %}
{{ block.super }}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container {
        width: 100% !important;
    }
    .select2-selection--single {
        height: 38px !important;
        padding: 6px 12px !important;
        font-size: 1rem !important;
        line-height: 1.5 !important;
        border: 1px solid #0a447e !important;
        border-radius: 0.5rem !important;
    }
    .select2-selection__arrow {
        height: 36px !important;
    }
    .select2-results__option {
        padding: 6px 12px;
    }
</style>
{% endblock stylesheets %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Select Search Console Property for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group mt-3">
              <label for="selected_property">Select a Search Console Property:</label>
              <select class="form-control" name="selected_property" id="selected_property" required>
                <option value="">-- Select a property --</option>
                {% for property in properties %}
                  <option value="{{ property }}">{{ property }}</option>
                {% endfor %}
              </select>
            </div>
            <div class="d-flex justify-content-end mt-3">
              <button type="submit" class="btn btn-primary mt-3">Add Selected Property</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
<script>
  $(document).ready(function() {
    // Initialize Select2
    $('#selected_property').select2({
      placeholder: 'Start typing to search...',
      allowClear: true,
      width: '100%'
    });
  });
</script>
{% endblock extra_js %}

================
File: apps/seo_manager/templates/seo_manager/setup_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Setup Google Analytics Service Account {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Setup Google Analytics Service Account for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_json">Service Account JSON</label>
              <textarea class="form-control" id="service_account_json" name="service_account_json" rows="10" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: apps/seo_manager/templatetags/__init__.py
================
# Empty file, just needs to exist

================
File: apps/seo_manager/templatetags/custom_filters.py
================
from django import template
from datetime import datetime

register = template.Library()

@register.filter(name='format_iso_date')
def format_iso_date(value, format_string):
  try:
      date = datetime.fromisoformat(value)
      return date.strftime(format_string)
  except (ValueError, TypeError):
      return value  # Return the original value if parsing fails

================
File: apps/seo_manager/templatetags/seo_manager_filters.py
================
from django import template

register = template.Library()

@register.filter
def abs_value(value):
    try:
        return abs(value)
    except (TypeError, ValueError):
        return value

================
File: apps/seo_manager/templatetags/seo_tags.py
================
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    """Get an item from a dictionary using bracket notation"""
    return dictionary.get(key)

================
File: apps/seo_manager/views/keyword_views.py
================
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from django.shortcuts import get_object_or_404
from ..models import Client, TargetedKeyword
from ..forms import TargetedKeywordForm  # We'll create this next

class KeywordListView(LoginRequiredMixin, ListView):
    model = TargetedKeyword
    template_name = 'seo_manager/keywords/list.html'
    context_object_name = 'keywords'

    def get_queryset(self):
        self.client = get_object_or_404(Client, pk=self.kwargs['client_id'])
        return TargetedKeyword.objects.filter(client=self.client)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['client'] = self.client
        return context

class KeywordCreateView(LoginRequiredMixin, CreateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/form.html'

    def get_success_url(self):
        return reverse_lazy('seo_manager:keyword_list', kwargs={'client_id': self.object.client.id})

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        return super().form_valid(form)

class KeywordUpdateView(LoginRequiredMixin, UpdateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/form.html'

    def get_success_url(self):
        return reverse_lazy('seo_manager:keyword_list', kwargs={'client_id': self.object.client.id})

================
File: apps/seo_manager/views/project_views.py
================
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, CreateView, UpdateView, DetailView
from ..models import SEOProject, Client
from ..forms import SEOProjectForm  # We'll create this next

class ProjectListView(LoginRequiredMixin, ListView):
    model = SEOProject
    template_name = 'seo_manager/projects/list.html'
    context_object_name = 'projects'

    def get_queryset(self):
        self.client = get_object_or_404(Client, pk=self.kwargs['client_id'])
        return SEOProject.objects.filter(client=self.client)

class ProjectDetailView(LoginRequiredMixin, DetailView):
    model = SEOProject
    template_name = 'seo_manager/projects/detail.html'
    context_object_name = 'project'

class ProjectCreateView(LoginRequiredMixin, CreateView):
    model = SEOProject
    form_class = SEOProjectForm
    template_name = 'seo_manager/projects/form.html'

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        return super().form_valid(form)

================
File: apps/seo_manager/views/ranking_views.py
================
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView
from django.views.generic.edit import FormView
from ..models import KeywordRankingHistory, TargetedKeyword
from ..forms import RankingImportForm  # We'll create this next

class RankingHistoryView(LoginRequiredMixin, ListView):
    model = KeywordRankingHistory
    template_name = 'seo_manager/rankings/history.html'
    context_object_name = 'rankings'

    def get_queryset(self):
        self.keyword = get_object_or_404(TargetedKeyword, pk=self.kwargs['keyword_id'])
        return KeywordRankingHistory.objects.filter(keyword=self.keyword)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['keyword'] = self.keyword
        return context

class RankingImportView(LoginRequiredMixin, FormView):
    template_name = 'seo_manager/rankings/import.html'
    form_class = RankingImportForm

    def form_valid(self, form):
        # Handle the import process
        form.process_import(self.request.user)
        return super().form_valid(form)

================
File: apps/seo_manager/admin.py
================
from django.contrib import admin
from .models import ClientGroup, Client, SEOData, AIProvider

@admin.register(ClientGroup)
class ClientGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'parent')
    search_fields = ('name',)

@admin.register(Client)
class ClientAdmin(admin.ModelAdmin):
    list_display = ('name', 'website_url', 'status', 'group')
    list_filter = ('status', 'group')
    search_fields = ('name', 'website_url')

@admin.register(SEOData)
class SEODataAdmin(admin.ModelAdmin):
    list_display = ('client', 'date', 'traffic', 'keywords')
    list_filter = ('client', 'date')
    date_hierarchy = 'date'

@admin.register(AIProvider)
class AIProviderAdmin(admin.ModelAdmin):
    list_display = ('name', 'model', 'is_active')
    list_filter = ('is_active',)
    search_fields = ('name', 'model')

================
File: apps/seo_manager/apps.py
================
from django.apps import AppConfig

class SeoManagerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.seo_manager'

================
File: apps/seo_manager/forms.py
================
from django import forms
from django.core.exceptions import ValidationError
from .models import Client, TargetedKeyword, KeywordRankingHistory, SEOProject
import csv
import io

class ClientForm(forms.ModelForm):
    class Meta:
        model = Client
        fields = ['name', 'website_url', 'status', 'group', 'target_audience']
        widgets = {
            'target_audience': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),
        }

class BusinessObjectiveForm(forms.Form):
    goal = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter objective goal'
        })
    )
    metric = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter metric'
        })
    )
    target_date = forms.DateField(
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date'
        })
    )
    status = forms.BooleanField(
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

class TargetedKeywordForm(forms.ModelForm):
    class Meta:
        model = TargetedKeyword
        fields = ['keyword', 'priority', 'notes']
        widgets = {
            'keyword': forms.TextInput(attrs={'class': 'form-control'}),
            'priority': forms.Select(attrs={'class': 'form-select'}),
            'notes': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class KeywordBulkUploadForm(forms.Form):
    csv_file = forms.FileField(
        label='CSV File',
        help_text='Upload a CSV file with columns: keyword, priority (1-5), notes (optional)',
        widget=forms.FileInput(attrs={'class': 'form-control'})
    )

    def clean_csv_file(self):
        csv_file = self.cleaned_data['csv_file']
        if not csv_file.name.endswith('.csv'):
            raise ValidationError('File must be a CSV')
        
        # Validate CSV structure
        try:
            decoded_file = csv_file.read().decode('utf-8')
            csv_data = csv.DictReader(io.StringIO(decoded_file))
            required_fields = ['keyword', 'priority']
            
            if not all(field in csv_data.fieldnames for field in required_fields):
                raise ValidationError('CSV must contain keyword and priority columns')
            
            # Reset file pointer
            csv_file.seek(0)
            return csv_file
        except Exception as e:
            raise ValidationError(f'Invalid CSV file: {str(e)}')

class RankingImportForm(forms.Form):
    IMPORT_SOURCE_CHOICES = [
        ('search_console', 'Google Search Console'),
        ('csv', 'CSV Upload'),
        ('manual', 'Manual Entry'),
    ]

    import_source = forms.ChoiceField(
        choices=IMPORT_SOURCE_CHOICES,
        widget=forms.RadioSelect(attrs={'class': 'form-check-input'})
    )
    
    date_from = forms.DateField(
        widget=forms.DateInput(attrs={
            'class': 'form-control flatpickr-date',
            'data-toggle': 'flatpickr'
        })
    )
    
    date_to = forms.DateField(
        widget=forms.DateInput(attrs={
            'class': 'form-control flatpickr-date',
            'data-toggle': 'flatpickr'
        })
    )
    
    csv_file = forms.FileField(
        required=False,
        widget=forms.FileInput(attrs={'class': 'form-control'})
    )

    def clean(self):
        cleaned_data = super().clean()
        import_source = cleaned_data.get('import_source')
        csv_file = cleaned_data.get('csv_file')

        if import_source == 'csv' and not csv_file:
            raise ValidationError('CSV file is required when importing from CSV')

        return cleaned_data

    def process_import(self, user):
        import_source = self.cleaned_data['import_source']
        
        if import_source == 'search_console':
            return self._process_search_console_import()
        elif import_source == 'csv':
            return self._process_csv_import()
        else:
            return self._process_manual_entry()

    def _process_search_console_import(self):
        # Implementation for Search Console import
        pass

    def _process_csv_import(self):
        # Implementation for CSV import
        pass

    def _process_manual_entry(self):
        # Implementation for manual entry
        pass

class SEOProjectForm(forms.ModelForm):
    class Meta:
        model = SEOProject
        fields = ['title', 'description', 'status', 
                 'implementation_date', 'completion_date', 
                 'targeted_keywords']
        widgets = {
            'implementation_date': forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'type': 'date'
            }),
            'completion_date': forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'type': 'date'
            }),
            'description': forms.Textarea(attrs={
                'rows': 3, 
                'class': 'form-control'
            }),
            'title': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'status': forms.Select(attrs={
                'class': 'form-control'
            }),
            'targeted_keywords': forms.SelectMultiple(attrs={
                'class': 'form-control'
            }),
        }

    def __init__(self, *args, **kwargs):
        client = kwargs.pop('client', None)
        super().__init__(*args, **kwargs)
        
        if client:
            self.fields['targeted_keywords'].queryset = TargetedKeyword.objects.filter(
                client=client
            ).order_by('keyword')

    def clean(self):
        cleaned_data = super().clean()
        implementation_date = cleaned_data.get('implementation_date')
        completion_date = cleaned_data.get('completion_date')

        if completion_date and implementation_date and completion_date < implementation_date:
            raise ValidationError({
                'completion_date': 'Completion date cannot be earlier than implementation date.'
            })

        return cleaned_data

class ClientProfileForm(forms.Form):
    client_profile = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 10,
            'placeholder': 'Enter a detailed 300-500 word profile of the client\'s business, goals, and SEO strategy'
        }),
        help_text="Provide a comprehensive overview of the client's business, target market, goals, and SEO strategy."
    )

================
File: apps/seo_manager/google_auth.py
================
from google_auth_oauthlib.flow import Flow
from django.conf import settings
from django.urls import reverse
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
# comments
def get_google_auth_flow(request):
    """
    Creates OAuth2 flow for Google Analytics and Search Console authentication.
    Includes scopes for analytics, search console, and user profile data.
    """
    flow = Flow.from_client_secrets_file(
        # Path to the OAuth 2.0 client secrets JSON file downloaded from Google Cloud Console
        settings.GOOGLE_CLIENT_SECRETS_FILE,
        # List of OAuth scopes required for accessing Google APIs
        scopes=[
            'https://www.googleapis.com/auth/analytics.readonly',
            'https://www.googleapis.com/auth/webmasters.readonly',
            'openid',
            'https://www.googleapis.com/auth/userinfo.email',
            'https://www.googleapis.com/auth/userinfo.profile'
        ],
        redirect_uri=request.build_absolute_uri('/google/login/callback/')
    )
    return flow

def get_analytics_accounts_oauth(credentials):
    analytics = build('analyticsadmin', 'v1alpha', credentials=credentials)
    return fetch_analytics_accounts(analytics)

def get_analytics_accounts_service_account(service_account_json):
    credentials = service_account.Credentials.from_service_account_info(
        json.loads(service_account_json),
        scopes=['https://www.googleapis.com/auth/analytics.readonly']
    )
    analytics = build('analyticsadmin', 'v1alpha', credentials=credentials)
    return fetch_analytics_accounts(analytics)

def fetch_analytics_accounts(analytics):
    accounts = []
    account_summaries = analytics.accountSummaries().list().execute()
    
    for account_summary in account_summaries.get('accountSummaries', []):
        account_id = account_summary['account']
        account_name = account_summary['displayName']
        
        for property_summary in account_summary.get('propertySummaries', []):
            property_id = property_summary['property']
            property_name = property_summary['displayName']
            
            accounts.append({
                'account_id': account_id,
                'account_name': account_name,
                'property_id': property_id,
                'property_name': property_name,
            })
    
    return accounts

def get_search_console_service(credentials):
    return build('searchconsole', 'v1', credentials=credentials)

def get_search_console_properties(credentials):
    service = get_search_console_service(credentials)
    sites = service.sites().list().execute()
    return [site['siteUrl'] for site in sites.get('siteEntry', [])]

================
File: apps/seo_manager/models.py
================
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models import Q
from django.db.models import Avg
import logging
from dateutil.relativedelta import relativedelta
import json
from datetime import datetime

logger = logging.getLogger(__name__)


class ClientGroup(models.Model):
    name = models.CharField(max_length=100)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='children')

    def __str__(self):
        return self.name

class Client(models.Model):
    STATUS_CHOICES = [
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('on_hold', 'On Hold'),
    ]

    name = models.CharField(max_length=100)
    website_url = models.URLField()
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='active')
    group = models.ForeignKey(ClientGroup, on_delete=models.SET_NULL, null=True, blank=True, related_name='clients')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    business_objectives = models.JSONField(default=list, blank=True)
    target_audience = models.TextField(blank=True, null=True)
    # New field
    client_profile = models.TextField(
        help_text="Detailed 300-500 word profile of the client's business, goals, and SEO strategy",
        blank=True
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.business_objectives is None:
            self.business_objectives = []

    def __str__(self):
        return self.name

    def get_keyword_rankings_summary(self):
        """Get summary of current keyword rankings"""
        latest_rankings = KeywordRankingHistory.objects.filter(
            client=self,
            keyword__isnull=False,  # Only targeted keywords
            date=KeywordRankingHistory.objects.filter(
                client=self,
                keyword__isnull=False
            ).values('date').order_by('-date').first()['date']
        ).select_related('keyword')

        return {
            'total_keywords': latest_rankings.count(),
            'avg_position': latest_rankings.aggregate(
                Avg('average_position')
            )['average_position__avg'],
            'rankings': latest_rankings
        }

class SEOData(models.Model):
    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='seo_data')
    date = models.DateField()
    traffic = models.IntegerField()
    keywords = models.IntegerField()
    rankings = models.JSONField()  # Store rankings as JSON

    class Meta:
        unique_together = ['client', 'date']

class AIProvider(models.Model):
    name = models.CharField(max_length=100)
    api_key = models.CharField(max_length=255)
    model = models.CharField(max_length=100)
    parameters = models.JSONField(default=dict)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class GoogleAnalyticsCredentials(models.Model):
    client = models.OneToOneField(Client, on_delete=models.CASCADE, related_name='ga_credentials')
    view_id = models.CharField(max_length=100, blank=True, null=True)  # Allow null values
    access_token = models.TextField(blank=True, null=True)  # Allow null for service accounts
    refresh_token = models.TextField(blank=True, null=True)  # Allow null for service accounts
    token_uri = models.URLField(blank=True, null=True)  # Allow null for service accounts
    ga_client_id = models.CharField(max_length=100, blank=True, null=True)  # Allow null for service accounts
    client_secret = models.CharField(max_length=100, blank=True, null=True)  # Allow null for service accounts
    use_service_account = models.BooleanField(default=False)
    service_account_json = models.TextField(blank=True, null=True)
    user_email = models.EmailField()  # Add this field if it doesn't exist
    # Add the scopes attribute with a default value
    scopes = models.JSONField(default=list)

    def __str__(self):
        return f"GA Credentials for {self.client.name}"

class SearchConsoleCredentials(models.Model):
    client = models.OneToOneField(Client, on_delete=models.CASCADE, related_name='sc_credentials')
    property_url = models.URLField()
    access_token = models.TextField(blank=True, null=True)
    refresh_token = models.TextField(blank=True, null=True)
    token_uri = models.URLField(blank=True, null=True)
    sc_client_id = models.CharField(max_length=100, blank=True, null=True)  # Renamed from client_id
    client_secret = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"Search Console Credentials for {self.client.name}"

class SummarizerUsage(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    query = models.TextField()
    compressed_content = models.TextField()
    response = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    duration = models.DurationField()
    content_token_size = models.IntegerField()
    content_character_count = models.IntegerField()
    total_input_tokens = models.IntegerField()
    total_output_tokens = models.IntegerField()
    model_used = models.CharField(max_length=100)

class UserActivity(models.Model):
    CATEGORY_CHOICES = [
        ('login', 'Login'),
        ('logout', 'Logout'),
        ('view', 'View'),
        ('create', 'Create'),
        ('update', 'Update'),
        ('delete', 'Delete'),
        ('export', 'Export'),
        ('import', 'Import'),
        ('other', 'Other'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    client = models.ForeignKey(Client, on_delete=models.CASCADE, null=True, blank=True)
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    action = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)
    details = models.JSONField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username} - {self.category} - {self.action}"

class TargetedKeyword(models.Model):
    PRIORITY_CHOICES = [
        (1, 'Highest'),
        (2, 'High'),
        (3, 'Medium'),
        (4, 'Low'),
        (5, 'Lowest'),
    ]

    client = models.ForeignKey(
        Client, 
        on_delete=models.CASCADE,
        related_name='targeted_keywords'
    )
    keyword = models.CharField(max_length=255)
    priority = models.IntegerField(
        choices=PRIORITY_CHOICES,
        default=3,
        help_text="Priority level for this keyword"
    )
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def get_monthly_rankings(self, months=12):
        """Get monthly ranking history"""
        end_date = timezone.now().date()
        start_date = end_date - relativedelta(months=months)
        
        # logger.debug(
        #     f"Fetching monthly rankings for keyword '{self.keyword}' (ID: {self.id})"
        #     f"\nDate range: {start_date} to {end_date}"
        # )
        
        rankings = self.ranking_history.filter(
            date__gte=start_date,
            date__lte=end_date
        ).order_by('date')
        
        # logger.debug(f"Found {rankings.count()} ranking records")
        
        # Group by month and get the monthly record
        monthly_data = {}
        for ranking in rankings:
            month_key = ranking.date.strftime('%Y-%m')
            if month_key not in monthly_data:
                data = {
                    'date': ranking.date,
                    'position': float(ranking.average_position),
                    'impressions': int(ranking.impressions),
                    'clicks': int(ranking.clicks),
                    'ctr': float(ranking.ctr)
                }
                monthly_data[month_key] = data
                # logger.debug(
                #     f"Added data for {month_key}:"
                #     f"\nPosition: {data['position']}"
                #     f"\nImpressions: {data['impressions']}"
                #     f"\nClicks: {data['clicks']}"
                #     f"\nCTR: {data['ctr']}"
                # )
        
        result = [monthly_data[k] for k in sorted(monthly_data.keys())]
        # logger.debug(
        #     f"Returning {len(result)} months of data for {self.keyword}"
        # )
        return result

    def get_ranking_history(self):
        """Get all ranking history entries for this keyword"""
        return KeywordRankingHistory.objects.filter(
            Q(keyword=self) | 
            Q(keyword_text=self.keyword, client=self.client)
        ).order_by('-date')

    @property
    def current_position(self):
        """Get the most recent average position"""
        latest = self.get_ranking_history().first()
        return round(latest.average_position, 1) if latest else None

    def get_position_change(self, months=1):
        """Calculate position change over specified number of months"""
        history = self.get_ranking_history()[:2]  # Get latest two entries
        if len(history) < 2:
            return None
            
        current = history[0].average_position
        previous = history[1].average_position
        
        return round(previous - current, 1)

    @property
    def position_trend(self):
        """Returns trend indicator based on 30-day change"""
        change = self.get_position_change()
        if change is None:
            return 'neutral'
        if change > 0.5:  # Improved by more than 0.5 positions
            return 'up'
        if change < -0.5:  # Declined by more than 0.5 positions
            return 'down'
        return 'neutral'

    class Meta:
        unique_together = ['client', 'keyword']
        ordering = ['priority', 'keyword']

    def __str__(self):
        return f"{self.keyword} ({self.client.name})"

class KeywordRankingHistory(models.Model):
    client = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='keyword_rankings'
    )
    keyword = models.ForeignKey(
        TargetedKeyword,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='ranking_history'
    )
    keyword_text = models.CharField(
        max_length=255,
        help_text="Actual keyword text, useful when no TargetedKeyword reference exists"
    )
    date = models.DateField()
    impressions = models.IntegerField(default=0)
    clicks = models.IntegerField(default=0)
    ctr = models.FloatField(
        verbose_name="Click-Through Rate",
        help_text="Click-through rate as a decimal (e.g., 0.15 for 15%)"
    )
    average_position = models.FloatField()
    
    class Meta:
        unique_together = ['client', 'keyword_text', 'date']
        ordering = ['-date']
        get_latest_by = 'date'
        indexes = [
            models.Index(fields=['-date']),  # Optimize date-based queries
            models.Index(fields=['client', '-date']),  # Optimize client+date queries
        ]

    @classmethod
    def get_rankings_for_period(cls, client, start_date, end_date, keyword=None):
        """Get rankings for a specific period"""
        query = cls.objects.filter(
            client=client,
            date__range=[start_date, end_date]
        )
        
        if keyword:
            query = query.filter(
                Q(keyword=keyword) | Q(keyword_text=keyword.keyword)
            )
            
        return query.order_by('date')

    def __str__(self):
        return f"{self.keyword_text} - {self.client.name} - {self.date}"

    @property
    def position_change(self):
        """Calculate position change from previous entry"""
        previous = KeywordRankingHistory.objects.filter(
            client=self.client,
            keyword_text=self.keyword_text,
            date__lt=self.date
        ).order_by('-date').first()
        
        if previous:
            return previous.average_position - self.average_position
        return 0

class SEOProject(models.Model):
    client = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='seo_projects'
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    implementation_date = models.DateField()
    completion_date = models.DateField(null=True, blank=True)
    targeted_keywords = models.ManyToManyField(
        TargetedKeyword,
        related_name='related_projects'
    )
    documentation_file = models.FileField(
        upload_to='seo_projects/%Y/%m/',
        null=True,
        blank=True
    )
    initial_rankings = models.JSONField(
        default=dict,
        help_text="Snapshot of keyword rankings before project implementation"
    )
    status = models.CharField(
        max_length=20,
        choices=[
            ('planned', 'Planned'),
            ('in_progress', 'In Progress'),
            ('completed', 'Completed'),
            ('on_hold', 'On Hold'),
        ],
        default='planned'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-implementation_date']

    def __str__(self):
        return f"{self.title} - {self.client.name}"

    # Add method to analyze project impact
    def analyze_impact(self):
        implementation_date = self.implementation_date
        pre_period = implementation_date - relativedelta(months=1)
        post_period = implementation_date + relativedelta(months=1)

        results = {}
        for keyword in self.targeted_keywords.all():
            rankings = keyword.ranking_history.filter(
                date__range=[pre_period, post_period]
            ).order_by('date')

            pre_avg = rankings.filter(date__lt=implementation_date).aggregate(
                Avg('average_position'))['average_position__avg']
            post_avg = rankings.filter(date__gte=implementation_date).aggregate(
                Avg('average_position'))['average_position__avg']

            results[keyword.keyword] = {
                'pre_implementation_avg': pre_avg,
                'post_implementation_avg': post_avg,
                'improvement': pre_avg - post_avg if pre_avg and post_avg else None,
                'impressions_change': self._calculate_impressions_change(rankings),
                'clicks_change': self._calculate_clicks_change(rankings)
            }

        return results

================
File: apps/seo_manager/services.py
================
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from google.auth.exceptions import RefreshError
from google.auth.transport.requests import Request  # Add this import
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import (
  DateRange,
  Dimension,
  Metric,
  RunReportRequest,
)

def get_analytics_service(ga_credentials, request):
  print("Entering get_analytics_service")
  try:
      print("GA Credentials:", ga_credentials)
      print("User Email:", ga_credentials.user_email)
      credentials = Credentials(
          token=ga_credentials.access_token,
          refresh_token=ga_credentials.refresh_token,
          token_uri=ga_credentials.token_uri,
          client_id=ga_credentials.ga_client_id,
          client_secret=ga_credentials.client_secret,
          scopes=ga_credentials.scopes
      )
      print("Credentials created, refreshing...")
      credentials.refresh(Request())
      print("Credentials refreshed successfully.")
      client = BetaAnalyticsDataClient(credentials=credentials)
      print("Analytics client created successfully, client:", client)
      return client
  except RefreshError as e:
      print(f"Error refreshing credentials: {e}")
      raise e
  finally:
      print("Exiting get_analytics_service")

def get_analytics_data(client, property_id, start_date, end_date):
  print("Entering get_analytics_data")
  print(f"Fetching analytics data for Property ID: {property_id}, Start Date: {start_date}, End Date: {end_date}")
  
  try:
      request = RunReportRequest(
          property=f"properties/{property_id}",
          dimensions=[Dimension(name="date")],
          metrics=[
              Metric(name="sessions"),
              Metric(name="screenPageViews")  # Changed from "pageviews" to "screenPageViews"
          ],
          date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
      )
      response = client.run_report(request)
      print("Analytics data fetched successfully.")
      return response
  except Exception as e:
      print(f"Error fetching analytics data: {e}")
      raise e
  finally:
      print("Exiting get_analytics_data")

================
File: apps/seo_manager/sitemap_extractor.py
================
import os
import csv
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from django.conf import settings
from datetime import datetime
from apps.common.tools.user_activity_tool import user_activity_tool
import logging

logger = logging.getLogger(__name__)

def extract_sitemap_and_meta_tags(client, user):
  base_url = client.website_url.rstrip('/')  # Remove trailing slash if present
  fqdn = urlparse(base_url).netloc
  date_str = datetime.now().strftime("%y-%m-%d")
  file_name = f"{fqdn}-{date_str}.csv"
  file_path = os.path.join(settings.MEDIA_ROOT, str(user.id), 'meta-tags', file_name)

  # Ensure the directory exists
  os.makedirs(os.path.dirname(file_path), exist_ok=True)

  visited_urls = set()
  urls_to_visit = set()

  def process_sitemap(sitemap_url):
      logger.debug(f"Processing sitemap: {sitemap_url}")
      try:
          response = requests.get(sitemap_url, headers={'User-Agent': 'Mozilla/5.0'})
          if response.status_code == 200:
              soup = BeautifulSoup(response.content, 'xml')
              for loc in soup.find_all('loc'):
                  url = loc.text.strip()
                  if url.endswith('.xml'):
                      process_sitemap(url)
                  else:
                      urls_to_visit.add(url)
      except requests.RequestException as e:
          logger.error(f"Error processing sitemap {sitemap_url}: {e}")

  # Step 1: Look for sitemaps
  sitemap_urls = [
      f"{base_url}/sitemap_index.xml",
      f"{base_url}/sitemap.xml",
      f"{base_url}/sitemap",
  ]

  for sitemap_url in sitemap_urls:
      process_sitemap(sitemap_url)

  # If no sitemap found, start with the base URL
  if not urls_to_visit:
      urls_to_visit.add(base_url)

  with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
      fieldnames = ['url', 'title', 'meta_description', 'meta_charset', 'viewport', 'robots', 'canonical', 'og_title', 'og_description', 'og_image', 'twitter_card', 'twitter_title', 'twitter_description', 'twitter_image', 'author', 'language']
      writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
      writer.writeheader()

      while urls_to_visit:
          url = urls_to_visit.pop()

          if url in visited_urls:
              continue

          # Step 4: Exclude URLs with specific words, anchor links, and query strings
          if any(word in url for word in ['blog', 'product-id', 'search', 'page', 'wp-content']) or '#' in url or '?' in url:
              continue

          try:
              logger.debug(f"Visiting URL: {url}")
              response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
              logger.debug(f"Response: {response.status_code}")
              if response.status_code == 200:
                  soup = BeautifulSoup(response.content, 'html.parser')
                  # Step 3: Extract meta tags
                  meta_tags = {
                      'url': url,
                      'title': soup.title.string if soup.title else '',
                      'meta_description': soup.find('meta', attrs={'name': 'description'})['content'] if soup.find('meta', attrs={'name': 'description'}) else '',
                      'meta_charset': soup.find('meta', attrs={'charset': True})['charset'] if soup.find('meta', attrs={'charset': True}) else '',
                      'viewport': soup.find('meta', attrs={'name': 'viewport'})['content'] if soup.find('meta', attrs={'name': 'viewport'}) else '',
                      'robots': soup.find('meta', attrs={'name': 'robots'})['content'] if soup.find('meta', attrs={'name': 'robots'}) else '',
                      'canonical': soup.find('link', attrs={'rel': 'canonical'})['href'] if soup.find('link', attrs={'rel': 'canonical'}) else '',
                      'og_title': soup.find('meta', attrs={'property': 'og:title'})['content'] if soup.find('meta', attrs={'property': 'og:title'}) else '',
                      'og_description': soup.find('meta', attrs={'property': 'og:description'})['content'] if soup.find('meta', attrs={'property': 'og:description'}) else '',
                      'og_image': soup.find('meta', attrs={'property': 'og:image'})['content'] if soup.find('meta', attrs={'property': 'og:image'}) else '',
                      'twitter_card': soup.find('meta', attrs={'name': 'twitter:card'})['content'] if soup.find('meta', attrs={'name': 'twitter:card'}) else '',
                      'twitter_title': soup.find('meta', attrs={'name': 'twitter:title'})['content'] if soup.find('meta', attrs={'name': 'twitter:title'}) else '',
                      'twitter_description': soup.find('meta', attrs={'name': 'twitter:description'})['content'] if soup.find('meta', attrs={'name': 'twitter:description'}) else '',
                      'twitter_image': soup.find('meta', attrs={'name': 'twitter:image'})['content'] if soup.find('meta', attrs={'name': 'twitter:image'}) else '',
                      'author': soup.find('meta', attrs={'name': 'author'})['content'] if soup.find('meta', attrs={'name': 'author'}) else '',
                      'language': soup.find('html').get('lang', '') if soup.find('html') else '',
                  }

                  writer.writerow(meta_tags)

                  # Step 2: Extract internal links
                  for link in soup.find_all('a', href=True):
                      href = link['href']
                      # Ignore anchor links and query strings
                      if '#' in href or '?' in href:
                          continue
                      full_url = urljoin(url, href)
                      # Remove any fragments from the URL
                      full_url = full_url.split('#')[0]
                      if full_url.startswith(base_url) and full_url not in visited_urls and full_url not in urls_to_visit:
                          urls_to_visit.add(full_url)

                  visited_urls.add(url)

          except requests.RequestException as e:
              logger.error(f"Error processing URL {url}: {e}")

  # Step 7: Log the activity
  user_activity_tool.run(user, 'create', f"Created meta tags snapshot for client: {client.name}", client=client, details={'file_name': file_name})

  return file_path

def extract_sitemap_and_meta_tags_from_url(url, user):
    base_url = url.rstrip('/')  # Remove trailing slash if present
    fqdn = urlparse(base_url).netloc
    date_str = datetime.now().strftime("%y-%m-%d")
    file_name = f"{fqdn}-{date_str}.csv"
    file_path = os.path.join(settings.MEDIA_ROOT, str(user.id), 'meta-tags', file_name)

    # Ensure the directory exists
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    visited_urls = set()
    urls_to_visit = set()

    def process_sitemap(sitemap_url):
        logger.debug(f"Processing sitemap: {sitemap_url}")
        try:
            response = requests.get(sitemap_url, headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'xml')
                for loc in soup.find_all('loc'):
                    url = loc.text.strip()
                    if url.endswith('.xml'):
                        process_sitemap(url)
                    else:
                        urls_to_visit.add(url)
        except requests.RequestException as e:
            logger.error(f"Error processing sitemap {sitemap_url}: {e}")

    # Step 1: Look for sitemaps
    sitemap_urls = [
        f"{base_url}/sitemap_index.xml",
        f"{base_url}/sitemap.xml",
        f"{base_url}/sitemap",
    ]

    for sitemap_url in sitemap_urls:
        process_sitemap(sitemap_url)

    # If no sitemap found, start with the base URL
    if not urls_to_visit:
        urls_to_visit.add(base_url)

    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['url', 'title', 'meta_description', 'meta_charset', 'viewport', 'robots', 'canonical', 'og_title', 'og_description', 'og_image', 'twitter_card', 'twitter_title', 'twitter_description', 'twitter_image', 'author', 'language']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        while urls_to_visit:
            url = urls_to_visit.pop()

            if url in visited_urls:
                continue

            # Step 4: Exclude URLs with specific words, anchor links, and query strings
            if any(word in url for word in ['blog', 'product-id', 'search', 'page', 'wp-content']) or '#' in url or '?' in url:
                continue

            try:
                logger.debug(f"Visiting URL: {url}")
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
                logger.debug(f"Response: {response.status_code}")
                if response.status_code == 200:
                    soup = BeautifulSoup(response.content, 'html.parser')
                    # Step 3: Extract meta tags
                    meta_tags = {
                        'url': url,
                        'title': soup.title.string if soup.title else '',
                        'meta_description': soup.find('meta', attrs={'name': 'description'})['content'] if soup.find('meta', attrs={'name': 'description'}) else '',
                        'meta_charset': soup.find('meta', attrs={'charset': True})['charset'] if soup.find('meta', attrs={'charset': True}) else '',
                        'viewport': soup.find('meta', attrs={'name': 'viewport'})['content'] if soup.find('meta', attrs={'name': 'viewport'}) else '',
                        'robots': soup.find('meta', attrs={'name': 'robots'})['content'] if soup.find('meta', attrs={'name': 'robots'}) else '',
                        'canonical': soup.find('link', attrs={'rel': 'canonical'})['href'] if soup.find('link', attrs={'rel': 'canonical'}) else '',
                        'og_title': soup.find('meta', attrs={'property': 'og:title'})['content'] if soup.find('meta', attrs={'property': 'og:title'}) else '',
                        'og_description': soup.find('meta', attrs={'property': 'og:description'})['content'] if soup.find('meta', attrs={'property': 'og:description'}) else '',
                        'og_image': soup.find('meta', attrs={'property': 'og:image'})['content'] if soup.find('meta', attrs={'property': 'og:image'}) else '',
                        'twitter_card': soup.find('meta', attrs={'name': 'twitter:card'})['content'] if soup.find('meta', attrs={'name': 'twitter:card'}) else '',
                        'twitter_title': soup.find('meta', attrs={'name': 'twitter:title'})['content'] if soup.find('meta', attrs={'name': 'twitter:title'}) else '',
                        'twitter_description': soup.find('meta', attrs={'name': 'twitter:description'})['content'] if soup.find('meta', attrs={'name': 'twitter:description'}) else '',
                        'twitter_image': soup.find('meta', attrs={'name': 'twitter:image'})['content'] if soup.find('meta', attrs={'name': 'twitter:image'}) else '',
                        'author': soup.find('meta', attrs={'name': 'author'})['content'] if soup.find('meta', attrs={'name': 'author'}) else '',
                        'language': soup.find('html').get('lang', '') if soup.find('html') else '',
                    }

                    writer.writerow(meta_tags)

                    # Step 2: Extract internal links
                    for link in soup.find_all('a', href=True):
                        href = link['href']
                        # Ignore anchor links and query strings
                        if '#' in href or '?' in href:
                            continue
                        full_url = urljoin(url, href)
                        # Remove any fragments from the URL
                        full_url = full_url.split('#')[0]
                        if full_url.startswith(base_url) and full_url not in visited_urls and full_url not in urls_to_visit:
                            urls_to_visit.add(full_url)

                    visited_urls.add(url)

            except requests.RequestException as e:
                logger.error(f"Error processing URL {url}: {e}")

    # At the end, log the activity without a client
    user_activity_tool.run(user, 'create', f"Created meta tags snapshot for URL: {url}", details={'file_name': file_name})

    return file_path

================
File: apps/seo_manager/urls.py
================
from django.urls import path, include
from . import views, views_summarizer, views_analytics
from .views import (
    KeywordListView, KeywordCreateView, KeywordUpdateView,
    ProjectListView, ProjectCreateView, ProjectDetailView
)

app_name = 'seo_manager'

urlpatterns = [
    # Main URLs
    path('', views.dashboard, name='dashboard'),
    path('summarize/', views_summarizer.summarize_view, name='summarize_view'),
    path('task_status/<str:task_id>/', views_summarizer.task_status, name='task_status'),
    
    # Client URLs
    path('clients/', include([
        path('', views.client_list, name='client_list'),
        path('add/', views.add_client, name='add_client'),
        path('<int:client_id>/', include([
            path('', views.client_detail, name='client_detail'),
            path('edit/', views.edit_client, name='edit_client'),
            path('delete/', views.delete_client, name='delete_client'),
            path('analytics/', views_analytics.client_analytics, name='client_analytics'),
            path('search-console/', views.client_search_console, name='client_search_console'),
            path('ads/', views.client_ads, name='client_ads'),
            path('dataforseo/', views.client_dataforseo, name='client_dataforseo'),
            
            # Keyword Management URLs
            path('keywords/', include([
                path('', KeywordListView.as_view(), name='keyword_list'),
                path('add/', KeywordCreateView.as_view(), name='keyword_create'),
                path('import/', views.keyword_import, name='keyword_import'),
                path('<int:pk>/edit/', KeywordUpdateView.as_view(), name='keyword_update'),
                path('<int:pk>/rankings/', views.ranking_import, name='ranking_import'),
            ])),
            
            # SEO Project URLs
            path('projects/', include([
                path('', ProjectListView.as_view(), name='project_list'),
                path('add/', ProjectCreateView.as_view(), name='project_create'),
                path('<int:pk>/', ProjectDetailView.as_view(), name='project_detail'),
                path('<int:project_id>/edit/', views.edit_project, name='edit_project'),
                path('<int:project_id>/delete/', views.delete_project, name='delete_project'),
            ])),
            
            # Credentials URLs
            path('credentials/', include([
                path('ga/oauth/add/', views.add_ga_credentials_oauth, name='add_ga_credentials_oauth'),
                path('ga/service-account/add/', views.add_ga_credentials_service_account, name='add_ga_credentials_service_account'),
                path('ga/remove/', views.remove_ga_credentials, name='remove_ga_credentials'),
                path('sc/add/', views.add_sc_credentials, name='add_sc_credentials'),
                path('sc/remove/', views.remove_sc_credentials, name='remove_sc_credentials'),
            ])),
            
            # Business Objective URLs
            path('business-objective/', include([
                path('edit/<int:objective_index>/', views.edit_business_objective, name='edit_business_objective'),
                path('delete/<int:objective_index>/', views.delete_business_objective, name='delete_business_objective'),
            ])),
            
            # Meta Tags URLs
            path('create-meta-tags-snapshot/', views.create_meta_tags_snapshot, name='create_meta_tags_snapshot'),
            
            # Add this inside the client_id patterns
            path('profile/update/', views.update_client_profile, name='update_client_profile'),
            path('clients/<int:client_id>/keywords/<int:keyword_id>/debug/', views.debug_keyword_data, name='debug_keyword_data'),
            path('rankings/', include([
                path('collect/', views.collect_rankings, name='collect_rankings'),
                path('report/', views.generate_report, name='generate_report'),
                path('backfill/', views.backfill_rankings, name='backfill_rankings'),
                path('manage/', views.ranking_data_management, name='ranking_data_management'),
                path('export-csv/', views.export_rankings_csv, name='export_rankings_csv'),
            ])),
        ])),
    ])),
    
    # Other URLs
    path('activity-log/', views.activity_log, name='activity_log'),
    path('create-meta-tags-snapshot-url/', views.create_meta_tags_snapshot_url, name='create_meta_tags_snapshot_url'),
    # Business Objectives URLs
    path('clients/<int:client_id>/objectives/add/', 
         views.add_business_objective, 
         name='add_business_objective'),
    path('clients/<int:client_id>/objectives/<int:objective_index>/edit/', 
         views.edit_business_objective, 
         name='edit_business_objective'),
    path('clients/<int:client_id>/objectives/<int:objective_index>/delete/', 
         views.delete_business_objective, 
         name='delete_business_objective'),
]

================
File: apps/seo_manager/utils.py
================
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from typing import List, Tuple

def get_monthly_date_ranges(months_back: int = 12) -> List[Tuple[date, date]]:
    """
    Generate a list of (start_date, end_date) tuples for each month
    going back X months from today.
    """
    today = date.today()
    ranges = []
    
    for i in range(months_back):
        # Get first day of the month
        end_date = today - relativedelta(months=i)
        start_date = end_date.replace(day=1)
        
        # For current month, use today as end_date
        if i == 0:
            ranges.append((start_date, today))
        else:
            # Get last day of the month
            end_date = (start_date + relativedelta(months=1) - timedelta(days=1))
            ranges.append((start_date, end_date))
    
    return ranges

================
File: apps/seo_manager/views_analytics.py
================
import json
import logging
from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Client, GoogleAnalyticsCredentials, SearchConsoleCredentials
from .google_auth import get_search_console_properties
from datetime import datetime, timedelta
from google.auth.exceptions import RefreshError
from apps.agents.tools.google_analytics_tool.google_analytics_tool import GoogleAnalyticsTool
from django.core.serializers.json import DjangoJSONEncoder
from apps.common.tools.user_activity_tool import user_activity_tool

logger = logging.getLogger(__name__)

@login_required
def client_analytics(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    ga_credentials = get_object_or_404(GoogleAnalyticsCredentials, client=client)
    sc_credentials = get_object_or_404(SearchConsoleCredentials, client=client)
    
    context = {
        'client': client,
        'analytics_data': None,
        'search_console_data': None,
        'start_date': None,
        'end_date': None,
    }

    try:
        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')

        # New method using GoogleAnalyticsTool
        logger.info("Fetching data using GoogleAnalyticsTool")
        ga_tool = GoogleAnalyticsTool()
        
        ga_tool_data = ga_tool._run(start_date=start_date, end_date=end_date, client_id=client_id)
        
        # Parse the JSON string returned by the tool
        try:
            analytics_data = json.loads(ga_tool_data['analytics_data'])
            
            # Convert the data back to JSON string using DjangoJSONEncoder
            context['analytics_data'] = json.dumps(analytics_data, cls=DjangoJSONEncoder)
        except json.JSONDecodeError as e:
            logger.error(f"JSON parsing error: {str(e)}")
            messages.error(request, "Error parsing analytics data. Please try again later.")
        
        context['start_date'] = ga_tool_data['start_date']
        context['end_date'] = ga_tool_data['end_date']
        
        logger.info("Successfully fetched data using GoogleAnalyticsTool")

    except RefreshError:
        logger.error("Google Analytics token has expired. Please re-authenticate.", exc_info=True)
        messages.error(request, "Google Analytics token has expired. Please re-authenticate.")
    except Exception as e:
        logger.error(f"Unexpected error in Google Analytics: {str(e)}", exc_info=True)
        messages.error(request, f"An error occurred while fetching Google Analytics data: {str(e)}")

    try:
        search_console_client = get_search_console_service(sc_credentials, request)
        search_console_data = get_search_console_data(search_console_client, sc_credentials.property_url, start_date, end_date)
        context['search_console_data'] = search_console_data
    except RefreshError:
        logger.error("Search Console token has expired. Please re-authenticate.", exc_info=True)
        messages.error(request, "Search Console token has expired. Please re-authenticate.")
    except Exception as e:
        logger.error(f"Unexpected error in Search Console: {str(e)}", exc_info=True)
        messages.error(request, f"An error occurred while fetching Search Console data: {str(e)}")

    #user_activity_tool.run(request.user, 'view', f"Viewed analytics for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_analytics.html', context)

def get_search_console_service(credentials, request):
    from googleapiclient.discovery import build
    from google.oauth2.credentials import Credentials
    
    creds = Credentials(
        token=credentials.access_token,
        refresh_token=credentials.refresh_token,
        token_uri=credentials.token_uri,
        client_id=credentials.sc_client_id,
        client_secret=credentials.client_secret
    )
    
    return build('searchconsole', 'v1', credentials=creds)

def get_search_console_data(service, property_url, start_date, end_date):
    try:
        response = service.searchanalytics().query(
            siteUrl=property_url,
            body={
                'startDate': start_date,
                'endDate': end_date,
                'dimensions': ['query'],
                'rowLimit': 1000
            }
        ).execute()
        
        search_console_data = []
        for row in response.get('rows', []):
            search_console_data.append({
                'query': row['keys'][0],
                'clicks': row['clicks'],
                'impressions': row['impressions'],
                'ctr': row['ctr'] * 100,  # Convert to percentage
                'position': row['position']
            })
        
        search_console_data.sort(key=lambda x: x['impressions'], reverse=True)
        
        return search_console_data
    except HttpError as error:
        print(f"An error occurred: {error}")
        return []

================
File: apps/seo_manager/views_summarizer.py
================
from django.contrib.auth.models import User
from django.conf import settings

from apps.tasks.tasks import summarize_content
import mistune

from django.http import JsonResponse
from celery.result import AsyncResult
import logging
from apps.common.utils import get_models
from apps.common.tools.user_activity_tool import user_activity_tool  # Add this import

import json
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import SummarizerUsage



@login_required
def summarize_view(request):
  models = get_models()
  logging.info(f'request.user.id: {request.user.id}')
  model_selected = settings.SUMMARIZER
  
  if request.method == 'POST':
    text_to_summarize = request.POST.get('query_text_value')
    model_selected = request.POST.get('model_selected_value')
    task = summarize_content.delay(text_to_summarize, request.user.id, model_selected)
    
    # Log user activity
    user_activity_tool.run(
      user=request.user,
      category='summarize',
      action=f"Used summarizer with model: {model_selected}",
      details={"text_length": len(text_to_summarize)}
    )
    
    return JsonResponse({'task_id': task.id})
  
  user = User.objects.get(id=request.user.id)
  summarizations = SummarizerUsage.objects.filter(user=user).order_by('-created_at')
  
  for summ in summarizations:
    summ.html_result = mistune.html(summ.response + '\n\n---Detail---------\n\n'+summ.compressed_content)
    
  task_result = None
  task_status = None
  model_selected =  settings.SUMMARIZER
  context = {
    'task_result': task_result,
    'task_status': task_status,
    'summarizations': summarizations,
    'models': models,
    'model_selected': model_selected
  }
  
  # Log user activity for viewing summarize page
  user_activity_tool.run(
    user=request.user,
    category='view',
    action="Viewed summarize page"
  )
  
  return render(request, 'pages/apps/summarize.html', context)

def task_status(request, task_id):
    current_chunk = 0
    total_chunks = 1
    task_result = AsyncResult(task_id)
    if task_result.info is not None:
      if task_result.state == 'SUCCESS':
          result = task_result.result
          html_result = mistune.html(result)
          return JsonResponse({'status': 'SUCCESS', 'result': html_result})
      elif task_result.state == 'FAILURE':
          error = str(task_result.result)
          return JsonResponse({'status': 'FAILURE', 'result': error})
      elif task_result.status == 'processing':
          progress = task_result.info
          current_chunk = progress.get('current_chunk', 0)
          total_chunks = progress.get('total_chunks', 0)
          return JsonResponse({'status': task_result.status, 'current': current_chunk, 'total': total_chunks})
      else:
          if task_result.status:
              return JsonResponse({'status': task_result.status})
          else:
              return JsonResponse({'status': 'PENDING'})
    else:
        return JsonResponse({'status': 'PENDING'})

================
File: apps/seo_manager/views.py
================
import json
import logging
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
from .models import Client, SEOData, GoogleAnalyticsCredentials, SearchConsoleCredentials, UserActivity
from .google_auth import get_google_auth_flow, get_analytics_accounts_oauth, get_analytics_accounts_service_account, get_search_console_properties
from datetime import datetime, timedelta
from .forms import ClientForm, BusinessObjectiveForm, TargetedKeywordForm, KeywordBulkUploadForm, SEOProjectForm, ClientProfileForm
from apps.common.tools.user_activity_tool import user_activity_tool
from .sitemap_extractor import extract_sitemap_and_meta_tags, extract_sitemap_and_meta_tags_from_url
from django.urls import reverse
import os
from urllib.parse import urlparse
from django.conf import settings
from django.views.decorators.http import require_http_methods
from django.views.generic import ListView, CreateView, UpdateView, DetailView
from django.urls import reverse_lazy
from django.contrib.auth.mixins import LoginRequiredMixin
import csv
import io
from .models import TargetedKeyword, SEOProject
from .forms import RankingImportForm
from django.db.models import Avg
from django.db.models import Prefetch
from .models import KeywordRankingHistory
from django.utils import timezone
from dateutil.relativedelta import relativedelta
from django.template.loader import render_to_string
from apps.agents.tools.google_report_tool.google_rankings_tool import GoogleRankingsTool
from django.db.models import Min, Max
from django.core.paginator import Paginator
from django.db.models import Q

logger = logging.getLogger(__name__)

@login_required
def dashboard(request):
    clients = Client.objects.all().order_by('name')
    return render(request, 'seo_manager/dashboard.html', {'clients': clients})

@login_required
def client_list(request):
    clients = Client.objects.all().order_by('name').select_related('group')
    #user_activity_tool.run(request.user, 'view', 'Viewed client list')
    return render(request, 'seo_manager/client_list.html', {'clients': clients})

@login_required
def add_client(request):
    if request.method == 'POST':
        form = ClientForm(request.POST)
        if form.is_valid():
            client = form.save()
            user_activity_tool.run(request.user, 'create', f"Added new client: {client.name}", client=client)
            messages.success(request, f"Client '{client.name}' has been added successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        form = ClientForm()
    
    return render(request, 'seo_manager/add_client.html', {'form': form})

@login_required
def client_detail(request, client_id):
    # First get all the targeted keywords
    client = get_object_or_404(Client.objects.prefetch_related(
        'targeted_keywords'
    ), id=client_id)
    
    # Then for each keyword, get its complete history
    for keyword in client.targeted_keywords.all():
        # Get history both by keyword relationship AND by keyword_text match
        history = KeywordRankingHistory.objects.filter(
            Q(keyword=keyword) | 
            Q(keyword_text=keyword.keyword, client_id=client_id)
        ).order_by('-date')
        
        # Force evaluation and attach to keyword using a proper attribute name
        keyword.ranking_data = list(history)
        
    client_profile_html = client.client_profile
    
    # Get filtered client activities
    important_categories = ['create', 'update', 'delete', 'export', 'import', 'other']
    client_activities = UserActivity.objects.filter(
        client=client,
        category__in=important_categories
    ).order_by('-timestamp')[:10]  # Last 10 important activities
    
    # Get business objectives
    business_objectives = client.business_objectives
    
    # Initialize forms
    keyword_form = TargetedKeywordForm()
    import_form = KeywordBulkUploadForm()
    project_form = SEOProjectForm(client=client)
    business_objective_form = BusinessObjectiveForm()
    
    # Get meta tags files if they exist
    meta_tags_dir = os.path.join(settings.MEDIA_ROOT, 'meta-tags', str(client.id))
    meta_tags_files = []
    if os.path.exists(meta_tags_dir):
        meta_tags_files = sorted(
            [f for f in os.listdir(meta_tags_dir) if f.endswith('.json')],
            key=lambda x: os.path.getmtime(os.path.join(meta_tags_dir, x)),
            reverse=True
        )

    # Prepare keyword and project data with rankings
    keywords = client.targeted_keywords.all().prefetch_related('ranking_history')
    projects = client.seo_projects.all().prefetch_related(
        'targeted_keywords__ranking_history'
    )
    
    # Add these lines before the context dictionary
    # Get ranking data statistics
    ranking_stats = KeywordRankingHistory.objects.filter(
        keyword__client_id=client_id
    ).aggregate(
        earliest_date=Min('date'),
        latest_date=Max('date')
    )
    
    latest_collection_date = ranking_stats['latest_date']
    
    # Calculate data coverage in months if we have data
    data_coverage_months = 0
    if ranking_stats['earliest_date'] and ranking_stats['latest_date']:
        date_diff = ranking_stats['latest_date'] - ranking_stats['earliest_date']
        data_coverage_months = round(date_diff.days / 30)  # Approximate months
    
    # Update this query to count unique keyword_text values
    tracked_keywords_count = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).values('keyword_text').distinct().count()
    
    context = {
        'client': client,
        'client_activities': client_activities,
        'business_objectives': business_objectives,
        'form': business_objective_form,
        'keyword_form': keyword_form,
        'import_form': import_form,
        'project_form': project_form,
        'meta_tags_files': meta_tags_files,
        'keywords': keywords,
        'projects': projects,
        'client_profile_html': client_profile_html,
        'profile_form': ClientProfileForm(initial={'client_profile': client.client_profile}),
        # Add these new context variables
        'latest_collection_date': latest_collection_date,
        'data_coverage_months': data_coverage_months,
        'tracked_keywords_count': tracked_keywords_count,
    }
    
    return render(request, 'seo_manager/client_detail.html', context)

@login_required
def edit_client(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if request.method == 'POST':
        form = ClientForm(request.POST, instance=client)
        if form.is_valid():
            form.save()
            user_activity_tool.run(request.user, 'update', f"Updated client details: {client.name}", client=client)
            messages.success(request, f"Client '{client.name}' has been updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        form = ClientForm(instance=client)
    
    return render(request, 'seo_manager/edit_client.html', {'form': form, 'client': client})

@login_required
def edit_business_objective(request, client_id, objective_index):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        form = BusinessObjectiveForm(request.POST)
        if form.is_valid():
            updated_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': client.business_objectives[objective_index]['date_created'],
                'date_last_modified': datetime.now().isoformat(),
            }
            client.business_objectives[objective_index] = updated_objective
            client.save()
            user_activity_tool.run(request.user, 'update', f"Updated business objective for client: {client.name}", client=client, details=updated_objective)
            messages.success(request, "Business objective updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        objective = client.business_objectives[objective_index]
        initial_data = {
            'goal': objective['goal'],
            'metric': objective['metric'],
            'target_date': datetime.fromisoformat(objective['target_date']),
            'status': objective['status'],
        }
        form = BusinessObjectiveForm(initial=initial_data)
    
    context = {
        'client': client,
        'form': form,
        'objective_index': objective_index,
    }
    
    return render(request, 'seo_manager/edit_business_objective.html', context)

@login_required
def delete_business_objective(request, client_id, objective_index):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        deleted_objective = client.business_objectives.pop(objective_index)
        client.save()
        user_activity_tool.run(request.user, 'delete', f"Deleted business objective for client: {client.name}", client=client, details=deleted_objective)
        messages.success(request, "Business objective deleted successfully.")
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def delete_client(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        user_activity_tool.run(request.user, 'delete', f"Deleted client: {client.name}", client=client)
        client.delete()
        return JsonResponse({'success': True})
    return JsonResponse({'success': False}, status=400)

@login_required
def client_search_console(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    #user_activity_tool.run(request.user, 'view', f"Viewed search console data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_search_console.html', {'client': client})

@login_required
def client_ads(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    #user_activity_tool.run(request.user, 'view', f"Viewed ads data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_ads.html', {'client': client})

@login_required
def client_dataforseo(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    #user_activity_tool.run(request.user, 'view', f"Viewed DataForSEO data for client: {client.name}", client=client)
    return render(request, 'seo_manager/client_dataforseo.html', {'client': client})

def test_view(request):
    return HttpResponse("This is a test view.")

@login_required
def add_ga_credentials_oauth(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        selected_account = request.POST.get('selected_account')
        if selected_account:
            accounts = request.session.get('accounts', [])
            account_data = next((account for account in accounts if account['property_id'] == selected_account), None)
            if account_data:
                GoogleAnalyticsCredentials.objects.update_or_create(
                    client=client,
                    defaults={
                        'access_token': request.session.get('access_token', ''),
                        'refresh_token': request.session.get('refresh_token', ''),
                        'token_uri': request.session.get('token_uri', ''),
                        'ga_client_id': request.session.get('client_id', ''),
                        'client_secret': request.session.get('client_secret', ''),
                        'use_service_account': False,
                        'view_id': account_data['property_id'],
                    }
                )
                user_activity_tool.run(request.user, 'create', f"Added Google Analytics credentials (OAuth) for client: {client.name}", client=client)
                messages.success(request, "Google Analytics credentials (OAuth) added successfully.")
                return redirect('seo_manager:client_detail', client_id=client.id)
            else:
                messages.error(request, "Selected account not found. Please try again.")
        else:
            messages.error(request, "Please select an account.")
    
    if 'accounts' in request.session:
        return render(request, 'seo_manager/select_analytics_account.html', {
            'client': client,
            'accounts': request.session['accounts'],
        })
    
    flow = get_google_auth_flow(request)
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        state=f"{client_id}_ga",
        prompt='consent'
    )
    request.session['oauth_state'] = state
    return redirect(authorization_url)

@login_required
def add_ga_credentials_service_account(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        if 'selected_account' in request.POST:
            selected_account = request.POST.get('selected_account')
            if selected_account:
                accounts = request.session.get('accounts', [])
                account_data = next((account for account in accounts if account['property_id'] == selected_account), None)
                if account_data:
                    GoogleAnalyticsCredentials.objects.update_or_create(
                        client=client,
                        defaults={
                            'service_account_json': request.session.get('service_account_json', ''),
                            'use_service_account': True,
                            'view_id': account_data['property_id'],
                        }
                    )
                    user_activity_tool.run(request.user, 'create', f"Added Google Analytics credentials (Service Account) for client: {client.name}", client=client)
                    messages.success(request, "Google Analytics credentials (Service Account) added successfully.")
                    return redirect('seo_manager:client_detail', client_id=client.id)
                else:
                    messages.error(request, "Selected account not found. Please try again.")
            else:
                messages.error(request, "Please select an account.")
        elif 'service_account_file' in request.FILES:
            service_account_file = request.FILES['service_account_file']
            try:
                service_account_info = json.load(service_account_file)
                service_account_json = json.dumps(service_account_info)
                accounts = get_analytics_accounts_service_account(service_account_json)
                request.session['accounts'] = accounts
                request.session['service_account_json'] = service_account_json
                return render(request, 'seo_manager/select_analytics_account.html', {
                    'client': client,
                    'accounts': accounts,
                })
            except json.JSONDecodeError:
                messages.error(request, "Invalid JSON file. Please upload a valid service account JSON file.")
        else:
            messages.error(request, "No file uploaded. Please select a service account JSON file.")
    
    if 'accounts' in request.session:
        return render(request, 'seo_manager/select_analytics_account.html', {
            'client': client,
            'accounts': request.session['accounts'],
        })
    
    return render(request, 'seo_manager/add_ga_credentials_service_account.html', {'client': client})

@login_required
def google_oauth_callback(request):
    state = request.GET.get('state')
    stored_state = request.session.pop('oauth_state', None)
    
    if state != stored_state:
        messages.error(request, "Invalid state parameter. Please try again.")
        return redirect('seo_manager:client_list')
    
    client_id, credential_type = state.split('_')
    client = get_object_or_404(Client, id=client_id)
    
    flow = get_google_auth_flow(request)
    flow.fetch_token(code=request.GET.get('code'))
    
    credentials = flow.credentials
    
    if credential_type == 'ga':
        accounts = get_analytics_accounts_oauth(credentials)
        request.session['accounts'] = accounts
        request.session['access_token'] = credentials.token
        request.session['refresh_token'] = credentials.refresh_token
        request.session['token_uri'] = credentials.token_uri
        request.session['client_id'] = credentials.client_id
        request.session['client_secret'] = credentials.client_secret
        return redirect('seo_manager:add_ga_credentials_oauth', client_id=client_id)
    elif credential_type == 'sc':
        properties = get_search_console_properties(credentials)
        request.session['properties'] = properties
        request.session['access_token'] = credentials.token
        request.session['refresh_token'] = credentials.refresh_token
        request.session['token_uri'] = credentials.token_uri
        request.session['client_id'] = credentials.client_id
        request.session['client_secret'] = credentials.client_secret
        return redirect('seo_manager:add_sc_credentials', client_id=client_id)
    else:
        messages.error(request, "Invalid credential type.")
        return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def remove_ga_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if client.ga_credentials:
        client.ga_credentials.delete()
        user_activity_tool.run(request.user, 'delete', f"Removed Google Analytics credentials for client: {client.name}", client=client)
        messages.success(request, "Google Analytics credentials removed successfully.")
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def add_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        selected_property = request.POST.get('selected_property')
        if selected_property:
            try:
                SearchConsoleCredentials.objects.update_or_create(
                    client=client,
                    defaults={
                        'property_url': selected_property,
                        'access_token': request.session.get('access_token', ''),
                        'refresh_token': request.session.get('refresh_token', ''),
                        'token_uri': request.session.get('token_uri', ''),
                        'sc_client_id': request.session.get('client_id', ''),
                        'client_secret': request.session.get('client_secret', ''),
                    }
                )
                user_activity_tool.run(request.user, 'create', f"Added Search Console credentials for client: {client.name}", client=client)
                messages.success(request, "Search Console credentials added successfully.")
                
                for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
                    request.session.pop(key, None)
                
                return redirect('seo_manager:client_detail', client_id=client.id)
            except Exception as e:
                messages.error(request, f"Error saving Search Console credentials: {str(e)}")
        else:
            messages.error(request, "Please select a property.")
    
    if 'properties' in request.session:
        return render(request, 'seo_manager/select_search_console_property.html', {
            'client': client,
            'properties': request.session['properties'],
        })
    
    if hasattr(client, 'sc_credentials'):
        messages.warning(request, "Search Console credentials already exist for this client. Remove them first to add new ones.")
        return redirect('seo_manager:client_detail', client_id=client.id)
    
    flow = get_google_auth_flow(request)
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        state=f"{client_id}_sc",
        prompt='consent'
    )
    request.session['oauth_state'] = state
    return redirect(authorization_url)

@login_required
def remove_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    try:
        if hasattr(client, 'sc_credentials'):
            client.sc_credentials.delete()
            user_activity_tool.run(request.user, 'delete', f"Removed Search Console credentials for client: {client.name}", client=client)
            messages.success(request, "Search Console credentials removed successfully.")
        else:
            messages.warning(request, "No Search Console credentials found for this client.")
    except Exception as e:
        messages.error(request, f"Error removing Search Console credentials: {str(e)}")
    
    for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
        request.session.pop(key, None)
    
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def activity_log(request):
    activities = UserActivity.objects.all().order_by('-timestamp')
    #user_activity_tool.run(request.user, 'view', "Viewed activity log")
    return render(request, 'seo_manager/activity_log.html', {'activities': activities})

@login_required
def create_meta_tags_snapshot(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        try:
            file_path = extract_sitemap_and_meta_tags(client, request.user)
            
            # Ensure the directory exists
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            return JsonResponse({
                'success': True,
                'message': f"Meta tags snapshot created successfully. File saved as {os.path.basename(file_path)}"
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': f"An error occurred while creating the snapshot: {str(e)}"
            })
    else:
        return JsonResponse({
            'success': False,
            'message': "Invalid request method."
        })

@login_required
@require_http_methods(["POST"])
def create_meta_tags_snapshot_url(request):
    data = json.loads(request.body)
    url = data.get('url')
    if not url:
        return JsonResponse({
            'success': False,
            'message': "URL is required."
        })
    
    try:
        file_path = extract_sitemap_and_meta_tags_from_url(url, request.user)
        return JsonResponse({
            'success': True,
            'message': f"Meta tags snapshot created successfully. File saved as {os.path.basename(file_path)}"
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f"An error occurred while creating the snapshot: {str(e)}"
        })

# Add these class-based views for keyword management
class KeywordListView(LoginRequiredMixin, ListView):
    template_name = 'seo_manager/keywords/keyword_list.html'
    context_object_name = 'keywords'

    def get_queryset(self):
        return TargetedKeyword.objects.filter(client_id=self.kwargs['client_id'])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        context['import_form'] = KeywordBulkUploadForm()
        return context

class KeywordCreateView(LoginRequiredMixin, CreateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/keyword_form.html'

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        response = super().form_valid(form)
        user_activity_tool.run(self.request.user, 'create', f"Added keyword: {form.instance.keyword}", client=form.instance.client)
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', kwargs={'client_id': self.kwargs['client_id']})

class KeywordUpdateView(LoginRequiredMixin, UpdateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/keyword_form.html'

    def get_queryset(self):
        # Ensure the keyword belongs to the correct client
        return TargetedKeyword.objects.filter(
            client_id=self.kwargs['client_id']
        )

    def form_valid(self, form):
        response = super().form_valid(form)
        user_activity_tool.run(
            self.request.user, 
            'update', 
            f"Updated keyword: {form.instance.keyword}", 
            client=form.instance.client
        )
        messages.success(self.request, "Keyword updated successfully.")
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', 
                          kwargs={'client_id': self.kwargs['client_id']})

@login_required
def keyword_import(request, client_id):
    if request.method == 'POST':
        form = KeywordBulkUploadForm(request.POST, request.FILES)
        if form.is_valid():
            client = get_object_or_404(Client, id=client_id)
            csv_file = request.FILES['csv_file']
            decoded_file = csv_file.read().decode('utf-8')
            csv_data = csv.DictReader(io.StringIO(decoded_file))
            
            for row in csv_data:
                TargetedKeyword.objects.create(
                    client=client,
                    keyword=row['keyword'],
                    priority=int(row['priority']),
                    notes=row.get('notes', '')
                )
            
            user_activity_tool.run(request.user, 'import', f"Imported keywords from CSV", client=client)
            messages.success(request, "Keywords imported successfully.")
            return redirect('seo_manager:client_detail', client_id=client_id)
    
    messages.error(request, "Invalid form submission.")
    return redirect('seo_manager:client_detail', client_id=client_id)

# Add these class-based views for project management
class ProjectListView(LoginRequiredMixin, ListView):
    template_name = 'seo_manager/projects/project_list.html'
    context_object_name = 'projects'

    def get_queryset(self):
        return SEOProject.objects.filter(client_id=self.kwargs['client_id'])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        return context

class ProjectCreateView(LoginRequiredMixin, CreateView):
    model = SEOProject
    form_class = SEOProjectForm
    template_name = 'seo_manager/projects/project_form.html'

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        return kwargs

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        # Capture initial rankings for targeted keywords
        initial_rankings = {}
        for keyword in form.cleaned_data['targeted_keywords']:
            latest_ranking = keyword.ranking_history.first()
            if latest_ranking:
                initial_rankings[keyword.keyword] = latest_ranking.average_position
        form.instance.initial_rankings = initial_rankings
        
        response = super().form_valid(form)
        user_activity_tool.run(self.request.user, 'create', f"Created SEO project: {form.instance.title}", client=form.instance.client)
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', kwargs={'client_id': self.kwargs['client_id']})

class ProjectDetailView(LoginRequiredMixin, DetailView):
    model = SEOProject
    template_name = 'seo_manager/projects/project_detail.html'
    context_object_name = 'project'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Get the implementation date
        implementation_date = self.object.implementation_date
        
        # Calculate periods for comparison
        pre_period_start = implementation_date - timedelta(days=30)
        post_period_end = implementation_date + timedelta(days=30)
        
        # Prepare data for the ranking history chart and performance metrics
        ranking_data = {
            'labels': [],
            'datasets': []
        }
        
        performance_metrics = []
        
        for keyword in self.object.targeted_keywords.all():
            # Get rankings for before and after implementation
            rankings = keyword.ranking_history.filter(
                date__range=(pre_period_start, post_period_end)
            ).order_by('date')
            
            # Calculate average positions for before and after
            pre_avg = rankings.filter(
                date__lt=implementation_date
            ).aggregate(Avg('average_position'))['average_position__avg']
            
            post_avg = rankings.filter(
                date__gte=implementation_date
            ).aggregate(Avg('average_position'))['average_position__avg']
            
            # Calculate improvement
            improvement = pre_avg - post_avg if pre_avg and post_avg else None
            
            # Add to performance metrics
            performance_metrics.append({
                'keyword': keyword.keyword,
                'initial_position': self.object.initial_rankings.get(keyword.keyword),
                'current_position': keyword.ranking_history.first().average_position if keyword.ranking_history.exists() else None,
                'pre_avg': round(pre_avg, 1) if pre_avg else None,
                'post_avg': round(post_avg, 1) if post_avg else None,
                'improvement': round(improvement, 1) if improvement else None
            })
            
            # Prepare chart dataset
            dataset = {
                'label': keyword.keyword,
                'data': [],
                'borderColor': f'#{hash(keyword.keyword) % 0xFFFFFF:06x}',
                'tension': 0.4,
                'fill': False
            }
            
            for ranking in rankings:
                if ranking.date.isoformat() not in ranking_data['labels']:
                    ranking_data['labels'].append(ranking.date.isoformat())
                dataset['data'].append(ranking.average_position)
            
            ranking_data['datasets'].append(dataset)
        
        # Add implementation date marker to chart
        ranking_data['implementation_date'] = implementation_date.isoformat()
        
        context.update({
            'ranking_history_data': json.dumps(ranking_data),
            'performance_metrics': performance_metrics,
            'implementation_date': implementation_date,
            'pre_period_start': pre_period_start,
            'post_period_end': post_period_end
        })
        
        return context

@login_required
def ranking_import(request, client_id):
    if request.method == 'POST':
        form = RankingImportForm(request.POST, request.FILES)
        if form.is_valid():
            form.process_import(request.user)
            messages.success(request, "Rankings imported successfully.")
            return redirect('seo_manager:client_detail', client_id=client_id)
    else:
        form = RankingImportForm()
    
    return render(request, 'seo_manager/keywords/ranking_import.html', {
        'form': form,
        'client': get_object_or_404(Client, id=client_id)
    })

@login_required
def update_client_profile(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        # Get the HTML content directly from the form
        client_profile = request.POST.get('client_profile', '')
        client.client_profile = client_profile
        client.save()
        
        user_activity_tool.run(
            request.user,
            'update',
            f"Updated client profile for: {client.name}",
            client=client
        )
        
        messages.success(request, "Client profile updated successfully.")
        return redirect('seo_manager:client_detail', client_id=client.id)
    
    messages.error(request, "Invalid form submission.")
    return redirect('seo_manager:client_detail', client_id=client.id)

def edit_project(request, client_id, project_id):
    """View for editing an existing SEO project."""
    project = get_object_or_404(SEOProject, id=project_id, client_id=client_id)
    
    if request.method == 'POST':
        form = SEOProjectForm(request.POST, instance=project, client=project.client)
        if form.is_valid():
            form.save()
            messages.success(request, 'Project updated successfully.')
            return redirect('seo_manager:client_detail', client_id=client_id)
    else:
        form = SEOProjectForm(instance=project, client=project.client)
    
    context = {
        'form': form,
        'project': project,
        'client_id': client_id,
    }
    
    return render(request, 'seo_manager/projects/edit_project.html', context)

def delete_project(request, client_id, project_id):
    """View for deleting an SEO project."""
    project = get_object_or_404(SEOProject, id=project_id, client_id=client_id)
    
    if request.method == 'POST':
        project.delete()
        messages.success(request, 'Project deleted successfully.')
        return redirect('seo_manager:client_detail', client_id=client_id)
    
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def debug_keyword_data(request, client_id, keyword_id):
    """Debug view to check keyword data"""
    keyword = get_object_or_404(TargetedKeyword, id=keyword_id, client_id=client_id)
    
    rankings = KeywordRankingHistory.objects.filter(
        keyword=keyword
    ).order_by('-date')
    
    data = {
        'keyword': keyword.keyword,
        'current_position': keyword.current_position,
        'position_change': keyword.get_position_change(),
        'rankings': [
            {
                'date': r.date.strftime('%Y-%m-%d'),
                'position': r.average_position,
                'impressions': r.impressions,
                'clicks': r.clicks,
                'ctr': r.ctr
            }
            for r in rankings
        ]
    }
    
    return JsonResponse(data)

@login_required
@require_http_methods(["POST"])
def collect_rankings(request, client_id):
    try:
        tool = GoogleRankingsTool()
        # Get just the last 30 days of data
        end_date = timezone.now().date()
        start_date = end_date - timedelta(days=30)
        
        result = tool._run(
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            client_id=client_id
        )
        
        if result['success']:
            messages.success(request, "Latest rankings collected successfully")
            return JsonResponse({
                'success': True,
                'message': "Latest rankings data has been collected and stored"
            })
        else:
            return JsonResponse({
                'success': False,
                'error': result.get('error', 'Unknown error occurred')
            })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
@require_http_methods(["POST"])
def generate_report(request, client_id):
    try:
        client = get_object_or_404(Client.objects.select_related(), id=client_id)
        
        # Get the report data
        today = timezone.now().date()
        last_month = today - relativedelta(months=1)
        
        # Use select_related to optimize queries
        keywords = client.targeted_keywords.select_related().all()
        
        report = {
            'period': last_month.strftime('%B %Y'),
            'keywords': {
                'total': keywords.count(),
                'improved': 0,
                'declined': 0,
                'unchanged': 0
            },
            'top_improvements': [],
            'needs_attention': []
        }

        # Process keyword data
        for keyword in keywords:
            change = keyword.get_position_change()
            if change:
                if change > 0:
                    report['keywords']['improved'] += 1
                    if change > 5:
                        report['top_improvements'].append({
                            'keyword': keyword.keyword,
                            'improvement': change
                        })
                elif change < 0:
                    report['keywords']['declined'] += 1
                    if change < -5:
                        report['needs_attention'].append({
                            'keyword': keyword.keyword,
                            'decline': abs(change)
                        })
                else:
                    report['keywords']['unchanged'] += 1

        # Sort improvements and needs attention lists
        report['top_improvements'].sort(key=lambda x: x['improvement'], reverse=True)
        report['needs_attention'].sort(key=lambda x: x['decline'], reverse=True)

        # Limit to top 5 for each list
        report['top_improvements'] = report['top_improvements'][:5]
        report['needs_attention'] = report['needs_attention'][:5]

        # Render the report template
        report_html = render_to_string(
            'seo_manager/reports/monthly_report.html',
            {'report': report, 'client': client},
            request=request
        )

        return JsonResponse({
            'success': True,
            'report_html': report_html
        })
        
    except Exception as e:
        logger.error(f"Error generating report: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': f"Error generating report: {str(e)}"
        })

@login_required
@require_http_methods(["POST"])
def backfill_rankings(request, client_id):
    try:
        tool = GoogleRankingsTool()
        # Pass None for start_date and end_date to trigger 12-month backfill
        result = tool._run(
            start_date=None,
            end_date=None,
            client_id=client_id
        )
        
        if result['success']:
            messages.success(request, "Historical rankings collected successfully")
            return JsonResponse({
                'success': True,
                'message': "12 months of historical ranking data has been collected and stored"
            })
        else:
            return JsonResponse({
                'success': False,
                'error': result.get('error', 'Unknown error occurred')
            })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
def ranking_data_management(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Get ranking data statistics
    ranking_stats = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).aggregate(
        earliest_date=Min('date'),
        latest_date=Max('date')
    )
    
    latest_collection_date = ranking_stats['latest_date']
    
    # Calculate data coverage in months
    data_coverage_months = 0
    if ranking_stats['earliest_date'] and ranking_stats['latest_date']:
        date_diff = ranking_stats['latest_date'] - ranking_stats['earliest_date']
        data_coverage_months = round(date_diff.days / 30)
    
    # Get search query
    search_query = request.GET.get('search', '')
    
    # Get sort parameters
    sort_by = request.GET.get('sort', '-date')  # Default sort by date descending
    if sort_by.startswith('-'):
        order_by = sort_by
        sort_dir = 'desc'
    else:
        order_by = sort_by
        sort_dir = 'asc'
    
    # Get items per page
    items_per_page = int(request.GET.get('items', 25))
    
    # Get rankings with filtering, sorting and pagination
    rankings_list = KeywordRankingHistory.objects.filter(client_id=client_id)
    
    # Apply search filter if provided
    if search_query:
        rankings_list = rankings_list.filter(keyword_text__icontains=search_query)
    
    # Apply sorting
    rankings_list = rankings_list.order_by(order_by)
    
    paginator = Paginator(rankings_list, items_per_page)
    page = request.GET.get('page')
    rankings = paginator.get_page(page)
    
    # Count unique keywords
    tracked_keywords_count = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).values('keyword_text').distinct().count()
    
    context = {
        'client': client,
        'latest_collection_date': latest_collection_date,
        'data_coverage_months': data_coverage_months,
        'tracked_keywords_count': tracked_keywords_count,
        'rankings': rankings,
        'sort_by': sort_by,
        'sort_dir': sort_dir,
        'search_query': search_query,
        'items': items_per_page,
    }
    
    return render(request, 'seo_manager/ranking_data_management.html', context)

@login_required
def export_rankings_csv(request, client_id):
    # Get search query
    search_query = request.GET.get('search', '')
    
    # Get rankings
    rankings = KeywordRankingHistory.objects.filter(client_id=client_id)
    if search_query:
        rankings = rankings.filter(keyword_text__icontains=search_query)
    
    # Create CSV response
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="rankings_{client_id}.csv"'
    
    writer = csv.writer(response)
    writer.writerow(['Keyword', 'Position', 'Change', 'Impressions', 'Clicks', 'CTR', 'Date'])
    
    for ranking in rankings:
        writer.writerow([
            ranking.keyword_text,
            ranking.average_position,
            ranking.position_change,
            ranking.impressions,
            ranking.clicks,
            f"{ranking.ctr:.2f}%",
            ranking.date.strftime("%Y-%m-%d")
        ])
    
    return response

@login_required
def add_business_objective(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        form = BusinessObjectiveForm(request.POST)
        
        if form.is_valid():
            new_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': datetime.now().isoformat(),
                'date_last_modified': datetime.now().isoformat(),
            }
            
            if not client.business_objectives:
                client.business_objectives = []
            
            client.business_objectives.append(new_objective)
            client.save()
            
            user_activity_tool.run(
                request.user, 
                'create', 
                f"Added business objective for client: {client.name}", 
                client=client,
                details=new_objective
            )
            
            messages.success(request, "Business objective added successfully.")
        else:
            messages.error(request, "Error adding business objective. Please check the form.")
            
    return redirect('seo_manager:client_detail', client_id=client_id)

================
File: apps/tables/templatetags/get_attribute.py
================
from django import template

register = template.Library()


@register.filter(name="getattribute")
def getattribute(value, arg):

    #print( ' > ' + str( type( value ) ) + ' -> ' + str( arg ) )

    try:
        return getattr(value, arg)
    except:
        return ''

================
File: apps/tables/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/tables/apps.py
================
from django.apps import AppConfig


class TablesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.tables'

================
File: apps/tables/forms.py
================
from django import forms
from apps.common.models import Sales
from django.utils import timezone



class SalesForm(forms.ModelForm):
    class Meta:
        model = Sales
        fields = '__all__'
        widgets = {
            'PurchaseDate': forms.widgets.DateInput(attrs={'type': 'date', 'value': timezone.now().strftime('%Y-%m-%d')})
        }
    

    def __init__(self, *args, **kwargs):
        super(SalesForm, self).__init__(*args, **kwargs)

        for field_name, field in self.fields.items():
            self.fields[field_name].widget.attrs['placeholder'] = field.label
            self.fields[field_name].widget.attrs['class'] = 'form-control'
            self.fields[field_name].widget.attrs['required'] = True
            self.fields[field_name].widget.attrs['rows'] = '1'
            self.fields['Quantity'].widget.attrs['value'] = 1

================
File: apps/tables/models.py
================
from django.db import models
from django.utils.translation import gettext_lazy as _

# Create your models here.


class ModelChoices(models.TextChoices):
	SALES = 'SALES', _('Sales')
	
class PageItems(models.Model):
	parent = models.CharField(max_length=255, choices=ModelChoices.choices)
	items_per_page = models.IntegerField(default=25)
	
class HideShowFilter(models.Model):
	parent = models.CharField(max_length=255, choices=ModelChoices.choices)
	key = models.CharField(max_length=255)
	value = models.BooleanField(default=False)

	def __str__(self):
		return self.key

class ModelFilter(models.Model):
	parent = models.CharField(max_length=255, choices=ModelChoices.choices)
	key = models.CharField(max_length=255)
	value = models.CharField(max_length=255)

	def __str__(self):
		return self.key

================
File: apps/tables/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/tables/urls.py
================
from django.urls import path

from . import views

urlpatterns = [
    path("", views.datatables, name="data_tables"),
    path('create-filter/', views.create_filter, name="create_filter"),
    path('create-page-items/', views.create_page_items, name="create_page_items"),
    path('create-hide-show-items/', views.create_hide_show_filter, name="create_hide_show_filter"),
    path('delete-filter/<int:id>/', views.delete_filter, name="delete_filter"),
    path('delete/<int:id>/', views.delete, name="delete"),
    path('update/<int:id>/', views.update, name="update"),

    path('export-csv/', views.ExportCSVView.as_view(), name='export_csv'),
]

================
File: apps/tables/utils.py
================
from django.db.models import Q

def product_filter(request, queryset, fields):
    value = request.GET.get('search')
    
    if value:
        dynamic_q = Q()
        for field in fields:
            dynamic_q |= Q(**{f'{field}__icontains': value})
        return queryset.filter(dynamic_q)

    return queryset

================
File: apps/tables/views.py
================
import json
import csv
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from apps.tables.forms import SalesForm
from apps.common.models import Sales
from apps.tables.models import HideShowFilter, ModelFilter, PageItems
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from django.contrib.auth.decorators import login_required
from apps.tables.utils import product_filter
from django.conf import settings
from apps.tables.models import ModelChoices
from django.urls import reverse
from django.views import View

# Create your views here.


def create_filter(request):
    if request.method == "POST":
        keys = request.POST.getlist('key')
        values = request.POST.getlist('value')
        for i in range(len(keys)):
            key = keys[i]
            value = values[i]

            ModelFilter.objects.update_or_create(
                parent=ModelChoices.SALES,
                key=key,
                defaults={'value': value}
            )

        return redirect(request.META.get('HTTP_REFERER'))

def create_page_items(request):
    if request.method == 'POST':
        items = request.POST.get('items')
        page_items, created = PageItems.objects.update_or_create(
            parent=ModelChoices.SALES,
            defaults={'items_per_page':items}
        )
        return redirect(request.META.get('HTTP_REFERER'))

def create_hide_show_filter(request):
    if request.method == "POST":
        data_str = list(request.POST.keys())[0]
        data = json.loads(data_str)

        HideShowFilter.objects.update_or_create(
            parent=ModelChoices.SALES,
            key=data.get('key'),
            defaults={'value': data.get('value')}
        )

        response_data = {'message': 'Model updated successfully'}
        return JsonResponse(response_data)

    return JsonResponse({'error': 'Invalid request'}, status=400)

def delete_filter(request, id):
    filter_instance = ModelFilter.objects.get(id=id, parent=ModelChoices.SALES)
    filter_instance.delete()
    return redirect(request.META.get('HTTP_REFERER'))

def datatables(request):
    db_field_names = [field.name for field in Sales._meta.get_fields()]

    # hide show column
    field_names = []
    for field_name in db_field_names:
        fields, created = HideShowFilter.objects.get_or_create(key=field_name, parent=ModelChoices.SALES)
        field_names.append(fields)

    # model filter
    filter_string = {}
    filter_instance = ModelFilter.objects.filter(parent=ModelChoices.SALES)
    for filter_data in filter_instance:
        filter_string[f'{filter_data.key}__icontains'] = filter_data.value

    order_by = request.GET.get('order_by', 'ID')
    queryset = Sales.objects.filter(**filter_string).order_by(order_by)
    product_list = product_filter(request, queryset, db_field_names)
    form = SalesForm()

    # pagination
    page_items = PageItems.objects.filter(parent=ModelChoices.SALES).last()
    items = 25
    if page_items:
        items = page_items.items_per_page

    page = request.GET.get('page', 1)
    paginator = Paginator(product_list, items)

    try:
        sales = paginator.page(page)
    except PageNotAnInteger:
        return redirect(reverse('data_tables"'))
    except EmptyPage:
        return redirect(reverse('data_tables"'))

    # submit data
    if request.method == 'POST':
        form = SalesForm(request.POST)
        if form.is_valid():
            return post_request_handling(request, form)
    
    read_only_fields = ('id', )

    context = {
        'segment'  : 'tables',
        'parent'   : 'apps',
        'form'     : form,
        'sales' : sales,
        'total_items': Sales.objects.count(),
        'db_field_names': db_field_names,
        'field_names': field_names,
        'filter_instance': filter_instance,
        'read_only_fields': read_only_fields,
        'items': items
    }
    
    return render(request, 'pages/apps/datatables.html', context)



@login_required(login_url='/accounts/login/basic-login/')
def post_request_handling(request, form):
    form.save()
    return redirect(request.META.get('HTTP_REFERER'))

@login_required(login_url='/accounts/login/basic-login/')
def delete(request, id):
    sale = Sales.objects.get(ID=id)
    sale.delete()
    return redirect(request.META.get('HTTP_REFERER'))


@login_required(login_url='/accounts/login/basic-login/')
def update(request, id):
    sales = Sales.objects.get(ID=id)
    if request.method == 'POST':
        for attribute, value in request.POST.items():
            if attribute == 'csrfmiddlewaretoken':
                continue

            if getattr(sales, attribute, value) is not None:
                setattr(sales, attribute, value)
        
        sales.save()

    return redirect(request.META.get('HTTP_REFERER'))



# Export as CSV
class ExportCSVView(View):
    def get(self, request):
        db_field_names = [field.name for field in Sales._meta.get_fields()]
        fields = []
        show_fields = HideShowFilter.objects.filter(value=False, parent=ModelChoices.SALES)
        for field in show_fields:
            fields.append(field.key)

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="products.csv"'

        writer = csv.writer(response)
        writer.writerow(fields) 

        filter_string = {}
        filter_instance = ModelFilter.objects.filter(parent=ModelChoices.SALES)
        for filter_data in filter_instance:
            filter_string[f'{filter_data.key}__icontains'] = filter_data.value

        order_by = request.GET.get('order_by', 'ID')
        queryset = Sales.objects.filter(**filter_string).order_by(order_by)

        products = product_filter(request, queryset, db_field_names)

        for product in products:
            row_data = [getattr(product, field) for field in fields]
            writer.writerow(row_data)

        return response

================
File: apps/tasks/templatetags/formats.py
================
# -*- encoding: utf-8 -*-
"""
Copyright (c) 2019 - present AppSeed.us
"""

import json
import os

from django import template
from django.conf import settings

register = template.Library()

def date_format(date):
    """
    Returns a formatted date string
    Format:  `Year-Month-Day-Hour-Minute-Second`
    Example: `2022-10-10-00-20-33`
    :param date datetime: Date object to be formatted
    :rtype: str
    """
    try:
        return date.strftime(r'%Y-%m-%d-%H-%M-%S')
    except:
        return date

register.filter("date_format", date_format)

def get_result_field(result, field: str):
    """
    Returns a field from the content of the result attibute in result 
    Example: `result.result['field']`
    :param result AbortableAsyncResult: Result object to get field from
    :param field str: Field to return from result object
    :rtype: str
    """
    result = json.loads(result.result)
    if result:
        return result.get(field)

register.filter("get_result_field", get_result_field)



def log_file_path(path):
    file_path = path.split("tasks_logs")[1]
    return file_path

register.filter("log_file_path", log_file_path)


def log_to_text(path):
    path = path.lstrip('/')

    full_path = os.path.join(settings.CELERY_LOGS_DIR, path)

    try:
        with open(full_path, 'r') as file:
            text = file.read()
        
        return text
    except:
        return 'NO LOGS'

register.filter("log_to_text", log_to_text)

================
File: apps/tasks/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/tasks/apps.py
================
from django.apps import AppConfig


class TasksConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.tasks'

================
File: apps/tasks/celery.py
================
import os
from celery import Celery
from django.conf import settings

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

app = Celery('seoclientmanager')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)

@app.task(bind=True)
def debug_task(self):
  print(f'Request: {self.request!r}')

================
File: apps/tasks/models.py
================
from django.db import models

# Create your models here.

================
File: apps/tasks/tasks.py
================
import os, time, subprocess
import datetime
from os import listdir
from os.path import isfile, join
from .celery import app
from celery.contrib.abortable import AbortableTask
from django.utils import timezone
from django.contrib.auth.models import User
from django.conf import settings
import logging
import tiktoken

from apps.common.content_loader import ContentLoader
from apps.common.compression_manager import CompressionManager
from apps.common.summarization_manager import SummarizationManager
from apps.seo_manager.models import SummarizerUsage





def get_scripts():
    """
    Returns all scripts from 'ROOT_DIR/celery_scripts'
    """
    raw_scripts = []
    scripts     = []
    ignored_ext = ['db', 'txt']

    try:
        raw_scripts = [f for f in listdir(settings.CELERY_SCRIPTS_DIR) if isfile(join(settings.CELERY_SCRIPTS_DIR, f))]
    except Exception as e:
        return None, 'Error CELERY_SCRIPTS_DIR: ' + str( e ) 

    for filename in raw_scripts:

        ext = filename.split(".")[-1]
        if ext not in ignored_ext:
           scripts.append( filename )

    return scripts, None           

def write_to_log_file(logs, script_name):
    """
    Writes logs to a log file with formatted name in the CELERY_LOGS_DIR directory.
    """
    script_base_name = os.path.splitext(script_name)[0]  # Remove the .py extension
    current_time = datetime.datetime.now().strftime("%y%m%d-%H%M%S")
    log_file_name = f"{script_base_name}-{current_time}.log"
    log_file_path = os.path.join(settings.CELERY_LOGS_DIR, log_file_name)
    
    with open(log_file_path, 'w') as log_file:
        log_file.write(logs)
    
    return log_file_path

@app.task(bind=True, base=AbortableTask)
def execute_script(self, data: dict):
    """
    This task executes scripts found in settings.CELERY_SCRIPTS_DIR and logs are later generated and stored in settings.CELERY_LOGS_DIR
    :param data dict: contains data needed for task execution. Example `input` which is the script to be executed.
    :rtype: None
    """
    script = data.get("script")
    args   = data.get("args")

    print( '> EXEC [' + script + '] -> ('+args+')' ) 

    scripts, ErrInfo = get_scripts()

    if script and script in scripts:
        # Executing related script
        script_path = os.path.join(settings.CELERY_SCRIPTS_DIR, script)
        process = subprocess.Popen(
            f"python {script_path} {args}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        time.sleep(8)

        exit_code = process.wait()
        error = False
        status = "STARTED"
        if exit_code == 0:  # If script execution successfull
            logs = process.stdout.read().decode()
            status = "SUCCESS"
        else:
            logs = process.stderr.read().decode()
            error = True
            status = "FAILURE"


        log_file = write_to_log_file(logs, script)

        return {"logs": logs, "input": script, "error": error, "output": "", "status": status, "log_file": log_file}
    
@app.task(bind=True, time_limit=3600)
def summarize_content(self_task, query, user_id, model_name=settings.SUMMARIZER):
    """
    Summarize the given content 
    :param self: Celery task instance
    :param content: str, the text/url to be summarized
    :return: str, the summary of the input text
    """
    start_time = timezone.now()
    max_tokens = settings.SUMMARIZER_MAX_TOKENS
    #logging.info(f"summarize_content, query: {query}, user_id: {user_id}, model_name: {model_name}, max_tokens: {max_tokens}")
# Load Content
    try:
        user = User.objects.get(id=user_id)
    except Exception as e:
        user_id = 3
        user=User.objects.get(id=user_id)
    user=User.objects.get(id=user_id)

    #logging.info(f"Loading content: {query}")
    content_loader = ContentLoader()
    content = content_loader.load_content(query)

    input_tokens = 0
    output_tokens = 0
    path = f'{settings.MEDIA_ROOT}/{user.id}/summarizer/raw_content.txt'
    if  not os.path.exists(os.path.dirname (path)):
        try:
             os.makedirs(os.path.dirname (path))
        except FileExistsError:
            pass
            
    with open(path, 'w') as f:
        f.write(content)
# Clean Text

# Compress Text if necessary
    compression_manager = CompressionManager(model_name, self_task)
    compressed_content, comp_input_tokens, comp_output_tokens = compression_manager.compress_content(content, max_tokens)
    with open(f'{settings.MEDIA_ROOT}/{user.id}/summarizer/compressed_content.txt', 'w') as f:
        f.write(compressed_content)

    input_tokens += comp_input_tokens
    output_tokens += comp_output_tokens
# Generate Summary
    
    summarization_manager = SummarizationManager(model_name, self_task)
    summary, sum_input_tokens, sum_output_tokens = summarization_manager.summarize_content(compressed_content)
    logging.info("finished compressing content")

    with open(f'{settings.MEDIA_ROOT}/{user.id}/summarizer/summary.txt', 'w') as f:
        f.write(summary)
    logging.info("finished summarizing content")
    input_tokens += sum_input_tokens
    output_tokens += sum_output_tokens

    result = summary + "\n\n--Detail-------------------\n\n" + compressed_content


# save summarizationusage
    end_time = timezone.now()
    duration = end_time - start_time

    tokenizer = tiktoken.get_encoding("cl100k_base")
    content_tokens = tokenizer.encode(content)

    usage = SummarizerUsage.objects.create(
        user=user,
        query=query,
        compressed_content = compressed_content,
        response=summary,
        duration = duration,
        content_token_size=len(content_tokens),
        content_character_count=len(content),
        total_input_tokens=input_tokens,
        total_output_tokens=output_tokens,
        model_used = model_name
    )
    usage.save()
    logging.info(f"task summarize_content, user_id: {user_id}, model_name: {model_name}, max_tokens: {max_tokens}, content_tokens: {len(content_tokens)}, input_tokens: {input_tokens}, output_tokens: {output_tokens}, total_tokens: {input_tokens+output_tokens}, duration: {duration}")

    return result

================
File: apps/tasks/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/tasks/urls.py
================
from django.urls import path

from apps.tasks import views

urlpatterns = [
    # Celery
    path('', views.tasks, name="tasks"),
    path('tasks/run/<str:task_name>'  , views.run_task,    name="run-task"    ),
    path('tasks/cancel/<str:task_id>' , views.cancel_task, name="cancel-task" ),
    path('tasks/output/'              , views.task_output, name="task-output" ),
    path('tasks/log/'                 , views.task_log,    name="task-log"    ), 
    path('download-log-file/<str:file_path>/', views.download_log_file, name='download_log_file'),
]

================
File: apps/tasks/views.py
================
import os
import time
import json

from django.http import HttpResponse
from django.shortcuts import render, redirect

from celery import current_app
from apps.tasks.tasks import execute_script, get_scripts
from django_celery_results.models import TaskResult
from celery.contrib.abortable import AbortableAsyncResult
from apps.tasks.celery import app
from django.http import HttpResponse, Http404
from os import listdir
from os.path import isfile, join
from django.conf import settings

from django.template  import loader

# Create your views here.

def index(request):
    return HttpResponse("INDEX Tasks")



# @login_required(login_url="/login/")
def tasks(request):

    scripts, ErrInfo = get_scripts()
 
    context = {
        'cfgError' : ErrInfo,
        'tasks'    : get_celery_all_tasks(),
        'scripts'  : scripts,
        'segment'  : 'tasks',
        'parent'   : 'apps',
    }

    # django_celery_results_task_result
    task_results = TaskResult.objects.all()
    context["task_results"] = task_results

    html_template = loader.get_template('pages/apps/tasks.html')
    return HttpResponse(html_template.render(context, request)) 

def run_task(request, task_name):
    '''
    Runs a celery task
    :param request HttpRequest: Request
    :param task_name str: Name of task to execute
    :rtype: (HttpResponseRedirect | HttpResponsePermanentRedirect)
    '''
    tasks = [execute_script]
    _script = request.POST.get("script")
    _args   = request.POST.get("args")
    for task in tasks:
        if task.__name__ == task_name:
            task.delay({"script": _script, "args": _args})
    time.sleep(1)  # Waiting for task status to update in db

    return redirect("tasks") 

def cancel_task(request, task_id):
    '''
    Cancels a celery task using its task id
    :param request HttpRequest: Request
    :param task_id str: task_id of result to cancel execution
    :rtype: (HttpResponseRedirect | HttpResponsePermanentRedirect)
    '''
    result = TaskResult.objects.get(task_id=task_id)
    abortable_result = AbortableAsyncResult(
        result.task_id, task_name=result.task_name, app=app)
    if not abortable_result.is_aborted():
        abortable_result.revoke(terminate=True)
    time.sleep(1)
    return redirect("tasks")

def get_celery_all_tasks():
    current_app.loader.import_default_modules()
    tasks = list(sorted(name for name in current_app.tasks
                        if not name.startswith('celery.')))
    tasks = [{"name": name.split(".")[-1], "script":name} for name in tasks]
    for task in tasks:
        last_task = TaskResult.objects.filter(
            task_name=task["script"]).order_by("date_created").last()
        if last_task:
            task["id"] = last_task.task_id
            task["has_result"] = True
            task["status"] = last_task.status
            task["successfull"] = last_task.status == "SUCCESS" or last_task.status == "STARTED"
            task["date_created"] = last_task.date_created
            task["date_done"] = last_task.date_done
            task["result"] = last_task.result

            try:
                task["input"] = json.loads(last_task.result).get("input")
            except:
                task["input"] = ''
                
    return tasks

def task_output(request):
    '''
    Returns a task output 
    '''

    task_id = request.GET.get('task_id')
    task    = TaskResult.objects.get(id=task_id)

    if not task:
        return ''

    # task.result -> JSON Format
    return HttpResponse( task.result )

def task_log(request):
    '''
    Returns a task LOG file (if located on disk) 
    '''

    task_id  = request.GET.get('task_id')
    task     = TaskResult.objects.get(id=task_id)
    task_log = 'NOT FOUND'

    if not task: 
        return ''

    try: 
        # Get logs file
        all_logs = [f for f in listdir(settings.CELERY_LOGS_DIR) if isfile(join(settings.CELERY_LOGS_DIR, f))]
        
        for log in all_logs:

            # Task HASH name is saved in the log name
            if task.task_id in log:
                
                with open( os.path.join( settings.CELERY_LOGS_DIR, log) ) as f:
                    
                    # task_log -> JSON Format
                    task_log = f.readlines() 

                break    
    
    except Exception as e:
        task_log = json.dumps( { 'Error CELERY_LOGS_DIR: ' : str( e) } )

    return HttpResponse(task_log)

def download_log_file(request, file_path):
    path = file_path.replace('%slash%', '/')
    if os.path.exists(path):
        with open(path, 'rb') as fh:
            response = HttpResponse(fh.read(), content_type="application/vnd.ms-excel")
            response['Content-Disposition'] = 'inline; filename=' + os.path.basename(path)
            return response
    raise Http404

================
File: apps/users/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: apps/users/apps.py
================
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.users'

    def ready(self):
        import apps.users.signals

================
File: apps/users/forms.py
================
from django import forms
from django.utils.translation import gettext_lazy as _
from apps.users.models import Profile


class ProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        exclude = ('user', 'role', 'avatar',)

    def __init__(self, *args, **kwargs):
        super(ProfileForm, self).__init__(*args, **kwargs)

        for field_name, field in self.fields.items():
            self.fields[field_name].widget.attrs['placeholder'] = field.label
            self.fields[field_name].widget.attrs['class'] = 'form-control'
            self.fields[field_name].widget.attrs['required'] = False


class QuillFieldForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ('bio',)

================
File: apps/users/models.py
================
import json
from django.db import models
from django.contrib.auth.models import User
from django_quill.fields import QuillField

# Create your models here.

ROLE_CHOICES = (
    ('admin'  , 'Admin'),
    ('user'  , 'User'),
)

def avatar_with_id(instance, filename):
    return "{}/avatar/{}".format(f"{instance.user.id}", filename)

def convert_to_quill():
    converted_data = {
        "delta": "",
        "html": "Write something #cool about you.",
    }
    return json.dumps(converted_data)


class Profile(models.Model):
    user      = models.OneToOneField(User, on_delete=models.CASCADE)
    role      = models.CharField(max_length=20, choices=ROLE_CHOICES, default='user')
    full_name = models.CharField(max_length=255, null=True, blank=True)
    country   = models.CharField(max_length=255, null=True, blank=True)
    city      = models.CharField(max_length=255, null=True, blank=True)
    zip_code  = models.CharField(max_length=255, null=True, blank=True)
    address   = models.CharField(max_length=255, null=True, blank=True)
    phone     = models.CharField(max_length=255, null=True, blank=True)
    avatar    = models.ImageField(upload_to=avatar_with_id, null=True, blank=True)
    bio       = QuillField(default=convert_to_quill())
    dark_mode = models.BooleanField(default=False)


    def __str__(self):
        return self.user.username

================
File: apps/users/signals.py
================
from django.contrib.auth.models import User
from apps.users.models import Profile
from django.db.models.signals import post_save
from django.dispatch import receiver

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        profile = Profile.objects.create(user=instance)
        if instance.is_superuser:
            profile.role = "admin"
            profile.save()

================
File: apps/users/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: apps/users/urls.py
================
from django.urls import path
from apps.users import views


urlpatterns = [
    path('profile/', views.profile, name='profile'),
    path('upload-avatar/', views.upload_avatar, name='upload_avatar'),
    path('change-password/', views.change_password, name='change_password'),
    path('change-mode/', views.change_mode, name='change_mode'),
]

================
File: apps/users/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from apps.users.models import Profile
from apps.users.forms import ProfileForm, QuillFieldForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth.hashers import check_password
from django.contrib import messages

# Create your views here.


@login_required(login_url='/accounts/login/basic-login/')
def profile(request):
    profile = get_object_or_404(Profile, user=request.user)
    form = QuillFieldForm(instance=profile)
    if request.method == 'POST':

        if request.POST.get('email'):
            request.user.email = request.POST.get('email')
            request.user.save()

        for attribute, value in request.POST.items():
            if attribute == 'csrfmiddlewaretoken':
                continue

            setattr(profile, attribute, value)
            profile.save()

        messages.success(request, 'Profile updated successfully')
        return redirect(request.META.get('HTTP_REFERER'))

    context = {
        'segment': 'profile',
        'parent': 'apps',
        'form': form
    }
    return render(request, 'pages/apps/user-profile.html', context)


def upload_avatar(request):
    profile = get_object_or_404(Profile, user=request.user)
    if request.method == 'POST':
        profile.avatar = request.FILES.get('avatar')
        profile.save()
        messages.success(request, 'Avatar uploaded successfully')
    return redirect(request.META.get('HTTP_REFERER'))


def change_password(request):
    user = request.user
    if request.method == 'POST':
        new_password = request.POST.get('new_password')
        confirm_new_password = request.POST.get('confirm_new_password')

        if new_password == confirm_new_password:
            if check_password(request.POST.get('current_password'), user.password):
                user.set_password(new_password)
                user.save()
                messages.success(request, 'Password changed successfully')
            else:
                messages.error(request, "Old password doesn't match!")
        else:
            messages.error(request, "Password doesn't match!")

    return redirect(request.META.get('HTTP_REFERER'))


@login_required(login_url='/accounts/login/basic-login/')
def change_mode(request):
    profile = get_object_or_404(Profile, user=request.user)
    profile.dark_mode = not profile.dark_mode
    profile.save()

    return redirect(request.META.get('HTTP_REFERER'))

================
File: config/settings.py
================


================
File: core/__init__.py
================
from apps.tasks.celery import app as celery_app

__all__ = ('celery_app',)

================
File: core/asgi.py
================
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django_asgi_app = get_asgi_application()

from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from core.routing import websocket_urlpatterns

application = ProtocolTypeRouter({
    "http": django_asgi_app,
    "websocket": AuthMiddlewareStack(
        URLRouter(
            websocket_urlpatterns
        )
    ),
})

================
File: core/routing.py
================
from django.urls import path
from django.utils.module_loading import import_string

websocket_urlpatterns = [
    path('ws/connection_test/', import_string('apps.agents.consumers.ConnectionTestConsumer').as_asgi()),
    path('ws/crew_execution/<str:execution_id>/', import_string('apps.agents.consumers.CrewExecutionConsumer').as_asgi()),
]

================
File: core/settings.py
================
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib import messages
from dotenv import load_dotenv
from str2bool       import str2bool 
import os, random, string, sys


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_FILE = BASE_DIR / '.env'
load_dotenv(dotenv_path=ENV_FILE)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = ''.join(random.choice( string.ascii_lowercase  ) for i in range( 32 ))

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get('DEBUG'))

ALLOWED_HOSTS = ['*', 'manager.neuralami.com']

# Used by DEBUG-Toolbar 
INTERNAL_IPS = [
    "127.0.0.1",
]

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://localhost:5085', 'http://127.0.0.1:8000', 'https://app.neuralami.com', 'http://127.0.0.1:5085', 'https://a36afd9c-6d6b-443f-af26-9f9eddab3ba1-00-12u9itbtcgrof.riker.replit.dev', 'https://manager.neuralami.com'] 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'debug_toolbar',
    'django_quill',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',

    'rest_framework',
    'drf_spectacular',
    'django_api_gen',
    'channels',

    'home',
    'apps.api',
    'apps.charts',
    'apps.common',
    'apps.file_manager',
    'apps.tables',
    'apps.tasks',
    'apps.users',
    'apps.seo_manager',
    'apps.crawl_website.apps.CrawlWebsiteConfig',
    'apps.agents.apps.AgentsConfig',  
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Required for allauth
    'allauth.account.middleware.AccountMiddleware',
    # Required for debug toolbar
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps' / 'seo_manager' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }
# LiteLLM Logs Database
LITELLM_DB_ENGINE   = os.getenv('LITELLM_DB_ENGINE'   , 'postgresql')
LITELLM_DB_NAME     = os.getenv('LITELLM_DB_NAME'     , None)
LITELLM_DB_USERNAME = os.getenv('LITELLM_DB_USERNAME' , None)
LITELLM_DB_PASS     = os.getenv('LITELLM_DB_PASS'     , None)
LITELLM_DB_HOST     = os.getenv('LITELLM_DB_HOST'     , None)
LITELLM_DB_PORT     = os.getenv('LITELLM_DB_PORT'     , None)

# Add litellm_logs database if credentials are provided
if LITELLM_DB_NAME and LITELLM_DB_USERNAME:
    DATABASES['litellm_logs'] = {
        'ENGINE'  : 'django.db.backends.' + LITELLM_DB_ENGINE,
        'NAME'    : LITELLM_DB_NAME,
        'USER'    : LITELLM_DB_USERNAME,
        'PASSWORD': LITELLM_DB_PASS,
        'HOST'    : LITELLM_DB_HOST,
        'PORT'    : LITELLM_DB_PORT,
    }
STAGING_DB_ENGINE = os.getenv('STAGING_DB_ENGINE', 'postgresql')
STAGING_DB_NAME = os.getenv('STAGING_DB_NAME')
STAGING_DB_USERNAME = os.getenv('STAGING_DB_USERNAME')
STAGING_DB_PASS = os.getenv('STAGING_DB_PASS')
STAGING_DB_HOST = os.getenv('STAGING_DB_HOST')
STAGING_DB_PORT = os.getenv('STAGING_DB_PORT', '5432')

if STAGING_DB_NAME and STAGING_DB_USERNAME:
  DATABASES['staging'] = {
      'ENGINE'  : 'django.db.backends.' + STAGING_DB_ENGINE,
      'NAME'    : STAGING_DB_NAME,
      'USER'    : STAGING_DB_USERNAME,
      'PASSWORD': STAGING_DB_PASS,
      'HOST'    : STAGING_DB_HOST,
      'PORT'    : STAGING_DB_PORT,
  }
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGES = [
    ('en', _('English (US)')),
    ('de', _('Deutsch')),
    ('it', _('Italiano')),
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/illustration-login/'

# AllAuth
ACCOUNT_EMAIL_VERIFICATION =  os.getenv('ACCOUNT_EMAIL_VERIFICATION', 'none')
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP':{
            'client_id': os.getenv('GOOGLE_CLIENT_ID', default=""),
            'secret': os.getenv('GOOGLE_SECRET_KEY', default=""),
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'APP':{
            'client_id': os.getenv('GITHUB_CLINET_ID', default=""),
            'secret': os.getenv('GITHUB_SECRET_KEY', default=""),
        }
    }
}

GOOGLE_CLIENT_SECRETS_FILE = os.getenv('GOOGLE_CLIENT_SECRETS_FILE', default="google_secrets.json")

# ### Async Tasks (Celery) Settings ###

CELERY_SCRIPTS_DIR        = os.path.join(BASE_DIR, "tasks_scripts" )

CELERY_LOGS_URL           = "/tasks_logs/"
CELERY_LOGS_DIR           = os.path.join(BASE_DIR, "tasks_logs"    )

CELERY_BROKER_URL         = os.environ.get("CELERY_BROKER", "redis://redis:6379")
#CELERY_RESULT_BACKEND     = os.environ.get("CELERY_BROKER", "redis://redis:6379")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT    = 30 * 60
CELERY_CACHE_BACKEND      = "django-cache"
CELERY_RESULT_BACKEND     = "django-db"
CELERY_RESULT_EXTENDED    = True
CELERY_RESULT_EXPIRES     = 60*60*24*30 # Results expire after 1 month
CELERY_ACCEPT_CONTENT     = ["json"]
CELERY_TASK_SERIALIZER    = 'json'
CELERY_RESULT_SERIALIZER  = 'json'
########################################

X_FRAME_OPTIONS = 'SAMEORIGIN'

# ### API-GENERATOR Settings ###
API_GENERATOR = {
    'sales'   : "apps.common.models.Sales",
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
########################################

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
DEFAULT_HTTP_PROTOCOL='https'
HTTPS=True
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

API_BASE_URL = os.environ.get('API_BASE_URL')
LITELLM_MASTER_KEY= os.environ.get('LITELLM_MASTER_KEY')
SERPAPI_API_KEY=os.environ.get('SERPAPI_API_KEY')
OPENAI_API_BASE=os.environ.get('OPENAI_API_BASE')
ALPHA_VANTAGE_API_KEY=os.environ.get('ALPHA_VANTAGE_API_KEY')
DATAFORSEO_EMAIL = os.environ.get('DATAFORSEO_EMAIL')
DATAFORSEO_PASSWORD = os.environ.get('DATAFORSEO_PASSWORD')
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
PERPLEXITYAI_API_KEY = os.environ.get('PERPLEXITYAI_API_KEY')

GENERAL_MODEL=os.environ.get('GENERAL_MODEL')
TEXT_MODEL=os.environ.get('TEXT_MODEL')
CODING_MODEL=os.environ.get('CODING_MODEL')
SUMMARIZER=os.environ.get('SUMMARIZER')
SUMMARIZER_MAX_TOKENS=int(os.environ.get('SUMMARIZER_MAX_TOKENS'))

EMAIL_ADDRESS = os.environ.get('EMAIL_ADDRESS')
COMPANY_NAME = os.environ.get('COMPANY_NAME')


BROWSERLESS_API_KEY=os.environ.get('BROWSERLESS_API_KEY')
BROWSERLESS_BASE_URL=os.environ.get('BROWSERLESS_BASE_URL')
DOWNLOAD_FOLDER = os.environ.get('DOWNLOAD_FOLDER')
CREWAI_DISABLE_LITELLM=os.environ.get('CREWAI_DISABLE_LITELLM')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'standard',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'allauth': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.crawl_website': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.common': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.seo_manager': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.agents': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.agents.tools.google_analytics_tool': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'channels': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

TIME_ZONE = 'America/New_York'
USE_TZ = True

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get("CELERY_BROKER", "redis://redis:6379/0"),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

================
File: core/urls.py
================
from django.contrib import admin
from django.urls import path, include, re_path
from django.conf import settings
from django.conf.urls.static import static
from django.conf.urls.i18n import i18n_patterns
from home import views
from django.views.static import serve
from apps.seo_manager import views as seo_views

handler404 = 'home.views.error_404'
handler500 = 'home.views.error_500'

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('home.urls')),
    path("api/", include("apps.api.urls")),
    path('charts/', include('apps.charts.urls')),
    path('tasks/', include('apps.tasks.urls')),
    path("tables/", include("apps.tables.urls")),
    path('', include('apps.file_manager.urls')),
    path("users/", include("apps.users.urls")),
    path('i18n/', include('django.conf.urls.i18n')),
    path('accounts/', include('allauth.urls')),
    path('crawl_website/', include('apps.crawl_website.urls')),

    path("__debug__/", include("debug_toolbar.urls")),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

urlpatterns += i18n_patterns(
    path('i18n/', views.i18n_view, name="i18n_view")
)

urlpatterns += [
    path('seo/', include('apps.seo_manager.urls', namespace='seo_manager')),
    path('agents/', include('apps.agents.urls', namespace='agents')),
    path('google/login/callback/', seo_views.google_oauth_callback, name='google_oauth_callback'),
]

================
File: core/wsgi.py
================
"""
WSGI config for core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

application = get_wsgi_application()

================
File: home/templatetags/admin_soft.py
================
# -*- encoding: utf-8 -*-
"""
Copyright (c) 2019 - present AppSeed.us
"""
import re
from django import template
from django.utils.html import format_html
from home.utils import get_menu_items
from django.utils.safestring import mark_safe
from django.contrib.admin.views.main import (PAGE_VAR)

register = template.Library()
assignment_tag = register.assignment_tag if hasattr(register, 'assignment_tag') else register.simple_tag


@register.filter
def clean_text(value):
    res = value.replace('\n', ' ')
    return res


@register.filter
def checkbox(value):
    res = re.sub(r"</?(?i:td)(.|\n)*?>", "", value)
    return res


@assignment_tag(takes_context=True)
def admin_get_menu(context):
    return get_menu_items(context)


@assignment_tag(takes_context=True)
def get_direction(context):
    res = {
        'panel': 'text-left',
        'notify': 'right',
        'float': 'float-right',
        'reverse_panel': 'text-right',
        'nav': 'ml-auto'
    }

    if context.get('LANGUAGE_BIDI'):
        res['panel'] = 'text-right'
        res['notify'] = 'left'
        res['float'] = ''
        res['reverse_panel'] = 'text-left'
        res['nav'] = 'mr-auto'
    return res


@assignment_tag(takes_context=True)
def get_admin_setting(context):
    # user = context.get('request').user
    # admin_black_setting = user.admin_black_setting if hasattr(user, 'admin_black_setting') else None
    res = {
        # 'sidebar_background': admin_black_setting.sidebar_background if admin_black_setting else 'primary',
        # 'dark_mode': admin_black_setting.dark_mode if admin_black_setting else True,
        # 'input_bg_color': '#ffffff' if admin_black_setting and not admin_black_setting.dark_mode else '#27293c'
    }

    return res


@register.simple_tag
def paginator_number(cl, i):
    """
    Generate an individual page index link in a paginated list.
    """
    if i == cl.paginator.ELLIPSIS:
        return format_html('{} ', cl.paginator.ELLIPSIS)
    elif i == cl.page_num:
        return format_html('<a href="" class="page-link">{}</a> ', i)
    else:
        return format_html(
            '<a href="{}" class="page-link {}">{}</a> ',
            cl.get_query_string({PAGE_VAR: i}),
            mark_safe('end' if i == cl.paginator.num_pages else ''),
            i,
        )


@register.filter
def sum_number(value, number):
    return value + number


@register.filter
def neg_num(value, number):
    return value - number

================
File: home/templatetags/replace_value.py
================
from django import template

register = template.Library()

@register.filter(name='replace_value')
def replace_value(value, arg):
    """Removes all values of arg from the given string"""
    return value.replace(arg, ' ').title()

@register.filter(name='clean_title')
def clean_title(text):
    return text.replace('#','').strip().replace('\n','').replace('\r,','')

@register.filter(name='dict2json')
def dict_to_json(dictionary):
    return json.dumps(dictionary)

@register.simple_tag
def client_data(client):
    client_json = json.dumps(client)
    return mark_safe(client_json)

================
File: home/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: home/apps.py
================
from django.apps import AppConfig


class HomeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'home'

================
File: home/forms.py
================
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm, PasswordChangeForm, UsernameField, PasswordResetForm, SetPasswordForm
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _


class RegistrationForm(UserCreationForm):
  password1 = forms.CharField(
      label=_("Password"),
      widget=forms.PasswordInput(attrs={'class': 'form-control', "placeholder": "Password"}),
  )
  password2 = forms.CharField(
      label=_("Password Confirmation"),
      widget=forms.PasswordInput(attrs={'class': 'form-control', "placeholder": "Confirm Password"}),
  )

  class Meta:
    model = User
    fields = ('username', 'email', )

    widgets = {
      'username': forms.TextInput(attrs={
          'class': 'form-control',
          "placeholder": "Username",
      }),
      'email': forms.EmailInput(attrs={
          'class': 'form-control',
          "placeholder": "Email"
      })
    }


class LoginForm(AuthenticationForm):
  username = UsernameField(widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "Username"}))
  password = forms.CharField(
      label=_("Password"),
      strip=False,
      widget=forms.PasswordInput(attrs={"class": "form-control", "placeholder": "Password"}),
  )

class UserPasswordResetForm(PasswordResetForm):
    email = forms.EmailField(widget=forms.EmailInput(attrs={
        'class': 'form-control',
        "placeholder": "Email",
    }))

class UserSetPasswordForm(SetPasswordForm):
    new_password1 = forms.CharField(max_length=50, widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        "placeholder": "New Password",
    }), label="New Password")
    new_password2 = forms.CharField(max_length=50, widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        "placeholder": "Confirm New Password"
    }), label="Confirm New Password")
    

class UserPasswordChangeForm(PasswordChangeForm):
    old_password = forms.CharField(max_length=50, widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        "placeholder": "Old Password"
    }), label='Old Password')
    new_password1 = forms.CharField(max_length=50, widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        "placeholder": "New Password"
    }), label="New Password")
    new_password2 = forms.CharField(max_length=50, widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        "placeholder": "Confirm New Password"
    }), label="Confirm New Password")

================
File: home/models.py
================
from django.db import models
from django.contrib.postgres.fields import ArrayField
from django.db.models import JSONField

# Create your models here.
class LiteLLMSpendLog(models.Model):
    request_id = models.TextField(primary_key=True)
    call_type = models.TextField()
    api_key = ArrayField(models.TextField())
    spend = models.FloatField(default=0.0, db_column='spend')
    total_tokens = models.IntegerField(default=0)
    prompt_tokens = models.IntegerField(default=0)
    completion_tokens = models.IntegerField(default=0)
    startTime = models.DateTimeField()
    endTime = models.DateTimeField()
    completionStartTime = models.DateTimeField(null=True)
    model = ArrayField(models.TextField())
    model_id = ArrayField(models.TextField(), null=True)
    model_group = ArrayField(models.TextField(), null=True)
    api_base = ArrayField(models.TextField(), null=True)
    user = ArrayField(models.TextField(), null=True)
    metadata = JSONField(null=True, default=dict)
    cache_hit = ArrayField(models.TextField(), null=True)
    cache_key = ArrayField(models.TextField(), null=True)
    request_tags = JSONField(null=True, default=list)
    team_id = models.TextField(null=True)
    end_user = models.TextField(null=True)
    requester_ip_address = models.TextField(null=True)

    class Meta:
        managed = False
        db_table = 'LiteLLM_SpendLogs'
        app_label = 'home'

class Last30dKeysBySpend(models.Model):
    api_key = models.TextField(null=True)
    key_alias = models.TextField(null=True)
    key_name = models.TextField(null=True)
    total_spend = models.FloatField(null=True)

    class Meta:
        managed = False
        db_table = 'Last30dKeysBySpend'
        app_label = 'home'

class Last30dModelsBySpend(models.Model):
    model = models.TextField(null=True)
    total_spend = models.FloatField(null=True)

    class Meta:
        managed = False
        db_table = 'Last30dModelsBySpend'
        app_label = 'home'

class Last30dTopEndUsersSpend(models.Model):
    end_user = models.TextField(null=True)
    total_events = models.BigIntegerField(null=True)
    total_spend = models.FloatField(null=True)

    class Meta:
        managed = False
        db_table = 'Last30dTopEndUsersSpend'
        app_label = 'home'

================
File: home/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: home/urls.py
================
from django.urls import path, include
from django.views.generic import RedirectView
from home import views
from django.contrib.auth import views as auth_views

#app_name = 'home'

urlpatterns = [
  # Redirect root to seo_manager dashboard
  path('', RedirectView.as_view(url='/seo/', permanent=False), name='index'),
  
  # Dashboard
  path('automotive', views.automotive, name="automotive"),
  path('smart-home', views.smart_home, name="smart_home"),
  path('crm', views.crm, name="crm"),
  # Dashboard -> VR
  path('vr/vr-default/', views.vr_default, name="vr_default"),
  path('vr/vr-info/', views.vr_info, name="vr_info"),

  # Pages
  path('pages/messages/', views.messages, name="messages"),
  path('pages/widgets/', views.widgets, name="widgets"),
  path('pages/charts/', views.charts, name="charts"),
  path('pages/sweet-alerts/', views.sweet_alerts, name="sweet_alerts"),
  path('pages/notifications/', views.notifications, name="notifications"),
  path('pages/pricing-page/', views.pricing_page, name="pricing"),
  path('pages/rtl/', views.rtl, name="rtl"),
  # Pages -> Profile
  path('pages/profile/profile-overview/', views.profile_overview, name="profile_overview"), 
  path('pages/profile/teams/', views.teams, name="teams"), 
  path('pages/profile/projects/', views.projects, name="projects"), 
  # Pages -> Users
  path('pages/users/reports/', views.reports, name="reports"),
  path('pages/users/new-user/', views.new_user, name="new_user"),
  # Pages -> Accounts
  path('pages/accounts/settings/', views.settings, name="settings"),
  path('pages/accounts/billing/', views.billing, name="billing"),
  path('pages/accounts/invoice/', views.invoice, name="invoice"),
  path('pages/accounts/security/', views.security, name="security"),
  # Pages -> Porjects
  path('pages/projects/general/', views.general, name="general"),
  path('pages/projects/timeline/', views.timeline, name="timeline"),
  path('pages/projects/new-project/', views.new_project, name="new_project"),

  # Applications
  path('applications/kanban/', views.kanban, name="kanban"),
  path('applications/wizard/', views.wizard, name="wizard"),
  path('applications/datatables/', views.datatables, name="datatables"),
  path('applications/calendar/', views.calendar, name="calendar"),
  path('applications/analytics/', views.analytics, name="analytics"),

  # Ecommerce
  path('ecommerce/overview/', views.overview, name="overview"),
  path('ecommerce/referral/', views.referral, name="referral"),
  # Ecommerce -> Products
  path('ecommerce/products/new-product/', views.new_product, name="new_product"),
  path('ecommerce/products/edit-product/', views.edit_product, name="edit_product"),
  path('ecommerce/products/product-page/', views.product_page, name="product_page"),
  path('ecommerce/products/products-list/', views.products_list, name="products_list"),
  # Ecommerce -> Orders
  path('ecommerce/orders/order-list', views.order_list, name="order_list"),
  path('ecommerce/orders/order-details', views.order_details, name="order_details"),

  # Authentication -> Register
  path('accounts/register/basic-register/', views.basic_register, name="basic_register"),
  path('accounts/register/cover-register/', views.cover_register, name="cover_register"),
  path('accounts/register/illustration-register/', views.illustration_register, name="illustration_register"),
  # Authentication -> Login
  path('accounts/login/basic-login/', views.BasicLoginView.as_view(), name="basic_login"),
  path('accounts/login/cover-login/', views.CoverLoginView.as_view(), name="cover_login"),
  path('accounts/login/illustration-login/', views.IllustrationLoginView.as_view(), name="illustration_login"),
  # Authentication -> Reset
  path('accounts/reset/basic-reset/', views.BasicResetView.as_view(), name="basic_reset"),
  path('accounts/reset/cover-reset/', views.CoverResetView.as_view(), name="cover_reset"),
  path('accounts/reset/illustration-reset/', views.IllustrationResetView.as_view(), name="illustration_reset"),

  path('accounts/password-change/', views.UserPasswordChangeView.as_view(), name='password_change'),
  path('accounts/password-change-done/', auth_views.PasswordChangeDoneView.as_view(
      template_name='accounts/done/change-done.html'
  ), name="password_change_done"),
  path('accounts/password-reset-done/', auth_views.PasswordResetDoneView.as_view(
      template_name='accounts/done/basic.html'
  ), name='password_reset_done'),
  path('accounts/password-reset-confirm/<uidb64>/<token>/', 
      views.UserPasswordResetConfirmView.as_view(), name='password_reset_confirm'),
  path('accounts/password-reset-complete/', auth_views.PasswordResetCompleteView.as_view(
      template_name='accounts/complete/basic.html'
  ), name='password_reset_complete'),

  # Authentication -> Lock
  path('accounts/lock/basic-lock/', views.basic_lock, name="basic_lock"),
  path('accounts/lock/cover-lock/', views.cover_lock, name="cover_lock"),
  path('accounts/lock/illustration-lock/', views.illustration_lock, name='illustration_lock'),
  # Authentication -> Verification
  path('accounts/verification/basic-verification/', views.basic_verification, name="basic_verification"),
  path('accounts/verification/cover-verification/', views.cover_verification, name="cover_verification"),
  path('accounts/verification/illustration-verification/', views.illustration_verification, name="illustration_verification"),
  # Error
  path('error/404/', views.error_404, name="error_404"),
  path('error/500/', views.error_500, name="error_500"),
  path('logout/', views.logout_view, name="logout"),
  path('llm-dashboard/', views.llm_dashboard, name='llm-dashboard'),

]

================
File: home/utils.py
================
# -*- encoding: utf-8 -*-
"""
Copyright (c) 2019 - present AppSeed.us
"""

import datetime
import json
from django.template import Context
from django.utils import translation

try:
    from django.apps.registry import apps
except ImportError:
    try:
        from django.apps import apps  # Fix Django 1.7 import issue
    except ImportError:
        pass
from django.core.serializers.json import DjangoJSONEncoder
from django.http import HttpResponse

try:
    from django.core.urlresolvers import reverse, resolve, NoReverseMatch
except ImportError:  # Django 1.11
    from django.urls import reverse, resolve, NoReverseMatch

from django.contrib.admin import AdminSite
from django.utils.text import capfirst
from django.contrib import messages
from django.contrib.admin.options import IncorrectLookupParameters
from django.contrib import admin
from django.utils.text import slugify

try:
    from django.utils.translation import ugettext_lazy as _
except ImportError:
    from django.utils.translation import gettext_lazy as _  # Django 4.0.0 and more

try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict  # Python 2.6


default_apps_icon = {
    'auth': 'fa fa-users'
}


class JsonResponse(HttpResponse):
    """
    An HTTP response class that consumes data to be serialized to JSON.
    :param data: Data to be dumped into json. By default only ``dict`` objects
      are allowed to be passed due to a security flaw before EcmaScript 5. See
      the ``safe`` parameter for more information.
    :param encoder: Should be an json encoder class. Defaults to
      ``django.core.serializers.json.DjangoJSONEncoder``.
    :param safe: Controls if only ``dict`` objects may be serialized. Defaults
      to ``True``.
    """

    def __init__(self, data, encoder=DjangoJSONEncoder, safe=True, **kwargs):
        if safe and not isinstance(data, dict):
            raise TypeError('In order to allow non-dict objects to be '
                            'serialized set the safe parameter to False')
        kwargs.setdefault('content_type', 'application/json')
        data = json.dumps(data, cls=encoder)
        super(JsonResponse, self).__init__(content=data, **kwargs)


def get_app_list(context, order=True):
    admin_site = get_admin_site(context)
    request = context['request']

    app_dict = {}
    for model, model_admin in admin_site._registry.items():

        app_icon = model._meta.app_config.icon if hasattr(model._meta.app_config, 'icon') else None
        app_label = model._meta.app_label
        try:
            has_module_perms = model_admin.has_module_permission(request)
        except AttributeError:
            has_module_perms = request.user.has_module_perms(app_label)  # Fix Django < 1.8 issue

        if has_module_perms:
            perms = model_admin.get_model_perms(request)

            # Check whether user has any perm for this module.
            # If so, add the module to the model_list.
            if True in perms.values():
                info = (app_label, model._meta.model_name)
                model_dict = {
                    'name': capfirst(model._meta.verbose_name_plural),
                    'object_name': model._meta.object_name,
                    'perms': perms,
                    'model_name': model._meta.model_name
                }
                if perms.get('change', False) or perms.get("view", False):
                    try:
                        model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=admin_site.name)
                    except NoReverseMatch:
                        pass
                if perms.get('add', False):
                    try:
                        model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=admin_site.name)
                    except NoReverseMatch:
                        pass
                if app_label in app_dict:
                    app_dict[app_label]['models'].append(model_dict)
                else:
                    try:
                        name = apps.get_app_config(app_label).verbose_name
                    except NameError:
                        name = app_label.title()
                    app_dict[app_label] = {
                        'name': name,
                        'app_label': app_label,
                        'app_url': reverse(
                            'admin:app_list',
                            kwargs={'app_label': app_label},
                            current_app=admin_site.name,
                        ),
                        'has_module_perms': has_module_perms,
                        'models': [model_dict],
                    }

                if not app_icon:
                    app_icon = default_apps_icon[app_label] if app_label in default_apps_icon else None
                app_dict[app_label]['icon'] = app_icon

    # Sort the apps alphabetically.
    app_list = list(app_dict.values())

    if order:
        app_list.sort(key=lambda x: x['name'].lower())

        # Sort the models alphabetically within each app.
        for app in app_list:
            app['models'].sort(key=lambda x: x['name'])

    return app_list


def get_admin_site(context):
    try:
        current_resolver = resolve(context.get('request').path)
        index_resolver = resolve(reverse('%s:index' % current_resolver.namespaces[0]))

        if hasattr(index_resolver.func, 'admin_site'):
            return index_resolver.func.admin_site

        for func_closure in index_resolver.func.__closure__:
            if isinstance(func_closure.cell_contents, AdminSite):
                return func_closure.cell_contents
    except:
        pass

    return admin.site


def get_admin_site_name(context):
    return get_admin_site(context).name


class SuccessMessageMixin(object):
    """
    Adds a success message on successful form submission.
    """
    success_message = ''

    def form_valid(self, form):
        response = super(SuccessMessageMixin, self).form_valid(form)
        success_message = self.get_success_message(form.cleaned_data)
        if success_message:
            messages.success(self.request, success_message)
        return response

    def get_success_message(self, cleaned_data):
        return self.success_message % cleaned_data


def get_model_queryset(admin_site, model, request, preserved_filters=None):
    model_admin = admin_site._registry.get(model)

    if model_admin is None:
        return

    try:
        changelist_url = reverse('%s:%s_%s_changelist' % (
            admin_site.name,
            model._meta.app_label,
            model._meta.model_name
        ))
    except NoReverseMatch:
        return

    changelist_filters = None

    if preserved_filters:
        changelist_filters = preserved_filters.get('_changelist_filters')

    if changelist_filters:
        changelist_url += '?' + changelist_filters

    if model_admin:
        queryset = model_admin.get_queryset(request)
    else:
        queryset = model.objects

    list_display = model_admin.get_list_display(request)
    list_display_links = model_admin.get_list_display_links(request, list_display)
    list_filter = model_admin.get_list_filter(request)
    search_fields = model_admin.get_search_fields(request) \
        if hasattr(model_admin, 'get_search_fields') else model_admin.search_fields
    list_select_related = model_admin.get_list_select_related(request) \
        if hasattr(model_admin, 'get_list_select_related') else model_admin.list_select_related

    actions = model_admin.get_actions(request)
    if actions:
        list_display = ['action_checkbox'] + list(list_display)

    ChangeList = model_admin.get_changelist(request)

    change_list_args = [
        request, model, list_display, list_display_links, list_filter,
        model_admin.date_hierarchy, search_fields, list_select_related,
        model_admin.list_per_page, model_admin.list_max_show_all,
        model_admin.list_editable, model_admin]

    try:
        sortable_by = model_admin.get_sortable_by(request)
        change_list_args.append(sortable_by)
    except AttributeError:
        # django version < 2.1
        pass

    try:
        cl = ChangeList(*change_list_args)
        queryset = cl.get_queryset(request)
    except IncorrectLookupParameters:
        pass

    return queryset


def get_possible_language_codes():
    language_code = translation.get_language()

    language_code = language_code.replace('_', '-').lower()
    language_codes = []

    # making dialect part uppercase
    split = language_code.split('-', 2)
    if len(split) == 2:
        language_code = '%s-%s' % (split[0].lower(), split[1].upper()) if split[0] != split[1] else split[0]

    language_codes.append(language_code)

    # adding language code without dialect part
    if len(split) == 2:
        language_codes.append(split[0].lower())

    return language_codes


def get_original_menu_items(context):
    if context.get('user') and user_is_authenticated(context['user']):
        # pinned_apps = PinnedApplication.objects.filter(user=context['user'].pk).values_list('app_label', flat=True)
        pinned_apps = []
    else:
        pinned_apps = []

    original_app_list = get_app_list(context)

    return map(lambda app: {
        'app_label': app['app_label'],
        'url': app['app_url'],
        'url_blank': False,
        'label': app.get('name', capfirst(_(app['app_label']))),
        'has_perms': app.get('has_module_perms', False),
        'icon': app.get('icon', None),
        'models': list(map(lambda model: {
            'url': model.get('admin_url'),
            'url_blank': False,
            'name': model['model_name'],
            'object_name': model['object_name'],
            'label': model.get('name', model['object_name']),
            'has_perms': any(model.get('perms', {}).values()),
        }, app['models'])),
        'pinned': app['app_label'] in pinned_apps,
        'custom': False
    }, original_app_list)


def get_menu_item_url(url, original_app_list):
    if isinstance(url, dict):
        url_type = url.get('type')

        if url_type == 'app':
            return original_app_list[url['app_label']]['url']
        elif url_type == 'model':
            models = dict(map(
                lambda x: (x['name'], x['url']),
                original_app_list[url['app_label']]['models']
            ))
            return models[url['model']]
        elif url_type == 'reverse':
            return reverse(url['name'], args=url.get('args'), kwargs=url.get('kwargs'))
    elif isinstance(url, str):
        return url


def get_menu_items(context):
    # pinned_apps = PinnedApplication.objects.filter(user=context['user'].pk).values_list('app_label', flat=True)
    pinned_apps = []
    original_app_list = OrderedDict(map(lambda app: (app['app_label'], app), get_original_menu_items(context)))
    custom_app_list = None
    custom_app_list_deprecated = None

    if custom_app_list not in (None, False):
        if isinstance(custom_app_list, dict):
            admin_site = get_admin_site(context)
            custom_app_list = custom_app_list.get(admin_site.name, [])

        app_list = []

        def get_menu_item_app_model(app_label, data):
            item = {'has_perms': True}

            if 'name' in data:
                parts = data['name'].split('.', 2)

                if len(parts) > 1:
                    app_label, name = parts
                else:
                    name = data['name']

                if app_label in original_app_list:
                    models = dict(map(
                        lambda x: (x['name'], x),
                        original_app_list[app_label]['models']
                    ))

                    if name in models:
                        item = models[name].copy()

            if 'label' in data:
                item['label'] = data['label']

            if 'url' in data:
                item['url'] = get_menu_item_url(data['url'], original_app_list)

            if 'url_blank' in data:
                item['url_blank'] = data['url_blank']

            if 'permissions' in data:
                item['has_perms'] = item.get('has_perms', True) and context['user'].has_perms(data['permissions'])

            return item

        def get_menu_item_app(data):
            app_label = data.get('app_label')

            if not app_label:
                if 'label' not in data:
                    raise Exception('Custom menu items should at least have \'label\' or \'app_label\' key')
                app_label = 'custom_%s' % slugify(data['label'], allow_unicode=True)

            if app_label in original_app_list:
                item = original_app_list[app_label].copy()
            else:
                item = {'app_label': app_label, 'has_perms': True}

            if 'label' in data:
                item['label'] = data['label']

            if 'items' in data:
                item['items'] = list(map(lambda x: get_menu_item_app_model(app_label, x), data['items']))

            if 'url' in data:
                item['url'] = get_menu_item_url(data['url'], original_app_list)

            if 'url_blank' in data:
                item['url_blank'] = data['url_blank']

            if 'permissions' in data:
                item['has_perms'] = item.get('has_perms', True) and context['user'].has_perms(data['permissions'])

            item['pinned'] = item['app_label'] in pinned_apps

            return item

        for data in custom_app_list:
            item = get_menu_item_app(data)
            app_list.append(item)
    elif custom_app_list_deprecated not in (None, False):
        app_dict = {}
        models_dict = {}

        for app in original_app_list.values():
            app_label = app['app_label']
            app_dict[app_label] = app

            for model in app['models']:
                if app_label not in models_dict:
                    models_dict[app_label] = {}

                models_dict[app_label][model['object_name']] = model

            app['items'] = []

        app_list = []

        if isinstance(custom_app_list_deprecated, dict):
            admin_site = get_admin_site(context)
            custom_app_list_deprecated = custom_app_list_deprecated.get(admin_site.name, [])

        for item in custom_app_list_deprecated:
            app_label, models = item

            if app_label in app_dict:
                app = app_dict[app_label]

                for model_label in models:
                    if model_label == '__all__':
                        app['items'] = models_dict[app_label].values()
                        break
                    elif model_label in models_dict[app_label]:
                        model = models_dict[app_label][model_label]
                        app['items'].append(model)

                app_list.append(app)
    else:
        def map_item(item):
            item['items'] = item['models']
            return item

        app_list = list(map(map_item, original_app_list.values()))

    current_found = False

    for app in app_list:
        if not current_found:
            for model in app['items']:
                if not current_found and model.get('url') and context['request'].path.startswith(model['url']):
                    model['current'] = True
                    current_found = True
                else:
                    model['current'] = False

            if not current_found and app.get('url') and context['request'].path.startswith(app['url']):
                app['current'] = True
                current_found = True
            else:
                app['current'] = False

    return app_list


def context_to_dict(context):
    if isinstance(context, Context):
        flat = {}
        for d in context.dicts:
            flat.update(d)
        context = flat

    return context


def user_is_authenticated(user):
    if not hasattr(user.is_authenticated, '__call__'):
        return user.is_authenticated
    else:
        return user.is_authenticated()

================
File: home/views.py
================
from django.shortcuts import render, redirect
from django.contrib.auth.views import LoginView, PasswordResetView, PasswordChangeView, PasswordResetConfirmView
from home.forms import RegistrationForm, LoginForm, UserPasswordResetForm, UserSetPasswordForm, UserPasswordChangeForm
from django.contrib.auth import logout
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth.decorators import login_required
from datetime import datetime, timedelta
from django.db.models import Sum, Count
from django.db.models.functions import TruncDay
from .models import LiteLLMSpendLog

# Dashboard
def default(request):
  context = {
    'parent': 'dashboard',
    'segment': 'default'
  }
  return render(request, 'pages/dashboards/default.html', context)

def automotive(request):
  context = {
    'parent': 'dashboard',
    'segment': 'automotive'
  }
  return render(request, 'pages/dashboards/automotive.html', context)

def smart_home(request):
  context = {
    'parent': 'dashboard',
    'segment': 'smart_home'
  }
  return render(request, 'pages/dashboards/smart-home.html', context)

def crm(request):
  context = {
    'parent': 'dashboard',
    'segment': 'crm'
  }
  return render(request, 'pages/dashboards/crm.html', context)

# Dashboard -> VR
def vr_default(request):
  context = {
    'parent': 'dashboard',
    'sub_parent': 'vr',
    'segment': 'vr_default'
  }
  return render(request, 'pages/dashboards/vr/vr-default.html', context)

def vr_info(request):
  context = {
    'parent': 'dashboard',
    'sub_parent': 'vr',
    'segment': 'vr_info'
  }
  return render(request, 'pages/dashboards/vr/vr-info.html', context)

# Pages
def messages(request):
  context = {
    'parent': 'pages',
    'segment': 'messages'
  }
  return render(request, 'pages/messages.html', context)

def widgets(request):
  context = {
    'parent': 'pages',
    'segment': 'widgets'
  }
  return render(request, 'pages/widgets.html', context)

def charts(request):
  context = {
    'parent': 'pages',
    'segment': 'charts'
  }
  return render(request, 'pages/charts.html', context)

def sweet_alerts(request):
  context = {
    'parent': 'pages',
    'segment': 'sweet_alerts'
  }
  return render(request, 'pages/sweet-alerts.html', context)

def notifications(request):
  context = {
    'parent': 'pages',
    'segment': 'notifications'
  }
  return render(request, 'pages/notifications.html', context)

def pricing_page(request):
  return render(request, 'pages/pricing-page.html')

def rtl(request):
  return render(request, 'pages/rtl-page.html')

# Pages -> Profile
def profile_overview(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'profile',
    'segment': 'profile_overview'
  }
  return render(request, 'pages/profile/overview.html', context)

def teams(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'profile',
    'segment': 'teams'
  }
  return render(request, 'pages/profile/teams.html', context)

def projects(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'profile',
    'segment': 'projects'
  }
  return render(request, 'pages/profile/projects.html', context)

# Pages -> Users
def reports(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'users',
    'segment': 'reports'
  }
  return render(request, 'pages/users/reports.html', context)

def new_user(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'users',
    'segment': 'new_user'
  }
  return render(request, 'pages/users/new-user.html', context)

# Pages -> Accounts
def settings(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'accounts',
    'segment': 'settings'
  }
  return render(request, 'pages/account/settings.html', context)

def billing(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'accounts',
    'segment': 'billing'
  }
  return render(request, 'pages/account/billing.html', context)

def invoice(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'accounts',
    'segment': 'invoice'
  }
  return render(request, 'pages/account/invoice.html', context)

def security(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'accounts',
    'segment': 'security'
  }
  return render(request, 'pages/account/security.html', context)

# Pages -> Projects
def general(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'projects',
    'segment': 'general'
  }
  return render(request, 'pages/projects/general.html', context)

def timeline(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'projects',
    'segment': 'timeline'
  }
  return render(request, 'pages/projects/timeline.html', context)

def new_project(request):
  context = {
    'parent': 'pages',
    'sub_parent': 'projects',
    'segment': 'new_project'
  }
  return render(request, 'pages/projects/new-project.html', context)

# Applications
def kanban(request):
  context = {
    'parent': 'applications',
    'segment': 'kanban'
  }
  return render(request, 'pages/applications/kanban.html', context)

def wizard(request):
  context = {
    'parent': 'applications',
    'segment': 'wizard'
  }
  return render(request, 'pages/applications/wizard.html', context)

def datatables(request):
  context = {
    'parent': 'applications',
    'segment': 'datatables'
  }
  return render(request, 'pages/applications/datatables.html', context)

def calendar(request):
  context = {
    'parent': 'applications',
    'segment': 'calendar'
  }
  return render(request, 'pages/applications/calendar.html', context)

def analytics(request):
  context = {
    'parent': 'applications',
    'segment': 'analytics'
  }
  return render(request, 'pages/applications/analytics.html', context)

# Ecommerce
def overview(request):
  context = {
    'parent': 'ecommerce',
    'segment': 'overview'
  }
  return render(request, 'pages/ecommerce/overview.html', context)

def referral(request):
  context = {
    'parent': 'ecommerce',
    'segment': 'referral'
  }
  return render(request, 'pages/ecommerce/referral.html', context)

# Ecommerce -> Products
def new_product(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'products',
    'segment': 'new_product'
  }
  return render(request, 'pages/ecommerce/products/new-product.html', context)

def edit_product(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'products',
    'segment': 'edit_product'
  }
  return render(request, 'pages/ecommerce/products/edit-product.html', context)

def product_page(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'products',
    'segment': 'product_page'
  }
  return render(request, 'pages/ecommerce/products/product-page.html', context)

def products_list(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'products',
    'segment': 'products_list'
  }
  return render(request, 'pages/ecommerce/products/products-list.html', context)

# Ecommerce -> Orders
def order_list(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'orders',
    'segment': 'order_list'
  }
  return render(request, 'pages/ecommerce/orders/list.html', context)

def order_details(request):
  context = {
    'parent': 'ecommerce',
    'sub_parent': 'orders',
    'segment': 'order_details'
  }
  return render(request, 'pages/ecommerce/orders/details.html', context)

# Authentication -> Register
def basic_register(request):
  if request.method == 'POST':
    form = RegistrationForm(request.POST)
    if form.is_valid():
      form.save()
      return redirect('/accounts/login/basic-login/')
  else:
    form = RegistrationForm()
  
  context = {'form': form}
  return render(request, 'accounts/signup/basic.html', context)

def cover_register(request):
  if request.method == 'POST':
    form = RegistrationForm(request.POST)
    if form.is_valid():
      form.save()
      return redirect('/accounts/login/cover-login/')
  else:
    form = RegistrationForm()

  context = {'form': form}
  return render(request, 'accounts/signup/cover.html', context)

def illustration_register(request):
  if request.method == 'POST':
    form = RegistrationForm(request.POST)
    if form.is_valid():
      form.save()
      return redirect('/accounts/login/illustration-login/')
  else:
    form = RegistrationForm()

  context = {'form': form}
  return render(request, 'accounts/signup/illustration.html', context)

# Authentication -> Login
class BasicLoginView(LoginView):
  template_name = 'accounts/signin/basic.html'
  form_class = LoginForm

class CoverLoginView(LoginView):
  template_name = 'accounts/signin/cover.html'
  form_class = LoginForm

class IllustrationLoginView(LoginView):
  template_name = 'accounts/signin/illustration.html'
  form_class = LoginForm

# Authentication -> Reset
class BasicResetView(PasswordResetView):
  template_name = 'accounts/reset/basic.html'
  form_class = UserPasswordResetForm

class CoverResetView(PasswordResetView):
  template_name = 'accounts/reset/cover.html'
  form_class = UserPasswordResetForm

class IllustrationResetView(PasswordResetView):
  template_name = 'accounts/reset/illustration.html'
  form_class = UserPasswordResetForm


class UserPasswordResetConfirmView(PasswordResetConfirmView):
  template_name = 'accounts/reset-confirm/basic.html'
  form_class = UserSetPasswordForm

class UserPasswordChangeView(PasswordChangeView):
  template_name = 'accounts/change/basic.html'
  form_class = UserPasswordChangeForm

# Authentication -> Lock
def basic_lock(request):
  return render(request, 'accounts/lock/basic.html')

def cover_lock(request):
  return render(request, 'accounts/lock/cover.html')

def illustration_lock(request):
  return render(request, 'accounts/lock/illustration.html')

# Authentication -> Verification
def basic_verification(request):
  return render(request, 'accounts/verification/basic.html')

def cover_verification(request):
  return render(request, 'accounts/verification/cover.html')

def illustration_verification(request):
  return render(request, 'accounts/verification/illustration.html')

# Error
def error_404(request,exception=None ):
  return render(request, 'accounts/error/404.html')

def error_500(request, exception=None):
  return render(request, 'accounts/error/500.html')

def logout_view(request):
  logout(request)
  return redirect('/accounts/login/illustration-login/')



# i18n
def i18n_view(request):
  context = {
    'parent': 'apps',
    'segment': 'i18n'
  }
  return render(request, 'pages/apps/i18n.html', context)


@staff_member_required
def llm_dashboard(request):
    # Get date range (default last 30 days)
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    
    # Total spend
    total_spend = LiteLLMSpendLog.objects.using('litellm_logs').aggregate(
        total=Sum('spend'))['total'] or 0
    
    # Total tokens
    total_tokens = LiteLLMSpendLog.objects.using('litellm_logs').aggregate(
        total=Sum('total_tokens'))['total'] or 0
    
    # Requests count
    total_requests = LiteLLMSpendLog.objects.using('litellm_logs').count()
    
    # Daily spend over time
    daily_spend = LiteLLMSpendLog.objects.using('litellm_logs')\
        .filter(startTime__gte=start_date)\
        .annotate(day=TruncDay('startTime'))\
        .values('day')\
        .annotate(total_spend=Sum('spend'))\
        .order_by('day')
    
    # Model usage breakdown - Using request_id for counting
    model_usage = LiteLLMSpendLog.objects.using('litellm_logs')\
        .values_list('model', flat=True)\
        .annotate(
            count=Count('request_id'),
            total_spend=Sum('spend')
        )\
        .order_by('-count')[:5]
    
    context = {
        'total_spend': round(total_spend, 2),
        'total_tokens': total_tokens,
        'total_requests': total_requests,
        'daily_spend': list(daily_spend),
        'model_usage': list(model_usage),
        'segment': 'llm-dashboard'
    }
    
    return render(request, 'home/llm-dashboard.html', context)

================
File: templates/accounts/change/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block body %}bg-gray-200{% endblock body %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-90 m-3 border-radius-xl" style="background-image: url('https://images.unsplash.com/photo-1627850991511-fd5640f0b472?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80');">
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-7 mx-auto">
            <div class="card z-index-0 my-auto">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-success shadow-success border-radius-lg py-3 text-center">
                  <h4 class="font-weight-bolder text-white mb-0 mt-1">Change password</h4>
                  {% comment %} <p class="text-white mb-1">You will receive an e-mail in maximum 60 seconds</p> {% endcomment %}
                </div>
              </div>
              <div class="card-body">
                <form role="form" method="post">
                  {% csrf_token %}


                  {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>

                    <small class="text-danger">{{ field.errors }}</small>
                  {% endfor %}

                  <div class="text-center">
                    <button type="submit" class="btn bg-gradient-dark btn-lg w-100 my-4 mb-2">Change</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {% include 'includes/footer.html' %}
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

{% block extra_js %}

  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/complete/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-90 m-3 border-radius-xl" style="background-image: url('https://images.unsplash.com/photo-1627850991511-fd5640f0b472?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80');">
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-7 mx-auto">
            <div class="card z-index-0 my-auto">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-success shadow-success border-radius-lg py-3 text-center">
                  <h4 class="font-weight-bolder text-white mb-0 mt-1">Password Changed</h4>
                  <p class="text-white mb-1">Your password has been changed successfully, You can login again</p>
                </div>
              </div>
              <div class="card-body">
                <div class="text-center">
                  <a href="{% url 'basic_login' %}" class="btn bg-gradient-dark w-100 mt-2 mb-4">Login</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    {% include 'includes/footer.html' %}

  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}


{% block extra_js %}

  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/done/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}


{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-90 m-3 border-radius-xl" style="background-image: url('https://images.unsplash.com/photo-1627850991511-fd5640f0b472?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80');">
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-7 mx-auto">
            <div class="card z-index-0 my-auto">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-success shadow-success border-radius-lg py-3 text-center">
                  <h4 class="font-weight-bolder text-white mb-0 mt-1">Email Sent</h4>
                  <p class="text-white mb-1">An email has been sent to your email address. Please click the link and reset your password.</p>
                </div>
              </div>
              <div class="card-body">
                
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {% include 'includes/footer.html' %}
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

{% block extra_js %}

  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/done/change-done.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block body %}bg-gray-200{% endblock body %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-90 m-3 border-radius-xl" style="background-image: url('https://images.unsplash.com/photo-1627850991511-fd5640f0b472?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80');">
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-7 mx-auto">
            <div class="card z-index-0 my-auto">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-success shadow-success border-radius-lg py-3 text-center">
                  <h4 class="font-weight-bolder text-white mb-0 mt-1">Password Changed</h4>
                  <p class="text-white mb-1">Your password has been changed successfully.</p>
                </div>
              </div>
              <div class="card-body">
                
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {% include 'includes/footer.html' %}
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}


{% block extra_js %}

  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/done/cover.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block body %}bg-gray-200{% endblock body %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 m-3 border-radius-lg" style="background-image: url('https://images.unsplash.com/photo-1497996541515-6549b145cd90?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1650&q=80');">
      <span class="mask bg-gradient-dark opacity-6"></span>
    </div>
    <div class="container mb-4">
      <div class="row mt-lg-n12 mt-md-n12 mt-n12 justify-content-center">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
          <div class="card mt-8">
            <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
              <div class="bg-gradient-warning shadow-warning border-radius-lg py-3 pe-1 text-center py-4">
                <h3 class="font-weight-bolder text-white">Email Sent</h3>
                <p class="mb-0 text-sm text-white">An email has been sent to your email address. Please click the link and reset your password.</p>
              </div>
            </div>
            <div class="card-body py-4">
            </div>
          </div>
        </div>
      </div>
    </div>
    <footer class="footer position-absolute bottom-2 py-2 w-100">
      <div class="container">
        <div class="row align-items-center justify-content-lg-between">
          <div class="col-12 col-md-6 my-auto">
            <div class="copyright text-center text-sm  text-lg-start">
              © <script>
                document.write(new Date().getFullYear())
              </script>,
              made with <i class="fa fa-heart" aria-hidden="true"></i> by
              <a href="https://www.creative-tim.com" class="font-weight-bold " target="_blank">Creative Tim</a>
              for a better web.
            </div>
          </div>
          <div class="col-12 col-md-6">
            <ul class="nav nav-footer justify-content-center justify-content-lg-end">
              <li class="nav-item">
                <a href="https://www.creative-tim.com" class="nav-link " target="_blank">Creative Tim</a>
              </li>
              <li class="nav-item">
                <a href="https://www.creative-tim.com/presentation" class="nav-link " target="_blank">About Us</a>
              </li>
              <li class="nav-item">
                <a href="https://www.creative-tim.com/blog" class="nav-link " target="_blank">Blog</a>
              </li>
              <li class="nav-item">
                <a href="https://www.creative-tim.com/license" class="nav-link pe-0 " target="_blank">License</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </footer>
  </main>

{% endblock content %}

{% block extra_js %}
  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>
{% endblock extra_js %}

================
File: templates/accounts/done/illustration.html
================
{% extends 'layouts/base-illustration.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 start-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-primary h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center" style="background-image: url('{% static 'assets/img/illustrations/illustration-reset.jpg' %}'); background-size: cover;"></div>
            </div>
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column ms-auto me-auto ms-lg-auto me-lg-5">
              <div class="card card-plain">
                <div class="card-header">
                  <h4 class="font-weight-bolder">Email Sent</h4>
                  <p class="mb-0">An email has been sent to your email address. Please click the link and reset your password.</p>
                </div>
                <div class="card-body">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block extra_js %}
  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/error/404.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block header %}
  {% include 'includes/navigation-dark.html' %}
{% endblock header %}

{% block content %}

  <main class="main-content  mt-0">
    <section class="my-10">
      <div class="container">
        <div class="row">
          <div class="col-lg-6 my-auto">
            <h1 class="display-1 text-bolder text-gradient text-danger">Error 404</h1>
            <h2>Erm. Page not found</h2>
            <p class="lead">We suggest you to go to the homepage while we solve this issue.</p>
            <button type="button" class="btn bg-gradient-dark mt-4">Go to Homepage</button>
          </div>
          <div class="col-lg-6 my-auto position-relative">
            <img class="w-100 position-relative" src="{% static 'assets/img/illustrations/error-404.png' %}" alt="404-error">
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/error/500.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block header %}
  {% include 'includes/navigation-dark.html' %}
{% endblock header %}

{% block content %}


  <main class="main-content  mt-0">
    <div>
      <section class="min-vh-100 d-flex align-items-center">
        <div class="container">
          <div class="row mt-lg-0 mt-8">
            <div class="col-lg-5 my-auto">
              <h1 class="display-1 text-bolder text-gradient text-warning fadeIn1 fadeInBottom mt-5">Error 500</h1>
              <h2 class="fadeIn3 fadeInBottom opacity-8">Something went wrong</h2>
              <p class="lead opacity-6 fadeIn2 fadeInBottom">We suggest you to go to the homepage while we solve this issue.</p>
              <button type="button" class="btn bg-gradient-warning mt-4 fadeIn2 fadeInBottom">Go to Homepage</button>
            </div>
            <div class="col-lg-7 my-auto">
              <img class="w-100 fadeIn1 fadeInBottom" src="{% static 'assets/img/illustrations/error-500.png' %}" alt="500-error">
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>
  
{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/lock/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('{% static 'assets/img/curved-images/curved8.jpg' %}');">
      <span class="mask bg-gradient-dark opacity-6"></span>
    </div>
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
          <div class="card py-lg-3">
            <div class="card-body text-center">
              <div class="info mb-4">
                <img class="avatar avatar-xxl" alt="Image placeholder" src="{% static 'assets/img/team-4.jpg' %}">
              </div>
              <h4 class="mb-0 font-weight-bolder">Mike Priesler</h4>
              <p class="mb-4">Enter password to unlock your account.</p>
              <form role="form">
                <div class="mb-3">
                  <input type="password" class="form-control" placeholder="Password" aria-label="password">
                </div>
                <div class="text-center">
                  <button type="button" class="btn btn-lg bg-gradient-dark mt-3 mb-0">Unlock</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/lock/cover.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}


{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section>
      <div class="page-header min-vh-75">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-6 d-flex flex-column mx-auto">
              <div class="card card-plain py-lg-3">
                <div class="card-body text-center">
                  <h4 class="mb-0 font-weight-bolder">Mike Priesler</h4>
                  <p class="mb-4">Enter password to unlock your account.</p>
                  <form role="form">
                    <div class="mb-3">
                      <input type="password" class="form-control" placeholder="Password" aria-label="password">
                    </div>
                    <div class="text-center">
                      <button type="button" class="btn btn-lg w-100 bg-gradient-dark mb-0">Unlock</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6" style="background-image:url('{% static 'assets/img/curved-images/curved7.jpg' %}')"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

================
File: templates/accounts/lock/illustration.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column mx-lg-0 mx-auto">
              <div class="card card-plain py-lg-3">
                <div class="card-body text-center">
                  <h4 class="mb-0 font-weight-bolder">Mike Priesler</h4>
                  <p class="mb-4">Enter password to unlock your account.</p>
                  <form role="form">
                    <div class="mb-3">
                      <input type="password" class="form-control" placeholder="Password" aria-label="password">
                    </div>
                    <div class="text-center">
                      <button type="button" class="btn btn-lg w-100 bg-gradient-dark mb-0">Unlock</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 end-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-dark h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center">
                <img src="{% static 'assets/img/shapes/pattern-lines.svg' %}" alt="pattern-lines" class="position-absolute opacity-4 start-0">
                <div class="position-relative">
                  <img class="max-width-500 w-100 position-relative z-index-2" src="{% static 'assets/img/illustrations/dark-lock-ill.png' %}" alt="dark-lock">
                </div>
                <h4 class="mt-5 text-white font-weight-bolder">"Attention is the new currency"</h4>
                <p class="text-white">The more effortless the writing looks, the more effort the writer actually put into the process.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}
 
{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/reset/basic.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section class="min-vh-75">
      <div class="container">
        <div class="row">
          <div class="col-lg-5 col-md-7 mx-auto">
            <div class="card z-index-0 mt-sm-12 mt-9 mb-4">
              <div class="card-header text-center pt-4 pb-1">
                <h4 class="font-weight-bolder mb-1">Reset password</h4>
                <p class="mb-0">You will receive an e-mail in maximum 60 seconds</p>
              </div>
              <div class="card-body">
                <form method="post" role="form">
                  {% csrf_token %}

                  {% for field in form %}
                  <div class="mb-3">
                    {{ field }}
                  </div>
                  {% endfor %}

                  <div class="text-center">
                    <button type="submit" class="btn bg-gradient-dark btn-lg w-100 my-4 mb-2">Send</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
  
{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/reset/cover.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}


{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section>
      <div class="page-header min-vh-75">
        <div class="container">
          <div class="row">
            <div class="col-xl-5 col-lg-6 col-md-8 col-12 px-5 d-flex flex-column">
              <div class="card card-plain mt-8">
                <div class="card-header pb-0 text-left">
                  <h3 class="text-info text-gradient">Reset Password</h3>
                  <p class="mb-0">You will receive an e-mail in maximum 60 seconds</p>
                </div>
                <div class="card-body pb-3">
                  <form method="post" role="form">
                    {% csrf_token %}

                    {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    {% endfor %}
                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-info w-100 mt-4 mb-0">Reset</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6" style="background-image:url('{% static 'assets/img/curved-images/curved6.jpg' %}')"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/reset/illustration.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column mx-lg-0 mx-auto">
              <div class="card card-plain">
                <div class="card-header pb-0 text-left">
                  <h4 class="font-weight-bolder">Reset password</h4>
                  <p class="mb-0">You will receive an e-mail in maximum 60 seconds</p>
                </div>
                <div class="card-body">
                  <form method="post" role="form">
                    {% csrf_token %}

                    {% for field in form %}
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    {% endfor %}
                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-primary w-100 my-3">Send</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 end-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-primary h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center">
                <img src="{% static 'assets/img/shapes/pattern-lines.svg' %}" alt="pattern-lines" class="position-absolute opacity-4 start-0">
                <div class="position-relative">
                  <img class="max-width-500 w-100 position-relative z-index-2" src="{% static 'assets/img/illustrations/lock.png' %}" alt="lock-svg">
                </div>
                <h4 class="mt-5 text-white font-weight-bolder">Soft UI Design</h4>
                <p class="text-white">Just as it takes a company to sustain a product, it takes a community to sustain a protocol.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/reset-confirm/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block body %}bg-gray-200{% endblock body %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-90 m-3 border-radius-xl" style="background-image: url('https://images.unsplash.com/photo-1627850991511-fd5640f0b472?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80');">
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-7 mx-auto">
            <div class="card z-index-0 my-auto">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-success shadow-success border-radius-lg py-3 text-center">
                  <h4 class="font-weight-bolder text-white mb-0 mt-1">Reset password</h4>
                  {% comment %} <p class="text-white mb-1">You will receive an e-mail in maximum 60 seconds</p> {% endcomment %}
                </div>
              </div>
              <div class="card-body">
                <form role="form" method="post">
                  {% csrf_token %}

                  {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>

                    <small class="text-danger">{{ field.errors }}</small>
                  {% endfor %}
                  <div class="text-center">
                    <button type="submit" class="btn bg-gradient-dark btn-lg w-100 my-4 mb-2">Reset</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {% include 'includes/footer.html' %}
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

{% block extra_js %}

  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>

{% endblock extra_js %}

================
File: templates/accounts/signin/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static socialaccount %}
{% get_providers as socialaccount_providers %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('{% static 'assets/img/curved-images/curved9.jpg' %}');">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-5 text-center mx-auto">
            <h1 class="text-white mb-2 mt-5">Welcome!</h1>
            <p class="text-lead text-white">Use these awesome forms to login or create new account in your project for free.</p>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
          <div class="card z-index-0">
            <div class="card-header text-center pt-4">
              <h5>Sign IN</h5>
              <p>
                <span>USER: test / Pass12__</span>
                <br />
                <span>ADMIN: admin / Pass12__</span>
              </p>                
            </div>
            
            <div class="row px-xl-5 px-sm-4 px-3">               
              
              <form method="post" action="{% provider_login_url 'github' %}" class="col-3 ms-auto px-1">
                {% csrf_token %}

                <button type="submit" class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github"
                    role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
                    <path
                      d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z">
                    </path>
                  </svg>
                </button>
              </form>

              <form method="post" action="{% provider_login_url 'google' %}" class="col-3 me-auto px-1">
                {% csrf_token %}

                <button class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
                  viewBox="0 0 210 210" xml:space="preserve">
                    <path d="M0,105C0,47.103,47.103,0,105,0c23.383,0,45.515,7.523,64.004,21.756l-24.4,31.696C133.172,44.652,119.477,40,105,40
                      c-35.841,0-65,29.159-65,65s29.159,65,65,65c28.867,0,53.398-18.913,61.852-45H105V85h105v20c0,57.897-47.103,105-105,105
                      S0,162.897,0,105z"/>
                  </svg>
                </button>
              </form>
              

            </div>
            <div class="card-body">
              <form method="post" role="form" class="text-start">
                {% csrf_token %}
                {% if form.non_field_errors %}
                  {% for error in form.non_field_errors %}
                    <div class="text-danger mb-3">{{ error }}</div>
                  {% endfor %}
                {% endif %}

                {% for field in form %}
                <div class="mb-3">
                  {{ field }}
                </div>
                {% endfor %}

                <div class="d-flex justify-content-between align-items-center">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="rememberMe">
                    <label class="form-check-label" for="rememberMe">Remember me</label>
                  </div>
                  <p class="text-sm mt-3">
                    <a href="{% url 'basic_reset' %}" class="text-primary text-gradient font-weight-bold">Forgot Password?</a>
                  </p>
                </div>
                <div class="text-center">
                  <button type="submit" class="btn bg-gradient-info w-100 my-4 mb-2">Sign in</button>
                </div>
                <div class="mb-2 position-relative text-center">
                  <p class="text-sm font-weight-bold mb-2 text-secondary text-border d-inline z-index-2 bg-white px-3">
                    or
                  </p>
                </div>
                <div class="text-center">
                  <a href="{% url 'basic_register' %}" class="btn bg-gradient-dark w-100 mt-2 mb-4">Sign up</a>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/signin/cover.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section>
      <div class="page-header min-vh-75">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-6 d-flex flex-column mx-auto">
              <div class="card card-plain mt-8">
                <div class="card-header pb-0 text-start">
                  <h3 class="font-weight-bolder text-info text-gradient">Welcome back</h3>
                  <p class="mb-0">Enter your email and password to sign in</p>
                </div>
                <div class="card-body">
                  <form method="post" role="form" class="text-start">
                    {% csrf_token %}
                    {% if form.non_field_errors %}
                      {% for error in form.non_field_errors %}
                        <div class="text-danger mb-3">{{ error }}</div>
                      {% endfor %}
                    {% endif %}

                    {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    {% endfor %}

                    <div class="d-flex justify-content-between align-items-center">
                      <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="rememberMe" checked="">
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                      </div>
                      <p class="text-sm mt-3">
                        <a href="{% url 'cover_reset' %}" class="text-primary text-gradient font-weight-bold">Forgot Password?</a>
                      </p>
                    </div>
                    
                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-info w-100 mt-4 mb-0">Sign in</button>
                    </div>
                  </form>
                </div>
                <div class="card-footer text-center pt-0 px-lg-2 px-1">
                  <p class="mb-4 text-sm mx-auto">
                    Don't have an account?
                    <a href="{% url 'cover_register' %}" class="text-info text-gradient font-weight-bold">Sign up</a>
                  </p>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6" style="background-image:url('{% static 'assets/img/curved-images/curved9.jpg' %}')"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/signin/illustration.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}
{% load static socialaccount %}
{% get_providers as socialaccount_providers %}

{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column mx-lg-0 mx-auto">
              <div class="card card-plain">
                <div class="card-header pb-4 text-start text-center">
                  <h4 class="font-weight-bolder">Sign In</h4>
                  {% comment %} <p class="mb-0">Enter your email and password to sign in</p> {% endcomment %}
                </div>

            <div class="row px-xl-5 px-sm-4 px-3">
              
              
              <form method="post" action="{% provider_login_url 'github' %}" class="col-3 ms-auto px-1">
                {% csrf_token %}

                <button type="submit" class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github"
                    role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
                    <path
                      d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z">
                    </path>
                  </svg>
                </button>
              </form>

              <form method="post" action="{% provider_login_url 'google' %}" class="col-3 me-auto px-1">
                {% csrf_token %}

                <button class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
                  viewBox="0 0 210 210" xml:space="preserve">
                    <path d="M0,105C0,47.103,47.103,0,105,0c23.383,0,45.515,7.523,64.004,21.756l-24.4,31.696C133.172,44.652,119.477,40,105,40
                      c-35.841,0-65,29.159-65,65s29.159,65,65,65c28.867,0,53.398-18.913,61.852-45H105V85h105v20c0,57.897-47.103,105-105,105
                      S0,162.897,0,105z"/>
                  </svg>
                </button>
              </form>
              

            </div>


                <div class="card-body">
                  <form method="post" role="form">
                    {% csrf_token %}
                    {% if form.non_field_errors %}
                      {% for error in form.non_field_errors %}
                        <div class="text-danger mb-3">{{ error }}</div>
                      {% endfor %}
                    {% endif %}

                    {% for field in form %}
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    {% endfor %}

                    <div class="d-flex justify-content-between align-items-center">
                      <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="rememberMe">
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                      </div>
                      <p class="text-sm mt-3">
                        <a href="{% url 'illustration_reset' %}" class="text-primary text-gradient font-weight-bold">Forgot Password?</a>
                      </p>
                    </div>

                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-primary w-100 mt-4 mb-0">Sign in</button>
                    </div>
                  </form>
                </div>
                <div class="card-footer text-center pt-0 px-lg-2 px-1">
                  <p class="mb-4 text-sm mx-auto">
                    Don't have an account?
                    <a href="{% url 'illustration_register' %}" class="text-primary text-gradient font-weight-bold">Sign up</a>
                  </p>
                </div>
              </div>
            </div>
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 end-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-primary h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center">
                <img src="{% static 'assets/img/shapes/pattern-lines.svg' %}" alt="pattern-lines" class="position-absolute opacity-4 start-0">
                <div class="position-relative">
                  <img class="max-width-500 w-100 position-relative z-index-2" src="{% static 'assets/neuralami/logos/NeuralamiLogo480x480SD.png' %}" alt="chat-img">
                </div>
                <h4 class="mt-5 text-white font-weight-bolder">"Simplicity is the new currency"</h4>
                <p class="text-white">The more effortless the service looks, the more effort the company actually put into the process.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/signup/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static socialaccount %}
{% get_providers as socialaccount_providers %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('{% static 'assets/img/curved-images/curved6.jpg' %}');">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-5 text-center mx-auto">
            <h1 class="text-white mb-2 mt-5">Welcome!</h1>
            <p class="text-lead text-white">Use these awesome forms to login or create new account in your project for free.</p>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
          <div class="card z-index-0">
            <div class="card-header text-center pt-4">
              <h5>Register</h5>
            </div>

            <div class="row px-xl-5 px-sm-4 px-3">

              <form method="post" action="{% provider_login_url 'github' %}" class="col-3 ms-auto px-1">
                {% csrf_token %}

                <button type="submit" class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github"
                    role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
                    <path
                      d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z">
                    </path>
                  </svg>
                </button>
              </form>

              <form method="post" action="{% provider_login_url 'google' %}" class="col-3 me-auto px-1">
                {% csrf_token %}

                <button class="btn btn-outline-light w-100">
                  <svg width="24px" height="32px" fill="#000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
                  viewBox="0 0 210 210" xml:space="preserve">
                    <path d="M0,105C0,47.103,47.103,0,105,0c23.383,0,45.515,7.523,64.004,21.756l-24.4,31.696C133.172,44.652,119.477,40,105,40
                      c-35.841,0-65,29.159-65,65s29.159,65,65,65c28.867,0,53.398-18.913,61.852-45H105V85h105v20c0,57.897-47.103,105-105,105
                      S0,162.897,0,105z"/>
                  </svg>
                </button>
              </form>

              <div class="mt-2 position-relative text-center">
                <p class="text-sm font-weight-bold mb-2 text-secondary text-border d-inline z-index-2 bg-white px-3">
                  &bull;
                </p>
              </div>

            </div>
            <div class="card-body">
              <form method="post" role="form">
                {% csrf_token %}

                {% for field in form %}
                <div class="mb-3">
                  {{field}}
                </div>

                <small class="text-danger"> {{ field.errors }} </small>
                {% endfor %}
                <div class="form-check form-check-info text-start">
                  <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                  <label class="form-check-label" for="flexCheckDefault">
                    I agree the <a href="javascript:;" class="text-dark font-weight-bolder">Terms and Conditions</a>
                  </label>
                </div>
                <div class="text-center">
                  <button type="submit" class="btn bg-gradient-dark w-100 my-4 mb-2">Sign up</button>
                </div>
                <p class="text-sm mt-3 mb-0">Already have an account? <a href="{% url 'basic_login' %}" class="text-dark font-weight-bolder">Sign in</a></p>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/signup/cover.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}


{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section>
      <div class="page-header min-vh-75">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-6 d-flex flex-column mx-auto">
              <div class="card card-plain mt-sm-8 mt-7 mt-md-5">
                <div class="card-header pb-0 text-left">
                  <h3 class="font-weight-bolder text-primary text-gradient">Join us today</h3>
                  <p class="mb-0">Enter your email and password to register</p>
                </div>
                <div class="card-body pb-3">
                  <form method="post" role="form">
                    {% csrf_token %}

                    {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    <small class="text-danger"> {{ field.errors }} </small>
                    {% endfor %}
                    <div class="form-check form-check-info text-left">
                      <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                      <label class="form-check-label" for="flexCheckDefault">
                        I agree the <a href="#" class="text-dark font-weight-bolder">Terms and Conditions</a>
                      </label>
                    </div>
                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-primary w-100 mt-4 mb-0">Sign up</button>
                    </div>
                  </form>
                </div>
                <div class="card-footer text-center pt-0 px-sm-4 px-1">
                  <p class="mb-4 mx-auto">
                    Already have an account?
                    <a href="{% url 'cover_login' %}" class="text-primary text-gradient font-weight-bold">Sign in</a>
                  </p>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6" style="background-image:url('{% static 'assets/img/curved-images/curved11.jpg' %}')"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}
  
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/signup/illustration.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column mx-lg-0 mx-auto">
              <div class="card card-plain">
                <div class="card-header pb-0 text-left">
                  <h4 class="font-weight-bolder">Sign Up</h4>
                  <p class="mb-0">Enter your email and password to register</p>
                </div>
                <div class="card-body pb-3">
                  <form method="post" role="form">
                    {% csrf_token %}
                    
                    {% for field in form %}
                    <label>{{ field.label }}</label>
                    <div class="mb-3">
                      {{ field }}
                    </div>
                    <small class="text-danger"> {{ field.errors }} </small>
                    {% endfor %}

                    <div class="form-check form-check-info text-left">
                      <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                      <label class="form-check-label" for="flexCheckDefault">
                        I agree the <a href="#" class="text-dark font-weight-bolder">Terms and Conditions</a>
                      </label>
                    </div>
                    <div class="text-center">
                      <button type="submit" class="btn bg-gradient-primary w-100 mt-4 mb-0">Sign up</button>
                    </div>
                  </form>
                </div>
                <div class="card-footer text-center pt-0 px-sm-4 px-1">
                  <p class="mb-4 mx-auto">
                    Already have an account?
                    <a href="{% url 'illustration_login' %}" class="text-primary text-gradient font-weight-bold">Sign in</a>
                  </p>
                </div>
              </div>
            </div>
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 end-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-primary h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center">
                <img src="{% static 'assets/img/shapes/pattern-lines.svg' %}" alt="pattern-lines" class="position-absolute opacity-4 start-0">
                <div class="position-relative">
                  <img class="max-width-500 w-100 position-relative z-index-2" src="{% static 'assets/img/illustrations/rocket-white.png' %}" alt="rocket">
                </div>
                <h4 class="mt-5 text-white font-weight-bolder">Your journey starts here</h4>
                <p class="text-white">Just as it takes a company to sustain a product, it takes a community to sustain a protocol.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/verification/basic.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load static %}

{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header min-vh-100" style="background-image: url('{% static 'assets/img/curved-images/curved9.jpg' %}');">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-4 col-md-7">
            <div class="card">
              <div class="card-body px-lg-5 py-lg-5 text-center">
                <div class="info mb-4">
                  <div class="icon icon-shape icon-xl rounded-circle bg-gradient-warning shadow text-center py-3 mx-auto">
                    <svg class="mt-3" width="40px" height="35px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>spaceship</title>
                      <g id="Basic-Elements" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g id="Rounded-Icons" transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g id="Icons-with-opacity" transform="translate(1716.000000, 291.000000)">
                            <g id="spaceship" transform="translate(4.000000, 301.000000)">
                              <path d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z" id="Shape"></path>
                              <path d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z" id="Path"></path>
                              <path d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" id="color-2" opacity="0.598539807"></path>
                              <path d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" id="color-3" opacity="0.598539807"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                <div class="text-center text-muted mb-4">
                  <h2>2-Step Verification</h2>
                </div>
                <div class="row gx-2 gx-sm-3">
                  <div class="col">
                    <div class="form-group">
                      <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                    </div>
                  </div>
                </div>
                <div class="text-center">
                  <button type="button" class="btn bg-gradient-warning w-100">Send code</button>
                  <span class="text-muted text-sm">Haven't received it?<a href="javascript:;"> Resend a new code</a>.</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/verification/cover.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}

{% block content %}

  <main class="main-content main-content-bg mt-0">
    <section>
      <div class="page-header min-vh-75">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-6 d-flex flex-column mx-auto">
              <div class="card card-plain">
                <div class="card-body px-lg-5 py-lg-5 text-center">
                  <div class="text-center text-muted mb-4">
                    <h2>2-Step Verification</h2>
                  </div>
                  <div class="row gx-2 gx-sm-3">
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                  </div>
                  <div class="text-center">
                    <button type="button" class="btn bg-gradient-warning w-100">Send code</button>
                    <span class="text-muted text-sm">Haven't received it?<a href="javascript:;"> Resend a new code</a>.</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6" style="background-image:url('{% static 'assets/img/curved-images/curved9.jpg' %}')"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/verification/illustration.html
================
{% extends 'layouts/base-shadow.html' %}
{% load static %}


{% block content %}

  <main class="main-content  mt-0">
    <section>
      <div class="page-header min-vh-100">
        <div class="container">
          <div class="row">
            <div class="col-xl-4 col-lg-5 col-md-7 d-flex flex-column mx-lg-0 mx-auto">
              <div class="card card-plain">
                <div class="card-body px-lg-5 py-lg-5 text-center">
                  <div class="text-center text-muted mb-4">
                    <h2>2-Step Verification</h2>
                  </div>
                  <div class="row gx-2 gx-sm-3">
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                    <div class="col">
                      <div class="form-group">
                        <input type="text" class="form-control form-control-lg" maxlength="1" autocomplete="off" autocapitalize="off">
                      </div>
                    </div>
                  </div>
                  <div class="text-center">
                    <button type="button" class="btn bg-gradient-warning w-100">Send code</button>
                    <span class="text-muted text-sm">Haven't received it?<a href="javascript:;"> Resend a new code</a>.</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-6 d-lg-flex d-none h-100 my-auto pe-0 position-absolute top-0 end-0 text-center justify-content-center flex-column">
              <div class="position-relative bg-gradient-warning h-100 m-3 px-7 border-radius-lg d-flex flex-column justify-content-center">
                <img src="{% static 'assets/img/shapes/pattern-lines.svg' %}" alt="pattern-lines" class="position-absolute opacity-4 start-0">
                <div class="position-relative">
                  <img class="max-width-500 w-100 position-relative z-index-2" src="{% static 'assets/img/illustrations/danger-chat-ill.png' %}" alt="chart-ill">
                </div>
                <h4 class="mt-5 text-white font-weight-bolder">"Attention is the new currency"</h4>
                <p class="text-white">The more effortless the writing looks, the more effort the writer actually put into the process.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

{% endblock content %}

{% block footer %}{% endblock footer %}
{% block fixed_plugin %}{% endblock fixed_plugin %}

================
File: templates/accounts/illustration-login.html
================


================
File: templates/admin/auth/user/add_form.html
================
{% extends "admin/change_form.html" %}
{% load i18n static %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% block form_top %}
    {% if not is_popup %}
        <p>{% trans "First, enter a username and password. Then, you'll be able to edit more user options." %}</p>
    {% else %}
        <p>{% trans "Enter a username and password." %}</p>
    {% endif %}
{% endblock %}

================
File: templates/admin/auth/user/change_password.html
================
{% extends "admin/base_site.html" %}
{% load i18n static %}
{% load admin_urls %}

{% block extrahead %}
    {{ block.super }}
    <script type="text/javascript" src="{% url 'admin:jsi18n' %}"></script>
{% endblock %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% if not is_popup %}
    {% block breadcrumbs %}
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="{% url 'admin:index' %}">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                          <a href="{% url 'admin:app_list' opts.app_config.label %}">
                            {{ opts.app_config.verbose_name }}
                          </a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="{% url opts|admin_urlname:'changelist' %}">{{ opts.verbose_name_plural|capfirst }}</a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="{% url opts|admin_urlname:'change' original.pk|admin_urlquote %}">{{ original|truncatewords:"18" }}</a>
                        </li>
                        <li class="breadcrumb-item">{% trans 'Change password' %}</li>
                    </ol>
                </nav>
            </div>
        </div>
    {% endblock %}
{% endif %}

{% block content %}
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="title">
                        {% blocktrans with username=original %}
                            Enter a new password for the user
                            <strong>{{ username }}</strong>.
                        {% endblocktrans %}
                    </div>
                </div>
                <div class="card-body">
                    <form action="{{ form_url }}" method="post" id="{{ opts.model_name }}_form">
                        {% csrf_token %}

                        {% block form_top %}{% endblock %}
                        <input type="text" name="username" value="{{ original.get_username }}" style="display: none">

                        <div class="col-md-8">
                            {% if is_popup %}<input type="hidden" name="_popup" value="1">{% endif %}

                            <div class="form-group">
                                {{ form.password1.errors }}
                                {{ form.password1.label_tag }} {{ form.password1 }}
                                {% if form.password1.help_text %}
                                    <div class="help">{{ form.password1.help_text|safe }}</div>
                                {% endif %}
                            </div>

                            <div class="form-group">
                                {{ form.password2.errors }}
                                {{ form.password2.label_tag }} {{ form.password2 }}
                                {% if form.password2.help_text %}
                                    <div class="help">{{ form.password2.help_text|safe }}</div>
                                {% endif %}
                            </div>
                        </div>

                        <div class="card submit_btn">
                            <div class="card-body">
                                <button type="submit" class="btn btn-sm btn-primary">
                                    {% trans 'Change my password' %}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extrascript %}
    <script type="application/javascript">
        {% if form.errors %}
            {% if form.errors.items|length == 1 %}
                notification.danger("<p class='{{ direction.panel }}'>" + "{% trans "Please correct the error below." %}" + "</p>", 'top', '{{ direction.notify }}');
            {% else %}
                notification.danger("<p class='{{ direction.panel }}'>" + "{% trans "Please correct the errors below." %}" + "</p>", 'top', '{{ direction.notify }}');
            {% endif %}
        {% endif %}
    </script>
{% endblock %}

================
File: templates/admin/edit_inline/stacked.html
================
{% load i18n admin_urls static %}

<div class="js-inline-admin-formset inline-group" id="{{ inline_admin_formset.formset.prefix }}-group" data-inline-type="stacked" data-inline-formset="{{ inline_admin_formset.inline_formset_data }}">
    <fieldset class="module {{ inline_admin_formset.classes }}">
        <div class="card">
            <div class="card-header">
                {% if inline_admin_formset.formset.max_num == 1 %}
                    <h2>{{ inline_admin_formset.opts.verbose_name|capfirst }}</h2>
                {% else %}
                    <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2>
                {% endif %}
            </div>

            {{ inline_admin_formset.formset.management_form }}
            {{ inline_admin_formset.formset.non_form_errors }}

            <div class="card-body">
                {% for inline_admin_form in inline_admin_formset %}
                    <div class="card stacked_volt_card">
                        <div class="stacked_volt inline-related{% if inline_admin_form.original or inline_admin_form.show_url %} has_original{% endif %}{% if forloop.last and inline_admin_formset.has_add_permission %} empty-form last-related{% endif %}" id="{{ inline_admin_formset.formset.prefix }}-{% if not forloop.last %}{{ forloop.counter0 }}{% else %}empty{% endif %}">
                            <h3>
                                <b>{{ inline_admin_formset.opts.verbose_name|capfirst }}:</b>
                                <span class="inline_label">
                                    {% if inline_admin_form.original %}
                                        {{ inline_admin_form.original }}
                                {% if inline_admin_form.model_admin.show_change_link and inline_admin_form.model_admin.has_registered_model %}
                                    <a href="{% url inline_admin_form.model_admin.opts|admin_urlname:'change' inline_admin_form.original.pk|admin_urlquote %}"
                                       class="{% if inline_admin_formset.has_change_permission %}inlinechangelink{% else %}inlineviewlink{% endif %}">{% if inline_admin_formset.has_change_permission %}
                                        {% translate "Change" %}{% else %}{% translate "View" %}{% endif %}</a>{% endif %}
                            {% else %}#{{ forloop.counter }}{% endif %}</span>
                                {% if inline_admin_form.show_url %}
                                    <a href="{{ inline_admin_form.absolute_url }}">{% translate "View on site" %}</a>{% endif %}
                                {% if inline_admin_formset.formset.can_delete and inline_admin_formset.has_delete_permission and inline_admin_form.original %}
                                    <span class="delete">{{ inline_admin_form.deletion_field.field }} {{ inline_admin_form.deletion_field.label_tag }}</span>{% endif %}
                            </h3>

                            {% if inline_admin_form.form.non_field_errors %}
                                {{ inline_admin_form.form.non_field_errors }}
                            {% endif %}

                            {% for fieldset in inline_admin_form %}
                                {% include "admin/includes/fieldset.html" %}
                            {% endfor %}

                            {% if inline_admin_form.needs_explicit_pk_field %}
                                {{ inline_admin_form.pk_field.field }}
                            {% endif %}

                            {% if inline_admin_form.fk_field %}
                                {{ inline_admin_form.fk_field.field }}
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </fieldset>
</div>

================
File: templates/admin/edit_inline/tabular.html
================
{% load i18n admin_urls static admin_modify %}

<div class="js-inline-admin-formset inline-group" id="{{ inline_admin_formset.formset.prefix }}-group" data-inline-type="tabular" data-inline-formset="{{ inline_admin_formset.inline_formset_data }}">
    <div class="tabular inline-related {% if forloop.last %}last-related{% endif %}">
        <div class="card">
            {{ inline_admin_formset.formset.management_form }}

            <fieldset class="module {{ inline_admin_formset.classes }}">
                <div class="card-header">
                    {% if inline_admin_formset.formset.max_num == 1 %}
                        <h2>{{ inline_admin_formset.opts.verbose_name|capfirst }}</h2>
                    {% else %}
                        <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2>
                    {% endif %}
                    {{ inline_admin_formset.formset.non_form_errors }}
                </div>

                <div class="table-responsive">
                    <table class="table table-centered table-nowrap mb-0 rounded">
                        <thead class="thead-light">
                        <tr>
                            <th class="original"></th>

                            {% for field in inline_admin_formset.fields %}
                                {% if not field.widget.is_hidden %}
                                    <th class="column-
                                            {{ field.name }}{% if field.required %} required{% endif %}">{{ field.label|capfirst }}
                                        {% if field.help_text %}
                                            <img src="{% static "admin/img/icon-unknown.svg" %}" class="help help-tooltip"
                                                 width="10" height="10" alt="({{ field.help_text|striptags }})"
                                                 title="{{ field.help_text|striptags }}">{% endif %}
                                    </th>
                                {% endif %}
                            {% endfor %}

                            {% if inline_admin_formset.formset.can_delete and inline_admin_formset.has_delete_permission %}
                                <th>{% translate "Delete?" %}</th>
                            {% endif %}
                        </tr>
                        </thead>

                        <tbody>
                        {% for inline_admin_form in inline_admin_formset %}
                            {% if inline_admin_form.form.non_field_errors %}
                                <tr class="row-form-errors">
                                    <td colspan="{{ inline_admin_form|cell_count }}">{{ inline_admin_form.form.non_field_errors }}</td>
                                </tr>
                            {% endif %}

                            <tr class="form-row {% if inline_admin_form.original or inline_admin_form.show_url %}has_original{% endif %}{% if forloop.last and inline_admin_formset.has_add_permission %} empty-form{% endif %}" id="{{ inline_admin_formset.formset.prefix }}-{% if not forloop.last %}{{ forloop.counter0 }}{% else %}empty{% endif %}">
                                <td class="original">
                                    {% if inline_admin_form.original or inline_admin_form.show_url %}
                                        <p class="tabular_p_volt">
                                            {% if inline_admin_form.original %}
                                                {{ inline_admin_form.original }}
                                                {% if inline_admin_form.model_admin.show_change_link and inline_admin_form.model_admin.has_registered_model %}
                                                    <a href="{% url inline_admin_form.model_admin.opts|admin_urlname:'change' inline_admin_form.original.pk|admin_urlquote %}"
                                                       class="{% if inline_admin_formset.has_change_permission %}inlinechangelink{% else %}inlineviewlink{% endif %}">
                                                        {% if inline_admin_formset.has_change_permission %}
                                                            {% translate "Change" %}{% else %}{% translate "View" %}{% endif %}</a>
                                                {% endif %}
                                            {% endif %}
                                            {% if inline_admin_form.show_url %}
                                                <a href="{{ inline_admin_form.absolute_url }}">{% translate "View on site" %}</a>{% endif %}
                                        </p>
                                    {% endif %}

                                    {% if inline_admin_form.needs_explicit_pk_field %}
                                        {{ inline_admin_form.pk_field.field }}
                                    {% endif %}

                                    {% if inline_admin_form.fk_field %}
                                        {{ inline_admin_form.fk_field.field }}
                                    {% endif %}

                                    {% spaceless %}
                                        {% for fieldset in inline_admin_form %}
                                            {% for line in fieldset %}
                                                {% for field in line %}
                                                    {% if not field.is_readonly and field.field.is_hidden %}
                                                        {{ field.field }}{% endif %}
                                                {% endfor %}
                                            {% endfor %}
                                        {% endfor %}
                                    {% endspaceless %}
                                </td>
                                {% for fieldset in inline_admin_form %}
                                    {% for line in fieldset %}
                                        {% for field in line %}
                                            {% if field.is_readonly or not field.field.is_hidden %}
                                                <td{% if field.field.name %} class="field-{{ field.field.name }}"{% endif %}>
                                                    {% if field.is_readonly %}
                                                        <p>{{ field.contents }}</p>
                                                    {% else %}
                                                        {{ field.field.errors.as_ul }}
                                                        {{ field.field }}
                                                    {% endif %}
                                                </td>
                                            {% endif %}
                                        {% endfor %}
                                    {% endfor %}
                                {% endfor %}
                                {% if inline_admin_formset.formset.can_delete and inline_admin_formset.has_delete_permission %}
                                    <td class="delete">
                                        {% if inline_admin_form.original %}
                                            {{ inline_admin_form.deletion_field.field }}
                                        {% endif %}
                                    </td>
                                {% endif %}
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </fieldset>
        </div>
    </div>
</div>

================
File: templates/admin/includes/fieldset.html
================
<fieldset class="module aligned {{ fieldset.classes }}">
    {% if fieldset.name %}<h5 class="title">{{ fieldset.name }}</h5>{% endif %}
    {% if fieldset.description %}
        <div class="description">{{ fieldset.description|safe }}</div>
    {% endif %}

    {% for line in fieldset %}
        <div class="row">
            <div class="{% if line.fields.0 in 'last_login, date_joined, created_at, updated_at, deleted_at' %}col-md-6{% else %}col-md-12{% endif %}">
                <div class="mb-4 {% if line.fields|length_is:'1' and line.errors %} errors{% endif %}{% if not line.has_visible_field %} hidden{% endif %}{% for field in line %}{% if field.field.name %} field-{{ field.field.name }}{% endif %}{% endfor %}">
                    {% for field in line %}
                        {# <div{% if not line.fields|length_is:'1' %} class="fieldBox{% if field.field.name %} field-{{ field.field.name }}{% endif %}{% if not field.is_readonly and field.errors %} errors{% endif %}{% if field.field.is_hidden %} hidden{% endif %}"{% elif field.is_checkbox %} class="checkbox-row"{% endif %}>#}

                        {% if not line.fields|length_is:'1' and not field.is_readonly %}
                            {{ field.errors }}
                        {% endif %}

                        {% if field.is_checkbox %}
                            <div class="form-check">
                                <label class="form-check-label">
                                    {{ field.label_tag }}
                                    {{ field.field }}
                                    <span class="form-check-sign"><span class="check"></span></span>
                                </label>
                            </div>
                        {% else %}
                            {{ field.label_tag }}

                            {% if field.is_readonly %}
                                <div class="readonly">{{ field.contents }}</div>
                            {% else %}
                                {{ field.field }} {#<i class="fa fa-plus"></i>#}
                            {% endif %}
                        {% endif %}

                        {% if field.field.help_text %}
                            <div class="help">{{ field.field.help_text|safe }}</div>
                        {% endif %}
                        {# </div>#}
                    {% endfor %}
                    {% if line.fields|length_is:'1' %}{{ line.errors }}{% endif %}
                </div>
            </div>
        </div>
    {% endfor %}
</fieldset>

================
File: templates/admin/includes/object_delete_summary.html
================
{% load i18n %}

<div>
    <blockquote>
        <h3>{% trans "Summary" %}</h3>
        <ul class="blockquote blockquote-primary">
            {% for model_name, object_count in model_count %}
                <li>{{ model_name|capfirst }}: {{ object_count }}</li>
            {% endfor %}
        </ul>
    </blockquote>
</div>

================
File: templates/admin/actions.html
================
{% load i18n static %}
{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

<div class="actions form-group">
    {% block actions %}
        {% block actions-form %}
            {% for field in action_form %}
                {% if field.label %}<label>
                    {# {{ field.label }} #}
                {% endif %}
                {{ field }}
                {% if field.label %}</label>{% endif %}
            {% endfor %}
        {% endblock %}
        {% block actions-submit %}
            <button type="submit" class="btn btn-fill btn-sm btn-primary" title="{% trans "Run the selected action" %}" name="index" value="{{ action_index|default:0 }}">
                {% trans "Go" %}
            </button>
        {% endblock %}
        {% block actions-counter %}
            {% if actions_selection_counter %}
                <span class="action-counter" data-actions-icnt="{{ cl.result_list|length }}">{{ selection_note }}</span>
                {% if cl.result_count != cl.result_list|length %}
                    <span class="all">{{ selection_note_all }}</span>
                    <span class="question">
                        <a href="#"
                           title="{% trans "Click here to select the objects across all pages" %}">{% blocktrans with cl.result_count as total_count %}
                            Select all {{ total_count }} {{ module_name }}{% endblocktrans %}</a>
                    </span>
                    <span class="clear"><a href="#">{% trans "Clear selection" %}</a></span>
                {% endif %}
            {% endif %}
        {% endblock %}
    {% endblock %}
</div>

================
File: templates/admin/change_form_object_tools.html
================
{% load i18n static admin_urls %}
{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}
{% block object-tools-items %}
    {% url opts|admin_urlname:'history' original.pk|admin_urlquote as history_url %}
    <a href="{% add_preserved_filters history_url %}" class="me-4 btn btn-outline-gray-600 d-inline-flex align-items-center">
        <i class="fa fa-book"></i> &nbsp; {% trans "History" %}
    </a>

    {% if has_absolute_url %}
        <a href="{{ absolute_url }}"
           class="btn btn-outline-gray-600 d-inline-flex align-items-center">{% trans "View on site" %}</a>
    {% endif %}
{% endblock %}

================
File: templates/admin/change_form.html
================
{% extends "layouts/base.html" %}
{% load i18n admin_urls static admin_modify %}

{% block overlay %}
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
{% endblock overlay %}

{% block extrahead %}
    {{ block.super }}
    <script type="text/javascript" src="{% url 'admin:jsi18n' %}"></script>
    {{ media }}
{% endblock %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% if not is_popup %}
    {% block breadcrumbs %}
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="{% url 'admin:index' %}">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                          <a href="{% url 'admin:app_list' opts.app_config.label %}">
                            {{ opts.app_config.verbose_name }}
                          </a>
                        </li>

                        {% if has_view_permission %}
                            <li class="breadcrumb-item"><a
                                    href="{% url opts|admin_urlname:'changelist' %}">{{ opts.verbose_name_plural|capfirst }}</a>
                            </li>
                        {% else %}
                            <li class="breadcrumb-item">{{ opts.verbose_name_plural|capfirst }}</li>
                        {% endif %}

                        {% if add %}
                            <li class="breadcrumb-item">{% blocktrans with name=opts.verbose_name %}Add
                                {{ name }}{% endblocktrans %}</li>
                        {% else %}
                            <li class="breadcrumb-item">{{ original|truncatewords:"18" }}</li>
                        {% endif %}
                    </ol>
                </nav>
            </div>
        </div>
    {% endblock %}
{% endif %}

{% block content %}
    <div class="py-4">
        <div class="d-flex justify-content-between w-100 flex-wrap">
            <div class="mb-3 mb-lg-0">
                 <h1 class="h4 mx-3">
                     {% if add %}
                        {% blocktrans with name=opts.verbose_name %}Add {{ name }}{% endblocktrans %}
                     {% else %}
                        {{ original|truncatewords:"18" }}
                     {% endif %}
                 </h1>
            </div>
            <div>
                {% block object-tools %}
                    {% if change %}{% if not is_popup %}
                        {% block object-tools-items %}
                            {% change_form_object_tools %}
                        {% endblock %}
                    {% endif %}{% endif %}
                {% endblock %}
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-4">
            <div class="card mx-3">
                <div class="card-body">
                    <form {% if has_file_field %}enctype="multipart/form-data" {% endif %}action="{{ form_url }}"
                          method="post" id="{{ opts.model_name }}_form" novalidate>

                        {% csrf_token %}
                        <div class="{{ direction.panel }}">{% block form_top %}{% endblock %}</div>
                        <div>
                            {% block field_sets %}
                                {% for fieldset in adminform %}
                                    {% if forloop.counter > 1 %}<hr>{% endif %}
                                    {% include "admin/includes/fieldset.html" %}
                                {% endfor %}
                            {% endblock %}

                            {% block after_field_sets %}{% endblock %}

                            {% block inline_field_sets %}
                                {% for inline_admin_formset in inline_admin_formsets %}
                                    {% include inline_admin_formset.opts.template %}
                                {% endfor %}
                            {% endblock %}

                            {% block after_related_objects %}{% endblock %}

                            {% block submit_buttons_bottom %}{% submit_row %}{% endblock %}

                            {% block admin_change_form_document_ready %}
                                <script type="text/javascript"
                                        id="django-admin-form-add-constants"
                                        src="{% static 'admin/js/change_form.js' %}"
                                        {% if adminform and add %}
                                        data-model-name="{{ opts.model_name }}"
                                        {% endif %}>
                                </script>
                            {% endblock %}

                            {% prepopulated_fields_js %}

                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

================
File: templates/admin/change_list_object_tools.html
================
{% load i18n static admin_urls %}

{% block object-tools-items %}
    {% if has_add_permission %}
        {% url cl.opts|admin_urlname:'add' as add_url %}
        <li>
            <a href="{% add_preserved_filters add_url is_popup to_field %}" class="">
                <i class="fa fa-plus-circle"></i>
                {% blocktrans with cl.opts.verbose_name as name %}Add {{ name }}{% endblocktrans %}
            </a>
        </li>
    {% endif %}
{% endblock %}

================
File: templates/admin/change_list_results.html
================
{% load i18n static admin_soft %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% if result_hidden_fields %}
    <div class="hiddenfields">{# DIV for HTML validation #}
        {% for item in result_hidden_fields %}{{ item }}{% endfor %}
    </div>
{% endif %}

{% if results %}

    <table class="table table-hover">
        <thead>
        <tr>
            {% for header in result_headers %}
                <th class="border-gray-200" {{ header.class_attrib }}>
                    {% if header.sortable %}
                        {% if header.sort_priority > 0 %}
                            <a href="{{ header.url_remove }}" title="{% trans "Remove from sorting" %}"><span class="fa fa-arrows-alt"></span></a>&nbsp;
                            {% if num_sorted_fields > 1 %}
                                <span class="fa fa-arrows-v" title="{% blocktrans with priority_number=header.sort_priority %}Sorting priority: {{ priority_number }}{% endblocktrans %}">{{ header.sort_priority }}</span>&nbsp;
                            {% endif %}
                            <a href="{{ header.url_toggle }}" class="fa {% if header.ascending %}fa-angle-up{% else %}fa-angle-down{% endif %}" title="{% trans "Toggle sorting" %}"></a>&nbsp;&nbsp;
                        {% endif %}
                    {% endif %}

                    {% if header.sortable %}
                        <a href="{{ header.url_primary }}">{{ header.text|capfirst }}</a>
                    {% else %}
                        {% if header.class_attrib == ' class="action-checkbox-column"' %}
                            <div class="form-check">
                                <label class="form-check-label">
                                    {{ header.text|capfirst }}
                                </label>
                            </div>
                        {% else %}
                            <span>{{ header.text|capfirst }}</span>
                        {% endif %}
                    {% endif %}
                </th>
            {% endfor %}
        </tr>
        </thead>
        <tbody>
        {% for result in results %}
            {% if result.form and result.form.non_field_errors %}
                <tr><td colspan="{{ result|length }}">{{ result.form.non_field_errors }}</td></tr>
            {% endif %}
            <tr>
                {% for item in result %}
                    {% if 'checkbox' in item %}
                        <td class="action-checkbox">
                            <div class="form-check">
                                <label class="form-check-label">
                                    {{ item|checkbox|safe }}
                                    <span class="form-check-sign"><span class="check"></span></span>
                                </label>
                            </div>
                        </td>
                    {% else %}
                        <span class="fw-normal">{{ item }}</span>
                    {% endif %}
                {% endfor %}
            </tr>
        {% endfor %}
        </tbody>
    </table>
{% endif %}

================
File: templates/admin/change_list.html
================
{% extends "layouts/base.html" %}
{% load i18n admin_urls static admin_list %}


{% block extrastyle %}
    {{ block.super }}
    <link rel="stylesheet" type="text/css" href="{% static "admin/css/changelists.css" %}">
    {% if cl.formset %}
        <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
    {% endif %}
    {% if cl.formset or action_form %}
        <script type="text/javascript" src="{% url 'admin:jsi18n' %}"></script>
    {% endif %}
    {{ media.css }}
    {% if not actions_on_top and not actions_on_bottom %}
        <style>
            #changelist table thead th:first-child {
                width: inherit
            }
        </style>
    {% endif %}
{% endblock %}

{% block extrahead %}
    {{ block.super }}
    {{ media.js }}
{% endblock %}

{% if not is_popup %}
    {% block breadcrumbs %}
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="{% url 'admin:index' %}">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                          <a href="{% url 'admin:app_list' cl.opts.app_config.label %}">
                            {{ cl.opts.app_config.verbose_name }}
                          </a>
                        </li>
                        <li class="breadcrumb-item active"
                            aria-current="page">{{ cl.opts.verbose_name_plural|capfirst }}</li>
                    </ol>
                </nav>
                <h2 class="h4">{{ cl.opts.verbose_name_plural|capfirst }}</h2>
            </div>
        </div>
    {% endblock %}
{% endif %}

{% block overlay %}
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
{% endblock overlay %}

{% block content %}
    <div class="table-settings mb-4 mx-3 mt-5">
        <div class="d-flex align-items-center justify-content-between mx-1">
            <div class="">
                {% block search %}{% search_form cl %}{% endblock %}
            </div>
            <div class="">
                <div class="btn-toolbar mb-2 mb-md-0">
                    <div class="btn-group admin-add-btn mt-4">
                        {% block object-tools-items %}
                            {% change_list_object_tools %}
                        {% endblock %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mx-2">
        <div class="{% if cl.has_filters %}col-md-10{% else %}col-md-12{% endif %}">
            {% block date_hierarchy %}
                {% if cl.date_hierarchy %}{% date_hierarchy cl %}{% endif %}
            {% endblock %}
            <form id="changelist-form" method="post" {% if cl.formset and cl.formset.is_multipart %}
                  enctype="multipart/form-data"{% endif %} novalidate>
                {% csrf_token %}

                {% if cl.formset %}
                    <div>{{ cl.formset.management_form }}</div>
                {% endif %}

                <div class="card card-body border-0 shadow table-wrapper table-responsive">
                    {% block result_list %}
                        {% if action_form and actions_on_top and cl.show_admin_actions %}
                            {% admin_actions %}
                        {% endif %}

                        {% result_list cl %}

                        {% if action_form and actions_on_bottom and cl.show_admin_actions %}
                            {% admin_actions %}
                        {% endif %}
                    {% endblock %}

                    {% block pagination %}{% pagination cl %}{% endblock %}
                </div>
            </form>
        </div>
        <div class="col-md-2">
            {% if cl.has_filters %}
                {% block filters %}
                    <div class="card card-body border-0 shadow table-wrapper table-responsive">
                        <div class="card-header filter_card_header">
                            <h5>{% trans 'Filter' %}</h5>
                        </div>
                        <div class="card-body">
                            {% for spec in cl.filter_specs %}
                                {% admin_list_filter cl spec %}
                            {% endfor %}
                        </div>
                    </div>
                {% endblock %}
            {% endif %}
        </div>
    </div>
{% endblock %}

================
File: templates/admin/delete_confirmation.html
================
{% extends "layouts/base.html" %}
{% load i18n admin_urls static %}

{% block extrahead %}
    {{ block.super }}
    {{ media }}
    <script type="text/javascript" src="{% static 'admin/js/cancel.js' %}"></script>
{% endblock %}

{#{% block bodyclass %}{{ block.super }} app-{{ opts.app_label }} model-{{ opts.model_name }}#}
{#    delete-confirmation{% endblock %}#}

{% if not is_popup %}
    {% block breadcrumbs %}
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="{% url 'admin:index' %}">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item">{{ opts.app_config.verbose_name }}</li>

                        <li class="breadcrumb-item">
                            <a href="{% url opts|admin_urlname:'changelist' %}">{{ opts.verbose_name_plural|capfirst }}</a>
                        </li>

                        <li class="breadcrumb-item">
                            <a href="{% url opts|admin_urlname:'change' object.pk|admin_urlquote %}">{{ object|truncatewords:"18" }}</a>
                        </li>

                        <li class="breadcrumb-item">{% trans 'Delete' %}</li>
                    </ol>
                </nav>
            </div>
        </div>
    {% endblock %}
{% endif %}

{% block content %}
    <div class="row mx-3 mt-5">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        {% if perms_lacking %}
                            <p class="txt-left-dir">
                                {% blocktrans with escaped_object=object %}
                                    Deleting the {{ object_name }} '{{ escaped_object }}' would result in deleting
                                    related objects, but your account doesn't have permission to delete the
                                    following types of objects:
                                {% endblocktrans %}
                            </p><br>

                            <div class="{{ direction.panel }}">
                                <blockquote>
                                    <ul class="blockquote blockquote-primary">
                                        {% for obj in perms_lacking %}
                                            <li>{{ obj }}</li>
                                        {% endfor %}
                                    </ul>
                                </blockquote>
                            </div>
                        {% elif protected %}
                            <p class="txt-left-dir">
                                {% blocktrans with escaped_object=object %}
                                    Deleting the {{ object_name }} ' {{ escaped_object }}' would require deleting
                                    the following protected related objects:
                                {% endblocktrans %}
                            </p><br>

                            <div class="{{ direction.panel }}">
                                <blockquote>
                                    <ul class="blockquote blockquote-primary">
                                        {% for obj in protected %}
                                            <li>{{ obj }}</li>
                                        {% endfor %}
                                    </ul>
                                </blockquote>
                            </div>
                        {% else %}
                            <p class="txt-left-dir">
                                {% blocktrans with escaped_object=object %}
                                    Are you sure you want to delete the {{ object_name }} "{{ escaped_object }}"?
                                    All of the following related items will be deleted:
                                {% endblocktrans %}
                            </p>
                        {% endif %}
                    </div>
                </div>
                <div class="card-body {{ direction.panel }}">
                    {% if not perms_lacking and not protected %}
                        {% include "admin/includes/object_delete_summary.html" %}

                        <div>
                            <blockquote>
                                <h3>{% trans "Objects" %}</h3>
                                <ul class="blockquote blockquote-primary">
                                    {{ deleted_objects|unordered_list }}
                                </ul>
                            </blockquote>
                        </div>

                        <form method="post">
                            {% csrf_token %}
                            <div>
                                <input type="hidden" name="post" value="yes">

                                {% if is_popup %}
                                    <input type="hidden" name="{{ is_popup_var }}" value="1">
                                {% endif %}

                                {% if to_field %}
                                    <input type="hidden" name="{{ to_field_var }}" value="{{ to_field }}">
                                {% endif %}

                                <button type="submit" class="btn btn-sm btn-primary">
                                    {% trans "Yes, I'm sure" %}
                                </button>
                                <a href="{% url opts|admin_urlname:'change' object.pk|admin_urlquote %}" class="btn btn-sm btn-warning">{% trans "No, take me back" %}</a>
                            </div>
                        </form>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

================
File: templates/admin/delete_selected_confirmation.html
================
{% extends "layouts/base.html" %}
{% load i18n l10n admin_urls static %}

{% block extrahead %}
    {{ block.super }}
    {{ media }}
    <script type="text/javascript" src="{% static 'admin/js/cancel.js' %}"></script>
{% endblock %}

{#{% block bodyclass %}{{ block.super }} app-{{ opts.app_label }} model-{{ opts.model_name }} delete-confirmation#}
{#    delete-selected-confirmation{% endblock %}#}

{% if not is_popup %}
    {% block breadcrumbs %}
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
            <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                    <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                        <li class="breadcrumb-item">
                            <a href="{% url 'admin:index' %}">
                                <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                          <a href="{% url 'admin:app_list' opts.app_config.label %}">
                            {{ opts.app_config.verbose_name }}
                          </a>
                        </li>

                        <li class="breadcrumb-item">
                            <a href="{% url opts|admin_urlname:'changelist' %}">{{ opts.verbose_name_plural|capfirst }}</a>
                        </li>

                        <li class="breadcrumb-item">{% trans 'Delete multiple objects' %}</li>
                    </ol>
                </nav>
            </div>
        </div>
    {% endblock %}
{% endif %}

{% block content %}
        <div class="row mx-3 mt-5">
            <div class="col-md-12 mb-4">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">
                            {% if perms_lacking %}
                                <p class="txt-left-dir">
                                    {% blocktrans %}
                                        Deleting the selected {{ objects_name }} would result in deleting related
                                        objects, but your account doesn't have permission to delete the following
                                        types of objects:
                                    {% endblocktrans %}
                                </p><br>

                                <div class="{{ direction.panel }}">
                                    <blockquote>
                                        <ul class="blockquote blockquote-primary">
                                            {% for obj in perms_lacking %}
                                                <li>{{ obj }}</li>
                                            {% endfor %}
                                        </ul>
                                    </blockquote>
                                </div>
                            {% elif protected %}
                                <p class="txt-left-dir">
                                    {% blocktrans %}
                                        Deleting the selected {{ objects_name }} would require deleting the
                                        following protected related objects:
                                    {% endblocktrans %}
                                </p><br>

                                <div class="{{ direction.panel }}">
                                    <blockquote>
                                        <ul class="blockquote blockquote-primary">
                                            {% for obj in protected %}
                                                <li>{{ obj }}</li>
                                            {% endfor %}
                                        </ul>
                                    </blockquote>
                                </div>
                            {% else %}
                                <p class="txt-left-dir">
                                    {% blocktrans %}
                                        Are you sure you want to delete the selected {{ objects_name }}? All of the
                                        following objects and their related items will be deleted:
                                    {% endblocktrans %}
                                </p>
                            {% endif %}
                        </div>
                    </div>
                    <div class="card-body {{ direction.panel }}">
                        {% if not perms_lacking and not protected %}
                            {% include "admin/includes/object_delete_summary.html" %}

                            <div>
                                <blockquote>
                                    <h3>{% trans "Objects" %}</h3>
                                    <ul class="blockquote blockquote-primary">
                                        {% for deletable_object in deletable_objects %}
                                            {{ deletable_object|unordered_list }}
                                        {% endfor %}
                                    </ul>
                                </blockquote>
                            </div>

                            <form method="post">
                                {% csrf_token %}
                                <div>
                                    {% for obj in queryset %}
                                        <input type="hidden" name="{{ action_checkbox_name }}"
                                               value="{{ obj.pk|unlocalize }}">
                                    {% endfor %}
                                    <input type="hidden" name="action" value="delete_selected">
                                    <input type="hidden" name="post" value="yes">
                                    <button type="submit" class="btn btn-sm btn-primary">
                                        {% trans "Yes, I'm sure" %}
                                    </button>
                                    <a href="{% url opts|admin_urlname:'changelist' %}" class="btn btn-sm btn-warning">{% trans "No, take me back" %}</a>
                                </div>
                            </form>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
{% endblock %}

================
File: templates/admin/filter.html
================
{% load static i18n %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

<div class="filter_panel">
    <div class="mb-3">
        <span class="h6">{% blocktrans with filter_title=title %} By {{ filter_title }} {% endblocktrans %}</span>
    </div>
    <ul>
        {% for choice in choices %}
            <li{% if choice.selected %} class="text-success selected"{% endif %}>
                <a href="{{ choice.query_string|iriencode }}" title="{{ choice.display }}">{{ choice.display }}</a>
            </li>
        {% endfor %}
    </ul>
</div>

================
File: templates/admin/index.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}

    <div class="container-fluid py-4">
      <div class="row">
        <div class="col-lg-7 position-relative z-index-2">
          <div class="card card-plain mb-4">
            <div class="card-body p-3">
              <div class="row">
                <div class="col-lg-6">
                  <div class="d-flex flex-column h-100">
                    <h2 class="font-weight-bolder mb-0">General Statistics</h2>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-lg-5 col-sm-6">
              <div class="card  mb-4">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Today's Money</p>
                        <h5 class="font-weight-bolder mb-0">
                          $53,000
                          <span class="text-success text-sm font-weight-bolder">+55%</span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card ">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Today's Users</p>
                        <h5 class="font-weight-bolder mb-0">
                          2,300
                          <span class="text-success text-sm font-weight-bolder">+3%</span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-lg-5 col-sm-6 mt-sm-0 mt-4">
              <div class="card  mb-4">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">New Clients</p>
                        <h5 class="font-weight-bolder mb-0">
                          +3,462
                          <span class="text-danger text-sm font-weight-bolder">-2%</span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-paper-diploma text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card ">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Sales</p>
                        <h5 class="font-weight-bolder mb-0">
                          $103,430
                          <span class="text-success text-sm font-weight-bolder">+5%</span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row mt-4">
            <div class="col-12 col-lg-10">
              <div class="card ">
                <div class="card-header pb-0 p-3">
                  <div class="d-flex justify-content-between">
                    <h6 class="mb-2">Sales by Country</h6>
                  </div>
                </div>
                <div class="table-responsive">
                  <table class="table align-items-center ">
                    <tbody>
                      <tr>
                        <td class="w-30">
                          <div class="d-flex px-2 py-1 align-items-center">
                            <div>
                              <img src="{% static 'assets/img/icons/flags/US.png' %}" alt="Country flag">
                            </div>
                            <div class="ms-4">
                              <p class="text-xs font-weight-bold mb-0">Country:</p>
                              <h6 class="text-sm mb-0">United States</h6>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Sales:</p>
                            <h6 class="text-sm mb-0">2500</h6>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Value:</p>
                            <h6 class="text-sm mb-0">$230,900</h6>
                          </div>
                        </td>
                        <td class="align-middle text-sm">
                          <div class="col text-center">
                            <p class="text-xs font-weight-bold mb-0">Bounce:</p>
                            <h6 class="text-sm mb-0">29.9%</h6>
                          </div>
                        </td>
                      </tr>
                      <tr>
                        <td class="w-30">
                          <div class="d-flex px-2 py-1 align-items-center">
                            <div>
                              <img src="{% static 'assets/img/icons/flags/DE.png' %}" alt="Country flag">
                            </div>
                            <div class="ms-4">
                              <p class="text-xs font-weight-bold mb-0">Country:</p>
                              <h6 class="text-sm mb-0">Germany</h6>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Sales:</p>
                            <h6 class="text-sm mb-0">3.900</h6>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Value:</p>
                            <h6 class="text-sm mb-0">$440,000</h6>
                          </div>
                        </td>
                        <td class="align-middle text-sm">
                          <div class="col text-center">
                            <p class="text-xs font-weight-bold mb-0">Bounce:</p>
                            <h6 class="text-sm mb-0">40.22%</h6>
                          </div>
                        </td>
                      </tr>
                      <tr>
                        <td class="w-30">
                          <div class="d-flex px-2 py-1 align-items-center">
                            <div>
                              <img src="{% static 'assets/img/icons/flags/GB.png' %}" alt="Country flag">
                            </div>
                            <div class="ms-4">
                              <p class="text-xs font-weight-bold mb-0">Country:</p>
                              <h6 class="text-sm mb-0">Great Britain</h6>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Sales:</p>
                            <h6 class="text-sm mb-0">1.400</h6>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Value:</p>
                            <h6 class="text-sm mb-0">$190,700</h6>
                          </div>
                        </td>
                        <td class="align-middle text-sm">
                          <div class="col text-center">
                            <p class="text-xs font-weight-bold mb-0">Bounce:</p>
                            <h6 class="text-sm mb-0">23.44%</h6>
                          </div>
                        </td>
                      </tr>
                      <tr>
                        <td class="w-30">
                          <div class="d-flex px-2 py-1 align-items-center">
                            <div>
                              <img src="{% static 'assets/img/icons/flags/BR.png' %}" alt="Country flag">
                            </div>
                            <div class="ms-4">
                              <p class="text-xs font-weight-bold mb-0">Country:</p>
                              <h6 class="text-sm mb-0">Brasil</h6>
                            </div>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Sales:</p>
                            <h6 class="text-sm mb-0">562</h6>
                          </div>
                        </td>
                        <td>
                          <div class="text-center">
                            <p class="text-xs font-weight-bold mb-0">Value:</p>
                            <h6 class="text-sm mb-0">$143,960</h6>
                          </div>
                        </td>
                        <td class="align-middle text-sm">
                          <div class="col text-center">
                            <p class="text-xs font-weight-bold mb-0">Bounce:</p>
                            <h6 class="text-sm mb-0">32.14%</h6>
                          </div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row mt-4">
        <div class="col-lg-5 mb-lg-0 mb-4">
          <div class="card z-index-2">
            <div class="card-body p-3">
              <div class="bg-gradient-dark border-radius-lg py-3 pe-1 mb-3">
                <div class="chart">
                  <canvas id="chart-bars" class="chart-canvas" height="170"></canvas>
                </div>
              </div>
              <h6 class="ms-2 mt-4 mb-0"> Active Users </h6>
              <p class="text-sm ms-2"> (<span class="font-weight-bolder">+23%</span>) than last week </p>
              <div class="container border-radius-lg">
                <div class="row">
                  <div class="col-3 py-3 ps-0">
                    <div class="d-flex mb-2">
                      <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                        <svg width="10px" height="10px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>document</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 300.000000)">
                                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <p class="text-xs mt-1 mb-0 font-weight-bold">Users</p>
                    </div>
                    <h4 class="font-weight-bolder">36K</h4>
                    <div class="progress w-75">
                      <div class="progress-bar bg-dark w-60" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                  <div class="col-3 py-3 ps-0">
                    <div class="d-flex mb-2">
                      <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-info text-center me-2 d-flex align-items-center justify-content-center">
                        <svg width="10px" height="10px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>spaceship</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(4.000000, 301.000000)">
                                  <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                  <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                  <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                  <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <p class="text-xs mt-1 mb-0 font-weight-bold">Clicks</p>
                    </div>
                    <h4 class="font-weight-bolder">2m</h4>
                    <div class="progress w-75">
                      <div class="progress-bar bg-dark w-90" role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                  <div class="col-3 py-3 ps-0">
                    <div class="d-flex mb-2">
                      <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-warning text-center me-2 d-flex align-items-center justify-content-center">
                        <svg width="10px" height="10px" viewBox="0 0 43 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>credit-card</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2169.000000, -745.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(453.000000, 454.000000)">
                                  <path class="color-background" d="M43,10.7482083 L43,3.58333333 C43,1.60354167 41.3964583,0 39.4166667,0 L3.58333333,0 C1.60354167,0 0,1.60354167 0,3.58333333 L0,10.7482083 L43,10.7482083 Z" opacity="0.593633743"></path>
                                  <path class="color-background" d="M0,16.125 L0,32.25 C0,34.2297917 1.60354167,35.8333333 3.58333333,35.8333333 L39.4166667,35.8333333 C41.3964583,35.8333333 43,34.2297917 43,32.25 L43,16.125 L0,16.125 Z M19.7083333,26.875 L7.16666667,26.875 L7.16666667,23.2916667 L19.7083333,23.2916667 L19.7083333,26.875 Z M35.8333333,26.875 L28.6666667,26.875 L28.6666667,23.2916667 L35.8333333,23.2916667 L35.8333333,26.875 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <p class="text-xs mt-1 mb-0 font-weight-bold">Sales</p>
                    </div>
                    <h4 class="font-weight-bolder">435$</h4>
                    <div class="progress w-75">
                      <div class="progress-bar bg-dark w-30" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                  <div class="col-3 py-3 ps-0">
                    <div class="d-flex mb-2">
                      <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center">
                        <svg width="10px" height="10px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>settings</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(304.000000, 151.000000)">
                                  <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                  <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                  <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <p class="text-xs mt-1 mb-0 font-weight-bold">Items</p>
                    </div>
                    <h4 class="font-weight-bolder">43</h4>
                    <div class="progress w-75">
                      <div class="progress-bar bg-dark w-50" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-lg-7">
          <div class="card z-index-2">
            <div class="card-header pb-0">
              <h6>Sales overview</h6>
              <p class="text-sm">
                <i class="fa fa-arrow-up text-success"></i>
                <span class="font-weight-bold">4% more</span> in 2021
              </p>
            </div>
            <div class="card-body p-3">
              <div class="chart">
                <canvas id="chart-line" class="chart-canvas" height="300"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          <div id="globe" class="position-absolute end-0 top-10 mt-sm-3 mt-7 me-lg-7">
            <canvas width="700" height="600" class="w-lg-100 h-lg-100 w-75 h-75 me-lg-0 me-n10 mt-lg-5"></canvas>
          </div>
        </div>
      </div>
      {% include 'includes/footer.html' %}
    </div>

{% endblock content %}

{% block extra_js %}

  <script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
  <script src="{% static 'assets/js/plugins/threejs.js' %}"></script>
  <script src="{% static 'assets/js/plugins/orbit-controls.js' %}"></script>
  <script>
    var ctx = document.getElementById("chart-bars").getContext("2d");

    new Chart(ctx, {
      type: "bar",
      data: {
        labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [{
          label: "Sales",
          tension: 0.4,
          borderWidth: 0,
          borderRadius: 4,
          borderSkipped: false,
          backgroundColor: "#fff",
          data: [450, 200, 100, 220, 500, 100, 400, 230, 500],
          maxBarThickness: 6
        }, ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false,
            },
            ticks: {
              suggestedMin: 0,
              suggestedMax: 500,
              beginAtZero: true,
              padding: 15,
              font: {
                size: 14,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
              color: "#fff"
            },
          },
          x: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false
            },
            ticks: {
              display: false
            },
          },
        },
      },
    });


    var ctx2 = document.getElementById("chart-line").getContext("2d");

    var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
    gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

    var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke2.addColorStop(1, 'rgba(20,23,39,0.2)');
    gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)'); //purple colors

    new Chart(ctx2, {
      type: "line",
      data: {
        labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [{
            label: "Mobile apps",
            tension: 0.4,
            borderWidth: 0,
            pointRadius: 0,
            borderColor: "#cb0c9f",
            borderWidth: 3,
            backgroundColor: gradientStroke1,
            fill: true,
            data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
            maxBarThickness: 6

          },
          {
            label: "Websites",
            tension: 0.4,
            borderWidth: 0,
            pointRadius: 0,
            borderColor: "#3A416F",
            borderWidth: 3,
            backgroundColor: gradientStroke2,
            fill: true,
            data: [30, 90, 40, 140, 290, 290, 340, 230, 400],
            maxBarThickness: 6
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
          x: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 20,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });


    (function() {
      const container = document.getElementById("globe");
      const canvas = container.getElementsByTagName("canvas")[0];

      const globeRadius = 100;
      const globeWidth = 4098 / 2;
      const globeHeight = 1968 / 2;

      function convertFlatCoordsToSphereCoords(x, y) {
        let latitude = ((x - globeWidth) / globeWidth) * -180;
        let longitude = ((y - globeHeight) / globeHeight) * -90;
        latitude = (latitude * Math.PI) / 180;
        longitude = (longitude * Math.PI) / 180;
        const radius = Math.cos(longitude) * globeRadius;

        return {
          x: Math.cos(latitude) * radius,
          y: Math.sin(longitude) * globeRadius,
          z: Math.sin(latitude) * radius
        };
      }

      function makeMagic(points) {
        const {
          width,
          height
        } = container.getBoundingClientRect();

        // 1. Setup scene
        const scene = new THREE.Scene();
        // 2. Setup camera
        const camera = new THREE.PerspectiveCamera(45, width / height);
        // 3. Setup renderer
        const renderer = new THREE.WebGLRenderer({
          canvas,
          antialias: true
        });
        renderer.setSize(width, height);
        // 4. Add points to canvas
        // - Single geometry to contain all points.
        const mergedGeometry = new THREE.Geometry();
        // - Material that the dots will be made of.
        const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);
        const pointMaterial = new THREE.MeshBasicMaterial({
          color: "#989db5",
        });

        for (let point of points) {
          const {
            x,
            y,
            z
          } = convertFlatCoordsToSphereCoords(
            point.x,
            point.y,
            width,
            height
          );

          if (x && y && z) {
            pointGeometry.translate(x, y, z);
            mergedGeometry.merge(pointGeometry);
            pointGeometry.translate(-x, -y, -z);
          }
        }

        const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);
        scene.add(globeShape);

        container.classList.add("peekaboo");

        // Setup orbital controls
        camera.orbitControls = new THREE.OrbitControls(camera, canvas);
        camera.orbitControls.enableKeys = false;
        camera.orbitControls.enablePan = false;
        camera.orbitControls.enableZoom = false;
        camera.orbitControls.enableDamping = false;
        camera.orbitControls.enableRotate = true;
        camera.orbitControls.autoRotate = true;
        camera.position.z = -265;

        function animate() {
          // orbitControls.autoRotate is enabled so orbitControls.update
          // must be called inside animation loop.
          camera.orbitControls.update();
          requestAnimationFrame(animate);
          renderer.render(scene, camera);
        }
        animate();
      }

      function hasWebGL() {
        const gl =
          canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        if (gl && gl instanceof WebGLRenderingContext) {
          return true;
        } else {
          return false;
        }
      }

      function init() {
        if (hasWebGL()) {
          window
          window.fetch("https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json")
            .then(response => response.json())
            .then(data => {
              makeMagic(data.points);
            });
        }
      }
      init();
    })();
  </script>

{% endblock extra_js %}

================
File: templates/admin/invalid_setup.html
================
{% extends "layouts/base.html" %}
{% load i18n static %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% block breadcrumbs %}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
        <div class="d-block mb-4 mb-md-0">
            <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                    <li class="breadcrumb-item">
                        <a href="{% url 'admin:index' %}">
                            <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                            </svg>
                        </a>
                    </li>
                    <li class="breadcrumb-item">{{ title }}</li>
                </ol>
            </nav>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="title">
                        {% trans "Something's wrong with your database installation. Make sure the appropriate database tables have been created, and make sure the database is readable by the appropriate user." %}
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-7 pr-md-5">
                            <div class="card-footer">
                                <a href="{% url 'admin:index' %}" class="btn btn-fill btn-primary">
                                    <i class="fa fa-home"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extrascript %}
    <script type="application/javascript">
        notification.info("{% trans "Something's wrong with your database installation. Make sure the appropriate database tables have been created, and make sure the database is readable by the appropriate user." %}", 'top', 'right');
    </script>
{% endblock %}

================
File: templates/admin/login.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load i18n static admin_soft %}


{% block content %}

  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('{% static 'assets/img/curved-images/curved9.jpg' %}');">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-5 text-center mx-auto">
            <h1 class="text-white mb-2 mt-5">Welcome!</h1>
            <p class="text-lead text-white">Neuralami Admin Login.</p>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
          <div class="card z-index-0">
            <div class="card-header text-center pt-4">
              <h5>Admin Sign In</h5>
            </div>
            
            <div class="row px-xl-5 px-sm-4 px-3">
              <!--
              <div class="col-3 ms-auto px-1">
                <a class="btn btn-outline-light w-100" href="javascript:;">
                  <svg width="24px" height="32px" viewBox="0 0 64 64" version="1.1">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                      <g transform="translate(3.000000, 3.000000)" fill-rule="nonzero">
                        <circle fill="#3C5A9A" cx="29.5091719" cy="29.4927506" r="29.4882047"></circle>
                        <path d="M39.0974944,9.05587273 L32.5651312,9.05587273 C28.6886088,9.05587273 24.3768224,10.6862851 24.3768224,16.3054653 C24.395747,18.2634019 24.3768224,20.1385313 24.3768224,22.2488655 L19.8922122,22.2488655 L19.8922122,29.3852113 L24.5156022,29.3852113 L24.5156022,49.9295284 L33.0113092,49.9295284 L33.0113092,29.2496356 L38.6187742,29.2496356 L39.1261316,22.2288395 L32.8649196,22.2288395 C32.8649196,22.2288395 32.8789377,19.1056932 32.8649196,18.1987181 C32.8649196,15.9781412 35.1755132,16.1053059 35.3144932,16.1053059 C36.4140178,16.1053059 38.5518876,16.1085101 39.1006986,16.1053059 L39.1006986,9.05587273 L39.0974944,9.05587273 L39.0974944,9.05587273 Z" fill="#FFFFFF"></path>
                      </g>
                    </g>
                  </svg>
                </a>
              </div>

              <div class="col-3 px-1">
                <a class="btn btn-outline-light w-100" href="javascript:;">
                  <svg width="24px" height="32px" viewBox="0 0 64 64" version="1.1">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                      <g transform="translate(7.000000, 0.564551)" fill="#000000" fill-rule="nonzero">
                        <path d="M40.9233048,32.8428307 C41.0078713,42.0741676 48.9124247,45.146088 49,45.1851909 C48.9331634,45.4017274 47.7369821,49.5628653 44.835501,53.8610269 C42.3271952,57.5771105 39.7241148,61.2793611 35.6233362,61.356042 C31.5939073,61.431307 30.2982233,58.9340578 25.6914424,58.9340578 C21.0860585,58.9340578 19.6464932,61.27947 15.8321878,61.4314159 C11.8738936,61.5833617 8.85958554,57.4131833 6.33064852,53.7107148 C1.16284874,46.1373849 -2.78641926,32.3103122 2.51645059,22.9768066 C5.15080028,18.3417501 9.85858819,15.4066355 14.9684701,15.3313705 C18.8554146,15.2562145 22.5241194,17.9820905 24.9003639,17.9820905 C27.275104,17.9820905 31.733383,14.7039812 36.4203248,15.1854154 C38.3824403,15.2681959 43.8902255,15.9888223 47.4267616,21.2362369 C47.1417927,21.4153043 40.8549638,25.1251794 40.9233048,32.8428307 M33.3504628,10.1750144 C35.4519466,7.59650964 36.8663676,4.00699306 36.4804992,0.435448578 C33.4513624,0.558856931 29.7884601,2.48154382 27.6157341,5.05863265 C25.6685547,7.34076135 23.9632549,10.9934525 24.4233742,14.4943068 C27.7996959,14.7590956 31.2488715,12.7551531 33.3504628,10.1750144"></path>
                      </g>
                    </g>
                  </svg>
                </a>
              </div>
              
              <div class="col-3 me-auto px-1">
                <a class="btn btn-outline-light w-100" href="javascript:;">
                  <svg width="24px" height="32px" viewBox="0 0 64 64" version="1.1">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                      <g transform="translate(3.000000, 2.000000)" fill-rule="nonzero">
                        <path d="M57.8123233,30.1515267 C57.8123233,27.7263183 57.6155321,25.9565533 57.1896408,24.1212666 L29.4960833,24.1212666 L29.4960833,35.0674653 L45.7515771,35.0674653 C45.4239683,37.7877475 43.6542033,41.8844383 39.7213169,44.6372555 L39.6661883,45.0037254 L48.4223791,51.7870338 L49.0290201,51.8475849 C54.6004021,46.7020943 57.8123233,39.1313952 57.8123233,30.1515267" fill="#4285F4"></path>
                        <path d="M29.4960833,58.9921667 C37.4599129,58.9921667 44.1456164,56.3701671 49.0290201,51.8475849 L39.7213169,44.6372555 C37.2305867,46.3742596 33.887622,47.5868638 29.4960833,47.5868638 C21.6960582,47.5868638 15.0758763,42.4415991 12.7159637,35.3297782 L12.3700541,35.3591501 L3.26524241,42.4054492 L3.14617358,42.736447 C7.9965904,52.3717589 17.959737,58.9921667 29.4960833,58.9921667" fill="#34A853"></path>
                        <path d="M12.7159637,35.3297782 C12.0932812,33.4944915 11.7329116,31.5279353 11.7329116,29.4960833 C11.7329116,27.4640054 12.0932812,25.4976752 12.6832029,23.6623884 L12.6667095,23.2715173 L3.44779955,16.1120237 L3.14617358,16.2554937 C1.14708246,20.2539019 0,24.7439491 0,29.4960833 C0,34.2482175 1.14708246,38.7380388 3.14617358,42.736447 L12.7159637,35.3297782" fill="#FBBC05"></path>
                        <path d="M29.4960833,11.4050769 C35.0347044,11.4050769 38.7707997,13.7975244 40.9011602,15.7968415 L49.2255853,7.66898166 C44.1130815,2.91684746 37.4599129,0 29.4960833,0 C17.959737,0 7.9965904,6.62018183 3.14617358,16.2554937 L12.6832029,23.6623884 C15.0758763,16.5505675 21.6960582,11.4050769 29.4960833,11.4050769" fill="#EB4335"></path>
                      </g>
                    </g>
                  </svg>
                </a>
              </div>
            -->
              
            </div>
            <div class="card-body">
              <form method="post" role="form" class="text-start">
                {% csrf_token %}
                {% if form.non_field_errors %}
                  {% for error in form.non_field_errors %}
                    <div class="text-danger mb-3">{{ error }}</div>
                  {% endfor %}
                {% endif %}

                <div class="mb-3">
                  <input 
                    type="text" 
                    class="form-control" 
                    placeholder="{{ form.username.label }}" 
                    aria-label="Email"
                    name="{{ form.username.name }}"
                    id="{{ form.username.id_for_label }}"
                  >
                </div>
                <div class="mb-3">
                  <input 
                    type="password" 
                    class="form-control" 
                    placeholder="{{ form.password.label }}" 
                    aria-label="Password"
                    name="{{ form.password.name }}"
                    id="{{ form.password.id_for_label }}"
                  >
                </div>

                <div class="text-center">
                  <button type="submit" class="btn bg-gradient-info w-100 my-4 mb-2">Sign In</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

{% endblock content %}

{% block fixed_plugin %}{% endblock fixed_plugin %}

{% block extrascript %}
    <script type="application/javascript">
        {% if form.username.errors %}
            notification.danger("{{ form.username.errors }}", 'top', 'right');
        {% endif %}
        {% if form.password.errors %}
            notification.danger("{{ form.password.errors }}", 'top', 'right');
        {% endif %}

        {% if user.is_authenticated %}
            var msg = "You are authenticated as {{ username }}, but are not authorized to " +
                "access this page.Would you like to login to a different account ?"
            notification.warning(msg, 'top', 'right');
        {% endif %}

        {% if form.errors and not form.non_field_errors %}
            {% if form.errors.items|length == 1 %}
                notification.warning("{% trans "Please correct the error below." %}", 'top', 'right');
            {% else %}
                notification.warning("{% trans "Please correct the errors below." %}", 'top', 'right');
            {% endif %}
        {% endif %}

        {% if form.non_field_errors %}
            {% for error in form.non_field_errors %}
                notification.warning("{{ error|clean_text }}", 'top', 'right');
            {% endfor %}
        {% endif %}
    </script>
{% endblock %}

================
File: templates/admin/object_history.html
================
{% extends "layouts/base.html" %}
{% load i18n admin_urls static %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% block breadcrumbs %}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
        <div class="d-block mb-4 mb-md-0">
            <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                    <li class="breadcrumb-item">
                        <a href="{% url 'admin:index' %}">
                            <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                            </svg>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                      <a href="{% url 'admin:app_list' opts.app_config.label %}">
                        {{ opts.app_config.verbose_name }}
                      </a>
                    </li>

                    <li class="breadcrumb-item">
                        <a href="{% url opts|admin_urlname:'changelist' %}">{{ opts.verbose_name_plural|capfirst }}</a>
                    </li>

                    <li class="breadcrumb-item">
                        <a href="{% url opts|admin_urlname:'change' object.pk|admin_urlquote %}">{{ object|truncatewords:"18" }}</a>
                    </li>

                    <li class="breadcrumb-item">{% trans 'History' %}</li>
                </ol>
            </nav>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="row mx-3 mt-5">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    {% if action_list %}
                        <div class="table-responsive" style="overflow: hidden;">
                            <table class="table tablesorter {{ direction.panel }}">
                                <thead class="text-primary">
                                <tr>
                                    <th scope="col">{% trans 'User' %}</th>
                                    <th scope="col">{% trans 'Action' %}</th>
                                    <th scope="col">{% trans 'Date/time' %}</th>
                                </tr>
                                </thead>
                                <tbody>
                                {% for action in action_list %}
                                    <tr>
                                        <td>{{ action.user.get_username }}{% if action.user.get_full_name %} (
                                            {{ action.user.get_full_name }}){% endif %}</td>
                                        <td>{{ action.get_change_message }}</td>
                                        <th scope="row">{{ action.action_time|date:"DATETIME_FORMAT" }}</th>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    {% else %}
                        <p>{% trans "This object doesn't have a change history. It probably wasn't added via this admin site." %}</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

================
File: templates/admin/pagination.html
================
{% load i18n admin_soft static %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% if cl.paginator.num_pages > 1 %}
    <div class="card-footer px-3 border-0 d-flex flex-column flex-lg-row align-items-center justify-content-between">
        <nav aria-label="Page navigation example">
            <ul class="pagination mb-0">
                <li class="page-item">
                    {% if cl.page_num > 1 %}
                        <a class="page-link" href="?p={{ cl.page_num|neg_num:1 }}">Previous</a>
                    {% else %}
                        <span class="page-link">Previous</span>
                    {% endif %}
                </li>
                {% if pagination_required %}
                    {{ request.get_full_path }}
                    {% for i in page_range %}
                        <li class="page-item {% if i == cl.page_num %}active{% endif %}">
                            {% paginator_number cl i %}
                        </li>
                    {% endfor %}
                {% endif %}
                <li class="page-item">
                    {% if cl.page_num < cl.paginator.num_pages %}
                        <a class="page-link" href="?p={{ cl.page_num|sum_number:1 }}">Next</a>
                    {% else %}
                        <span class="page-link">Next</span>
                    {% endif %}
                </li>
                {% if show_all_url %}
                    <li class="page-item">
                        <a href="{{ show_all_url }}" class="page-link">{% trans 'Show all' %}</a>
                    </li>
                {% endif %}
            </ul>
        </nav>
        <div class="fw-normal small mt-4 mt-lg-0">
            Showing <b>{{ cl.result_list|length }}</b>
            {% if cl.result_count == 1 %}
                {{ cl.opts.verbose_name }}
            {% else %}
                {{ cl.opts.verbose_name_plural }}
            {% endif %}
            out of <b>{{ cl.result_count }}</b> entries
        </div>

        {% if cl.formset and cl.result_count %}
            <input type="submit" name="_save" class="default" value="{% trans 'Save' %}">
        {% endif %}
    </div>
{% endif %}

================
File: templates/admin/search_form.html
================
{% load i18n static %}
{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% if cl.search_fields %}
    <div class="{{ direction.panel }}">
        <form id="changelist-search" method="get">
            <div class="row">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    <span class="input-group-text">
                      <svg class="icon icon-xs" x-description="Heroicon name: solid/search"
                           xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                           aria-hidden="true">
                          <path fill-rule="evenodd"
                                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                clip-rule="evenodd"></path>
                      </svg>
                    </span>
                    <input type="text" class="form-control bg-white" name="{{ search_var }}" value="{{ cl.query }}" id="searchbar" placeholder="{% trans 'Search' %}">
                </div>
                <div class="col-md-3 pl-md-1">
                    <div class="form-group">
                        {% if show_result_count %}
                            <span class="small quiet">
                                {% blocktrans count counter=cl.result_count %}
                                    {{ counter }} result
                                {% plural %}
                                    {{ counter }} results
                                {% endblocktrans %} (<a
                                    href="?{% if cl.is_popup %}_popup=1{% endif %}">{% if cl.show_full_result_count %}
                                {% blocktrans with full_result_count=cl.full_result_count %}
                                    {{ full_result_count }} total
                                {% endblocktrans %}
                            {% else %}
                                {% trans "Show all" %}
                            {% endif %}</a>)
                            </span>
                        {% endif %}
                        {% for pair in cl.params.items %}
                            {% if pair.0 != search_var %}
                                <input type="hidden" name="{{ pair.0 }}" value="{{ pair.1 }}">
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </form>
    </div>
{% endif %}

================
File: templates/admin/submit_line.html
================
{% load i18n admin_urls static %}
{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

<div class="card submit_btn">
    <div class="card-body">
        {% block submit-row %}
            {% if show_save %}
                <button type="submit" name="_save" class="btn btn-sm btn-primary">{% trans 'Save' %}</button>
            {% endif %}

            {% if show_save_as_new %}
                <button type="submit" name="_saveasnew" class="btn btn-sm btn-success">{% trans 'Save as new' %}</button>
            {% endif %}

            {% if show_save_and_add_another %}
                <button type="submit" name="_addanother" class="btn btn-sm btn-info">{% trans 'Save and add another' %}</button>
            {% endif %}

            {% if show_save_and_continue %}
                <button type="submit" name="_continue" class="btn btn-sm btn-warning">{% if can_change %}{% trans 'Save and continue editing' %}{% else %}{% trans 'Save and view' %}{% endif %}</button>
            {% endif %}

            {% if show_close %}
                <a href="{% url opts|admin_urlname:'changelist' %}" class="btn btn-sm btn-default">{% trans 'Close' %}</a>
            {% endif %}

            {% if show_delete_link and original %}
                {% url opts|admin_urlname:'delete' original.pk|admin_urlquote as delete_url %}
                <a href="{% add_preserved_filters delete_url %}" class="btn btn-sm btn-danger">{% trans "Delete" %}</a>
            {% endif %}
        {% endblock %}
    </div>
</div>

================
File: templates/agents/agent_form.html
================
{% extends "layouts/base.html" %}
{% load static %}
{% load agent_filters %}

{% block title %} {% if agent %}Edit Agent{% else %}Add Agent{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if agent %}Edit Agent{% else %}Add Agent{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        {% if request.GET.next %}
                            <input type="hidden" name="next" value="{{ request.GET.next }}">
                        {% endif %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.name.errors %}has-error{% endif %}">
                                    <label for="{{ form.name.id_for_label }}" class="form-control-label">Name</label>
                                    {{ form.name }}
                                    {% if form.name.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.name.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group {% if form.role.errors %}has-error{% endif %}">
                                    <label for="{{ form.role.id_for_label }}" class="form-control-label">Role</label>
                                    {{ form.role }}
                                    {% if form.role.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.role.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.goal.errors %}has-error{% endif %}">
                                    <label for="{{ form.goal.id_for_label }}" class="form-control-label">Goal</label>
                                    {{ form.goal }}
                                    {% if form.goal.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.goal.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.backstory.errors %}has-error{% endif %}">
                                    <label for="{{ form.backstory.id_for_label }}" class="form-control-label">Backstory</label>
                                    {{ form.backstory }}
                                    {% if form.backstory.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.backstory.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.llm.errors %}has-error{% endif %}">
                                    <label for="{{ form.llm.id_for_label }}" class="form-control-label">Language Model</label>
                                    <select name="llm" id="{{ form.llm.id_for_label }}" class="form-select">
                                        {% for value, display in form.llm.field.choices %}
                                            <option value="{{ value }}" {% if value == form.llm.value %}selected{% endif %}>{{ display }}</option>
                                        {% endfor %}
                                    </select>
                                    {% if form.llm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group {% if form.function_calling_llm.errors %}has-error{% endif %}">
                                    <label for="{{ form.function_calling_llm.id_for_label }}" class="form-control-label">Function Calling LLM</label>
                                    <select name="function_calling_llm" id="{{ form.function_calling_llm.id_for_label }}" class="form-select">
                                        {% for value, display in form.function_calling_llm.field.choices %}
                                            <option value="{{ value }}" {% if value == form.function_calling_llm.value %}selected{% endif %}>{{ display }}</option>
                                        {% endfor %}
                                    </select>
                                    {% if form.function_calling_llm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.function_calling_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.tools.errors %}has-error{% endif %}">
                                    <label for="{{ form.tools.id_for_label }}" class="form-control-label">Tools</label>
                                    <div class="tool-selection">
                                        {% for tool in form.tools.field.queryset %}
                                        <div class="tool-option mb-2">
                                            <div class="d-flex align-items-center">
                                                <div class="form-check">
                                                    <input type="checkbox" 
                                                           name="tools" 
                                                           value="{{ tool.id }}" 
                                                           id="tool_{{ tool.id }}"
                                                           class="form-check-input tool-checkbox"
                                                           {% if tool.id|stringformat:"i" in form.tools.value|stringformat:"s" %}checked{% endif %}>
                                                    <label class="form-check-label" for="tool_{{ tool.id }}">{{ tool.name }}</label>
                                                </div>
                                                <div class="ms-3 form-check">
                                                    <input type="checkbox" 
                                                           name="force_tool_output_{{ tool.id }}" 
                                                           id="force_tool_{{ tool.id }}"
                                                           class="form-check-input"
                                                           {% if agent and agent|has_force_output_enabled:tool %}checked{% endif %}>
                                                    <label class="form-check-label" for="force_tool_{{ tool.id }}">
                                                        <small>Force Output as Result</small>
                                                        <i class="fas fa-info-circle" data-bs-toggle="tooltip" title="When checked, the tool's output will be used directly as the task result without agent modifications."></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_iter.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_iter.id_for_label }}" class="form-control-label">Max Iterations</label>
                                    {{ form.max_iter }}
                                    {% if form.max_iter.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_iter.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_rpm.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_rpm.id_for_label }}" class="form-control-label">Max RPM</label>
                                    {{ form.max_rpm }}
                                    {% if form.max_rpm.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_rpm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group {% if form.max_execution_time.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_execution_time.id_for_label }}" class="form-control-label">Max Execution Time</label>
                                    {{ form.max_execution_time }}
                                    {% if form.max_execution_time.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_execution_time.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.verbose.errors %}has-error{% endif %}">
                                    {{ form.verbose }}
                                    <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                                    {% if form.verbose.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.verbose.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.allow_delegation.errors %}has-error{% endif %}">
                                    {{ form.allow_delegation }}
                                    <label class="form-check-label" for="{{ form.allow_delegation.id_for_label }}">Allow Delegation</label>
                                    {% if form.allow_delegation.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.allow_delegation.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.cache.errors %}has-error{% endif %}">
                                    {{ form.cache }}
                                    <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                                    {% if form.cache.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.cache.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.step_callback.errors %}has-error{% endif %}">
                                    <label for="{{ form.step_callback.id_for_label }}" class="form-control-label">Step Callback</label>
                                    {{ form.step_callback }}
                                    {% if form.step_callback.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.step_callback.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.system_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.system_template.id_for_label }}" class="form-control-label">System Template</label>
                                    {{ form.system_template }}
                                    {% if form.system_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.system_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.prompt_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.prompt_template.id_for_label }}" class="form-control-label">Prompt Template</label>
                                    {{ form.prompt_template }}
                                    {% if form.prompt_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.prompt_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group {% if form.response_template.errors %}has-error{% endif %}">
                                    <label for="{{ form.response_template.id_for_label }}" class="form-control-label">Response Template</label>
                                    {{ form.response_template }}
                                    {% if form.response_template.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.response_template.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.allow_code_execution.errors %}has-error{% endif %}">
                                    {{ form.allow_code_execution }}
                                    <label class="form-check-label" for="{{ form.allow_code_execution.id_for_label }}">Allow Code Execution</label>
                                    {% if form.allow_code_execution.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.allow_code_execution.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.use_system_prompt.errors %}has-error{% endif %}">
                                    {{ form.use_system_prompt }}
                                    <label class="form-check-label" for="{{ form.use_system_prompt.id_for_label }}">Use System Prompt</label>
                                    {% if form.use_system_prompt.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.use_system_prompt.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch {% if form.respect_context_window.errors %}has-error{% endif %}">
                                    {{ form.respect_context_window }}
                                    <label class="form-check-label" for="{{ form.respect_context_window.id_for_label }}">Respect Context Window</label>
                                    {% if form.respect_context_window.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.respect_context_window.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group {% if form.max_retry_limit.errors %}has-error{% endif %}">
                                    <label for="{{ form.max_retry_limit.id_for_label }}" class="form-control-label">Max Retry Limit</label>
                                    {{ form.max_retry_limit }}
                                    {% if form.max_retry_limit.errors %}
                                        <div class="invalid-feedback" style="display: block;">
                                            {{ form.max_retry_limit.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div class="form-group {% if form.avatar.errors %}has-error{% endif %}">
                                    <label class="form-control-label">Avatar</label>
                                    <div class="avatar-selection">
                                        {% for choice in form.avatar.field.choices %}
                                        <div class="avatar-option">
                                            <input type="radio" name="{{ form.avatar.name }}" id="avatar_{{ forloop.counter }}" value="{{ choice.0 }}" {% if form.avatar.value == choice.0 %}checked{% endif %} class="avatar-input">
                                            <label for="avatar_{{ forloop.counter }}" class="avatar-label">
                                                <img src="{% static 'assets/img/'|add:choice.0 %}" alt="{{ choice.0 }}" class="avatar-image">
                                            </label>
                                        </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{{ request.GET.next|default:'/agents/manage/' }}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Agent</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


{% endblock content %}

{% block extrastyle %}
{{ block.super }}
<style>
    .avatar-selection {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    .avatar-option {
        position: relative;
    }
    .avatar-input {
        display: none;
    }
    .avatar-label {
        cursor: pointer;
        display: inline-block;
        padding: 2px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    .avatar-image {
        width: 72px;
        height: 72px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #fff;
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        transition: all 0.15s ease;
    }
    .avatar-input:checked + .avatar-label .avatar-image {
        border-color: #5e72e4;
        box-shadow: 0 0 0 2px #5e72e4;
    }
    .avatar-input:checked + .avatar-label::after {
        content: '✓';
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #2dce89;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
    }
    .tool-selection {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ced4da;
        padding: 10px;
        border-radius: 4px;
    }
    .tool-selection label {
        display: block;
        margin-bottom: 5px;
    }
</style>
{% endblock extrastyle %}

{% block extra_js %}
{{ block.super }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add 'form-control' class to all input, select, and textarea elements
        var formElements = document.querySelectorAll('input, select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        // Add 'form-select' class to select elements
        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        // Add 'form-check-input' class to checkbox inputs
        var checkboxInputs = document.querySelectorAll('input[type="checkbox"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Add click event for avatar selection
        var avatarInputs = document.querySelectorAll('.avatar-input');
        avatarInputs.forEach(function(input) {
            input.addEventListener('change', function() {
                document.querySelectorAll('.avatar-label').forEach(function(label) {
                    label.classList.remove('selected');
                });
                if (this.checked) {
                    this.nextElementSibling.classList.add('selected');
                }
            });
        });

        // Trigger change event on the checked avatar input to highlight it on page load
        var checkedAvatar = document.querySelector('.avatar-input:checked');
        if (checkedAvatar) {
            checkedAvatar.dispatchEvent(new Event('change'));
        }

        // Add form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/base_agents.html
================
{% extends "layouts/base.html" %}

{% block title %} CrewAI Agents {% endblock %}

{% block content %}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Agents</h5>
                    <a href="{% url 'agents:manage_agents' %}" class="text-muted">
                        <i class="fas fa-cog"></i>
                    </a>
                </div>
                <div class="card-body">
                    {% block agents_list %}{% endblock %}
                </div>
            </div>
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Previous Tasks</h5>
                </div>
                <div class="card-body">
                    {% block previous_tasks %}{% endblock %}
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">CrewAI Execution</h5>
                </div>
                <div class="card-body">
                    {% block main_content %}{% endblock %}
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock content %}

{% block javascripts %}
<script>
    // Add any JavaScript specific to the agents app here
</script>
{% endblock javascripts %}

{% block extrastyle %}
<style>
    .card-header .fa-cog {
        font-size: 1.2em;
        transition: transform 0.3s ease;
    }
    .card-header .fa-cog:hover {
        transform: rotate(90deg);
    }
</style>
{% endblock extrastyle %}

================
File: templates/agents/confirm_delete.html
================
{% extends "layouts/base.html" %}

{% block title %} Confirm Delete {% endblock %}

{% block content %}
<div class="container-fluid">
    <h1 class="mb-4">Confirm Delete</h1>
    <p>Are you sure you want to delete the following {{ type }}?</p>
    <p><strong>{{ object }}</strong></p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Confirm Delete</button>
        <a href="{% url 'agents:manage_'|add:type|add:'s' %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock content %}

================
File: templates/agents/connection_test.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} WebSocket Connection Test {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>WebSocket Connection Test</h6>
        </div>
        <div class="card-body">
          <div id="status" class="alert alert-info">Initializing...</div>
          <button id="connect-btn" class="btn btn-primary mb-3">Connect to WebSocket</button>
          <button id="send-btn" class="btn btn-secondary mb-3" disabled>Send Test Message</button>
          <div id="log" class="bg-light p-3" style="height: 300px; overflow-y: auto;">
            <pre><code></code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusDiv = document.getElementById('status');
    const logDiv = document.getElementById('log');
    const connectBtn = document.getElementById('connect-btn');
    const sendBtn = document.getElementById('send-btn');
    let socket = null;

    function log(message) {
      const logContent = logDiv.querySelector('code');
      logContent.innerHTML += message + '\n';
      logDiv.scrollTop = logDiv.scrollHeight;
    }

    function connect() {
      log('Attempting to connect...');
      
      const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
      const wsPath = `${wsScheme}${window.location.host}/ws/connection_test/`;
      
      log(`Connecting to: ${wsPath}`);
      
      socket = new WebSocket(wsPath);

      socket.onopen = function(e) {
        log('WebSocket connection established');
        statusDiv.textContent = 'Connected';
        statusDiv.className = 'alert alert-success';
        connectBtn.disabled = true;
        sendBtn.disabled = false;
      };

      socket.onmessage = function(event) {
        const data = JSON.parse(event.data);
        if (data.error) {
          log(`Error: ${data.error}`);
        } else {
          log(`Received message: ${data.message}`);
        }
      };

      socket.onclose = function(event) {
        if (event.wasClean) {
          log(`Connection closed cleanly, code=${event.code}, reason=${event.reason}`);
        } else {
          log('Connection died');
        }
        statusDiv.textContent = 'Disconnected';
        statusDiv.className = 'alert alert-danger';
        connectBtn.disabled = false;
        sendBtn.disabled = true;
      };

      socket.onerror = function(error) {
        log(`WebSocket Error: ${error.message}`);
        console.error('WebSocket Error:', error);
        statusDiv.textContent = 'Error occurred';
        statusDiv.className = 'alert alert-danger';
      };
    }

    connectBtn.onclick = connect;

    sendBtn.onclick = function() {
      if (socket && socket.readyState === WebSocket.OPEN) {
        const message = 'Test message from client';
        socket.send(JSON.stringify({ message: message }));
        log(`Sent message: ${message}`);
      } else {
        log('WebSocket is not connected');
      }
    };
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/crew_detail.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Crew Detail {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-lg-8 col-md-12">
      <!-- Existing crew details card -->
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between">
            <h6 class="mb-0">{{ crew.name }}</h6>
          </div>
          <p class="text-sm mb-0">{{ crew.description }}</p>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder">Process</h6>
              <p class="text-sm mb-3">{{ crew.get_process_display }}</p>
            </div>
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder">Verbose</h6>
              <p class="text-sm mb-3">{{ crew.verbose|yesno:"Yes,No" }}</p>
            </div>
          </div>
          <hr class="horizontal dark">
          <div class="row">
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Agents</h6>
              <ul class="list-group">
                {% for agent in crew.agents.all %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">
                  <strong class="text-dark">{{ agent.name }}</strong> &nbsp;|&nbsp; {{ agent.role }}
                </li>
                {% empty %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">No agents assigned to this crew.</li>
                {% endfor %}
              </ul>
            </div>
            <div class="col-md-6">
              <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Tasks</h6>
              <ul class="list-group">
                {% for task in crew.tasks.all %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">{{ task.description|slice:":250" }}</li>
                {% empty %}
                <li class="list-group-item border-0 ps-0 pt-0 text-sm">No tasks assigned to this crew.</li>
                {% endfor %}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <!-- Modify the "Start New Execution" card -->
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6 class="mb-0">Start New Execution for {{ crew.name }}</h6>
          {% if selected_client %}
            <p class="text-sm mb-0">Selected Client: {{ selected_client.name }}</p>
            <p class="text-sm mb-0">Selected Client URL: {{ selected_client.website_url }}</p>
          {% else %}
            <p class="text-sm mb-0">No client selected</p>
          {% endif %}
        </div>
        <div class="card-body">
          <form method="post" id="crew-execution-form">
            {% csrf_token %}
            {% for field in form %}
              {% if field.name != 'crew' %}
                <div class="form-group">
                  <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
                  {% if field.field.widget.input_type == 'textarea' %}
                    <textarea class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}" rows="4">{{ field.value|default:'' }}</textarea>
                  {% elif field.field.widget.input_type == 'select' %}
                    <select class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}">
                      {% for choice in field.field.choices %}
                        <option value="{{ choice.0 }}" {% if choice.0 == field.value %}selected{% endif %}>{{ choice.1 }}</option>
                      {% endfor %}
                    </select>
                  {% else %}
                    <input type="{{ field.field.widget.input_type }}" class="form-control" id="{{ field.id_for_label }}" name="{{ field.name }}" value="{{ field.value|default:'' }}">
                  {% endif %}
                  {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                  {% endif %}
                  {% for error in field.errors %}
                    <div class="invalid-feedback d-block">{{ error }}</div>
                  {% endfor %}
                </div>
              {% endif %}
            {% endfor %}

            <!-- Add dynamic input fields based on crew.input_variables -->
            {% if crew.input_variables %}
              <h6 class="text-uppercase text-body text-xs font-weight-bolder mt-4 mb-3">Input Variables</h6>
              {% for variable in crew.input_variables %}
                <div class="form-group">
                  <label for="input_{{ variable }}" class="form-control-label">{{ variable|title }}</label>
                  <input type="text" class="form-control" id="input_{{ variable }}" name="input_variables[{{ variable }}]" required>
                </div>
              {% endfor %}
            {% endif %}

            <button type="submit" class="btn btn-primary mt-3" id="submit-btn">Start Execution</button>
          </form>
        </div>
      </div>
      <!-- New card for real-time updates -->
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Real-time Execution Updates</h6>
          <p class="text-sm">
            <i class="fa fa-clock me-1"></i>
            Status: <span id="execution-status" class="badge bg-gradient-info">No active execution</span>
          </p>
        </div>
        <div class="card-body p-3">
          <!-- Human input section -->
          <div id="human-input-section" style="display: none; margin-bottom: 20px;">
            <h6 class="text-uppercase text-body text-xs font-weight-bolder mb-3">Human Input Required</h6>
            <div id="human-input-prompt" class="text-sm mb-2"></div>
            <textarea id="human-input-response" class="form-control mb-3" rows="3"></textarea>
            <button id="submit-human-input" class="btn btn-primary">Submit Input</button>
          </div>

          <!-- Messages container with timeline styling -->
          <div class="messages-container" style="width: 100%; padding-left: 45px; position: relative;">
            <!-- Timeline vertical line -->
            <div style="position: absolute; left: 16px; top: 0; bottom: 0; width: 2px; background-color: #dee2e6;"></div>
            
            <div id="execution-messages">
              <!-- Messages will be dynamically inserted here -->
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-4 col-md-12 mt-4 mt-lg-0">
      <div class="card h-100">
        <div class="card-header pb-0">
          <h6 class="mb-0">Recent Executions</h6>
        </div>
        <div class="card-body p-3">
          <div class="timeline timeline-one-side">
            {% for execution in recent_executions %}
            <div class="timeline-block mb-3">
              <span class="timeline-step">
                <i class="ni ni-bell-55 text-{% if execution.status == 'COMPLETED' %}success{% elif execution.status == 'FAILED' %}danger{% else %}warning{% endif %}"></i>
              </span>
              <div class="timeline-content">
                <h6 class="text-dark text-sm font-weight-bold mb-0">{{ execution.get_status_display }}</h6>
                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</p>
                <p class="text-sm mt-3 mb-2">
                  <a href="{% url 'agents:execution_detail' execution.id %}" class="text-primary">View Details</a>
                </p>
              </div>
            </div>
            {% empty %}
            <p class="text-sm mb-0">No previous executions for this crew.</p>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  $(function () {
    let socket = null;
    let activeExecutionId = null;

    $('#crew-execution-form').on('submit', function(e) {
      e.preventDefault();
      var form = $(this);
      var url = form.attr('action');
      
      // Serialize the form data, including the dynamic input variables
      var formData = form.serializeArray();
      var inputVariables = {};
      formData.forEach(function(item) {
        if (item.name.startsWith('input_variables[')) {
          var key = item.name.match(/\[(.*?)\]/)[1];
          inputVariables[key] = item.value;
        }
      });
      
      // Add the input_variables to the form data
      formData.push({name: 'input_variables', value: JSON.stringify(inputVariables)});
      
      $.ajax({
        type: "POST",
        url: url,
        data: $.param(formData),
        success: function(data) {
          activeExecutionId = data.execution_id;
          connectWebSocket(activeExecutionId);
          $('#execution-status').text('Execution started');
          $('#execution-messages').empty();
        },
        error: function(xhr, status, error) {
          var errorMessage = xhr.status + ': ' + xhr.statusText;
          alert('Error - ' + errorMessage);
        }
      });
    });

    function connectWebSocket(executionId) {
      const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
      const wsPath = `${wsScheme}${window.location.host}/ws/crew_execution/${executionId}/`;
      
      socket = new WebSocket(wsPath);

      socket.onopen = function(e) {
        console.log('WebSocket connection established');
      };

      socket.onmessage = function(event) {
        const data = JSON.parse(event.data);
        handleWebSocketMessage(data);
      };

      socket.onclose = function(event) {
        console.log('WebSocket connection closed');
      };

      socket.onerror = function(error) {
        console.error('WebSocket Error:', error);
      };
    }

    function handleWebSocketMessage(data) {
      if (data.status) {
        let statusClass = 'info';
        if (data.status === 'COMPLETED') statusClass = 'success';
        else if (data.status === 'FAILED') statusClass = 'danger';
        else if (data.status === 'WAITING_FOR_HUMAN_INPUT') statusClass = 'warning';
        
        $('#execution-status').removeClass().addClass(`badge bg-gradient-${statusClass}`).text(data.status);
      }
      
      if (data.messages && data.messages.length > 0) {
        data.messages.forEach(msg => {
          const timestamp = new Date().toLocaleString();
          const messageHtml = `
            <div class="message-block">
              <span class="timeline-step">
                <i class="ni ${msg.agent ? 'ni-spaceship text-primary' : 'ni-bell-55 text-success'} text-gradient"></i>
              </span>
              <div class="message-content">
                <div class="d-flex justify-content-between">
                  <h6 class="text-dark text-sm font-weight-bold mb-0">${msg.agent || 'System Message'}</h6>
                  <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">${timestamp}</p>
                </div>
                <div class="message-content">
                  <div class="text-sm mt-2 mb-0 message-preview">
                    ${msg.content.substring(0, 150)}${msg.content.length > 150 ? '...' : ''}
                  </div>
                  <div class="message-full collapse">
                    <div class="text-sm mt-2 mb-0">
                      ${msg.content}
                    </div>
                  </div>
                  ${msg.content.length > 150 ? `
                    <a href="javascript:;" class="text-xs text-primary toggle-message">Show more</a>
                  ` : ''}
                </div>
              </div>
            </div>
          `;
          $('#execution-messages').append(messageHtml);
        });
        
        // Scroll to the bottom of the messages container
        const messagesContainer = document.querySelector('.messages-container');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      if (data.human_input_request) {
        showHumanInputPrompt(data.human_input_request);
      } else if (data.status !== 'WAITING_FOR_HUMAN_INPUT') {
        $('#human-input-section').hide();
      }

      if (data.status === 'COMPLETED' || data.status === 'FAILED') {
        socket.close();
        activeExecutionId = null;
      }
    }

    function showHumanInputPrompt(prompt) {
      $('#human-input-prompt').text(prompt);
      $('#human-input-section').show();
      $('#human-input-response').focus();
    }

    // Update this event listener
    $(document).on('click', '#submit-human-input', function() {
    let userInput = $('#human-input-response').val();
    let inputKey = `human_input_request_${activeExecutionId}`;
    
    $.ajax({
        type: "POST",
        url: `/agents/execution/${activeExecutionId}/submit_human_input/`,
        data: {
            input_key: inputKey,
            response: userInput
        },
        headers: {
            "X-CSRFToken": getCookie("csrftoken")
        },
        success: function(data) {
            $('#human-input-section').hide();
            $('#human-input-response').val('');
            
            // Scroll to the bottom of the messages container
            const messagesContainer = document.getElementById('execution-messages-container');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        },
        error: function(xhr, status, error) {
            console.error('Error submitting human input:', error);
            alert('Error submitting input. Please try again.');
        }
    });
});
    function getCookie(name) {
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

    // Add this event handler for the show more/less functionality
    $(document).on('click', '.toggle-message', function(e) {
      e.preventDefault();
      const messageContent = $(this).closest('.message-content');
      const preview = messageContent.find('.message-preview');
      const full = messageContent.find('.message-full');
      
      if (full.hasClass('show')) {
        full.collapse('hide');
        preview.show();
        $(this).text('Show more');
      } else {
        full.collapse('show');
        preview.hide();
        $(this).text('Show less');
      }
    });
  });
</script>
{% endblock extra_js %}

{% block extra_css %}
{{ block.super }}
<style>
  .message-block {
    position: relative;
    margin-bottom: 1.5rem;
    width: 100%;
  }

  .timeline-step {
    position: absolute;
    left: -29px;
    width: 26px;
    height: 26px;
    border-radius: 50%;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid #dee2e6;
  }

  .message-content {
    width: 100%;
  }

  .message-preview {
    display: block !important; /* Override the previous -webkit-box display */
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .message-full {
    margin-top: 0.5rem;
    display: none; /* Hide by default */
  }

  .message-full.show {
    display: block;
  }

  .messages-container {
    max-height: 600px;
    overflow-y: auto;
  }

  /* Add styles for code blocks within messages */
  .message-content pre {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
    font-size: 0.875em;
  }

  .message-content code {
    font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  }
</style>
{% endblock extra_css %}

================
File: templates/agents/crew_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if crew %}Edit Crew{% else %}Add Crew{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if crew %}Edit Crew{% else %}Add Crew{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post" id="crew-form">
                        {% csrf_token %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.name.id_for_label }}" class="form-control-label">Name</label>
                                    {{ form.name }}
                                    {% if form.name.errors %}
                                        <div class="text-danger">
                                            {{ form.name.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.agents.id_for_label }}" class="form-control-label">Agents</label>
                                    {{ form.agents }}
                                    {% if form.agents.errors %}
                                        <div class="text-danger">
                                            {{ form.agents.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="{{ form.tasks.id_for_label }}" class="form-control-label">Tasks</label>
                                    {{ form.tasks }}
                                    {% if form.tasks.errors %}
                                        <div class="text-danger">
                                            {{ form.tasks.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-control-label">Task Order</label>
                                    <ul id="task-order-list" class="list-group">
                                        {% for crew_task in crew.crew_tasks.all %}
                                            <li class="list-group-item" data-task-id="{{ crew_task.task.id }}">
                                                <span class="badge bg-primary me-2">{{ forloop.counter }}</span>
                                                {{ crew_task.task.description }}
                                                <input type="hidden" name="task_order[]" value="{{ crew_task.task.id }}">
                                            </li>
                                        {% endfor %}
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.process.id_for_label }}" class="form-control-label">Process</label>
                                    {{ form.process }}
                                    {% if form.process.errors %}
                                        <div class="text-danger">
                                            {{ form.process.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_llm.id_for_label }}" class="form-control-label">Manager LLM</label>
                                    {{ form.manager_llm }}
                                    {% if form.manager_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.function_calling_llm.id_for_label }}" class="form-control-label">Function Calling LLM</label>
                                    {{ form.function_calling_llm }}
                                    {% if form.function_calling_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.function_calling_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.config.id_for_label }}" class="form-control-label">Config</label>
                                    {{ form.config }}
                                    {% if form.config.errors %}
                                        <div class="text-danger">
                                            {{ form.config.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.max_rpm.id_for_label }}" class="form-control-label">Max RPM</label>
                                    {{ form.max_rpm }}
                                    {% if form.max_rpm.errors %}
                                        <div class="text-danger">
                                            {{ form.max_rpm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.language.id_for_label }}" class="form-control-label">Language</label>
                                    {{ form.language }}
                                    {% if form.language.errors %}
                                        <div class="text-danger">
                                            {{ form.language.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.language_file.id_for_label }}" class="form-control-label">Language File</label>
                                    {{ form.language_file }}
                                    {% if form.language_file.errors %}
                                        <div class="text-danger">
                                            {{ form.language_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.embedder.id_for_label }}" class="form-control-label">Embedder</label>
                                    {{ form.embedder }}
                                    {% if form.embedder.errors %}
                                        <div class="text-danger">
                                            {{ form.embedder.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.output_log_file.id_for_label }}" class="form-control-label">Output Log File</label>
                                    {{ form.output_log_file }}
                                    {% if form.output_log_file.errors %}
                                        <div class="text-danger">
                                            {{ form.output_log_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_agent.id_for_label }}" class="form-control-label">Manager Agent</label>
                                    {{ form.manager_agent }}
                                    {% if form.manager_agent.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_agent.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.manager_callbacks.id_for_label }}" class="form-control-label">Manager Callbacks</label>
                                    {{ form.manager_callbacks }}
                                    {% if form.manager_callbacks.errors %}
                                        <div class="text-danger">
                                            {{ form.manager_callbacks.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.prompt_file.id_for_label }}" class="form-control-label">Prompt File</label>
                                    {{ form.prompt_file }}
                                    {% if form.prompt_file.errors %}
                                        <div class="text-danger">
                                            {{ form.prompt_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.planning_llm.id_for_label }}" class="form-control-label">Planning LLM</label>
                                    {{ form.planning_llm }}
                                    {% if form.planning_llm.errors %}
                                        <div class="text-danger">
                                            {{ form.planning_llm.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.verbose }}
                                    <label class="form-check-label" for="{{ form.verbose.id_for_label }}">Verbose</label>
                                    {% if form.verbose.errors %}
                                        <div class="text-danger">
                                            {{ form.verbose.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.memory }}
                                    <label class="form-check-label" for="{{ form.memory.id_for_label }}">Memory</label>
                                    {% if form.memory.errors %}
                                        <div class="text-danger">
                                            {{ form.memory.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.cache }}
                                    <label class="form-check-label" for="{{ form.cache.id_for_label }}">Cache</label>
                                    {% if form.cache.errors %}
                                        <div class="text-danger">
                                            {{ form.cache.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.full_output }}
                                    <label class="form-check-label" for="{{ form.full_output.id_for_label }}">Full Output</label>
                                    {% if form.full_output.errors %}
                                        <div class="text-danger">
                                            {{ form.full_output.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.share_crew }}
                                    <label class="form-check-label" for="{{ form.share_crew.id_for_label }}">Share Crew</label>
                                    {% if form.share_crew.errors %}
                                        <div class="text-danger">
                                            {{ form.share_crew.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch">
                                    {{ form.planning }}
                                    <label class="form-check-label" for="{{ form.planning.id_for_label }}">Planning</label>
                                    {% if form.planning.errors %}
                                        <div class="text-danger">
                                            {{ form.planning.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <!-- Replace the existing input variables section with this -->
                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="input_variables" class="form-control-label">Input Variables</label>
                                    <div id="input-variables-container" class="row">
                                        <!-- We'll populate this dynamically with JavaScript -->
                                    </div>
                                    <button type="button" id="add-variable" class="btn btn-outline-primary btn-sm mt-2">Add Variable</button>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{% url 'agents:manage_crews' %}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Crew</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });
        try {
            const initialInputVariables = JSON.parse('{{ input_variables_json|safe }}');
            // ... rest of your code ...
        } catch (error) {
            console.error('Error parsing initial input variables:', error, '{{ input_variables_json|safe }}'); //log the json
        }
        // Add classes to form elements
        var formElements = document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]), select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        var checkboxInputs = document.querySelectorAll('input[type="checkbox"], input[type="radio"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Form validation and submission
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                alert('Please fill in all required fields.');
                return;
            }

            const formData = new FormData(form);
            const inputVariables = formData.getAll('input_variables[]');
            console.log('Submitting form with input variables:', inputVariables);
            form.submit();
        });

        const taskSelect = document.getElementById('{{ form.tasks.id_for_label }}');
        const taskOrderList = document.getElementById('task-order-list');

        // Initialize Sortable
        new Sortable(taskOrderList, {
            animation: 150,
            onEnd: function() {
                updateTaskOrder();
            }
        });

        // Update task order when tasks are selected or deselected
        taskSelect.addEventListener('change', function() {
            updateTaskList();
        });

        function updateTaskList() {
            const selectedTasks = Array.from(taskSelect.selectedOptions);
            const currentOrder = Array.from(taskOrderList.children).map(li => li.dataset.taskId);
            
            // Remove tasks that are no longer selected
            currentOrder.forEach(taskId => {
                if (!selectedTasks.some(option => option.value === taskId)) {
                    const li = taskOrderList.querySelector(`li[data-task-id="${taskId}"]`);
                    if (li) li.remove();
                }
            });

            // Add newly selected tasks
            selectedTasks.forEach(function(option) {
                if (!currentOrder.includes(option.value)) {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item';
                    listItem.dataset.taskId = option.value;
                    listItem.innerHTML = `
                        <span class="badge bg-primary me-2"></span>
                        ${option.text}
                        <input type="hidden" name="task_order[]" value="${option.value}">
                    `;
                    taskOrderList.appendChild(listItem);
                }
            });

            updateTaskOrder();
        }

        function updateTaskOrder() {
            const items = taskOrderList.querySelectorAll('li');
            items.forEach(function(item, index) {
                item.querySelector('.badge').textContent = index + 1;
                item.querySelector('input[name="task_order[]"]').value = item.dataset.taskId;
            });
        }

        const inputVariablesContainer = document.getElementById('input-variables-container');
    const addVariableButton = document.getElementById('add-variable');

    addVariableButton.addEventListener('click', function() {
        addInputVariable();
    });

    inputVariablesContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-variable') || e.target.closest('.remove-variable')) {
            e.target.closest('.col-md-4').remove();
        }
    });

    function addInputVariable(value = '') {
        const newInput = document.createElement('div');
        newInput.className = 'col-md-4 mb-2';
        newInput.innerHTML = `
            <div class="input-group">
                <input type="text" name="input_variables[]" class="form-control form-control-sm" value="${value}" required>
                <button type="button" class="btn btn-outline-secondary btn-sm remove-variable">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        inputVariablesContainer.appendChild(newInput);
    }

    // Parse and render initial input variables
    try {
        const initialInputVariables = JSON.parse('{{ input_variables_json|safe }}');
        console.log('Initial input variables:', initialInputVariables);
        
        if (Array.isArray(initialInputVariables)) {
            initialInputVariables.forEach(variable => {
                addInputVariable(variable);
                console.log('Added input variable:', variable);
            });
        }
    } catch (error) {
        console.error('Error parsing initial input variables:', error);
    }
});
</script>
{% endblock extra_js %}

================
File: templates/agents/crew_list.html
================
{% extends "agents/base_agents.html" %}

{% block agents_list %}
<ul class="list-group">
    {% for crew in crews %}
    <li class="list-group-item">
        <a href="{% url 'agents:crew_detail' crew.id %}" data-toggle="tooltip" title="{{ crew.description }}">
            {{ crew.name }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No CrewAI crews available.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block previous_tasks %}
<ul class="list-group">
    {% for execution in request.user.crewaiexecution_set.all|slice:":5" %}
    <li class="list-group-item">
        <a href="{% url 'agents:execution_detail' execution.id %}">
            {{ execution.crew.name }} - {{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}
        </a>
    </li>
    {% empty %}
    <li class="list-group-item">No previous tasks.</li>
    {% endfor %}
</ul>
{% endblock %}

{% block main_content %}
<h2>Welcome to CrewAI Agents</h2>
<p>Select a crew from the list on the left to start a new execution or view previous tasks.</p>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/crewai_home.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <!-- Client Selection Dropdown -->
  <div class="row mb-4">
    <div class="col-6">
      <div class="card">
        <div class="card-body p-3">
          <form id="client-select-form" method="get">
            <div class="row align-items-center">
              <div class="col-md-3">
                <label for="client-select" class="form-label mb-0">Select Client:</label>
              </div>
              <div class="col-md-9">
                <select class="form-select" name="client_id" id="client-select">
                  <option value="">None</option>
                  {% for client in clients %}
                    <option value="{{ client.id }}" {% if client.id|stringformat:"s" == selected_client_id %}selected{% endif %}>
                      {{ client.name }}
                    </option>
                  {% endfor %}
                </select>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Crews</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ crews.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Recent Executions</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ recent_executions.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div> 

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-lg-6">
              <div class="d-flex flex-column h-100">
                <p class="mb-1 pt-2 text-bold">Welcome back, {{ request.user.username|capfirst }}</p>
                <h5 class="font-weight-bolder">Crew Dashboard</h5>
                <p class="mb-5">What do you want to do with your crews today.</p>
                <a class="text-body text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:manage_crews_card_view' %}">
                  View All Crews
                  <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
                </a>
              </div>
            </div>
            <div class="col-lg-5 ms-auto text-center mt-5 mt-lg-0">
              <div class="bg-gradient-primary border-radius-lg h-100">
                <img src="{% static 'assets/img/shapes/waves-white.svg' %}" class="position-absolute h-100 w-50 top-0 d-lg-block d-none" alt="waves">
                <div class="position-relative d-flex align-items-center justify-content-center h-100">
                  <img class="w-100 position-relative z-index-2 pt-4" src="{% static 'assets/img/illustrations/rocket-white.png' %}" alt="rocket">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card h-100 p-3">
        <div class="overflow-hidden position-relative border-radius-lg bg-cover h-100" style="background-image: url('{% static 'assets/img/ivancik.jpg' %}');">
          <span class="mask bg-gradient-dark"></span>
          <div class="card-body position-relative z-index-1 d-flex flex-column h-100 p-3">
            <h5 class="text-white font-weight-bolder mb-4 pt-2">Quick Actions</h5>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:add_crew' %}">
              Create New Crew
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:execution_list' %}">
              View Executions
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Crews</h6>
        </div>
        <div class="card-body p-3">
          <div class="row">
            {% for crew in crews %}
            <div class="col-6 mb-3"> <!-- Adjusted to create columns -->
              <div class="d-flex">
                <div class="icon icon-shape bg-gradient-dark shadow text-center border-radius-md">
                  <i class="ni ni-mobile-button text-lg opacity-10" aria-hidden="true"></i>
                </div>
                <div class="ms-3">
                  <div class="numbers">
                    <h6 class="mb-1 text-dark text-sm">
                      <a href="{% url 'agents:crew_detail' crew.id %}" class="text-dark">{{ crew.name }}</a> <!-- Link added -->
                    </h6>
                  </div>
                </div>
              </div>
            </div>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Recent Runs</h6>
        </div>
        <div class="card-body p-3">
          <div class="row"> <!-- Added row div for two columns -->
            {% for execution in recent_executions %}
            <div class="col-6"> <!-- Each execution takes half the width -->
              <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                <div class="d-flex align-items-center">
                  <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                    <i class="ni ni-mobile-button text-white opacity-10"></i>
                  </div>
                  <div class="d-flex flex-column">
                    <h6 class="mb-1 text-dark text-sm">
                      <a href="{% url 'agents:execution_detail' execution.id %}">{{ execution.crew.name }}</a>
                    </h6>
                    <span class="text-xs">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</span>
                  </div>
                </div>
              </li>
            </div> <!-- End of column for each execution -->
            {% endfor %}
          </div> <!-- End of row div -->
        </div>
      </div>
    </div>

</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
{% endblock javascripts %}

{% block extra_js %}
{{ block.super }}
<script>
  $(function() {
    $('#client-select').change(function() {
      $('#client-select-form').submit();
    });
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/dashboard_home.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <!-- New Client Selection Card -->
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Select Client</p>
                <form id="client-select-form" method="get">
                  <select class="form-control" name="client_id" id="client-select">
                    <option value="">All Clients</option>
                    {% for client in clients %}
                      <option value="{{ client.id }}" {% if client.id|stringformat:"s" == selected_client_id %}selected{% endif %}>
                        {{ client.name }}
                      </option>
                    {% endfor %}
                  </select>
                </form>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-building text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Crews</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ crews.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Recent Executions</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ recent_executions.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-lg-6">
              <div class="d-flex flex-column h-100">
                <p class="mb-1 pt-2 text-bold">Welcome back, {{ request.user.username }}</p>
                <h5 class="font-weight-bolder">CrewAI Dashboard</h5>
                <p class="mb-5">Here's what's happening with your CrewAI today.</p>
                <a class="text-body text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:manage_crews' %}">
                  View All Crews
                  <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
                </a>
              </div>
            </div>
            <div class="col-lg-5 ms-auto text-center mt-5 mt-lg-0">
              <div class="bg-gradient-primary border-radius-lg h-100">
                <img src="{% static 'assets/img/shapes/waves-white.svg' %}" class="position-absolute h-100 w-50 top-0 d-lg-block d-none" alt="waves">
                <div class="position-relative d-flex align-items-center justify-content-center h-100">
                  <img class="w-100 position-relative z-index-2 pt-4" src="{% static 'assets/img/illustrations/rocket-white.png' %}" alt="rocket">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card h-100 p-3">
        <div class="overflow-hidden position-relative border-radius-lg bg-cover h-100" style="background-image: url('{% static 'assets/img/ivancik.jpg' %}');">
          <span class="mask bg-gradient-dark"></span>
          <div class="card-body position-relative z-index-1 d-flex flex-column h-100 p-3">
            <h5 class="text-white font-weight-bolder mb-4 pt-2">Quick Actions</h5>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:add_crew' %}">
              Create New Crew
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
            <a class="text-white text-sm font-weight-bold mb-0 icon-move-right mt-auto" href="{% url 'agents:execution_list' %}">
              View Executions
              <i class="fas fa-arrow-right text-sm ms-1" aria-hidden="true"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Crew Summaries</h6>
        </div>
        <div class="card-body p-3">
          {% for crew in crews %}
          <div class="d-flex mb-3">
            <div class="icon icon-shape bg-gradient-dark shadow text-center border-radius-md">
              <i class="ni ni-mobile-button text-lg opacity-10" aria-hidden="true"></i>
            </div>
            <div class="ms-3">
              <div class="numbers">
                <h6 class="mb-1 text-dark text-sm">{{ crew.name }}</h6>
                <span class="text-sm">Agents: {{ crew.agent_set.count }}, Tasks: {{ crew.task_set.count }}</span>
              </div>
            </div>
            <div class="ms-auto">
              <a class="btn btn-link text-dark px-3 mb-0" href="{% url 'agents:crew_detail' crew.id %}">
                <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>View
              </a>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Recent Executions</h6>
        </div>
        <div class="card-body p-3">
          <ul class="list-group">
            {% for execution in recent_executions %}
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-mobile-button text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">{{ execution.crew.name }}</h6>
                  <span class="text-xs">{{ execution.created_at|date:"SHORT_DATETIME_FORMAT" }}</span>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:execution_detail' execution.id %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            {% endfor %}
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Add links to existing pages -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0 p-3">
          <h6 class="mb-0">Navigation</h6>
        </div>
        <div class="card-body p-3">
          <ul class="list-group">
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-bullet-list-67 text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">Manage Crews</h6>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:manage_crews' %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
              <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                  <i class="ni ni-calendar-grid-58 text-white opacity-10"></i>
                </div>
                <div class="d-flex flex-column">
                  <h6 class="mb-1 text-dark text-sm">Execution List</h6>
                </div>
              </div>
              <div class="d-flex">
                <a class="btn btn-link btn-icon-only btn-rounded btn-sm text-dark icon-move-right my-auto" href="{% url 'agents:execution_list' %}">
                  <i class="ni ni-bold-right" aria-hidden="true"></i>
                </a>
              </div>
            </li>
            <!-- Add more links to other existing pages as needed -->
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
{% endblock javascripts %}

{% block extra_js %}
{{ block.super }}
<script>
  $(function() {
    $('#client-select').change(function() {
      $('#client-select-form').submit();
    });
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/execution_detail.html
================
{% extends "agents/base_agents.html" %}
{% load static %}
{% load agent_tags %}  <!-- Add this line -->

{% block content %}
<div class="container-fluid py-4">
    <div class="card card-body blur shadow-blur mx-4 overflow-hidden">
        <div class="row gx-4">
            <div class="col-auto">
                <div class="avatar avatar-xxl position-relative">
                    {% if execution.crew.avatar %}
                        <img src="{% static 'assets/img/'|add:execution.crew.avatar %}" alt="{{ execution.crew.name }}" class="w-100 border-radius-lg shadow-sm">
                    {% else %}
                        <div class="avatar avatar-xxl bg-gradient-primary border-radius-lg shadow-sm">
                            <span class="text-white" style="font-size: 5.0rem;">{{ execution.crew.name|make_list|first|upper }}</span>
                        </div>
                    {% endif %}
                </div>
            </div>
            <div class="col-auto my-auto">
                <div class="h-100">
                    <h5 class="mb-1">{{ execution.crew.name }}</h5>
                    <p class="mb-0 font-weight-bold text-sm">
                        Status: <span class="badge bg-gradient-{{ status_class }}">{{ execution.get_status_display }}</span>
                    </p>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 my-sm-auto ms-sm-auto me-sm-0 mx-auto mt-3">
                <div class="nav-wrapper position-relative end-0">
                    <div class="avatar-group">
                        {% for agent in execution.crew.agents.all|slice:":8" %}
                            <a href="javascript:;" class="avatar avatar-lg rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ agent.name }}">
                                <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="{{ agent.name }}">
                            </a>
                        {% endfor %}
                        {% if execution.crew.agents.count > 8 %}
                            <a href="javascript:;" class="avatar avatar-lg rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ execution.crew.agents.count|add:'-3' }} more">
                                <span class="avatar-text bg-gradient-primary">+{{ execution.crew.agents.count|add:'-8' }}</span>
                            </a>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header pb-0">
                    <h6>Execution Messages</h6>
                    <p class="text-sm">
                        <i class="fa fa-clock me-1"></i>
                        Last updated: {{ execution.updated_at|date:"SHORT_DATETIME_FORMAT" }}
                    </p>
                </div>
                <div class="card-body p-3">
                    <div class="messages-container" style="width: 100%; padding-left: 45px; position: relative;">
                        <!-- Timeline vertical line -->
                        <div style="position: absolute; left: 16px; top: 0; bottom: 0; width: 2px; background-color: #dee2e6;"></div>
                        
                        {% for message in messages %}
                        <div class="message-block" style="position: relative; margin-bottom: 1.5rem; width: 100%;">
                            <!-- Timeline step -->
                            <span style="position: absolute; left: -29px; width: 26px; height: 26px; border-radius: 50%; background: white; display: flex; align-items: center; justify-content: center; border: 2px solid #dee2e6;">
                                {% if message.agent %}
                                    <i class="ni ni-spaceship text-primary text-gradient"></i>
                                {% else %}
                                    <i class="ni ni-bell-55 text-success text-gradient"></i>
                                {% endif %}
                            </span>
                            
                            <!-- Message content -->
                            <div style="width: 100%;">
                                <div class="d-flex justify-content-between">
                                    <h6 class="text-dark text-sm font-weight-bold mb-0">
                                        {% if message.agent %}
                                            {{ message.agent }}
                                        {% else %}
                                            System Message
                                        {% endif %}
                                    </h6>
                                    <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">
                                        {{ message.timestamp|date:"d M H:i" }}
                                    </p>
                                </div>
                                <div class="message-content">
                                    <div class="text-sm mt-2 mb-0 message-preview">
                                        {{ message.content|truncatechars:150 }}
                                    </div>
                                    <div class="message-full collapse">
                                        <div class="text-sm mt-2 mb-0">
                                            <!-- Add debug output -->
                                            <!-- Original: {{ message.content }} -->
                                            <!-- HTML: {{ message.content_html|safe }} -->
                                            {{ message.content_html|safe }}
                                        </div>
                                    </div>
                                    {% if message.content|length > 150 %}
                                        <a href="javascript:;" class="text-xs text-primary toggle-message">Show more</a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        {% empty %}
                        <p class="text-sm mb-0">No messages yet.</p>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        {% if execution.outputs %}
        <div class="col-12 mt-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Execution Outputs</h6>
                </div>
                <div class="card-body p-3">
                    <div class="messages-container" style="width: 100%; padding-left: 45px; position: relative;">
                        <!-- Timeline vertical line -->
                        <div style="position: absolute; left: 16px; top: 0; bottom: 0; width: 2px; background-color: #dee2e6;"></div>
                        
                        {% for key, value in execution.outputs.items %}
                        <div class="message-block" style="position: relative; margin-bottom: 1.5rem; width: 100%;">
                            <!-- Timeline step -->
                            <span style="position: absolute; left: -29px; width: 26px; height: 26px; border-radius: 50%; background: white; display: flex; align-items: center; justify-content: center; border: 2px solid #dee2e6;">
                                <i class="ni ni-key-25 text-warning text-gradient"></i>
                            </span>
                            
                            <!-- Output content -->
                            <div style="width: 100%;">
                                <div class="d-flex justify-content-between">
                                    <h6 class="text-dark text-sm font-weight-bold mb-0">{{ key }}</h6>
                                </div>
                                <div class="message-content">
                                    <div class="text-sm mt-2 mb-0 message-preview">
                                        {% if value|stringformat:"s"|length > 150 %}
                                            {{ value|stringformat:"s"|truncatechars:150 }}
                                        {% else %}
                                            {{ value|stringformat:"s" }}
                                        {% endif %}
                                    </div>
                                    <div class="message-full collapse">
                                        <div class="text-sm mt-2 mb-0">
                                            {{ execution.outputs_html|get_item:key|safe }}
                                        </div>
                                    </div>
                                    {% if value|stringformat:"s"|length > 150 %}
                                        <a href="javascript:;" class="text-xs text-primary toggle-message">Show more</a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        {% endif %}
    </div>

    {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_css %}
<style>
    /* Override the media query that's limiting width */
    @media (min-width: 992px) {
        .timeline-one-side .timeline-content {
            max-width: none !important;
            width: auto !important;
        }
    }

    /* Base timeline overrides */
    .timeline-one-side:before {
        left: 1rem !important;
    }

    .timeline-one-side .timeline-step {
        left: 1rem !important;
    }

    .timeline-content {
        margin-left: 45px !important;
        width: auto !important;
        float: none !important;
    }

    /* Keep other styles */
    .message-preview {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .message-full {
        margin-top: 0.5rem;
    }

    /* Add markdown styling */
    .message-content pre {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1rem 0;
    }
    
    .message-content code {
        background-color: #f8f9fa;
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        color: #e83e8c;
        font-size: 0.875em;
    }
    
    .message-content pre code {
        color: inherit;
        padding: 0;
        background-color: transparent;
    }
    
    .message-content p {
        margin-bottom: 1rem;
    }
    
    .message-content ul, 
    .message-content ol {
        margin-bottom: 1rem;
        padding-left: 2rem;
    }
    
    .message-content blockquote {
        border-left: 4px solid #dee2e6;
        padding-left: 1rem;
        margin-left: 0;
        color: #6c757d;
    }
</style>
{% endblock extra_css %}

{% block extra_js %}
{{ block.super }}
<script>
    $(document).ready(function() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Initialize message toggle handlers
        $('.toggle-message').on('click', function(e) {
            e.preventDefault();
            const messageContent = $(this).closest('.message-content');
            const preview = messageContent.find('.message-preview');
            const full = messageContent.find('.message-full');
            
            if (full.hasClass('show')) {
                full.collapse('hide');
                preview.show();
                $(this).text('Show more');
            } else {
                full.collapse('show');
                preview.hide();
                $(this).text('Show less');
            }
        });
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/execution_list.html
================
{% extends "agents/base_agents.html" %}
{% load static %}

{% block main_content %}
<div class="container mt-4">
    <h2>Executions</h2>

    <div class="card mb-4">
        <div class="card-header">
            <h3>Filter Executions</h3>
        </div>
        <div class="card-body">
            <form method="get" class="form-inline">
                <div class="form-group mr-2">
                    <label for="crew" class="mr-2">Crew:</label>
                    <select name="crew" id="crew" class="form-control">
                        <option value="">All Crews</option>
                        {% for crew in crews %}
                        <option value="{{ crew.id }}" {% if request.GET.crew == crew.id|stringformat:"s" %}selected{% endif %}>{{ crew.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group mr-2">
                    <label for="status" class="mr-2">Status:</label>
                    <select name="status" id="status" class="form-control">
                        <option value="">All Statuses</option>
                        <option value="PENDING" {% if request.GET.status == 'PENDING' %}selected{% endif %}>Pending</option>
                        <option value="RUNNING" {% if request.GET.status == 'RUNNING' %}selected{% endif %}>Running</option>
                        <option value="COMPLETED" {% if request.GET.status == 'COMPLETED' %}selected{% endif %}>Completed</option>
                        <option value="FAILED" {% if request.GET.status == 'FAILED' %}selected{% endif %}>Failed</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Filter</button>
            </form>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3>Execution List</h3>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Crew</th>
                        <th>Status</th>
                        <th>Started</th>
                        <th>Last Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for execution in executions %}
                    <tr>
                        <td>{{ execution.crew.name }}</td>
                        <td>
                            <span class="badge badge-{% if execution.status == 'COMPLETED' %}success{% elif execution.status == 'FAILED' %}danger{% elif execution.status == 'RUNNING' %}warning{% else %}secondary{% endif %}">
                                {{ execution.get_status_display }}
                            </span>
                        </td>
                        <td>{{ execution.created_at|date:"Y-m-d H:i:s" }}</td>
                        <td>{{ execution.updated_at|date:"Y-m-d H:i:s" }}</td>
                        <td>
                            <a href="{% url 'agents:execution_detail' execution.id %}" class="btn btn-sm btn-info">View Details</a>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5">No executions found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>

            {% if is_paginated %}
            <nav aria-label="Execution list pagination">
                <ul class="pagination justify-content-center">
                    {% if page_obj.has_previous %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    {% endif %}

                    {% for num in page_obj.paginator.page_range %}
                    {% if page_obj.number == num %}
                    <li class="page-item active"><a class="page-link" href="#">{{ num }}</a></li>
                    {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                    <li class="page-item"><a class="page-link" href="?page={{ num }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">{{ num }}</a></li>
                    {% endif %}
                    {% endfor %}

                    {% if page_obj.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.next_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ block.super }}
<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
</script>
{% endblock %}

================
File: templates/agents/manage_agents_card_view.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Agents - Card View {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
            <h6 class="mb-0">Agents</h6>
            <p class="text-sm mb-0">
                View and manage your AI agents.
            </p>
            </div>
            <div class="d-flex align-items-center">
            <a href="{% url 'agents:manage_agents' %}" class="btn btn-sm  me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
            </a>
            <a href="{% url 'agents:manage_agents_card_view' %}" class="btn btn-sm  me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
            </a>
            <a href="{% url 'agents:add_agent' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Agent</a>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="p-3">
            <div class="row g-3 mb-4">
              <div class="col-md-6">
                <input type="text" id="searchInput" class="form-control" placeholder="Search agents...">
              </div>
              <div class="col-md-6">
                <select id="roleFilter" class="form-select">
                  <option value="">All Roles</option>
                  <option value="Analyst">Analyst</option>
                  <option value="Support">Support</option>
                  <option value="Creator">Creator</option>
                  <option value="Engineer">Engineer</option>
                  <option value="Manager">Manager</option>
                </select>
              </div>
            </div>
            <div class="row" id="agentCards">
              {% for agent in agents %}
              <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100">
                  <div class="card-header p-3 pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h5 class="mb-0">{{ agent.name }}</h5>
                        <p class="text-sm mb-0">{{ agent.role }}</p>
                      </div>
                      <div class="avatar avatar-xl position-relative">
                        <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="Agent avatar" class="w-100 border-radius-lg shadow-sm">
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-3">
                    <p class="text-sm mb-2"><strong>Goal:</strong> {{ agent.goal|truncatechars:100 }}</p>
                    <p class="text-sm mb-2"><strong>LLM:</strong> {{ agent.llm }}</p>
                    <p class="text-sm mb-2"><strong>Crews:</strong> 
                      {% for crew in agent.crew_set.all %}
                        <span class="badge bg-gradient-primary"><a href="{% url 'agents:edit_crew' crew.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit crew">{{ crew.name }}</a></span>
                      {% empty %}
                        <span class="text-muted">No crews</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-2"><strong>Tasks:</strong> 
                      {% for task in agent.task_set.all %}
                        <span class="badge bg-gradient-info"><a href="{% url 'agents:edit_task' task.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit task">{{ task.description|truncatechars:20 }}</a></span>
                      {% empty %}
                        <span class="text-muted">No tasks</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-0"><strong>Tools:</strong></p>
                    <div class="d-flex flex-wrap gap-1 mb-2">
                      {% for tool in agent.tools.all %}
                        <span class="badge bg-gradient-success">{{ tool.name }}</span>
                      {% empty %}
                        <span class="text-muted">No tools</span>
                      {% endfor %}
                    </div>
                  </div>
                  <div class="card-footer p-3">
                    <div class="d-flex justify-content-between">
                        <a href="{% url 'agents:edit_agent' agent.id %}?next={{ request.path|urlencode }}" class="btn btn-link text-dark mb-0 ps-0" data-toggle="tooltip" data-original-title="Edit agent">
                          <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>Edit
                        </a>
                        <a href="{% url 'agents:delete_agent' agent.id %}" class="btn btn-link text-danger mb-0 pe-0" data-toggle="tooltip" data-original-title="Delete agent">
                          <i class="far fa-trash-alt me-2"></i>Delete
                        </a>
                      </div>
                  </div>
                </div>
              </div>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create/Edit Agent Modal -->
<div class="modal fade" id="agentModal" tabindex="-1" role="dialog" aria-labelledby="agentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="agentModalLabel">Create New Agent</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="agentForm">
          <div class="form-group mb-3">
            <label for="agentName" class="form-control-label">Name</label>
            <input type="text" class="form-control" id="agentName" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentRole" class="form-control-label">Role</label>
            <input type="text" class="form-control" id="agentRole" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentGoal" class="form-control-label">Goal</label>
            <textarea class="form-control" id="agentGoal" rows="3" required></textarea>
          </div>
          <div class="form-group mb-3">
            <label for="agentLLM" class="form-control-label">LLM</label>
            <input type="text" class="form-control" id="agentLLM" required>
          </div>
          <div class="form-group mb-3">
            <label for="agentAvatar" class="form-control-label">Avatar</label>
            <select class="form-control" id="agentAvatar" name="avatar" required>
              {% for avatar in form.avatar.field.choices %}
                <option value="{{ avatar.0 }}" data-img="{% static 'assets/img/'|add:avatar.0 %}">Avatar {{ forloop.counter }}</option>
              {% endfor %}
            </select>
          </div>
          <div class="text-center">
            <img id="avatarPreview" src="" alt="Avatar preview" class="img-fluid rounded-circle" style="width: 100px; height: 100px; object-fit: cover;">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="saveAgent()">Save Agent</button>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  let currentAgentId = null;

  function editAgent(agentId) {
    currentAgentId = agentId;
    // Fetch agent details and populate the form
    // This is a placeholder - you'll need to implement the actual data fetching
    $('#agentModalLabel').text('Edit Agent');
    $('#agentModal').modal('show');
  }

  function saveAgent() {
    const agentData = {
      name: $('#agentName').val(),
      role: $('#agentRole').val(),
      goal: $('#agentGoal').val(),
      llm: $('#agentLLM').val(),
      avatar: $('#agentAvatar').val(),
      // Add more fields as needed
    };

    const url = currentAgentId ? `/agents/manage/agents/${currentAgentId}/update/` : '/agents/manage/agents/add/';
    const method = currentAgentId ? 'PUT' : 'POST';

    $.ajax({
      url: url,
      method: method,
      data: JSON.stringify(agentData),
      contentType: 'application/json',
      success: function(response) {
        $('#agentModal').modal('hide');
        // Refresh the page or update the cards
        location.reload();
      },
      error: function(error) {
        console.error('Error saving agent:', error);
      }
    });
  }

  function deleteAgent(agentId) {
    if (confirm('Are you sure you want to delete this agent?')) {
      $.ajax({
        url: `/agents/manage/agents/${agentId}/delete/`,
        method: 'DELETE',
        success: function(response) {
          // Remove the agent card or refresh the page
          location.reload();
        },
        error: function(error) {
          console.error('Error deleting agent:', error);
        }
      });
    }
  }

  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("#agentCards .col-md-4").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });

    $('#roleFilter, #statusFilter').on('change', function() {
      var roleValue = $('#roleFilter').val().toLowerCase();
      var statusValue = $('#statusFilter').val().toLowerCase();
      $("#agentCards .col-md-4").filter(function() {
        var roleMatch = roleValue === '' || $(this).find('.text-capitalize').text().toLowerCase().indexOf(roleValue) > -1;
        var statusMatch = statusValue === '' || $(this).find('.badge').text().toLowerCase().indexOf(statusValue) > -1;
        $(this).toggle(roleMatch && statusMatch);
      });
    });

    // Avatar preview functionality
    $('#agentAvatar').change(function() {
      const selectedOption = $(this).find('option:selected');
      const imgSrc = selectedOption.data('img');
      $('#avatarPreview').attr('src', imgSrc);
    });

    // Trigger change event to show initial avatar
    $('#agentAvatar').trigger('change');
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/manage_agents.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Agents {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
              <h5 class="mb-0">Agents</h5>
              <p class="text-sm mb-0">
                  View and manage your AI agents.
              </p>
          </div>
          <div class="d-flex align-items-center">
              <!-- Removed btn-group to separate the icons -->
              <a href="{% url 'agents:manage_agents' %}" class="btn btn-sm  me-2" title="Table View">
                  <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_agents_card_view' %}" class="btn btn-sm  me-2" title="Card View">
                  <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_agent' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Agent</a>
          </div>
      </div>
        <div class="table-responsive">
          <table class="table table-flush" id="agents-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Avatar</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Role</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">LLM</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for agent in agents %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="{{ agent.name }}'s avatar" class="avatar avatar-sm rounded-circle me-2">
                </td>
                <td class="text-sm font-weight-normal">
                  {{ agent.name }}
                </td>
                <td class="text-sm font-weight-normal">{{ agent.role }}</td>
                <td class="text-sm font-weight-normal">{{ agent.llm }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_agent' agent.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit agent">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_agent' agent.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete agent">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="5" class="text-sm font-weight-normal">No agents found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>

{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/sweetalert.min.js' %}"></script>

  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#agents-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_crews_card_view.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Crews {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  {% if selected_client %}
    <div class="alert alert-info" role="alert">
      Selected Client: {{ selected_client.name }}
    </div>
  {% else %}
    <div class="alert alert-warning" role="alert">
      No client selected. Showing all crews.
    </div>
  {% endif %}
  
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="mb-0">Crews</h6>
              <p class="text-sm mb-0">
                View and manage your AI agent crews.
              </p>
            </div>
            <div class="d-flex align-items-center">
              <a href="{% url 'agents:manage_crews' %}" class="btn btn-sm me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_crews_card_view' %}" class="btn btn-sm me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_crew' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Crew</a>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="p-3">
            <div class="row g-3 mb-4">
              <div class="col-md-6">
                <input type="text" id="searchInput" class="form-control" placeholder="Search crews...">
              </div>
              <div class="col-md-6">
                <select id="processFilter" class="form-select">
                  <option value="">All Processes</option>
                  <option value="Sequential">Sequential</option>
                  <option value="Parallel">Parallel</option>
                  <option value="Hierarchical">Hierarchical</option>
                </select>
              </div>
            </div>
            <div class="row" id="crewCards">
              {% for crew in crews %}
              <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100">
                  <div class="card-header p-3 pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h5 class="mb-0"><a href="{% url 'agents:crew_detail' crew.id %}">{{ crew.name }}<i class="fas fa-play ms-1" aria-hidden="true"></i></a></h5>
                        <p class="text-sm mb-0">{{ crew.get_process_display }}</p>
                      </div>
                      <div class="avatar-group">
                        {% for agent in crew.agents.all|slice:":3" %}
                          <a href="javascript:;" class="avatar avatar-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ agent.name }}">
                            <img src="{% static 'assets/img/'|add:agent.avatar %}" alt="{{ agent.name }}">
                          </a>
                        {% endfor %}
                        {% if crew.agents.count > 3 %}
                          <a href="javascript:;" class="avatar avatar-sm rounded-circle" data-bs-toggle="tooltip" data-bs-placement="bottom" title="{{ crew.agents.count|add:'-3' }} more">
                            <span class="avatar-text bg-gradient-primary">+{{ crew.agents.count|add:'-3' }}</span>
                          </a>
                        {% endif %}
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-3">
                    <p class="text-sm mb-2"><strong>Agents:</strong> 
                      {% for agent in crew.agents.all %}
                        <span class="badge bg-gradient-info"><a href="{% url 'agents:edit_agent' agent.id %}?next={{ request.path|urlencode }}" class="text-white font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit agent">{{ agent.name }}</a></span>
                      {% empty %}
                        <span class="text-muted">No agents</span>
                      {% endfor %}
                    </p>
                    <p class="text-sm mb-2"><strong>Tasks:</strong> 
                      {% for task in crew.tasks.all %}
                        <span class="badge bg-gradient-dark"><a href="{% url 'agents:edit_task' task.id %}?next={{ request.path|urlencode }}" class="text-white" font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit task">{{ task.description|truncatechars:20 }}</a></span>
                      {% empty %}
                        <span class="text-muted">No tasks</span>
                      {% endfor %}
                    </p>
                  </div>
                  <div class="card-footer p-3">
                    <div class="d-flex justify-content-between">
                      <a href="{% url 'agents:edit_crew' crew.id %}?next={{ request.path|urlencode }}" class="btn btn-link text-dark mb-0 ps-0" data-toggle="tooltip" data-original-title="Edit crew">
                        <i class="fas fa-pencil-alt text-dark me-2" aria-hidden="true"></i>Edit
                      </a>

                      <a href="{% url 'agents:delete_crew' crew.id %}" class="btn btn-link text-danger mb-0 pe-0" data-toggle="tooltip" data-original-title="Delete crew">
                        <i class="far fa-trash-alt me-2"></i>Delete
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("#crewCards .col-lg-4").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });

    $('#processFilter').on('change', function() {
      var processValue = $(this).val().toLowerCase();
      $("#crewCards .col-lg-4").filter(function() {
        var processMatch = processValue === '' || $(this).find('.text-sm').text().toLowerCase().indexOf(processValue) > -1;
        $(this).toggle(processMatch);
      });
    });

    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl)
    });
  });
</script>
{% endblock extra_js %}

================
File: templates/agents/manage_crews.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Crews {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  {% if selected_client %}
    <div class="alert alert-info" role="alert">
      Selected Client: {{ selected_client.name }}
    </div>
  {% else %}
    <div class="alert alert-warning" role="alert">
      No client selected. Showing all crews.
    </div>
  {% endif %}

  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="mb-0">Crews</h6>
              <p class="text-sm mb-0">
                Manage your AI agent crews
              </p>
            </div>
            <div class="d-flex align-items-center">
              <a href="{% url 'agents:manage_crews' %}" class="btn btn-sm me-2" title="Table View">
                <i class="fas fa-table fs-5"></i>
              </a>
              <a href="{% url 'agents:manage_crews_card_view' %}" class="btn btn-sm me-2" title="Card View">
                <i class="fas fa-id-card fs-5"></i>
              </a>
              <a href="{% url 'agents:add_crew' %}?next={{ request.path|urlencode }}" class="btn btn-primary btn-sm">Add Crew</a>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Crew</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Process</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agents</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tasks</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for crew in crews %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div>
                        <img src="{% static 'assets/img/team-2.jpg' %}" class="avatar avatar-sm me-3" alt="user1">
                      </div>
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ crew.name }}</h6>
                        <p class="text-xs text-secondary mb-0">{{ crew.description|truncatechars:50 }}</p>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ crew.get_process_display }}</p>
                  </td>
                  <td class="align-middle text-center text-sm">
                    <span class="badge badge-sm bg-gradient-success">{{ crew.agents.count }}</span>
                  </td>
                  <td class="align-middle text-center">
                    <span class="text-secondary text-xs font-weight-bold">{{ crew.tasks.count }}</span>
                  </td>
                  <td class="align-middle">
                    <a href="{% url 'agents:edit_crew' crew.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit crew">
                      Edit
                    </a>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
{% endblock javascripts %}

================
File: templates/agents/manage_pipelines.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Pipelines {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Pipeline Dashboard</h6>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <div class="d-flex justify-content-between align-items-center mb-3 px-3">
              <div class="d-flex align-items-center">
                <span class="mr-2">Search:</span>
                <input type="text" id="searchInput" class="form-control form-control-sm" placeholder="Search pipelines...">
              </div>
              <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createPipelineModal">
                <i class="fas fa-plus"></i> Create Pipeline
              </button>
            </div>
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Pipeline</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Stages</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for pipeline in pipelines %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ pipeline.name }}</h6>
                        <p class="text-xs text-secondary mb-0">{{ pipeline.description }}</p>
                      </div>
                    </div>
                  </td>
                  <td>
                    <span class="badge badge-sm bg-gradient-{{ pipeline.status|lower }}">{{ pipeline.status }}</span>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ pipeline.stages.count }} stages</p>
                  </td>
                  <td class="align-middle">
                    <div class="dropdown">
                      <a href="#" class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown" id="navbarDropdownMenuLink2">
                        <i class="fa fa-ellipsis-v text-xs"></i>
                      </a>
                      <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink2">
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Running')">
                            <i class="fas fa-play text-success"></i> Start
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Paused')">
                            <i class="fas fa-pause text-warning"></i> Pause
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="changePipelineStatus({{ pipeline.id }}, 'Idle')">
                            <i class="fas fa-stop text-danger"></i> Stop
                          </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="editPipeline({{ pipeline.id }})">
                            <i class="fas fa-edit text-info"></i> Edit
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="#" onclick="deletePipeline({{ pipeline.id }})">
                            <i class="fas fa-trash text-danger"></i> Delete
                          </a>
                        </li>
                      </ul>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create/Edit Pipeline Modal -->
<div class="modal fade" id="pipelineModal" tabindex="-1" role="dialog" aria-labelledby="pipelineModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="pipelineModalLabel">Create New Pipeline</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="pipelineForm">
          <div class="form-group">
            <label for="pipelineName">Name</label>
            <input type="text" class="form-control" id="pipelineName" required>
          </div>
          <div class="form-group">
            <label for="pipelineDescription">Description</label>
            <textarea class="form-control" id="pipelineDescription" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="savePipeline()">Save Pipeline</button>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block javascripts %}
{{ block.super }}
<script>
  let currentPipelineId = null;

  function editPipeline(pipelineId) {
    currentPipelineId = pipelineId;
    // Fetch pipeline details and populate the form
    // This is a placeholder - you'll need to implement the actual data fetching
    $('#pipelineModalLabel').text('Edit Pipeline');
    $('#pipelineModal').modal('show');
  }

  function savePipeline() {
    const pipelineData = {
      name: $('#pipelineName').val(),
      description: $('#pipelineDescription').val(),
    };

    const url = currentPipelineId ? `/agents/pipelines/${currentPipelineId}/update/` : '/agents/pipelines/create/';
    const method = currentPipelineId ? 'PUT' : 'POST';

    $.ajax({
      url: url,
      method: method,
      data: JSON.stringify(pipelineData),
      contentType: 'application/json',
      success: function(response) {
        $('#pipelineModal').modal('hide');
        // Refresh the page or update the table
        location.reload();
      },
      error: function(error) {
        console.error('Error saving pipeline:', error);
      }
    });
  }

  function deletePipeline(pipelineId) {
    if (confirm('Are you sure you want to delete this pipeline?')) {
      $.ajax({
        url: `/agents/pipelines/${pipelineId}/delete/`,
        method: 'DELETE',
        success: function(response) {
          // Remove the pipeline from the table or refresh the page
          location.reload();
        },
        error: function(error) {
          console.error('Error deleting pipeline:', error);
        }
      });
    }
  }

  function changePipelineStatus(pipelineId, newStatus) {
    $.ajax({
      url: `/agents/pipelines/${pipelineId}/change-status/`,
      method: 'POST',
      data: JSON.stringify({ status: newStatus }),
      contentType: 'application/json',
      success: function(response) {
        // Update the status in the table or refresh the page
        location.reload();
      },
      error: function(error) {
        console.error('Error changing pipeline status:', error);
      }
    });
  }

  $(document).ready(function() {
    $('#searchInput').on('keyup', function() {
      var value = $(this).val().toLowerCase();
      $("table tbody tr").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      });
    });
  });
</script>
{% endblock javascripts %}

================
File: templates/agents/manage_tasks.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tasks {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tasks</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tasks.
            </p>
          </div>
          <div>
            <a href="{% url 'agents:add_task' %}" class="btn btn-primary btn-sm">Add New Task</a>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tasks-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Agent</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Async Execution</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Human Input</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Output Type</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for task in tasks %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}?next={{ request.path|urlencode }}">{{ task.description|truncatechars:50 }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ task.agent.name|default:"N/A" }}</td>
                <td class="text-sm font-weight-normal">{% if task.async_execution %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">{% if task.human_input %}Yes{% else %}No{% endif %}</td>
                <td class="text-sm font-weight-normal">
                  {% if task.output_json %}JSON
                  {% elif task.output_pydantic %}Pydantic
                  {% elif task.output_file %}File
                  {% else %}Default
                  {% endif %}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_task' task.id %}?next={{ request.path|urlencode }}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit task">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_task' task.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete task">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="6" class="text-sm font-weight-normal">No tasks found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tasks-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/manage_tools.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Manage Tools {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Tools</h5>
            <p class="text-sm mb-0">
              View and manage your AI agent tools.
            </p>
          </div>
          <a href="{% url 'agents:add_tool' %}" class="btn btn-primary btn-sm">Add New Tool</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="tools-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Description</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tool Class</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for tool in tools %}
              <tr>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}">{{ tool.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ tool.description|truncatechars:50 }}</td>
                <td class="text-sm font-weight-normal">{{ tool.tool_class }}</td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'agents:edit_tool' tool.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit tool">
                    Edit
                  </a>
                  |
                  <a href="{% url 'agents:delete_tool' tool.id %}" class="text-danger font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Delete tool">
                    Delete
                  </a>
                </td>
              </tr>
              {% empty %}
              <tr>
                <td colspan="4" class="text-sm font-weight-normal">No tools found.</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#tools-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 10
    });
  </script>
{% endblock extra_js %}

================
File: templates/agents/task_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if task %}Edit Task{% else %}Add Task{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6 class="mb-0">{% if task %}Edit Task{% else %}Add Task{% endif %}</h6>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.description.id_for_label }}" class="form-control-label">Description</label>
                                    {{ form.description }}
                                    {% if form.description.errors %}
                                        <div class="text-danger">
                                            {{ form.description.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.agent.id_for_label }}" class="form-control-label">Agent</label>
                                    {{ form.agent }}
                                    {% if form.agent.errors %}
                                        <div class="text-danger">
                                            {{ form.agent.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.expected_output.id_for_label }}" class="form-control-label">Expected Output</label>
                                    {{ form.expected_output }}
                                    {% if form.expected_output.errors %}
                                        <div class="text-danger">
                                            {{ form.expected_output.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.tools.id_for_label }}" class="form-control-label">Tools</label>
                                    {{ form.tools }}
                                    {% if form.tools.errors %}
                                        <div class="text-danger">
                                            {{ form.tools.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="{{ form.context.id_for_label }}" class="form-control-label">Context</label>
                                    {{ form.context }}
                                    {% if form.context.errors %}
                                        <div class="text-danger">
                                            {{ form.context.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.config.id_for_label }}" class="form-control-label">Config (JSON)</label>
                                    {{ form.config }}
                                    {% if form.config.errors %}
                                        <div class="text-danger">
                                            {{ form.config.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="{{ form.converter_cls.id_for_label }}" class="form-control-label">Converter Class</label>
                                    {{ form.converter_cls }}
                                    {% if form.converter_cls.errors %}
                                        <div class="text-danger">
                                            {{ form.converter_cls.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_json.id_for_label }}" class="form-control-label">Output JSON</label>
                                    {{ form.output_json }}
                                    {% if form.output_json.errors %}
                                        <div class="text-danger">
                                            {{ form.output_json.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_pydantic.id_for_label }}" class="form-control-label">Output Pydantic</label>
                                    {{ form.output_pydantic }}
                                    {% if form.output_pydantic.errors %}
                                        <div class="text-danger">
                                            {{ form.output_pydantic.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="{{ form.output_file.id_for_label }}" class="form-control-label">Output File Path</label>
                                    {{ form.output_file }}
                                    {% if form.output_file.errors %}
                                        <div class="text-danger">
                                            {{ form.output_file.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                    <small class="form-text text-muted">Enter the relative path in the media directory (e.g., 'outputs/task_result.txt')</small>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    {{ form.async_execution }}
                                    <label class="form-check-label" for="{{ form.async_execution.id_for_label }}">Async Execution</label>
                                    {% if form.async_execution.errors %}
                                        <div class="text-danger">
                                            {{ form.async_execution.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    {{ form.human_input }}
                                    <label class="form-check-label" for="{{ form.human_input.id_for_label }}">Human Input</label>
                                    {% if form.human_input.errors %}
                                        <div class="text-danger">
                                            {{ form.human_input.errors|join:", " }}
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12 text-end">
                                <a href="{% url 'agents:manage_tasks' %}" class="btn btn-secondary me-2">Cancel</a>
                                <button type="submit" class="btn bg-gradient-primary">Save Task</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Choices.js for select fields
        var selectFields = document.querySelectorAll('select');
        selectFields.forEach(function(select) {
            new Choices(select, {
                removeItemButton: true,
                placeholder: true,
                placeholderValue: 'Select an option'
            });
        });

        // Add classes to form elements
        var formElements = document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]), select, textarea');
        formElements.forEach(function(element) {
            element.classList.add('form-control');
        });

        var selectElements = document.querySelectorAll('select');
        selectElements.forEach(function(element) {
            element.classList.add('form-select');
        });

        var checkboxInputs = document.querySelectorAll('input[type="checkbox"], input[type="radio"]');
        checkboxInputs.forEach(function(element) {
            element.classList.add('form-check-input');
        });

        // Form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(function(field) {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });

        // JSON validation for config field
        var configField = document.getElementById('{{ form.config.id_for_label }}');
        if (configField) {
            configField.addEventListener('blur', function() {
                try {
                    JSON.parse(this.value);
                    this.classList.remove('is-invalid');
                } catch (error) {
                    this.classList.add('is-invalid');
                    alert('Invalid JSON format in Config field');
                }
            });
        }
    });
</script>
{% endblock extra_js %}

================
File: templates/agents/tool_form.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} {% if tool %}Edit Tool{% else %}Add Tool{% endif %} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-12 col-xl-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">{% if tool %}Edit Tool{% else %}Add Tool{% endif %}</h5>
                </div>
                <div class="card-body">
                    <form method="post" id="toolForm">
                        {% csrf_token %}
                        {% if form.errors %}
                            <div class="alert alert-danger">
                                <ul>
                                    {% for field in form %}
                                        {% for error in field.errors %}
                                            <li>{{ field.label }}: {{ error }}</li>
                                        {% endfor %}
                                    {% endfor %}
                                    {% for error in form.non_field_errors %}
                                        <li>{{ error }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                        <div class="mb-4">
                            <label for="{{ form.tool_class.id_for_label }}" class="form-label">Tool Class</label><br>
                            {{ form.tool_class }}
                        </div>
                        <div class="mb-4">
                            <label for="{{ form.tool_subclass.id_for_label }}" class="form-label">Tool Subclass</label><br>
                            {{ form.tool_subclass }}
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label><br>
                            <textarea id="tool_description" name="description" class="form-control" readonly rows="2"></textarea>
                        </div>
                        <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
                        <div class="d-flex justify-content-end">
                            <a href="{% url 'agents:manage_tools' %}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" id="submitButton" class="btn btn-primary" disabled>Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
            {% if tool %}
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Test Tool</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">Tool Inputs</h6>
                                        </div>
                                        <div class="card-body">
                                            <form id="toolTestForm">
                                                <!-- Tool input fields will be dynamically added here -->
                                                <div id="toolInputs"></div>
                                                <button type="button" id="testToolBtn" class="btn btn-primary mt-3">Test</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Tool Output</h6>
                                            <span id="tokenCount">Token Count: 0</span>
                                            <button id="copyOutputBtn" class="btn btn-sm btn-outline-primary">Copy to clipboard</button>
                                        </div>
                                        <div class="card-body">
                                            <div id="toolOutput" class="border p-3" style="height: 300px; overflow-y: auto;"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Add this new container for output tables -->
            <div id="outputTableContainer" class="col-12 mt-4" style="display: none;">
                <!-- Tables will be dynamically inserted here -->
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock content %}

{% block extrastyle %}
{{ block.super }}
<style>
    .card {
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        border: 0;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem 1.5rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .form-label {
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
        display: block;
    }
    .form-control, .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #d2d6da;
        border-radius: 0.375rem;
        margin-top: 0.25rem;
    }
    .form-control:focus, .form-select:focus {
        border-color: #5e72e4;
        box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
    }
    textarea.form-control {
        min-height: 150px;
    }
    .btn {
        font-size: 0.875rem;
        font-weight: 600;
        padding: 0.625rem 1.25rem;
        border-radius: 0.375rem;
    }
    .btn-primary {
        background-color: #5e72e4;
        border-color: #5e72e4;
    }
    .btn-secondary {
        background-color: #8392ab;
        border-color: #8392ab;
    }
    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0,0,0,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }
    @keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    @-webkit-keyframes spin {
        to { -webkit-transform: rotate(360deg); }
    }
    #toolOutput {
        white-space: pre-wrap;
        word-wrap: break-word;
        font-family: monospace;
        font-size: 0.9rem;
    }
</style>
{% endblock extrastyle %}

{% block extra_js %}
{{ block.super }}
<script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var toolClassSelect = document.getElementById('{{ form.tool_class.id_for_label }}');
        var toolSubclassSelect = document.getElementById('{{ form.tool_subclass.id_for_label }}');
        var toolDescriptionInput = document.getElementById('tool_description');
        var submitButton = document.getElementById('submitButton');
        var errorMessageDiv = document.getElementById('errorMessage');

        function setLoading(isLoading) {
            if (isLoading) {
                toolSubclassSelect.innerHTML = '<option value="">Loading...</option>';
                toolDescriptionInput.value = 'Loading...';
                submitButton.innerHTML = '<span class="loading"></span> Loading';
            } else {
                submitButton.innerHTML = 'Save';
            }
            submitButton.disabled = isLoading;
        }

        function showError(message) {
            errorMessageDiv.textContent = message;
            errorMessageDiv.style.display = 'block';
        }

        function hideError() {
            errorMessageDiv.style.display = 'none';
        }

        toolClassSelect.addEventListener('change', function() {
            var selectedTool = this.value;
            if (selectedTool) {
                setLoading(true);
                hideError();
                fetch(`/agents/get_tool_info/?tool_class=${selectedTool}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            throw new Error(data.error);
                        }
                        toolSubclassSelect.innerHTML = '';
                        data.classes.forEach(cls => {
                            var option = document.createElement('option');
                            option.value = cls.name;
                            option.textContent = cls.name;
                            option.setAttribute('data-description', cls.description);
                            toolSubclassSelect.appendChild(option);
                        });
                        toolSubclassSelect.dispatchEvent(new Event('change'));
                        submitButton.disabled = false;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError(`Failed to load tool information: ${error.message}`);
                        toolSubclassSelect.innerHTML = '';
                        toolDescriptionInput.value = '';
                        submitButton.disabled = true;
                    })
                    .finally(() => {
                        setLoading(false);
                    });
            } else {
                toolSubclassSelect.innerHTML = '';
                toolDescriptionInput.value = '';
                submitButton.disabled = true;
                hideError();
            }
        });

        toolSubclassSelect.addEventListener('change', function() {
            var selectedOption = this.options[this.selectedIndex];
            if (selectedOption) {
                toolDescriptionInput.value = selectedOption.getAttribute('data-description') || '';
            } else {
                toolDescriptionInput.value = '';
            }
        });

        // Trigger the change event on page load if a tool is already selected (for edit mode)
        if (toolClassSelect.value) {
            toolClassSelect.dispatchEvent(new Event('change'));
        }

        {% if tool %}
        // Tool testing functionality
        const toolInputs = document.getElementById('toolInputs');
        const testToolBtn = document.getElementById('testToolBtn');
        const toolOutput = document.getElementById('toolOutput');
        const copyOutputBtn = document.getElementById('copyOutputBtn');
        const tokenCountSpan = document.getElementById('tokenCount');
        const outputTableContainer = document.getElementById('outputTableContainer');
        let outputTables = [];

        // Function to fetch tool schema and create input fields
        function fetchToolSchema() {
            fetch(`/agents/get_tool_schema/{{ tool.id }}/`)
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(schema => {
                    toolInputs.innerHTML = '';
                    if (schema.error) {
                        throw new Error(schema.error);
                    } else if (schema.properties) {
                        for (const [key, value] of Object.entries(schema.properties)) {
                            const inputGroup = document.createElement('div');
                            inputGroup.className = 'mb-3';
                            
                            const label = document.createElement('label');
                            label.className = 'form-label';
                            label.textContent = value.title || key;
                            
                            const input = document.createElement('input');
                            input.className = 'form-control';
                            input.name = key;
                            input.type = value.type === 'number' ? 'number' : 'text';
                            if (value.description) {
                                input.placeholder = value.description;
                            }
                            
                            inputGroup.appendChild(label);
                            inputGroup.appendChild(input);
                            toolInputs.appendChild(inputGroup);
                        }
                    } else {
                        throw new Error('Invalid schema structure');
                    }
                })
                .catch(error => {
                    console.error('Error fetching tool schema:', error);
                    toolInputs.innerHTML = `<p class="text-danger">Error loading tool inputs: ${error.message}</p>`;
                });
        }

        // Fetch tool schema on page load
        fetchToolSchema();

        function isJSON(str) {
            try {
                JSON.parse(str);
                return true;
            } catch (e) {
                return false;
            }
        }

        function parseJSON(jsonStr) {
            return JSON.parse(jsonStr);
        }

        function createTable(data, tableName) {
            const tableContainer = document.createElement('div');
            tableContainer.className = 'col-12 mt-4';
            tableContainer.innerHTML = `
                <div class="card mb-4">
                    <div class="card-header pb-0">
                        <h6>${tableName}</h6>
                    </div>
                    <div class="card-body px-0 pt-0 pb-2">
                        <div class="table-responsive p-0">
                            <table class="table align-items-center mb-0" id="${tableName.replace(/\s+/g, '-').toLowerCase()}">
                                <thead>
                                    <tr>
                                        ${Object.keys(data[0]).map(key => `<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">${key}</th>`).join('')}
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.map(row => `
                                        <tr>
                                            ${Object.values(row).map(value => `<td class="text-sm font-weight-normal">${value}</td>`).join('')}
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
            return tableContainer;
        }

        function displayMultipleTables(data) {
            console.log('Displaying multiple tables. Data:', data);
            if (!outputTableContainer) {
                console.error('Output table container not found');
                return;
            }
            outputTableContainer.innerHTML = '';

            for (const [key, value] of Object.entries(data)) {
                if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'object') {
                    const table = createTable(value, key);
                    outputTableContainer.appendChild(table);

                    outputTables.push(new simpleDatatables.DataTable(`#${key.replace(/\s+/g, '-').toLowerCase()}`, {
                        searchable: true,
                        fixedHeight: false,
                        perPage: 10
                    }));
                } else {
                    console.warn(`Skipping table for key "${key}" due to invalid data structure`);
                }
            }

            outputTableContainer.style.display = 'block';
        }

        function isCSV(str) {
            const lines = str.trim().split('\n');
            return lines.length > 1 && lines[0].includes(',') && lines[1].includes(',');
        }

        function parseCSV(csv) {
            const lines = csv.trim().split('\n');
            return lines.map(line => line.split(',').map(cell => cell.trim()));
        }

        function displayTable(data, tableName = 'CSV Data') {
            if (!outputTableContainer) {
                console.error('Output table container not found');
                return;
            }
            outputTableContainer.innerHTML = '';

            const tableData = data.slice(1).map(row => {
                const obj = {};
                data[0].forEach((header, index) => {
                    obj[header] = row[index];
                });
                return obj;
            });

            const table = createTable(tableData, tableName);
            outputTableContainer.appendChild(table);

            outputTables.push(new simpleDatatables.DataTable(`#${tableName.replace(/\s+/g, '-').toLowerCase()}`, {
                searchable: true,
                fixedHeight: false,
                perPage: 10
            }));

            outputTableContainer.style.display = 'block';
        }

        testToolBtn.addEventListener('click', function() {
            console.log('Test button clicked');
            const formData = new FormData(document.getElementById('toolTestForm'));
            toolOutput.textContent = 'Testing tool...';
            tokenCountSpan.textContent = 'Token Count: ...';

            fetch(`/agents/test_tool/{{ tool.id }}/`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': '{{ csrf_token }}'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Received data:', data);
                if (data.error) {
                    toolOutput.textContent = 'Error: ' + data.error;
                    tokenCountSpan.textContent = 'Token Count: 0';
                    if (outputTableContainer) outputTableContainer.style.display = 'none';
                } else {
                    toolOutput.textContent = data.result;
                    tokenCountSpan.textContent = `Token Count: ${data.token_count || 0}`;
                    
                    // Destroy existing DataTables
                    outputTables.forEach(table => table.destroy());
                    outputTables = [];

                    if (isCSV(data.result)) {
                        console.log('Data is CSV');
                        const tableData = parseCSV(data.result);
                        displayTable(tableData);
                    } else {
                        try {
                            // Parse the string representation of the Python dictionary
                            const parsedResult = eval('(' + data.result + ')');
                            console.log('Parsed result:', parsedResult);
                            
                            const finalResult = {};
                            for (const [key, value] of Object.entries(parsedResult)) {
                                try {
                                    finalResult[key] = JSON.parse(value);
                                } catch (e) {
                                    finalResult[key] = value;
                                }
                            }
                            console.log('Final parsed result:', finalResult);
                            
                            if (typeof finalResult === 'object' && finalResult !== null) {
                                console.log('Data is an object');
                                displayMultipleTables(finalResult);
                            } else {
                                console.log('Parsed data is not an object');
                                if (outputTableContainer) outputTableContainer.style.display = 'none';
                            }
                        } catch (e) {
                            console.error('Failed to parse result:', e);
                            if (outputTableContainer) outputTableContainer.style.display = 'none';
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                toolOutput.textContent = 'Error: ' + error.message;
                tokenCountSpan.textContent = 'Token Count: 0';
                if (outputTableContainer) outputTableContainer.style.display = 'none';
            });
        });

        // Copy output to clipboard
        copyOutputBtn.addEventListener('click', function() {
            navigator.clipboard.writeText(toolOutput.textContent)
                .then(() => {
                    alert('Output copied to clipboard!');
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                });
        });

        {% endif %}
    });
</script>
{% endblock extra_js %}

================
File: templates/home/llm-dashboard.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}

<div class="container-fluid py-4">
  <!-- Existing stats cards row -->
  <div class="row">
    <!-- ... existing cards ... -->
  </div>

  <div class="row mt-4">
    <!-- Spend chart -->
    <div class="col-lg-7">
      <div class="card z-index-2">
        <div class="card-header pb-0">
          <h6>Spend Overview</h6>
          <p class="text-sm">
            <i class="fa fa-arrow-up text-success"></i>
            <span class="font-weight-bold">Daily spend</span> over the last 30 days
          </p>
        </div>
        <div class="card-body p-3">
          <div class="chart">
            <canvas id="chart-line" class="chart-canvas" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Top Models -->
    <div class="col-lg-5">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Top Models by Spend (30 Days)</h6>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Model</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Spend</th>
                </tr>
              </thead>
              <tbody>
                {% for model in top_models %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ model.model }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-sm font-weight-bold mb-0">${{ model.total_spend|floatformat:2 }}</p>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <!-- Top API Keys -->
    <div class="col-lg-6">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Top API Keys by Spend (30 Days)</h6>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Key Name</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Alias</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Spend</th>
                </tr>
              </thead>
              <tbody>
                {% for key in top_keys %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ key.key_name }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-sm font-weight-bold mb-0">{{ key.key_alias }}</p>
                  </td>
                  <td>
                    <p class="text-sm font-weight-bold mb-0">${{ key.total_spend|floatformat:2 }}</p>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Top End Users -->
    <div class="col-lg-6">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Top Users by Spend (30 Days)</h6>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">User</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Events</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Spend</th>
                </tr>
              </thead>
              <tbody>
                {% for user in top_users %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ user.end_user }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-sm font-weight-bold mb-0">{{ user.total_events }}</p>
                  </td>
                  <td>
                    <p class="text-sm font-weight-bold mb-0">${{ user.total_spend|floatformat:2 }}</p>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
<script>
  var ctx2 = document.getElementById("chart-line").getContext("2d");
  
  var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);
  gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
  gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
  gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)');

  new Chart(ctx2, {
    type: "line",
    data: {
      labels: [{% for item in daily_spend %}"{{ item.day|date:'M d' }}"{% if not forloop.last %}, {% endif %}{% endfor %}],
      datasets: [{
        label: "Daily Spend ($)",
        tension: 0.4,
        borderWidth: 0,
        pointRadius: 0,
        borderColor: "#cb0c9f",
        borderWidth: 3,
        backgroundColor: gradientStroke1,
        fill: true,
        data: [{% for item in daily_spend %}{{ item.total_spend|floatformat:2 }}{% if not forloop.last %}, {% endif %}{% endfor %}],
        maxBarThickness: 6
      }],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false,
        }
      },
      interaction: {
        intersect: false,
        mode: 'index',
      },
      scales: {
        y: {
          grid: {
            drawBorder: false,
            display: true,
            drawOnChartArea: true,
            drawTicks: false,
            borderDash: [5, 5]
          },
          ticks: {
            display: true,
            padding: 10,
            color: '#b2b9bf',
            font: {
              size: 11,
              family: "Open Sans",
              style: 'normal',
              lineHeight: 2
            },
          }
        },
        x: {
          grid: {
            drawBorder: false,
            display: false,
            drawOnChartArea: false,
            drawTicks: false,
            borderDash: [5, 5]
          },
          ticks: {
            display: true,
            color: '#b2b9bf',
            padding: 20,
            font: {
              size: 11,
              family: "Open Sans",
              style: 'normal',
              lineHeight: 2
            },
          }
        },
      },
    },
  });
</script>
{% endblock extra_js %}

================
File: templates/includes/fixed-plugin.html
================
<div class="fixed-plugin">
  <a class="fixed-plugin-button text-dark position-fixed px-3 py-2">
    <i class="fa fa-cog py-2"> </i>
  </a>
  <div class="card shadow-lg blur">
    <div class="card-header pb-0 pt-3  bg-transparent ">
      <div class="float-start">
        <h5 class="mt-3 mb-0">Neuralami Configurator</h5>
        <p>See our dashboard options.</p>
      </div>
      <div class="float-end mt-4">
        <button class="btn btn-link text-dark p-0 fixed-plugin-close-button">
          <i class="fa fa-close"></i>
        </button>
      </div>
      <!-- End Toggle Button -->
    </div>
    <hr class="horizontal dark my-1">
    <div class="card-body pt-sm-3 pt-0">
      <!-- Sidebar Backgrounds -->
      <div>
        <h6 class="mb-0">Sidebar Colors</h6>
      </div>
      <a href="javascript:void(0)" class="switch-trigger background-color">
        <div class="badge-colors my-2 text-start">
          <span class="badge filter bg-gradient-primary active" data-color="primary" onclick="sidebarColor(this)"></span>
          <span class="badge filter bg-gradient-dark" data-color="dark" onclick="sidebarColor(this)"></span>
          <span class="badge filter bg-gradient-info" data-color="info" onclick="sidebarColor(this)"></span>
          <span class="badge filter bg-gradient-success" data-color="success" onclick="sidebarColor(this)"></span>
          <span class="badge filter bg-gradient-warning" data-color="warning" onclick="sidebarColor(this)"></span>
          <span class="badge filter bg-gradient-danger" data-color="danger" onclick="sidebarColor(this)"></span>
        </div>
      </a>
      <!-- Sidenav Type -->
      <div class="mt-3">
        <h6 class="mb-0">Sidenav Type</h6>
        <p class="text-sm">Choose between 2 different sidenav types.</p>
      </div>
      <div class="d-flex">
        <button class="btn bg-gradient-primary w-100 px-3 mb-2 active" data-class="bg-transparent" onclick="sidebarType(this)">Transparent</button>
        <button class="btn bg-gradient-primary w-100 px-3 mb-2 ms-2" data-class="bg-white" onclick="sidebarType(this)">White</button>
      </div>
      <p class="text-sm d-xl-none d-block mt-2">You can change the sidenav type just on desktop view.</p>
      <!-- Navbar Fixed -->
      <div class="mt-3">
        <h6 class="mb-0">Navbar Fixed</h6>
      </div>
      <div class="form-check form-switch ps-0">
        <input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarFixed" onclick="navbarFixed(this)">
      </div>
      <hr class="horizontal dark mb-1 d-xl-block d-none">
      <div class="mt-2 d-xl-block d-none">
        <h6 class="mb-0">Sidenav Mini</h6>
      </div>
      <div class="form-check form-switch ps-0 d-xl-block d-none">
        <input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarMinimize" onclick="navbarMinimize(this)">
      </div>
      <hr class="horizontal dark mb-1 d-xl-block d-none">
      <div class="mt-2 d-xl-block d-none">
        <h6 class="mb-0">Light/Dark</h6>
      </div>
      <div class="form-check form-switch ps-0 d-xl-block d-none">
        <input class="form-check-input mt-1 ms-auto" type="checkbox" id="dark-version" onclick="darkMode(this)">
      </div>
      <hr class="horizontal dark my-sm-4">
      {% comment %} <a class="btn bg-gradient-info w-100" href="https://appseed.us/product/soft-ui-dashboard-pro/django/">Download</a>
      <a class="btn bg-gradient-dark w-100" href="https://appseed.us/product/soft-ui-dashboard/django/">Free demo</a>
      <a class="btn btn-outline-dark w-100" href="https://github.com/app-generator/django-soft-ui-dashboard-pro">View documentation</a>
      <div class="w-100 text-center">
        <a class="github-button" href="https://github.com/app-generator/django-soft-ui-dashboard-pro" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star creativetimofficial/soft-ui-dashboard on GitHub">Star</a>
        <h6 class="mt-3">Thank you for sharing!</h6>
        <a href="https://twitter.com/intent/tweet?text=Check%20Soft%20UI%20Dashboard%20PRO%20made%20by%20%40CreativeTim%20%23webdesign%20%23dashboard%20%23bootstrap5&amp;url=https%3A%2F%2Fwww.creative-tim.com%2Fproduct%2Fsoft-ui-dashboard-pro" class="btn btn-dark mb-0 me-2" target="_blank">
          <i class="fab fa-twitter me-1" aria-hidden="true"></i> Tweet
        </a>
        <a href="https://www.facebook.com/sharer/sharer.php?u=https://appseed.us/product/soft-ui-dashboard-pro/django/" class="btn btn-dark mb-0 me-2" target="_blank">
          <i class="fab fa-facebook-square me-1" aria-hidden="true"></i> Share
        </a>
      </div> {% endcomment %}
    </div>
  </div>
</div>

================
File: templates/includes/footer-fullscreen.html
================
<footer class="footer py-5">
  <div class="container">
    <div class="row">
      <div class="col-lg-8 mb-4 mx-auto text-center">
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          Company
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          About Us
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          Team
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          Products
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          Blog
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-5 me-3 mb-sm-0 mb-2">
          Pricing
        </a>
      </div>
      <div class="col-lg-8 mx-auto text-center mb-4 mt-2">
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-4 me-4">
          <span class="text-lg fab fa-dribbble"></span>
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-4 me-4">
          <span class="text-lg fab fa-twitter"></span>
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-4 me-4">
          <span class="text-lg fab fa-instagram"></span>
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-4 me-4">
          <span class="text-lg fab fa-pinterest"></span>
        </a>
        <a href="javascript:;" target="_blank" class="text-secondary me-xl-4 me-4">
          <span class="text-lg fab fa-github"></span>
        </a>
      </div>
    </div>
    <div class="row">
      <div class="col-8 mx-auto text-center mt-1">
        <p class="mb-0 text-secondary">
          &copy; <a href="https://www.neuralami.com" class="text-muted" target="_blank">Neuralami</a>
        </p>
      </div>
    </div>
  </div>
</footer>

================
File: templates/includes/footer-rtl.html
================
<footer class="footer pt-3  ">
  <div class="container-fluid">
    <div class="row align-items-center justify-content-lg-between">
      <div class="col-lg-6 mb-lg-0 mb-4">
        <div class="copyright text-center text-sm text-muted text-lg-end">
          &copy; <a href="https://www.creative-tim.com/?AFFILIATE=128200" class="font-weight-bold" target="_blank">Creative Tim</a> - coded by AppSeed.
        </div>
      </div>
      <div class="col-lg-6">
        <ul class="nav nav-footer justify-content-center justify-content-lg-end">
          <li class="nav-item">
            <a href="https://appseed.us/product/soft-ui-dashboard-pro/django/" 
               class="nav-link text-muted" target="_blank">Download</a>
          </li>
          <li class="nav-item">
            <a href="https://appseed.us/product/soft-ui-dashboard/django/" 
               class="nav-link text-muted" target="_blank">Free Version</a>
          </li>
          <li class="nav-item">
            <a href="https://appseed.us/support/" 
               class="nav-link text-muted" target="_blank">Support</a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</footer>

================
File: templates/includes/footer.html
================
<footer class="footer pt-3  ">
  <div class="container-fluid">
    <div class="row align-items-center justify-content-lg-between">
      <div class="col-lg-6 mb-lg-0 mb-4">
        <div class="copyright text-center text-sm text-muted text-lg-start">
          &copy; <a href="https://www.neuralami.ai" class="font-weight-bold" target="_blank">Neuralami</a>
        </div>
      </div>

    </div>
  </div>
</footer>

================
File: templates/includes/head.html
================
{% load static %}

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel="apple-touch-icon" sizes="76x76" href="{% static 'assets/img/apple-icon.png' %}">
<link rel="icon" type="image/png" href="{% static 'assets/neuralami/logos/logopencildrawing.png' %}">
<title>
  Neuralami Control Center
</title>
<!--     Fonts and icons     -->
<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
<!-- Nucleo Icons -->
<link href="{% static 'assets/css/nucleo-icons.css' %}" rel="stylesheet" />
<link href="{% static 'assets/css/nucleo-svg.css' %}" rel="stylesheet" />
<!-- Font Awesome Icons -->
<script src="{% static "assets/js/plugins/fontawesome.min.js" %}"></script>
<!-- CSS Files -->
<link id="pagestyle" href="{% static 'assets/css/soft-ui-dashboard.css' %}" rel="stylesheet" />

================
File: templates/includes/items-table.html
================
{% load get_attribute %}

<div class="dt-responsive table-responsive">
    <table class="table">
        <thead>
          <tr>
            {% for field in db_field_names %}
                <th id="th_{{ field }}_export" scope="col">{{ field }}</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
            {% for item in items %}
            <tr>
                {% for field_name in db_field_names %}
                    <td class="td_{{ field_name }}">{{ item|getattribute:field_name }}</td>
                {% endfor %}
            </tr>
             {% endfor %}
        </tbody>
    </table>
</div>

================
File: templates/includes/menu-list-general.html
================
{% load i18n static admin_soft %}

<ul class="navbar-nav">

  {% if request.user.is_authenticated and not request.user.is_superuser %}

  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'dashboard' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Tools</span>
    </a>
    <div class="collapse {% if 'dashboard' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'default' in segment %}active{% endif %}">
          <a class="nav-link {% if 'default' in segment %}active{% endif %}" href="{% url 'summarize_view' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Summarize </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  {% endif %}
</ul>

================
File: templates/includes/menu-list.html
================
{% load i18n static admin_soft %}

<ul class="navbar-nav">

  {% if request.user.is_superuser %}
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'dashboard' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Dashboards</span>
    </a>
    <div class="collapse {% if 'dashboard' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'default' in segment %}active{% endif %}">
          <a class="nav-link {% if 'default' in segment %}active{% endif %}" href="{% url 'admin:index' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Default </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  {% endif %}

  {% if not request.user.is_superuser and not request.user.is_authenticated %}
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'apps' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Apps</span>
    </a>
    <div class="collapse {% if 'apps' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'tables' in segment %}active{% endif %}">
          <a class="nav-link {% if 'tables' in segment %}active{% endif %}" href="{% url 'data_tables' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Data Tables </span>
          </a>
        </li>        
        <li class="nav-item {% if 'charts' in segment %}active{% endif %}">
          <a class="nav-link {% if 'charts' in segment %}active{% endif %}" href="{% url 'charts' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> Charts </span>
          </a>
        </li>
        <li class="nav-item {% if 'api' in segment %}active{% endif %}">
          <a class="nav-link {% if 'api' in segment %}active{% endif %}" href="/api/sales/" target="_blank">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> API </span>
          </a>
        </li>
        <li class="nav-item {% if 'file_manager' in segment %}active{% endif %}">
          <a class="nav-link {% if 'file_manager' in segment %}active{% endif %}" href="{% url 'file_manager' %}">
            <span class="sidenav-mini-icon"> F </span>
            <span class="sidenav-normal"> File Manager </span>
          </a>
        </li>
        <li class="nav-item {% if 'profile' in segment %}active{% endif %}">
          <a class="nav-link {% if 'profile' in segment %}active{% endif %}" href="{% url 'profile' %}">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Profile </span>
          </a>
        </li>
        <li class="nav-item {% if 'tasks' in segment %}active{% endif %}">
          <a class="nav-link {% if 'tasks' in segment %}active{% endif %}" href="{% url 'tasks' %}">
            <span class="sidenav-mini-icon"> T </span>
            <span class="sidenav-normal"> Tasks </span>
          </a>
        </li>        
      </ul>
    </div>
  </li>  
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'dashboard' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Dashboards</span>
    </a>
    <div class="collapse {% if 'dashboard' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'default' in segment %}active{% endif %}">
          <a class="nav-link {% if 'default' in segment %}active{% endif %}" href="{% url 'index' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Default </span>
          </a>
        </li>
        <li class="nav-item {% if 'automotive' in segment %}active{% endif %}">
          <a class="nav-link {% if 'automotive' in segment %}active{% endif %}" href="{% url 'automotive' %}">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> Automotive </span>
          </a>
        </li>
        <li class="nav-item {% if 'smart_home' in segment %}active{% endif %}">
          <a class="nav-link {% if 'smart_home' in segment %}active{% endif %}" href="{% url 'smart_home' %}">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Smart Home </span>
          </a>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#vrExamples">
            <span class="sidenav-mini-icon"> V </span>
            <span class="sidenav-normal"> Virtual Reality <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'vr' in sub_parent %}show{% endif %}" id="vrExamples">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'vr_default' in segment %}active{% endif %}" href="{% url 'vr_default' %}">
                  <span class="sidenav-mini-icon text-xs"> V </span>
                  <span class="sidenav-normal"> VR Default </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'vr_info' in segment %}active{% endif %}" href="{% url 'vr_info' %}">
                  <span class="sidenav-mini-icon text-xs"> V </span>
                  <span class="sidenav-normal"> VR Info </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item {% if 'crm' in segment %}active{% endif %}">
          <a class="nav-link {% if 'crm' in segment %}active{% endif %}" href="{% url 'crm' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> CRM </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#authExamples" class="nav-link " aria-controls="authExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>document</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(154.000000, 300.000000)">
                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Authentication</span>
    </a>
    <div class="collapse " id="authExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signinExample">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Sign In <b class="caret"></b></span>
          </a>
          <div class="collapse " id="signinExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_login' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_login' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_login' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signupExample">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Sign Up <b class="caret"></b></span>
          </a>
          <div class="collapse " id="signupExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_register' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_register' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_register' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
      </ul>
    </div>
  </li>
  {% endif %} 

  {% admin_get_menu as app_list %}
  {% if app_list %}
      {% for app in app_list %}
          {% if app.has_perms and not app.pinned %}
            <li class="nav-item">
              <a data-bs-toggle="collapse" href="#dashboards{{app.app_label}}" class="nav-link {% if app_label != app.label and app.url not in request.path|urlencode  %} collapsed {% endif %} " aria-controls="dashboards{{app.app_label}}" role="button" aria-expanded="false">
                <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
                  <i class=" {% if app.icon %} {{ app.icon }} {% else %} ni ni-app {% endif %} text-dark text-sm opacity-10"></i>
                </div>
                <span class="nav-link-text ms-1">{{ app.label|slice:15 }}{% if app.label|length > 15 %}..{% endif %}</span>
              </a>
              {% if app.models %}
                <div 
                  class="collapse {% if 'tables-bootstrap-' in segment or app_label == app.label or app.url in request.path|urlencode %} show {% endif %}" 
                  role="list" 
                  id="dashboards{{app.app_label}}"
                  aria-expanded="{% if app_label == app.label or app.url in request.path|urlencode %}true{% else %}false{% endif %}">
                  <ul class="nav ms-4 ps-3">
                    {% for model in app.models %}
                      {% if model.url %}
                        <li class="nav-item {% if 'bootstrap-tables' in segment or model.url in request.path|urlencode %} active {% endif %}">
                          <a class="nav-link {% if 'bootstrap-tables' in segment or model.url in request.path|urlencode %} active {% endif %}" href="{{ model.url }}">
                            <span class="sidenav-mini-icon"> A </span>
                            <span class="sidenav-normal">{{ model.label }}</span>
                          </a>
                        </li>
                      {% else %}
                        <li class="nav-item list-unstyled">{{ model.label }}</li>
                      {% endif %}
                    {% endfor %}
                  </ul>
                </div> 
              {% endif %}
            </li>
          {% endif %}
      {% endfor %}
  {% endif %}

  {% if request.user.is_authenticated and not request.user.is_superuser %}

  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'apps' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Apps</span>
    </a>
    <div class="collapse {% if 'apps' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'tables' in segment %}active{% endif %}">
          <a class="nav-link {% if 'tables' in segment %}active{% endif %}" href="{% url 'data_tables' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Data Tables </span>
          </a>
        </li>        
        <li class="nav-item {% if 'charts' in segment %}active{% endif %}">
          <a class="nav-link {% if 'charts' in segment %}active{% endif %}" href="{% url 'charts' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> Charts </span>
          </a>
        </li>
        <li class="nav-item {% if 'api' in segment %}active{% endif %}">
          <a class="nav-link {% if 'api' in segment %}active{% endif %}" href="/api/sales/" target="_blank">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> API </span>
          </a>
        </li>
        <li class="nav-item {% if 'file_manager' in segment %}active{% endif %}">
          <a class="nav-link {% if 'file_manager' in segment %}active{% endif %}" href="{% url 'file_manager' %}">
            <span class="sidenav-mini-icon"> F </span>
            <span class="sidenav-normal"> File Manager </span>
          </a>
        </li>
        <li class="nav-item {% if 'profile' in segment %}active{% endif %}">
          <a class="nav-link {% if 'profile' in segment %}active{% endif %}" href="{% url 'profile' %}">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Profile </span>
          </a>
        </li>
        <li class="nav-item {% if 'tasks' in segment %}active{% endif %}">
          <a class="nav-link {% if 'tasks' in segment %}active{% endif %}" href="{% url 'tasks' %}">
            <span class="sidenav-mini-icon"> T </span>
            <span class="sidenav-normal"> Tasks </span>
          </a>
        </li>        
      </ul>
    </div>
  </li>

  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link {% if 'dashboard' in parent %}active{% endif %}" aria-controls="dashboardsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>shop </title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(0.000000, 148.000000)">
                  <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                  <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Dashboards</span>
    </a>
    <div class="collapse {% if 'dashboard' in parent %}show{% endif %} " id="dashboardsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'default' in segment %}active{% endif %}">
          <a class="nav-link {% if 'default' in segment %}active{% endif %}" href="{% url 'index' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> Default </span>
          </a>
        </li>
        <li class="nav-item {% if 'automotive' in segment %}active{% endif %}">
          <a class="nav-link {% if 'automotive' in segment %}active{% endif %}" href="{% url 'automotive' %}">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> Automotive </span>
          </a>
        </li>
        <li class="nav-item {% if 'smart_home' in segment %}active{% endif %}">
          <a class="nav-link {% if 'smart_home' in segment %}active{% endif %}" href="{% url 'smart_home' %}">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Smart Home </span>
          </a>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#vrExamples">
            <span class="sidenav-mini-icon"> V </span>
            <span class="sidenav-normal"> Virtual Reality <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'vr' in sub_parent %}show{% endif %}" id="vrExamples">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'vr_default' in segment %}active{% endif %}" href="{% url 'vr_default' %}">
                  <span class="sidenav-mini-icon text-xs"> V </span>
                  <span class="sidenav-normal"> VR Default </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'vr_info' in segment %}active{% endif %}" href="{% url 'vr_info' %}">
                  <span class="sidenav-mini-icon text-xs"> V </span>
                  <span class="sidenav-normal"> VR Info </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item {% if 'crm' in segment %}active{% endif %}">
          <a class="nav-link {% if 'crm' in segment %}active{% endif %}" href="{% url 'crm' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> CRM </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item mt-3">
    <h6 class="ps-4  ms-2 text-uppercase text-xs font-weight-bolder opacity-6">PAGES</h6>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#pagesExamples" class="nav-link {% if 'pages' in parent %}active{% endif %}" aria-controls="pagesExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>office</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g id="office" transform="translate(153.000000, 2.000000)">
                  <path class="color-background" d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                  <path class="color-background" d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Pages</span>
    </a>
    <div class="collapse {% if 'pages' in parent %}show{% endif %}" id="pagesExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item">
          <a class="nav-link {% if 'profile' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#profileExample">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Profile <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'profile' in sub_parent %}show{% endif %}" id="profileExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'profile_overview' in segment %}active{% endif %}" href="{% url 'profile_overview' %}">
                  <span class="sidenav-mini-icon text-xs"> P </span>
                  <span class="sidenav-normal"> Profile Overview </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'teams' in segment %}active{% endif %}" href="{% url 'teams' %}">
                  <span class="sidenav-mini-icon text-xs"> T </span>
                  <span class="sidenav-normal"> Teams </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'projects' in segment %}active{% endif %}" href="{% url 'projects' %}">
                  <span class="sidenav-mini-icon text-xs"> A </span>
                  <span class="sidenav-normal"> All Projects </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item">
          <a class="nav-link {% if 'users' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#usersExample">
            <span class="sidenav-mini-icon"> U </span>
            <span class="sidenav-normal"> Users <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'users' in sub_parent %}show{% endif %}" id="usersExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'reports' in segment %}active{% endif %}" href="{% url 'reports' %}">
                  <span class="sidenav-mini-icon text-xs"> R </span>
                  <span class="sidenav-normal"> Reports </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'new_user' in segment %}active{% endif %}" href="{% url 'new_user' %}">
                  <span class="sidenav-mini-icon text-xs"> N </span>
                  <span class="sidenav-normal"> New User </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item">
          <a class="nav-link {% if 'accounts' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#accountExample">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> Account <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'accounts' in sub_parent %}show{% endif %}" id="accountExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'settings' in segment %}active{% endif %}" href="{% url 'settings' %}">
                  <span class="sidenav-mini-icon text-xs"> S </span>
                  <span class="sidenav-normal"> Settings </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'billing' in segment %}active{% endif %}" href="{% url 'billing' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Billing </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'invoice' in segment %}active{% endif %}" href="{% url 'invoice' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Invoice </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'security' in segment %}active{% endif %}" href="{% url 'security' %}">
                  <span class="sidenav-mini-icon text-xs"> S </span>
                  <span class="sidenav-normal"> Security </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link {% if 'projects' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#projectsExample">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Projects <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'projects' in sub_parent %}show{% endif %}" id="projectsExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'general' in segment %}active{% endif %}" href="{% url 'general' %}">
                  <span class="sidenav-mini-icon text-xs"> G </span>
                  <span class="sidenav-normal"> General </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'timeline' in segment %}active{% endif %}" href="{% url 'timeline' %}">
                  <span class="sidenav-mini-icon text-xs"> T </span>
                  <span class="sidenav-normal"> Timeline </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'new_project' in segment %}active{% endif %}" href="{% url 'new_project' %}">
                  <span class="sidenav-mini-icon text-xs"> N </span>
                  <span class="sidenav-normal"> New Project </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " href="{% url 'pricing' %}">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Pricing Page </span>
          </a>
        </li>
        <li class="nav-item {% if 'messages' in segment %}active{% endif %}">
          <a class="nav-link {% if 'messages' in segment %}active{% endif %}" href="{% url 'messages' %}">
            <span class="sidenav-mini-icon"> M </span>
            <span class="sidenav-normal"> Messages </span>
          </a>
        </li>
        <li class="nav-item ">
          <a class="nav-link " href="{% url 'rtl' %}">
            <span class="sidenav-mini-icon"> R </span>
            <span class="sidenav-normal"> RTL </span>
          </a>
        </li>
        <li class="nav-item {% if 'widgets' in segment %}active{% endif %}">
          <a class="nav-link {% if 'widgets' in segment %}active{% endif %}" href="{% url 'widgets' %}">
            <span class="sidenav-mini-icon"> W </span>
            <span class="sidenav-normal"> Widgets </span>
          </a>
        </li>
        <li class="nav-item {% if 'charts' in segment %}active{% endif %}">
          <a class="nav-link {% if 'charts' in segment %}active{% endif %}" href="{% url 'charts' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> Charts </span>
          </a>
        </li>
        <li class="nav-item {% if 'sweet_alerts' in segment %}active{% endif %}">
          <a class="nav-link {% if 'sweet_alerts' in segment %}active{% endif %}" href="{% url 'sweet_alerts' %}">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Sweet Alerts </span>
          </a>
        </li>
        <li class="nav-item {% if 'notifications' in segment %}active{% endif %}">
          <a class="nav-link {% if 'notifications' in segment %}active{% endif %}" href="{% url 'notifications' %}">
            <span class="sidenav-mini-icon"> N </span>
            <span class="sidenav-normal"> Notifications </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#applicationsExamples" class="nav-link {% if 'applications' in parent %}active{% endif %}" aria-controls="applicationsExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>settings</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(304.000000, 151.000000)">
                  <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                  <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                  <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Applications</span>
    </a>
    <div class="collapse {% if 'applications' in parent %}show{% endif %}" id="applicationsExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'kanban' in segment %}active{% endif %}">
          <a class="nav-link {% if 'kanban' in segment %}active{% endif %}" href="{% url 'kanban' %}">
            <span class="sidenav-mini-icon"> K </span>
            <span class="sidenav-normal"> Kanban </span>
          </a>
        </li>
        <li class="nav-item {% if 'wizard' in segment %}active{% endif %}">
          <a class="nav-link {% if 'wizard' in segment %}active{% endif %}" href="{% url 'wizard' %}">
            <span class="sidenav-mini-icon"> W </span>
            <span class="sidenav-normal"> Wizard </span>
          </a>
        </li>
        <li class="nav-item {% if 'datatables' in segment %}active{% endif %}">
          <a class="nav-link {% if 'datatables' in segment %}active{% endif %}" href="{% url 'datatables' %}">
            <span class="sidenav-mini-icon"> D </span>
            <span class="sidenav-normal"> DataTables </span>
          </a>
        </li>
        <li class="nav-item {% if 'calendar' in segment %}active{% endif %}">
          <a class="nav-link {% if 'calendar' in segment %}active{% endif %}" href="{% url 'calendar' %}">
            <span class="sidenav-mini-icon"> C </span>
            <span class="sidenav-normal"> Calendar </span>
          </a>
        </li>
        <li class="nav-item {% if 'analytics' in segment %}active{% endif %}">
          <a class="nav-link {% if 'analytics' in segment %}active{% endif %}" href="{% url 'analytics' %}">
            <span class="sidenav-mini-icon"> A </span>
            <span class="sidenav-normal"> Analytics </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#ecommerceExamples" class="nav-link {% if 'ecommerce' in parent %}active{% endif %}" aria-controls="ecommerceExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg class="text-dark" width="12px" height="12px" viewBox="0 0 42 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>basket</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1869.000000, -741.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g id="basket" transform="translate(153.000000, 450.000000)">
                  <path class="color-background" d="M34.080375,13.125 L27.3748125,1.9490625 C27.1377583,1.53795093 26.6972449,1.28682264 26.222716,1.29218729 C25.748187,1.29772591 25.3135593,1.55890827 25.0860125,1.97535742 C24.8584658,2.39180657 24.8734447,2.89865282 25.1251875,3.3009375 L31.019625,13.125 L10.980375,13.125 L16.8748125,3.3009375 C17.1265553,2.89865282 17.1415342,2.39180657 16.9139875,1.97535742 C16.6864407,1.55890827 16.251813,1.29772591 15.777284,1.29218729 C15.3027551,1.28682264 14.8622417,1.53795093 14.6251875,1.9490625 L7.919625,13.125 L0,13.125 L0,18.375 L42,18.375 L42,13.125 L34.080375,13.125 Z" opacity="0.595377604"></path>
                  <path class="color-background" d="M3.9375,21 L3.9375,38.0625 C3.9375,40.9619949 6.28800506,43.3125 9.1875,43.3125 L32.8125,43.3125 C35.7119949,43.3125 38.0625,40.9619949 38.0625,38.0625 L38.0625,21 L3.9375,21 Z M14.4375,36.75 L11.8125,36.75 L11.8125,26.25 L14.4375,26.25 L14.4375,36.75 Z M22.3125,36.75 L19.6875,36.75 L19.6875,26.25 L22.3125,26.25 L22.3125,36.75 Z M30.1875,36.75 L27.5625,36.75 L27.5625,26.25 L30.1875,26.25 L30.1875,36.75 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Ecommerce</span>
    </a>
    <div class="collapse {% if 'ecommerce' in parent %}show{% endif %}" id="ecommerceExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item {% if 'overview' in segment %}active{% endif %}">
          <a class="nav-link {% if 'overview' in segment %}active{% endif %}" href="{% url 'overview' %}">
            <span class="sidenav-mini-icon"> O </span>
            <span class="sidenav-normal"> Overview </span>
          </a>
        </li>
        <li class="nav-item ">
          <a class="nav-link {% if 'products' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#productsExample">
            <span class="sidenav-mini-icon"> P </span>
            <span class="sidenav-normal"> Products <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'products' in sub_parent %}show{% endif %}" id="productsExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'new_product' in segment %}active{% endif %}" href="{% url 'new_product' %}">
                  <span class="sidenav-mini-icon text-xs"> N </span>
                  <span class="sidenav-normal"> New Product </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'edit_product' in segment %}active{% endif %}" href="{% url 'edit_product' %}">
                  <span class="sidenav-mini-icon text-xs"> E </span>
                  <span class="sidenav-normal"> Edit Product </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'product_page' in segment %}active{% endif %}" href="{% url 'product_page' %}">
                  <span class="sidenav-mini-icon text-xs"> P </span>
                  <span class="sidenav-normal"> Product Page </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'products_list' in segment %}active{% endif %}" href="{% url 'products_list' %}">
                  <span class="sidenav-mini-icon text-xs"> P </span>
                  <span class="sidenav-normal"> Products List </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link {% if 'orders' in sub_parent %}active{% endif %}" data-bs-toggle="collapse" aria-expanded="false" href="#ordersExample">
            <span class="sidenav-mini-icon"> O </span>
            <span class="sidenav-normal"> Orders <b class="caret"></b></span>
          </a>
          <div class="collapse {% if 'orders' in sub_parent %}show{% endif %}" id="ordersExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link {% if 'order_list' in segment %}active{% endif %}" href="{% url 'order_list' %}">
                  <span class="sidenav-mini-icon text-xs"> O </span>
                  <span class="sidenav-normal"> Order List </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link {% if 'order_details' in segment %}active{% endif %}" href="{% url 'order_details' %}">
                  <span class="sidenav-mini-icon text-xs"> O </span>
                  <span class="sidenav-normal"> Order Details </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item {% if 'referral' in segment %}active{% endif %}">
          <a class="nav-link {% if 'referral' in segment %}active{% endif %}" href="{% url 'referral' %}">
            <span class="sidenav-mini-icon"> R </span>
            <span class="sidenav-normal"> Referral </span>
          </a>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#authExamples" class="nav-link " aria-controls="authExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>document</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(154.000000, 300.000000)">
                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Authentication</span>
    </a>
    <div class="collapse " id="authExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signinExample">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Sign In <b class="caret"></b></span>
          </a>
          <div class="collapse " id="signinExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_login' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_login' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_login' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signupExample">
            <span class="sidenav-mini-icon"> S </span>
            <span class="sidenav-normal"> Sign Up <b class="caret"></b></span>
          </a>
          <div class="collapse " id="signupExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_register' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_register' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_register' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#resetExample">
            <span class="sidenav-mini-icon"> R </span>
            <span class="sidenav-normal"> Reset Password <b class="caret"></b></span>
          </a>
          <div class="collapse " id="resetExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_reset' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_reset' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_reset' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#lockExample">
            <span class="sidenav-mini-icon"> L </span>
            <span class="sidenav-normal"> Lock <b class="caret"></b></span>
          </a>
          <div class="collapse " id="lockExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_lock' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_lock' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_lock' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#StepExample">
            <span class="sidenav-mini-icon"> 2 </span>
            <span class="sidenav-normal"> 2-Step Verification <b class="caret"></b></span>
          </a>
          <div class="collapse " id="StepExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'basic_verification' %}">
                  <span class="sidenav-mini-icon text-xs"> B </span>
                  <span class="sidenav-normal"> Basic </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'cover_verification' %}">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> Cover </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'illustration_verification' %}">
                  <span class="sidenav-mini-icon text-xs"> I </span>
                  <span class="sidenav-normal"> Illustration </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#errorExample">
            <span class="sidenav-mini-icon"> E </span>
            <span class="sidenav-normal"> Error <b class="caret"></b></span>
          </a>
          <div class="collapse " id="errorExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="{% url 'error_404' %}">
                  <span class="sidenav-mini-icon text-xs"> E </span>
                  <span class="sidenav-normal"> Error 404 </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="{% url 'error_500' %}">
                  <span class="sidenav-mini-icon text-xs"> E </span>
                  <span class="sidenav-normal"> Error 500 </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <hr class="horizontal dark" />
    <h6 class="ps-4  ms-2 text-uppercase text-xs font-weight-bolder opacity-6">DOCS</h6>
  </li>
  <li class="nav-item">
    <a data-bs-toggle="collapse" href="#basicExamples" class="nav-link " aria-controls="basicExamples" role="button" aria-expanded="false">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center  me-2">
        <svg width="12px" height="20px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>spaceship</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(4.000000, 301.000000)">
                  <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                  <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                  <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                  <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Basic</span>
    </a>
    <div class="collapse " id="basicExamples">
      <ul class="nav ms-4 ps-3">
        <li class="nav-item ">
          <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#gettingStartedExample">
            <span class="sidenav-mini-icon"> G </span>
            <span class="sidenav-normal"> Getting Started <b class="caret"></b></span>
          </a>
          <div class="collapse " id="gettingStartedExample">
            <ul class="nav nav-sm flex-column">
              <li class="nav-item">
                <a class="nav-link " href="https://github.com/app-generator/django-soft-ui-dashboard-pro" target="_blank">
                  <span class="sidenav-mini-icon text-xs"> Q </span>
                  <span class="sidenav-normal"> Quick Start </span>
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link " href="https://www.creative-tim.com/learning-lab/bootstrap/overview/soft-ui-dashboard?AFFILIATE=128200" target="_blank">
                  <span class="sidenav-mini-icon text-xs"> C </span>
                  <span class="sidenav-normal"> UI Components </span>
                </a>
              </li>
            </ul>
          </div>
        </li>
      </ul>
    </div>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="https://github.com/app-generator/django-soft-ui-dashboard-pro/blob/main/CHANGELOG.md" target="_blank">
      <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center  me-2 d-flex align-items-center justify-content-center">
        <svg width="12px" height="12px" viewBox="0 0 43 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <title>credit-card</title>
          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-2169.000000, -745.000000)" fill="#FFFFFF" fill-rule="nonzero">
              <g transform="translate(1716.000000, 291.000000)">
                <g transform="translate(453.000000, 454.000000)">
                  <path class="color-background" d="M43,10.7482083 L43,3.58333333 C43,1.60354167 41.3964583,0 39.4166667,0 L3.58333333,0 C1.60354167,0 0,1.60354167 0,3.58333333 L0,10.7482083 L43,10.7482083 Z" opacity="0.593633743"></path>
                  <path class="color-background" d="M0,16.125 L0,32.25 C0,34.2297917 1.60354167,35.8333333 3.58333333,35.8333333 L39.4166667,35.8333333 C41.3964583,35.8333333 43,34.2297917 43,32.25 L43,16.125 L0,16.125 Z M19.7083333,26.875 L7.16666667,26.875 L7.16666667,23.2916667 L19.7083333,23.2916667 L19.7083333,26.875 Z M35.8333333,26.875 L28.6666667,26.875 L28.6666667,23.2916667 L35.8333333,23.2916667 L35.8333333,26.875 Z"></path>
                </g>
              </g>
            </g>
          </g>
        </svg>
      </div>
      <span class="nav-link-text ms-1">Changelog</span>
    </a>
  </li>
  {% endif %}
</ul>

================
File: templates/includes/navigation-dark.html
================
{% load static %}

<!-- Navbar -->
<nav class="navbar navbar-expand-lg position-absolute top-0 z-index-3 w-100 shadow-none my-3  navbar-transparent mt-4">
  <div class="container">
    <a class="navbar-brand font-weight-bolder ms-lg-0 ms-3 " href="{% url 'index' %}">
      Soft UI Dashboard PRO
    </a>
    <button class="navbar-toggler shadow-none ms-2" type="button" data-bs-toggle="collapse" data-bs-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon mt-2">
        <span class="navbar-toggler-bar bar1"></span>
        <span class="navbar-toggler-bar bar2"></span>
        <span class="navbar-toggler-bar bar3"></span>
      </span>
    </button>
    <div class="collapse navbar-collapse w-100 pt-3 pb-2 py-lg-0" id="navigation">
      <ul class="navbar-nav navbar-nav-hover mx-auto">
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center  text-dark " id="dropdownMenuPages" data-bs-toggle="dropdown" aria-expanded="false">
            Pages
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}  " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-xl p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuPages">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>spaceship</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(4.000000, 301.000000)">
                                    <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                    <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                    <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                    <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Dashboards
                    </div>
                    <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Default</span>
                    </a>
                    <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Automotive</span>
                    </a>
                    <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Smart Home</span>
                    </a>
                    <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Virtual Reality</span>
                    </a>
                    <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">CRM</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>office</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(153.000000, 2.000000)">
                                    <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                                    <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Users
                    </div>
                    <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Reports</span>
                    </a>
                    <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New User</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Profile
                    </div>
                    <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Teams</span>
                    </a>
                    <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Projects</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Projects
                    </div>
                    <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">General</span>
                    </a>
                    <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Timeline</span>
                    </a>
                    <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Project</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>customer-support</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(1.000000, 0.000000)">
                                    <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                                    <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                                    <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Account
                    </div>
                    <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Settings</span>
                    </a>
                    <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Billing</span>
                    </a>
                    <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Invoice</span>
                    </a>
                    <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Security</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Extra
                    </div>
                    <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Pricing Page</span>
                    </a>
                    <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Messages</span>
                    </a>
                    <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">RTL Page</span>
                    </a>
                    <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Widgets</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Dashboards
              </div>
              <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                Default
              </a>
              <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                Automotive
              </a>
              <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                Smart Home
              </a>
              <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                Virtual Reality
              </a>
              <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                CRM
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>office</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(153.000000, 2.000000)">
                              <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                              <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Users
              </div>
              <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                Reports
              </a>
              <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                New user
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>customer-support</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(1.000000, 0.000000)">
                              <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                              <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                              <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Profile
              </div>
              <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                Teams
              </a>
              <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                Projects
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Projects
              </div>
              <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                General
              </a>
              <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                Timeline
              </a>
              <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                New Project
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Account
              </div>
              <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                Settings
              </a>
              <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                Billing
              </a>
              <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                Invoice
              </a>
              <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                Security
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg class="" width="12px" height="20px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>spaceship</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(4.000000, 301.000000)">
                              <path d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                              <path d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                              <path d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                              <path d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Extra
              </div>
              <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                Pricing Page
              </a>
              <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                Messages
              </a>
              <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                RTL Page
              </a>
              <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                Widgets
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center  text-dark " id="dropdownMenuAccount" data-bs-toggle="dropdown" aria-expanded="false">
            Authentication
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg border-radius-xl p-3 mt-0 mt-lg-3" aria-labelledby="dropdownMenuAccount">
            <div class="row d-none d-lg-flex">
              <div class="col-6">
                <div class="py-6 h-100 w-100 d-flex border-radius-lg position-relative dropdown-image" style="background-image:url('{% static 'assets/img/curved-images/curved8.jpg' %}')">
                  <div class="mask bg-gradient-primary border-radius-lg"></div>
                  <div class="d-flex justify-content-center align-items-center text-center text-white font-weight-bold w-100 z-index-1 flex-column">
                    <div class="icon icon-shape rounded-circle bg-white shadow text-center">
                      <i class="ni ni-diamond text-primary text-gradient text-lg" aria-hidden="true"></i>
                    </div>
                    <span class="text-lg mt-2">Explore our<br>utilities pages</span>
                  </div>
                </div>
              </div>
              <div class="col-6 ps-0 d-flex justify-content-center flex-column">
                <ul class="list-group">
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignIn">
                      <span>Sign In</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignIn">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_login' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_login' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_login' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignUp">
                      <span>Sign Up</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignUp">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_register' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_register' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_register' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownPasswordReset">
                      <span>Reset Password</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownPasswordReset">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_reset' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_reset' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_reset' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownLock">
                      <span>Lock</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownLock">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_lock' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_lock' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_lock' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdown2fa">
                      <span>2-Step Verification</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdown2fa">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_verification' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_verification' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_verification' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownError">
                      <span>Error</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownError">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_404' %}">
                        <span>404</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_500' %}">
                        <span>500</span>
                      </a>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
            <div class="row d-lg-none">
              <div class="col-12 d-flex justify-content-center flex-column">
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                  Sign In
                </h6>
                <a href="{% url 'basic_login' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_login' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_login' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Sign Up
                </h6>
                <a href="{% url 'basic_register' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_register' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_register' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Reset Password
                </h6>
                <a href="basic_reset" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_reset' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_reset' %}" class="dropdown-item border-radius-md">
                  Illustation
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Lock
                </h6>
                <a href="{% url 'basic_lock' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_lock' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_lock' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  2-Step Verification
                </h6>
                <a href="{% url 'basic_verification' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_verification' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_verification' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Error
                </h6>
                <a href="{% url 'error_404' %}" class="dropdown-item border-radius-md">
                  404
                </a>
                <a href="{% url 'error_500' %}" class="dropdown-item border-radius-md">
                  500
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center  text-dark " id="dropdownMenuBlocks" data-bs-toggle="dropdown" aria-expanded="false">
            Applications
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-md dropdown-md-responsive p-3 border-radius-lg mt-0 mt-lg-3" aria-labelledby="dropdownMenuBlocks">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Kanban</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-laptop text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Wizard</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-badge text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">DataTables</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-notification-70 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Calendar</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <!-- responsive -->
            <div class="row d-lg-none">
              <div class="col-md-12">
                <a class="py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Kanban</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-laptop text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Wizard</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-badge text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">DataTables</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-notification-70 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Calendar</p>
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center  text-dark " id="dropdownMenuEcommerce" data-bs-toggle="dropdown" aria-expanded="false">
            Ecommerce
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}  " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuEcommerce">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Orders
                    </div>
                    <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order List</span>
                    </a>
                    <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order Details</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      General
                    </div>
                    <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Referral</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Products
                    </div>
                    <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Product</span>
                    </a>
                    <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Edit Product</span>
                    </a>
                    <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Product Page</span>
                    </a>
                    <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Products List</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Orders
              </div>
              <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                Order List
              </a>
              <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                Order Details
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                General
              </div>
              <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                Referral
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Products
              </div>
              <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                New Product
              </a>
              <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                Edit Product
              </a>
              <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                Product Page
              </a>
              <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                Products List
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center  text-dark " id="dropdownMenuDocs" data-bs-toggle="dropdown" aria-expanded="false">
            Docs
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg mt-0 mt-lg-3 p-3 border-radius-lg" aria-labelledby="dropdownMenuDocs">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://github.com/app-generator/django-soft-ui-dashboard-pro">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>spaceship</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(4.000000, 301.000000)">
                                  <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                  <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                  <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                  <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                        <span class="text-sm">All about overview, quick start, license and contents</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/colors/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>document</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 300.000000)">
                                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                        <span class="text-sm">See our colors, icons and typography</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/alerts/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>box-3d-50</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(603.000000, 0.000000)">
                                  <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                  <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                  <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                        <span class="text-sm">Explore our collection of fully designed components</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/datepicker/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>switches</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 149.000000)">
                                  <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                  <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                        <span class="text-sm">Check how you can integrate our plugins</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/utilities/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>settings</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(304.000000, 151.000000)">
                                  <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                  <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                  <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                        <span class="text-sm">For those who want flexibility, use our utility classes</span>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <div class="row d-lg-none">
              <div class="col-md-12 g-0">
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>spaceship</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(4.000000, 301.000000)">
                                <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>document</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 300.000000)">
                                <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                      <span class="text-sm">See our colors, icons and typography</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>box-3d-50</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(603.000000, 0.000000)">
                                <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                      <span class="text-sm">Explore our collection of fully designed components</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>switches</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 149.000000)">
                                <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                      <span class="text-sm">Check how you can integrate our plugins</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>settings</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(304.000000, 151.000000)">
                                <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
      </ul>
      <ul class="navbar-nav d-lg-block d-none">
        <li class="nav-item">
          <a href="https://appseed.us/product/soft-ui-dashboard-pro/django/" target="_blank" 
             class="btn btn-sm  bg-gradient-dark  btn-round mb-0 me-1" >Download</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- End Navbar -->

================
File: templates/includes/navigation-fullscreen.html
================
{% load static %}

<!-- Navbar -->
<nav class="navbar navbar-expand-lg position-absolute top-0 z-index-3 w-100 shadow-none my-3 navbar-transparent mt-4">
  <div class="container">
    <a class="navbar-brand font-weight-bolder ms-lg-0 ms-3 text-white" href="{% url 'index' %}">
      Django Soft PRO
    </a>
    <button class="navbar-toggler shadow-none ms-2" type="button" data-bs-toggle="collapse" data-bs-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon mt-2">
        <span class="navbar-toggler-bar bar1"></span>
        <span class="navbar-toggler-bar bar2"></span>
        <span class="navbar-toggler-bar bar3"></span>
      </span>
    </button>
    <div class="collapse navbar-collapse w-100 pt-3 pb-2 py-lg-0" id="navigation">
      <ul class="navbar-nav navbar-nav-hover mx-auto">
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuPages" data-bs-toggle="dropdown" aria-expanded="false">
            Pages
            <img src="{% static 'assets/img/down-arrow-white.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-xl p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuPages">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>spaceship</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(4.000000, 301.000000)">
                                    <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                    <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                    <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                    <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Dashboards
                    </div>
                    <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Default</span>
                    </a>
                    <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Automotive</span>
                    </a>
                    <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Smart Home</span>
                    </a>
                    <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Virtual Reality</span>
                    </a>
                    <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">CRM</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>office</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(153.000000, 2.000000)">
                                    <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                                    <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Users
                    </div>
                    <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Reports</span>
                    </a>
                    <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New User</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Profile
                    </div>
                    <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Teams</span>
                    </a>
                    <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Projects</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Projects
                    </div>
                    <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">General</span>
                    </a>
                    <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Timeline</span>
                    </a>
                    <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Project</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>customer-support</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(1.000000, 0.000000)">
                                    <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                                    <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                                    <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Account
                    </div>
                    <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Settings</span>
                    </a>
                    <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Billing</span>
                    </a>
                    <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Invoice</span>
                    </a>
                    <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Security</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Extra
                    </div>
                    <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Pricing Page</span>
                    </a>
                    <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Messages</span>
                    </a>
                    <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">RTL Page</span>
                    </a>
                    <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Widgets</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Dashboards
              </div>
              <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                Default
              </a>
              <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                Automotive
              </a>
              <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                Smart Home
              </a>
              <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                Virtual Reality
              </a>
              <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                CRM
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>office</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(153.000000, 2.000000)">
                              <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                              <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Users
              </div>
              <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                Reports
              </a>
              <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                New user
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>customer-support</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(1.000000, 0.000000)">
                              <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                              <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                              <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Profile
              </div>
              <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                Teams
              </a>
              <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                Projects
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Projects
              </div>
              <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                General
              </a>
              <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                Timeline
              </a>
              <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                New Project
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Account
              </div>
              <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                Settings
              </a>
              <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                Billing
              </a>
              <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                Invoice
              </a>
              <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                Security
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg class="" width="12px" height="20px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>spaceship</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(4.000000, 301.000000)">
                              <path d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                              <path d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                              <path d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                              <path d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Extra
              </div>
              <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                Pricing Page
              </a>
              <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                Messages
              </a>
              <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                RTL Page
              </a>
              <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                Widgets
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuAccount" data-bs-toggle="dropdown" aria-expanded="false">
            Authentication
            <img src="{% static 'assets/img/down-arrow-white.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg border-radius-xl p-3 mt-0 mt-lg-3" aria-labelledby="dropdownMenuAccount">
            <div class="row d-none d-lg-flex">
              <div class="col-6">
                <div class="py-6 h-100 w-100 d-flex border-radius-lg position-relative dropdown-image" style="background-image:url('{% static 'assets/img/curved-images/curved8.jpg' %}')">
                  <div class="mask bg-gradient-primary border-radius-lg"></div>
                  <div class="d-flex justify-content-center align-items-center text-center text-white font-weight-bold w-100 z-index-1 flex-column">
                    <div class="icon icon-shape rounded-circle bg-white shadow text-center">
                      <i class="ni ni-diamond text-primary text-gradient text-lg" aria-hidden="true"></i>
                    </div>
                    <span class="text-lg mt-2">Explore our<br>utilities pages</span>
                  </div>
                </div>
              </div>
              <div class="col-6 ps-0 d-flex justify-content-center flex-column">
                <ul class="list-group">
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignIn">
                      <span>Sign In</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignIn">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_login' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_login' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_login' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignUp">
                      <span>Sign Up</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignUp">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_register' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_register' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_register' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownPasswordReset">
                      <span>Reset Password</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownPasswordReset">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_reset' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_reset' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_reset' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownLock">
                      <span>Lock</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownLock">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_lock' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_lock' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_lock' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdown2fa">
                      <span>2-Step Verification</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdown2fa">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_verification' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="cover_verification">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_verification' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownError">
                      <span>Error</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownError">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_404' %}">
                        <span>404</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_500' %}">
                        <span>500</span>
                      </a>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
            <div class="row d-lg-none">
              <div class="col-12 d-flex justify-content-center flex-column">
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                  Sign In
                </h6>
                <a href="{% url 'basic_login' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_login' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_login' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Sign Up
                </h6>
                <a href="{% url 'basic_register' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_register' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_register' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Reset Password
                </h6>
                <a href="{% url 'basic_reset' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_reset' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_reset' %}" class="dropdown-item border-radius-md">
                  Illustation
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Lock
                </h6>
                <a href="{% url 'basic_lock' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_lock' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_lock' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  2-Step Verification
                </h6>
                <a href="{% url 'basic_verification' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_verification' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_verification' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Error
                </h6>
                <a href="{% url 'error_404' %}" class="dropdown-item border-radius-md">
                  404
                </a>
                <a href="{% url 'error_500' %}" class="dropdown-item border-radius-md">
                  500
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuBlocks" data-bs-toggle="dropdown" aria-expanded="false">
            Applications
            <img src="{% static 'assets/img/down-arrow-white.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-md dropdown-md-responsive p-3 border-radius-lg mt-0 mt-lg-3" aria-labelledby="dropdownMenuBlocks">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Kanban</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-laptop text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Wizard</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-badge text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">DataTables</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-notification-70 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Calendar</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <!-- responsive -->
            <div class="row d-lg-none">
              <div class="col-md-12">
                <a class="py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Kanban</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-laptop text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Wizard</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-badge text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">DataTables</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-notification-70 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Calendar</p>
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuEcommerce" data-bs-toggle="dropdown" aria-expanded="false">
            Ecommerce
            <img src="{% static 'assets/img/down-arrow-white.svg' %}  " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuEcommerce">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Orders
                    </div>
                    <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order List</span>
                    </a>
                    <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order Details</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      General
                    </div>
                    <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Referral</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Products
                    </div>
                    <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Product</span>
                    </a>
                    <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Edit Product</span>
                    </a>
                    <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Product Page</span>
                    </a>
                    <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Products List</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Orders
              </div>
              <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                Order List
              </a>
              <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                Order Details
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                General
              </div>
              <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                Referral
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Products
              </div>
              <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                New Product
              </a>
              <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                Edit Product
              </a>
              <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                Product Page
              </a>
              <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                Products List
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuDocs" data-bs-toggle="dropdown" aria-expanded="false">
            Docs
            <img src="{% static 'assets/img/down-arrow-white.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg mt-0 mt-lg-3 p-3 border-radius-lg" aria-labelledby="dropdownMenuDocs">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://github.com/app-generator/django-soft-ui-dashboard-pro">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>spaceship</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(4.000000, 301.000000)">
                                  <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                  <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                  <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                  <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                        <span class="text-sm">All about overview, quick start, license and contents</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/colors/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>document</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 300.000000)">
                                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                        <span class="text-sm">See our colors, icons and typography</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/alerts/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>box-3d-50</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(603.000000, 0.000000)">
                                  <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                  <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                  <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                        <span class="text-sm">Explore our collection of fully designed components</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/datepicker/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>switches</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 149.000000)">
                                  <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                  <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                        <span class="text-sm">Check how you can integrate our plugins</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/utilities/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>settings</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(304.000000, 151.000000)">
                                  <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                  <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                  <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                        <span class="text-sm">For those who want flexibility, use our utility classes</span>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <div class="row d-lg-none">
              <div class="col-md-12 g-0">
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>spaceship</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(4.000000, 301.000000)">
                                <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>document</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 300.000000)">
                                <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                      <span class="text-sm">See our colors, icons and typography</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>box-3d-50</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(603.000000, 0.000000)">
                                <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                      <span class="text-sm">Explore our collection of fully designed components</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>switches</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 149.000000)">
                                <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                      <span class="text-sm">Check how you can integrate our plugins</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>settings</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(304.000000, 151.000000)">
                                <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
      </ul>
      <ul class="navbar-nav d-lg-block d-none">
        <li class="nav-item">
          <a href="https://appseed.us/product/soft-ui-dashboard-pro/django/" target="_blank" 
             class="btn btn-sm  bg-white  btn-round mb-0 me-1">Download</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- End Navbar -->

================
File: templates/includes/navigation-rtl.html
================
{% load static %}

<!-- Navbar -->
<nav class="navbar navbar-main navbar-expand-lg position-sticky mt-4 top-1 px-0 mx-4 shadow-none border-radius-xl z-index-sticky" id="navbarBlur" data-scroll="true">
  <div class="container-fluid py-1 px-3">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 ">
        <li class="breadcrumb-item text-sm ps-2"><a class="opacity-5 text-dark" href="javascript:;">لوحات القيادة</a></li>
        <li class="breadcrumb-item text-sm text-dark active" aria-current="page">RTL</li>
      </ol>
      <h6 class="font-weight-bolder mb-0">RTL</h6>
    </nav>
    <div class="sidenav-toggler sidenav-toggler-inner d-xl-block d-none me-3">
      <a href="javascript:;" class="nav-link text-body p-0">
        <div class="sidenav-toggler-inner">
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
        </div>
      </a>
    </div>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 px-0" id="navbar">
      <div class="me-md-auto pe-md-3 d-flex align-items-center">
        <div class="input-group">
          <span class="input-group-text text-body"><i class="fas fa-search" aria-hidden="true"></i></span>
          <input type="text" class="form-control" placeholder="أكتب هنا...">
        </div>
      </div>
      <ul class="navbar-nav ms-0 justify-content-end">
        <li class="nav-item d-flex align-items-center">
          <a href="{% url 'illustration_login' %}" class="nav-link text-body font-weight-bold px-0" target="_blank">
            <i class="fa fa-user ms-sm-1 "></i>
            <span class="d-sm-inline d-none">يسجل دخول</span>
          </a>
        </li>
        <li class="nav-item d-xl-none pe-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
            <div class="sidenav-toggler-inner">
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
            </div>
          </a>
        </li>
        <li class="nav-item px-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0">
            <i class="fa fa-cog fixed-plugin-button-nav cursor-pointer"></i>
          </a>
        </li>
        <li class="nav-item dropdown ps-2 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fa fa-bell cursor-pointer"></i>
          </a>
          <ul class="dropdown-menu dropdown-menu-end px-2 py-3 me-sm-n4" aria-labelledby="dropdownMenuButton">
            <li class="mb-2">
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="my-auto">
                    <img src="{% static 'assets/img/team-2.jpg' %}" class="avatar avatar-sm  ms-3 " alt="user image">
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      <span class="font-weight-bold">New message</span> from Laur
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      13 minutes ago
                    </p>
                  </div>
                </div>
              </a>
            </li>
            <li class="mb-2">
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="my-auto">
                    <img src="{% static 'assets/img/small-logos/logo-spotify.svg' %}" class="avatar avatar-sm bg-gradient-dark  ms-3 " alt="logo spotify">
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      <span class="font-weight-bold">New album</span> by Travis Scott
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      1 day
                    </p>
                  </div>
                </div>
              </a>
            </li>
            <li>
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="avatar avatar-sm bg-gradient-secondary  ms-3  my-auto">
                    <svg width="12px" height="12px" viewBox="0 0 43 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>credit-card</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2169.000000, -745.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(453.000000, 454.000000)">
                              <path class="color-background" d="M43,10.7482083 L43,3.58333333 C43,1.60354167 41.3964583,0 39.4166667,0 L3.58333333,0 C1.60354167,0 0,1.60354167 0,3.58333333 L0,10.7482083 L43,10.7482083 Z" opacity="0.593633743"></path>
                              <path class="color-background" d="M0,16.125 L0,32.25 C0,34.2297917 1.60354167,35.8333333 3.58333333,35.8333333 L39.4166667,35.8333333 C41.3964583,35.8333333 43,34.2297917 43,32.25 L43,16.125 L0,16.125 Z M19.7083333,26.875 L7.16666667,26.875 L7.16666667,23.2916667 L19.7083333,23.2916667 L19.7083333,26.875 Z M35.8333333,26.875 L28.6666667,26.875 L28.6666667,23.2916667 L35.8333333,23.2916667 L35.8333333,26.875 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      Payment successfully completed
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      2 days
                    </p>
                  </div>
                </div>
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- End Navbar -->

================
File: templates/includes/navigation-shadow.html
================
{% load static %}

<!-- Navbar -->
<nav class="navbar navbar-expand-lg  blur blur-rounded top-0  z-index-3 shadow position-absolute my-3 py-2 start-0 end-0 mx-4">
  <div class="container-fluid">
    <a class="navbar-brand font-weight-bolder ms-lg-0 ms-3 " href="{% url 'index' %}">
      Django Soft PRO
    </a>
    <button class="navbar-toggler shadow-none ms-2" type="button" data-bs-toggle="collapse" data-bs-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon mt-2">
        <span class="navbar-toggler-bar bar1"></span>
        <span class="navbar-toggler-bar bar2"></span>
        <span class="navbar-toggler-bar bar3"></span>
      </span>
    </button>
    <div class="collapse navbar-collapse w-100 pt-3 pb-2 py-lg-0" id="navigation">
      <ul class="navbar-nav navbar-nav-hover mx-auto">
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuPages" data-bs-toggle="dropdown" aria-expanded="false">
            Pages
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}  " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-xl p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuPages">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>spaceship</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(4.000000, 301.000000)">
                                    <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                    <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                    <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                    <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Dashboards
                    </div>
                    <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Default</span>
                    </a>
                    <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Automotive</span>
                    </a>
                    <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Smart Home</span>
                    </a>
                    <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Virtual Reality</span>
                    </a>
                    <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">CRM</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>office</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(153.000000, 2.000000)">
                                    <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                                    <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Users
                    </div>
                    <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Reports</span>
                    </a>
                    <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New User</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Profile
                    </div>
                    <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Teams</span>
                    </a>
                    <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Projects</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Projects
                    </div>
                    <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">General</span>
                    </a>
                    <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Timeline</span>
                    </a>
                    <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Project</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-4">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>customer-support</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(1.000000, 0.000000)">
                                    <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                                    <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                                    <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Account
                    </div>
                    <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Settings</span>
                    </a>
                    <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Billing</span>
                    </a>
                    <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Invoice</span>
                    </a>
                    <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Security</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Extra
                    </div>
                    <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Pricing Page</span>
                    </a>
                    <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Messages</span>
                    </a>
                    <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">RTL Page</span>
                    </a>
                    <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Widgets</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Dashboards
              </div>
              <a href="{% url 'index' %}" class="dropdown-item border-radius-md">
                Default
              </a>
              <a href="{% url 'automotive' %}" class="dropdown-item border-radius-md">
                Automotive
              </a>
              <a href="{% url 'smart_home' %}" class="dropdown-item border-radius-md">
                Smart Home
              </a>
              <a href="{% url 'vr_default' %}" class="dropdown-item border-radius-md">
                Virtual Reality
              </a>
              <a href="{% url 'crm' %}" class="dropdown-item border-radius-md">
                CRM
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>office</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(153.000000, 2.000000)">
                              <path d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                              <path d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Users
              </div>
              <a href="{% url 'reports' %}" class="dropdown-item border-radius-md">
                Reports
              </a>
              <a href="{% url 'new_user' %}" class="dropdown-item border-radius-md">
                New user
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 46 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>customer-support</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1717.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(1.000000, 0.000000)">
                              <path class="color-background" d="M45,0 L26,0 C25.447,0 25,0.447 25,1 L25,20 C25,20.379 25.214,20.725 25.553,20.895 C25.694,20.965 25.848,21 26,21 C26.212,21 26.424,20.933 26.6,20.8 L34.333,15 L45,15 C45.553,15 46,14.553 46,14 L46,1 C46,0.447 45.553,0 45,0 Z" opacity="0.59858631"></path>
                              <path class="color-foreground" d="M22.883,32.86 C20.761,32.012 17.324,31 13,31 C8.676,31 5.239,32.012 3.116,32.86 C1.224,33.619 0,35.438 0,37.494 L0,41 C0,41.553 0.447,42 1,42 L25,42 C25.553,42 26,41.553 26,41 L26,37.494 C26,35.438 24.776,33.619 22.883,32.86 Z"></path>
                              <path class="color-foreground" d="M13,28 C17.432,28 21,22.529 21,18 C21,13.589 17.411,10 13,10 C8.589,10 5,13.589 5,18 C5,22.529 8.568,28 13,28 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Profile
              </div>
              <a href="{% url 'profile_overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'teams' %}" class="dropdown-item border-radius-md">
                Teams
              </a>
              <a href="{% url 'projects' %}" class="dropdown-item border-radius-md">
                Projects
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Projects
              </div>
              <a href="{% url 'general' %}" class="dropdown-item border-radius-md">
                General
              </a>
              <a href="{% url 'timeline' %}" class="dropdown-item border-radius-md">
                Timeline
              </a>
              <a href="{% url 'new_project' %}" class="dropdown-item border-radius-md">
                New Project
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Account
              </div>
              <a href="{% url 'settings' %}" class="dropdown-item border-radius-md">
                Settings
              </a>
              <a href="{% url 'billing' %}" class="dropdown-item border-radius-md">
                Billing
              </a>
              <a href="{% url 'invoice' %}" class="dropdown-item border-radius-md">
                Invoice
              </a>
              <a href="{% url 'security' %}" class="dropdown-item border-radius-md">
                Security
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg class="" width="12px" height="20px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>spaceship</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(4.000000, 301.000000)">
                              <path d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                              <path d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                              <path d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                              <path d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Extra
              </div>
              <a href="{% url 'pricing' %}" class="dropdown-item border-radius-md">
                Pricing Page
              </a>
              <a href="{% url 'messages' %}" class="dropdown-item border-radius-md">
                Messages
              </a>
              <a href="{% url 'rtl' %}" class="dropdown-item border-radius-md">
                RTL Page
              </a>
              <a href="{% url 'widgets' %}" class="dropdown-item border-radius-md">
                Widgets
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuAccount" data-bs-toggle="dropdown" aria-expanded="false">
            Authentication
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg border-radius-xl p-3 mt-0 mt-lg-3" aria-labelledby="dropdownMenuAccount">
            <div class="row d-none d-lg-flex">
              <div class="col-6">
                <div class="py-6 h-100 w-100 d-flex border-radius-lg position-relative dropdown-image" style="background-image:url('{% static 'assets/img/curved-images/curved8.jpg' %}')">
                  <div class="mask bg-gradient-primary border-radius-lg"></div>
                  <div class="d-flex justify-content-center align-items-center text-center text-white font-weight-bold w-100 z-index-1 flex-column">
                    <div class="icon icon-shape rounded-circle bg-white shadow text-center">
                      <i class="ni ni-diamond text-primary text-gradient text-lg" aria-hidden="true"></i>
                    </div>
                    <span class="text-lg mt-2">Explore our<br>utilities pages</span>
                  </div>
                </div>
              </div>
              <div class="col-6 ps-0 d-flex justify-content-center flex-column">
                <ul class="list-group">
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignIn">
                      <span>Sign In</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignIn">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_login' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_login' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_login' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownSignUp">
                      <span>Sign Up</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownSignUp">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_register' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_register' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_register' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownPasswordReset">
                      <span>Reset Password</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownPasswordReset">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_reset' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_reset' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_reset' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownLock">
                      <span>Lock</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownLock">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_lock' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_lock' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_lock' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdown2fa">
                      <span>2-Step Verification</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdown2fa">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'basic_verification' %}">
                        <span>Basic</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'cover_verification' %}">
                        <span>Cover</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'illustration_verification' %}">
                        <span>Illustration</span>
                      </a>
                    </div>
                  </li>
                  <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                    <a class="dropdown-item border-radius-md ps-3 d-flex align-items-center justify-content-between mb-1" id="dropdownError">
                      <span>Error</span>
                      <img src="{% static 'assets/img/down-arrow.svg' %}" alt="down-arrow" class="arrow">
                    </a>
                    <div class="dropdown-menu mt-0 py-3 px-2" aria-labelledby="dropdownError">
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_404' %}">
                        <span>404</span>
                      </a>
                      <a class="dropdown-item ps-3 border-radius-md mb-1" href="{% url 'error_500' %}">
                        <span>500</span>
                      </a>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
            <div class="row d-lg-none">
              <div class="col-12 d-flex justify-content-center flex-column">
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                  Sign In
                </h6>
                <a href="{% url 'basic_login' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_login' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_login' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Sign Up
                </h6>
                <a href="{% url 'basic_register' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_register' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_register' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Reset Password
                </h6>
                <a href="{% url 'basic_reset' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_reset' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_reset' %}" class="dropdown-item border-radius-md">
                  Illustation
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Lock
                </h6>
                <a href="{% url 'basic_lock' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_lock' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_lock' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  2-Step Verification
                </h6>
                <a href="{% url 'basic_verification' %}" class="dropdown-item border-radius-md">
                  Basic
                </a>
                <a href="{% url 'cover_verification' %}" class="dropdown-item border-radius-md">
                  Cover
                </a>
                <a href="{% url 'illustration_verification' %}" class="dropdown-item border-radius-md">
                  Illustration
                </a>
                <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center mt-3 px-0">
                  Error
                </h6>
                <a href="{% url 'error_404' %}" class="dropdown-item border-radius-md">
                  404
                </a>
                <a href="{% url 'error_500' %}" class="dropdown-item border-radius-md">
                  500
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuBlocks" data-bs-toggle="dropdown" aria-expanded="false">
            Applications
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-md dropdown-md-responsive p-3 border-radius-lg mt-0 mt-lg-3" aria-labelledby="dropdownMenuBlocks">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Kanban</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-laptop text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Wizard</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-badge text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">DataTables</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item dropdown dropdown-hover dropdown-subitem list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <i class="ni ni-notification-70 text-gradient text-primary"></i>
                      </div>
                      <div class="w-100 d-flex align-items-center justify-content-between">
                        <div>
                          <p class="dropdown-header text-dark p-0">Calendar</p>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <!-- responsive -->
            <div class="row d-lg-none">
              <div class="col-md-12">
                <a class="py-2 ps-3 border-radius-md" href="{% url 'kanban' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-single-copy-04 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Kanban</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'wizard' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-laptop text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Wizard</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'datatables' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-badge text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">DataTables</p>
                      </div>
                    </div>
                  </div>
                </a>
                <a class="py-2 ps-3 border-radius-md" href="{% url 'calendar' %}">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <i class="ni ni-notification-70 text-gradient text-primary"></i>
                    </div>
                    <div class="w-100 d-flex align-items-center justify-content-between">
                      <div>
                        <p class="dropdown-header text-dark p-0">Calendar</p>
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuEcommerce" data-bs-toggle="dropdown" aria-expanded="false">
            Ecommerce
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}  " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg p-3 border-radius-xl mt-0 mt-lg-3" aria-labelledby="dropdownMenuEcommerce">
            <div class="row d-none d-lg-block">
              <div class="col-12 px-4 py-2">
                <div class="row">
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>document</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(154.000000, 300.000000)">
                                    <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                    <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Orders
                    </div>
                    <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order List</span>
                    </a>
                    <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Order Details</span>
                    </a>
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                          <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>box-3d-50</title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(603.000000, 0.000000)">
                                    <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                    <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                    <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      General
                    </div>
                    <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Overview</span>
                    </a>
                    <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Referral</span>
                    </a>
                    <hr class="vertical dark">
                  </div>
                  <div class="col-6 position-relative">
                    <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                      <div class="d-inline-block">
                        <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                          <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <title>shop </title>
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                              <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                                <g transform="translate(1716.000000, 291.000000)">
                                  <g transform="translate(0.000000, 148.000000)">
                                    <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                                    <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                                  </g>
                                </g>
                              </g>
                            </g>
                          </svg>
                        </div>
                      </div>
                      Products
                    </div>
                    <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">New Product</span>
                    </a>
                    <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Edit Product</span>
                    </a>
                    <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Product Page</span>
                    </a>
                    <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                      <span class="ps-3">Products List</span>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <!-- responsive -->
            <div class="d-lg-none">
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                    <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>document</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(154.000000, 300.000000)">
                              <path d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                              <path d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Orders
              </div>
              <a href="{% url 'order_list' %}" class="dropdown-item border-radius-md">
                Order List
              </a>
              <a href="{% url 'order_details' %}" class="dropdown-item border-radius-md">
                Order Details
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>box-3d-50</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(603.000000, 0.000000)">
                              <path d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                              <path d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                              <path d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                General
              </div>
              <a href="{% url 'overview' %}" class="dropdown-item border-radius-md">
                Overview
              </a>
              <a href="{% url 'referral' %}" class="dropdown-item border-radius-md">
                Referral
              </a>
              <div class="dropdown-header text-dark font-weight-bolder d-flex align-items-center px-0 mt-3">
                <div class="d-inline-block">
                  <div class="icon icon-shape icon-xs border-radius-md bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center ps-0">
                    <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>shop </title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(0.000000, 148.000000)">
                              <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                              <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                </div>
                Products
              </div>
              <a href="{% url 'new_product' %}" class="dropdown-item border-radius-md">
                New Product
              </a>
              <a href="{% url 'edit_product' %}" class="dropdown-item border-radius-md">
                Edit Product
              </a>
              <a href="{% url 'product_page' %}" class="dropdown-item border-radius-md">
                Product Page
              </a>
              <a href="{% url 'products_list' %}" class="dropdown-item border-radius-md">
                Products List
              </a>
            </div>
          </div>
        </li>
        <li class="nav-item dropdown dropdown-hover mx-2">
          <a role="button" class="nav-link ps-2 d-flex justify-content-between cursor-pointer align-items-center " id="dropdownMenuDocs" data-bs-toggle="dropdown" aria-expanded="false">
            Docs
            <img src="{% static 'assets/img/down-arrow-dark.svg' %} " alt="down-arrow" class="arrow ms-1 d-lg-block d-none">
            <img src="{% static 'assets/img/down-arrow-dark.svg' %}" alt="down-arrow" class="arrow ms-1 d-lg-none d-block">
          </a>
          <div class="dropdown-menu dropdown-menu-animation dropdown-lg mt-0 mt-lg-3 p-3 border-radius-lg" aria-labelledby="dropdownMenuDocs">
            <div class="d-none d-lg-block">
              <ul class="list-group">
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://github.com/app-generator/django-soft-ui-dashboard-pro">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>spaceship</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(4.000000, 301.000000)">
                                  <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                  <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                  <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                  <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                        <span class="text-sm">All about overview, quick start, license and contents</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/colors/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>document</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 300.000000)">
                                  <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                  <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                        <span class="text-sm">See our colors, icons and typography</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/alerts/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>box-3d-50</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(603.000000, 0.000000)">
                                  <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                  <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                  <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                        <span class="text-sm">Explore our collection of fully designed components</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/datepicker/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>switches</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(154.000000, 149.000000)">
                                  <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                  <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                        <span class="text-sm">Check how you can integrate our plugins</span>
                      </div>
                    </div>
                  </a>
                </li>
                <li class="nav-item list-group-item border-0 p-0">
                  <a class="dropdown-item py-2 ps-3 border-radius-md" href="https://www.creative-tim.com/learning-lab/bootstrap/utilities/soft-ui-dashboard">
                    <div class="d-flex">
                      <div class="icon h-10 me-3 d-flex mt-1">
                        <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <title>settings</title>
                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                              <g transform="translate(1716.000000, 291.000000)">
                                <g transform="translate(304.000000, 151.000000)">
                                  <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                  <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                  <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                                </g>
                              </g>
                            </g>
                          </g>
                        </svg>
                      </div>
                      <div>
                        <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                        <span class="text-sm">For those who want flexibility, use our utility classes</span>
                      </div>
                    </div>
                  </a>
                </li>
              </ul>
            </div>
            <div class="row d-lg-none">
              <div class="col-md-12 g-0">
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>spaceship</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(4.000000, 301.000000)">
                                <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                                <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                                <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                                <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Getting Started</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>document</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 300.000000)">
                                <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                                <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Foundation</h6>
                      <span class="text-sm">See our colors, icons and typography</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>box-3d-50</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2319.000000, -291.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(603.000000, 0.000000)">
                                <path class="color-background" d="M22.7597136,19.3090182 L38.8987031,11.2395234 C39.3926816,10.9925342 39.592906,10.3918611 39.3459167,9.89788265 C39.249157,9.70436312 39.0922432,9.5474453 38.8987261,9.45068056 L20.2741875,0.1378125 L20.2741875,0.1378125 C19.905375,-0.04725 19.469625,-0.04725 19.0995,0.1378125 L3.1011696,8.13815822 C2.60720568,8.38517662 2.40701679,8.98586148 2.6540352,9.4798254 C2.75080129,9.67332903 2.90771305,9.83023153 3.10122239,9.9269862 L21.8652864,19.3090182 C22.1468139,19.4497819 22.4781861,19.4497819 22.7597136,19.3090182 Z"></path>
                                <path class="color-background" d="M23.625,22.429159 L23.625,39.8805372 C23.625,40.4328219 24.0727153,40.8805372 24.625,40.8805372 C24.7802551,40.8805372 24.9333778,40.8443874 25.0722402,40.7749511 L41.2741875,32.673375 L41.2741875,32.673375 C41.719125,32.4515625 42,31.9974375 42,31.5 L42,14.241659 C42,13.6893742 41.5522847,13.241659 41,13.241659 C40.8447549,13.241659 40.6916418,13.2778041 40.5527864,13.3472318 L24.1777864,21.5347318 C23.8390024,21.7041238 23.625,22.0503869 23.625,22.429159 Z" opacity="0.7"></path>
                                <path class="color-background" d="M20.4472136,21.5347318 L1.4472136,12.0347318 C0.953235098,11.7877425 0.352562058,11.9879669 0.105572809,12.4819454 C0.0361450918,12.6208008 6.47121774e-16,12.7739139 0,12.929159 L0,30.1875 L0,30.1875 C0,30.6849375 0.280875,31.1390625 0.7258125,31.3621875 L19.5528096,40.7750766 C20.0467945,41.0220531 20.6474623,40.8218132 20.8944388,40.3278283 C20.963859,40.1889789 21,40.0358742 21,39.8806379 L21,22.429159 C21,22.0503869 20.7859976,21.7041238 20.4472136,21.5347318 Z" opacity="0.7"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Components</h6>
                      <span class="text-sm">Explore our collection of fully designed components</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>switches</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-1870.000000, -440.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(154.000000, 149.000000)">
                                <path class="color-background" d="M10,20 L30,20 C35.4545455,20 40,15.4545455 40,10 C40,4.54545455 35.4545455,0 30,0 L10,0 C4.54545455,0 0,4.54545455 0,10 C0,15.4545455 4.54545455,20 10,20 Z M10,3.63636364 C13.4545455,3.63636364 16.3636364,6.54545455 16.3636364,10 C16.3636364,13.4545455 13.4545455,16.3636364 10,16.3636364 C6.54545455,16.3636364 3.63636364,13.4545455 3.63636364,10 C3.63636364,6.54545455 6.54545455,3.63636364 10,3.63636364 Z" opacity="0.6"></path>
                                <path class="color-background" d="M30,23.6363636 L10,23.6363636 C4.54545455,23.6363636 0,28.1818182 0,33.6363636 C0,39.0909091 4.54545455,43.6363636 10,43.6363636 L30,43.6363636 C35.4545455,43.6363636 40,39.0909091 40,33.6363636 C40,28.1818182 35.4545455,23.6363636 30,23.6363636 Z M30,40 C26.5454545,40 23.6363636,37.0909091 23.6363636,33.6363636 C23.6363636,30.1818182 26.5454545,27.2727273 30,27.2727273 C33.4545455,27.2727273 36.3636364,30.1818182 36.3636364,33.6363636 C36.3636364,37.0909091 33.4545455,40 30,40 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Plugins</h6>
                      <span class="text-sm">Check how you can integrate our plugins</span>
                    </div>
                  </div>
                </a>
                <a class="dropdown-item py-2 ps-3 border-radius-md" href="#">
                  <div class="d-flex">
                    <div class="icon h-10 me-3 d-flex mt-1">
                      <svg class="text-secondary" width="16px" height="16px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <title>settings</title>
                        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                            <g transform="translate(1716.000000, 291.000000)">
                              <g transform="translate(304.000000, 151.000000)">
                                <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                                <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                                <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                              </g>
                            </g>
                          </g>
                        </g>
                      </svg>
                    </div>
                    <div>
                      <h6 class="dropdown-header text-dark font-weight-bolder d-flex align-items-center p-0">Utility Classes</h6>
                      <span class="text-sm">All about overview, quick start, license and contents</span>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </li>
      </ul>
      <ul class="navbar-nav d-lg-block d-none">
        <li class="nav-item">
          <a href="https://appseed.us/product/soft-ui-dashboard-pro/django/" target="_blank" 
             class="btn btn-sm  bg-gradient-primary  btn-round mb-0 me-1">Download</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- End Navbar -->

================
File: templates/includes/navigation.html
================
{% load static replace_value %}
{% load i18n %}
{% get_current_language as LANGUAGE_CODE %}
{% get_available_languages as LANGUAGES %}
{% get_language_info_list for LANGUAGES as languages %}

<!-- Navbar -->
<nav class="navbar navbar-main navbar-expand-lg position-sticky mt-4 top-1 px-0 mx-4 shadow-none border-radius-xl z-index-sticky" id="navbarBlur" data-scroll="true">
  <div class="container-fluid py-1 px-3">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
        <li class="breadcrumb-item text-sm">
          <a class="opacity-3 text-dark" href="javascript:;">
            <svg width="12px" height="12px" class="mb-1" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>shop </title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1716.000000, -439.000000)" fill="#252f40" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(0.000000, 148.000000)">
                      <path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z"></path>
                      <path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </a>
        </li>
        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark" href="javascript:;">Pages</a></li>
        <li class="breadcrumb-item text-sm text-dark active" aria-current="page">
          {{ segment|replace_value:"_" }}
        </li>
      </ol>
      <h6 class="font-weight-bolder mb-0">{{ segment|replace_value:"_" }}</h6>
    </nav>
    <div class="sidenav-toggler sidenav-toggler-inner d-xl-block d-none ">
      <a href="javascript:;" class="nav-link text-body p-0">
        <div class="sidenav-toggler-inner">
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
          <i class="sidenav-toggler-line"></i>
        </div>
      </a>
    </div>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <div class="ms-md-auto pe-md-3 d-flex align-items-center">
        <div class="input-group">
          <span class="input-group-text text-body"><i class="fas fa-search" aria-hidden="true"></i></span>
          <input type="text" class="form-control" placeholder="Type here...">
        </div>
      </div>
      <ul class="navbar-nav  justify-content-end">
        {% if request.user.is_authenticated %}
          {% if request.user.is_superuser %}
            <li class="nav-item d-flex align-items-center me-3">
              <a href="{% url 'admin:password_change' %}" class="nav-link text-body font-weight-bold px-0">
                <i class="fa fa-edit me-sm-1"></i>
                <span class="d-sm-inline d-none">Change Password</span>
              </a>
            </li>
            <li class="nav-item d-flex align-items-center">
              <a href="{% url 'admin:logout' %}" class="nav-link text-body font-weight-bold px-0">
                <i class="fas fa-sign-out-alt me-sm-1"></i>
                <span class="d-sm-inline d-none">Logout</span>
              </a>
            </li>
          {% else %}
            <li class="nav-item d-flex align-items-center me-3">
              <a href="{% url 'password_change' %}" class="nav-link text-body font-weight-bold px-0">
                <i class="fa fa-edit me-sm-1"></i>
                <span class="d-sm-inline d-none">Change Password</span>
              </a>
            </li>
            <li class="nav-item d-flex align-items-center">
              <a href="{% url 'logout' %}" class="nav-link text-body font-weight-bold px-0">
                <i class="fas fa-sign-out-alt me-sm-1"></i>
                <span class="d-sm-inline d-none">Logout</span>
              </a>
            </li>
          {% endif %}
        {% else %}
        <li class="nav-item d-flex align-items-center">
          <a href="{% url 'illustration_login' %}" class="nav-link text-body font-weight-bold px-0">
            <i class="fa fa-user me-sm-1"></i>
            <span class="d-sm-inline d-none">Sign In</span>
          </a>
        </li>
        {% endif %}
        {% if 'i18n' in request.get_full_path %}
        <li class="nav-item dropdown ps-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="dropdownLanguageButton" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fas fa-globe"></i>
          </a>
          <div class="dropdown-menu dropdown-menu-end px-2 py-3 me-sm-n4" aria-labelledby="dropdownLanguageButton">
            {% for language in languages %}
            <form action="{% url "set_language" %}" method="post">
              {% csrf_token %}
              <input type="hidden" name="language" value="{{ language.code }}">
              <button type="submit" class="dropdown-item d-flex align-items-center">
                {{ language.name }}
              </button>
            </form>
            {% endfor %}
          </div>
        </li>
        {% endif %}
        <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
            <div class="sidenav-toggler-inner">
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
            </div>
          </a>
        </li>
        <li class="nav-item px-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0">
            <i class="fa fa-cog fixed-plugin-button-nav cursor-pointer"></i>
          </a>
        </li>
        <li class="nav-item dropdown pe-3 d-flex align-items-center">
          <a href="{% url "change_mode" %}" class="nav-link text-body p-0">
            <i class="fa fa-sun cursor-pointer"></i>
          </a>
        </li>
        <li class="nav-item dropdown pe-2 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fa fa-bell cursor-pointer"></i>
          </a>
          <ul class="dropdown-menu dropdown-menu-end px-2 py-3 me-sm-n4" aria-labelledby="dropdownMenuButton">
            <li class="mb-2">
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="my-auto">
                    <img src="{% static 'assets/img/team-2.jpg' %}" class="avatar avatar-sm  me-3 " alt="user image">
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      <span class="font-weight-bold">New message</span> from Laur
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      13 minutes ago
                    </p>
                  </div>
                </div>
              </a>
            </li>
            <li class="mb-2">
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="my-auto">
                    <img src="{% static 'assets/img/small-logos/logo-spotify.svg' %}" class="avatar avatar-sm bg-gradient-dark  me-3 " alt="logo spotify">
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      <span class="font-weight-bold">New album</span> by Travis Scott
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      1 day
                    </p>
                  </div>
                </div>
              </a>
            </li>
            <li>
              <a class="dropdown-item border-radius-md" href="javascript:;">
                <div class="d-flex py-1">
                  <div class="avatar avatar-sm bg-gradient-secondary  me-3  my-auto">
                    <svg width="12px" height="12px" viewBox="0 0 43 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <title>credit-card</title>
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g transform="translate(-2169.000000, -745.000000)" fill="#FFFFFF" fill-rule="nonzero">
                          <g transform="translate(1716.000000, 291.000000)">
                            <g transform="translate(453.000000, 454.000000)">
                              <path class="color-background" d="M43,10.7482083 L43,3.58333333 C43,1.60354167 41.3964583,0 39.4166667,0 L3.58333333,0 C1.60354167,0 0,1.60354167 0,3.58333333 L0,10.7482083 L43,10.7482083 Z" opacity="0.593633743"></path>
                              <path class="color-background" d="M0,16.125 L0,32.25 C0,34.2297917 1.60354167,35.8333333 3.58333333,35.8333333 L39.4166667,35.8333333 C41.3964583,35.8333333 43,34.2297917 43,32.25 L43,16.125 L0,16.125 Z M19.7083333,26.875 L7.16666667,26.875 L7.16666667,23.2916667 L19.7083333,23.2916667 L19.7083333,26.875 Z M35.8333333,26.875 L28.6666667,26.875 L28.6666667,23.2916667 L35.8333333,23.2916667 L35.8333333,26.875 Z"></path>
                            </g>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <h6 class="text-sm font-weight-normal mb-1">
                      Payment successfully completed
                    </h6>
                    <p class="text-xs text-secondary mb-0">
                      <i class="fa fa-clock me-1"></i>
                      2 days
                    </p>
                  </div>
                </div>
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- End Navbar -->

================
File: templates/includes/scripts.html
================
{% load static %}

<!--   Core JS Files   -->
<script src="{% static 'assets/js/core/popper.min.js' %}"></script>
<script src="{% static 'assets/js/core/bootstrap.min.js' %}"></script>
<script src="{% static 'assets/js/plugins/perfect-scrollbar.min.js' %}"></script>
<script src="{% static 'assets/js/plugins/smooth-scrollbar.min.js' %}"></script>
<!-- Kanban scripts -->
<script src="{% static 'assets/js/plugins/dragula/dragula.min.js' %}"></script>
<script src="{% static 'assets/js/plugins/jkanban/jkanban.js' %}"></script>
<script>
  var win = navigator.platform.indexOf('Win') > -1;
  if (win && document.querySelector('#sidenav-scrollbar')) {
    var options = {
      damping: '0.5'
    }
    Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
  }
</script>
<!-- Github buttons -->
<script async defer src="https://buttons.github.io/buttons.js"></script>
<!-- Control Center for Soft Dashboard: parallax effects, scripts for the example pages etc -->
<script src="{% static 'assets/js/soft-ui-dashboard.min.js' %}"></script>

================
File: templates/includes/sidebar-general.html
================
{% load static %}

<aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3 " id="sidenav-main">
  <div class="sidenav-header">
    <i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute end-0 top-0 d-none d-xl-none" aria-hidden="true" id="iconSidenav"></i>
    <a class="navbar-brand m-0" href=" https://app.neuralami.com " target="_blank">
      <img src="{% static 'assets/neuralami/logos/NeuralamiLogo51x51.png' %}" class="navbar-brand-img h-100" alt="main_logo">
      <span class="ms-1 font-weight-bold">Neuralami Tools</span>
    </a>
  </div>
  <hr class="horizontal dark mt-0">
  <div class="collapse navbar-collapse  w-auto h-auto" id="sidenav-collapse-main">
    {% include 'includes/menu-list-general.html' %}
  </div>
  <div class="sidenav-footer mx-3 mt-3 pt-3">
    <div class="card card-background shadow-none card-background-mask-secondary" id="sidenavCard">
      <div class="full-background" style="background-image: url('{% static 'assets/img/curved-images/white-curved.jpg' %}')"></div>
      <div class="card-body text-start p-3 w-100">
        <div class="icon icon-shape icon-sm bg-white shadow text-center mb-3 d-flex align-items-center justify-content-center border-radius-md">
          <i class="ni ni-diamond text-dark text-gradient text-lg top-0" aria-hidden="true" id="sidenavCardIcon"></i>
        </div>
        <div class="docs-info">
          <h6 class="text-white up mb-0">Need help?</h6>
          <p class="text-xs font-weight-bold">Create a support ticket</p>
          <a href="https://support.neuralami.ai" target="_blank" class="btn btn-white btn-sm w-100 mb-0">Support Ticket</a>
        </div>
      </div>
    </div>
  </div>
</aside>

================
File: templates/includes/sidebar-rtl.html
================
{% load static %}

<aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-end me-3 rotate-caret" id="sidenav-main">
  <div class="sidenav-header">
    <i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute start-0 top-0 d-none d-xl-none" aria-hidden="true" id="iconSidenav"></i>
    <a class="navbar-brand m-0" href=" https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/default.html " target="_blank">
      <img src="{% static 'assets/img/logo-ct-dark.png' %}" class="navbar-brand-img h-100" alt="main_logo">
      <span class="me-1 font-weight-bold">Soft UI Dashboard PRO</span>
    </a>
  </div>
  <hr class="horizontal dark mt-0">
  <div class="collapse navbar-collapse px-0 w-auto h-auto" id="sidenav-collapse-main">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#dashboardsExamples" class="nav-link " aria-controls="dashboardsExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg width="12px" height="12px" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>shop </title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1716.000000, -439.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(0.000000, 148.000000)">
                      <path class="color-background" d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z" opacity="0.598981585"></path>
                      <path class="color-background" d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Dashboards</span>
        </a>
        <div class="collapse " id="dashboardsExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'index' %}">
                <span class="sidenav-mini-icon"> D </span>
                <span class="sidenav-normal"> Default </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'automotive' %}">
                <span class="sidenav-mini-icon"> A </span>
                <span class="sidenav-normal"> Automotive </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'smart_home' %}">
                <span class="sidenav-mini-icon"> S </span>
                <span class="sidenav-normal"> Smart Home </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#vrExamples">
                <span class="sidenav-mini-icon"> V </span>
                <span class="sidenav-normal"> Virtual Reality <b class="caret"></b></span>
              </a>
              <div class="collapse " id="vrExamples">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'vr_default' %}">
                      <span class="sidenav-mini-icon text-xs"> V </span>
                      <span class="sidenav-normal"> VR Default </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'vr_info' %}">
                      <span class="sidenav-mini-icon text-xs"> V </span>
                      <span class="sidenav-normal"> VR Info </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'crm' %}">
                <span class="sidenav-mini-icon"> C </span>
                <span class="sidenav-normal"> CRM </span>
              </a>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item mt-3">
        <h6 class="ps-4 me-4 text-uppercase text-xs font-weight-bolder opacity-6">PAGES</h6>
      </li>
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#pagesExamples" class="nav-link active" aria-controls="pagesExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg width="12px" height="12px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>office</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1869.000000, -293.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g id="office" transform="translate(153.000000, 2.000000)">
                      <path class="color-background" d="M12.25,17.5 L8.75,17.5 L8.75,1.75 C8.75,0.78225 9.53225,0 10.5,0 L31.5,0 C32.46775,0 33.25,0.78225 33.25,1.75 L33.25,12.25 L29.75,12.25 L29.75,3.5 L12.25,3.5 L12.25,17.5 Z" opacity="0.6"></path>
                      <path class="color-background" d="M40.25,14 L24.5,14 C23.53225,14 22.75,14.78225 22.75,15.75 L22.75,38.5 L19.25,38.5 L19.25,22.75 C19.25,21.78225 18.46775,21 17.5,21 L1.75,21 C0.78225,21 0,21.78225 0,22.75 L0,40.25 C0,41.21775 0.78225,42 1.75,42 L40.25,42 C41.21775,42 42,41.21775 42,40.25 L42,15.75 C42,14.78225 41.21775,14 40.25,14 Z M12.25,36.75 L7,36.75 L7,33.25 L12.25,33.25 L12.25,36.75 Z M12.25,29.75 L7,29.75 L7,26.25 L12.25,26.25 L12.25,29.75 Z M35,36.75 L29.75,36.75 L29.75,33.25 L35,33.25 L35,36.75 Z M35,29.75 L29.75,29.75 L29.75,26.25 L35,26.25 L35,29.75 Z M35,22.75 L29.75,22.75 L29.75,19.25 L35,19.25 L35,22.75 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Pages</span>
        </a>
        <div class="collapse  show " id="pagesExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#profileExample">
                <span class="sidenav-mini-icon"> P </span>
                <span class="sidenav-normal"> Profile <b class="caret"></b></span>
              </a>
              <div class="collapse " id="profileExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'profile_overview' %}">
                      <span class="sidenav-mini-icon text-xs"> P </span>
                      <span class="sidenav-normal"> Profile Overview </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'teams' %}">
                      <span class="sidenav-mini-icon text-xs"> T </span>
                      <span class="sidenav-normal"> Teams </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'projects' %}">
                      <span class="sidenav-mini-icon text-xs"> A </span>
                      <span class="sidenav-normal"> All Projects </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#usersExample">
                <span class="sidenav-mini-icon"> U </span>
                <span class="sidenav-normal"> Users <b class="caret"></b></span>
              </a>
              <div class="collapse " id="usersExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'reports' %}">
                      <span class="sidenav-mini-icon text-xs"> R </span>
                      <span class="sidenav-normal"> Reports </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'new_user' %}">
                      <span class="sidenav-mini-icon text-xs"> N </span>
                      <span class="sidenav-normal"> New User </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#accountExample">
                <span class="sidenav-mini-icon"> A </span>
                <span class="sidenav-normal"> Account <b class="caret"></b></span>
              </a>
              <div class="collapse " id="accountExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'settings' %}">
                      <span class="sidenav-mini-icon text-xs"> S </span>
                      <span class="sidenav-normal"> Settings </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'billing' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Billing </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'invoice' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Invoice </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'security' %}">
                      <span class="sidenav-mini-icon text-xs"> S </span>
                      <span class="sidenav-normal"> Security </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#projectsExample">
                <span class="sidenav-mini-icon"> P </span>
                <span class="sidenav-normal"> Projects <b class="caret"></b></span>
              </a>
              <div class="collapse " id="projectsExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'general' %}">
                      <span class="sidenav-mini-icon text-xs"> G </span>
                      <span class="sidenav-normal"> General </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'timeline' %}">
                      <span class="sidenav-mini-icon text-xs"> T </span>
                      <span class="sidenav-normal"> Timeline </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'new_project' %}">
                      <span class="sidenav-mini-icon text-xs"> N </span>
                      <span class="sidenav-normal"> New Project </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'pricing' %}">
                <span class="sidenav-mini-icon"> P </span>
                <span class="sidenav-normal"> Pricing Page </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'messages' %}">
                <span class="sidenav-mini-icon"> M </span>
                <span class="sidenav-normal"> Messages </span>
              </a>
            </li>
            <li class="nav-item active">
              <a class="nav-link active" href="{% url 'rtl' %}">
                <span class="sidenav-mini-icon"> R </span>
                <span class="sidenav-normal"> RTL </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'widgets' %}">
                <span class="sidenav-mini-icon"> W </span>
                <span class="sidenav-normal"> Widgets </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'charts' %}">
                <span class="sidenav-mini-icon"> C </span>
                <span class="sidenav-normal"> Charts </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'sweet_alerts' %}">
                <span class="sidenav-mini-icon"> S </span>
                <span class="sidenav-normal"> Sweet Alerts </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'notifications' %}">
                <span class="sidenav-mini-icon"> N </span>
                <span class="sidenav-normal"> Notifications </span>
              </a>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#applicationsExamples" class="nav-link " aria-controls="applicationsExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg width="12px" height="12px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>settings</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-2020.000000, -442.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(304.000000, 151.000000)">
                      <polygon class="color-background" opacity="0.596981957" points="18.0883333 15.7316667 11.1783333 8.82166667 13.3333333 6.66666667 6.66666667 0 0 6.66666667 6.66666667 13.3333333 8.82166667 11.1783333 15.315 17.6716667"></polygon>
                      <path class="color-background" d="M31.5666667,23.2333333 C31.0516667,23.2933333 30.53,23.3333333 30,23.3333333 C29.4916667,23.3333333 28.9866667,23.3033333 28.48,23.245 L22.4116667,30.7433333 L29.9416667,38.2733333 C32.2433333,40.575 35.9733333,40.575 38.275,38.2733333 L38.275,38.2733333 C40.5766667,35.9716667 40.5766667,32.2416667 38.275,29.94 L31.5666667,23.2333333 Z" opacity="0.596981957"></path>
                      <path class="color-background" d="M33.785,11.285 L28.715,6.215 L34.0616667,0.868333333 C32.82,0.315 31.4483333,0 30,0 C24.4766667,0 20,4.47666667 20,10 C20,10.99 20.1483333,11.9433333 20.4166667,12.8466667 L2.435,27.3966667 C0.95,28.7083333 0.0633333333,30.595 0.00333333333,32.5733333 C-0.0583333333,34.5533333 0.71,36.4916667 2.11,37.89 C3.47,39.2516667 5.27833333,40 7.20166667,40 C9.26666667,40 11.2366667,39.1133333 12.6033333,37.565 L27.1533333,19.5833333 C28.0566667,19.8516667 29.01,20 30,20 C35.5233333,20 40,15.5233333 40,10 C40,8.55166667 39.685,7.18 39.1316667,5.93666667 L33.785,11.285 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Applications</span>
        </a>
        <div class="collapse " id="applicationsExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'kanban' %}">
                <span class="sidenav-mini-icon"> K </span>
                <span class="sidenav-normal"> Kanban </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'wizard' %}">
                <span class="sidenav-mini-icon"> W </span>
                <span class="sidenav-normal"> Wizard </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'datatables' %}">
                <span class="sidenav-mini-icon"> D </span>
                <span class="sidenav-normal"> DataTables </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'calendar' %}">
                <span class="sidenav-mini-icon"> C </span>
                <span class="sidenav-normal"> Calendar </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'analytics' %}">
                <span class="sidenav-mini-icon"> A </span>
                <span class="sidenav-normal"> Analytics </span>
              </a>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#ecommerceExamples" class="nav-link " aria-controls="ecommerceExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg class="text-dark" width="12px" height="12px" viewBox="0 0 42 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>basket</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1869.000000, -741.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g id="basket" transform="translate(153.000000, 450.000000)">
                      <path class="color-background" d="M34.080375,13.125 L27.3748125,1.9490625 C27.1377583,1.53795093 26.6972449,1.28682264 26.222716,1.29218729 C25.748187,1.29772591 25.3135593,1.55890827 25.0860125,1.97535742 C24.8584658,2.39180657 24.8734447,2.89865282 25.1251875,3.3009375 L31.019625,13.125 L10.980375,13.125 L16.8748125,3.3009375 C17.1265553,2.89865282 17.1415342,2.39180657 16.9139875,1.97535742 C16.6864407,1.55890827 16.251813,1.29772591 15.777284,1.29218729 C15.3027551,1.28682264 14.8622417,1.53795093 14.6251875,1.9490625 L7.919625,13.125 L0,13.125 L0,18.375 L42,18.375 L42,13.125 L34.080375,13.125 Z" opacity="0.595377604"></path>
                      <path class="color-background" d="M3.9375,21 L3.9375,38.0625 C3.9375,40.9619949 6.28800506,43.3125 9.1875,43.3125 L32.8125,43.3125 C35.7119949,43.3125 38.0625,40.9619949 38.0625,38.0625 L38.0625,21 L3.9375,21 Z M14.4375,36.75 L11.8125,36.75 L11.8125,26.25 L14.4375,26.25 L14.4375,36.75 Z M22.3125,36.75 L19.6875,36.75 L19.6875,26.25 L22.3125,26.25 L22.3125,36.75 Z M30.1875,36.75 L27.5625,36.75 L27.5625,26.25 L30.1875,26.25 L30.1875,36.75 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Ecommerce</span>
        </a>
        <div class="collapse " id="ecommerceExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'overview' %}">
                <span class="sidenav-mini-icon"> O </span>
                <span class="sidenav-normal"> Overview </span>
              </a>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#productsExample">
                <span class="sidenav-mini-icon"> P </span>
                <span class="sidenav-normal"> Products <b class="caret"></b></span>
              </a>
              <div class="collapse " id="productsExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'new_product' %}">
                      <span class="sidenav-mini-icon text-xs"> N </span>
                      <span class="sidenav-normal"> New Product </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'edit_product' %}">
                      <span class="sidenav-mini-icon text-xs"> E </span>
                      <span class="sidenav-normal"> Edit Product </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'product_page' %}">
                      <span class="sidenav-mini-icon text-xs"> P </span>
                      <span class="sidenav-normal"> Product Page </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'products_list' %}">
                      <span class="sidenav-mini-icon text-xs"> P </span>
                      <span class="sidenav-normal"> Products List </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#ordersExample">
                <span class="sidenav-mini-icon"> O </span>
                <span class="sidenav-normal"> Orders <b class="caret"></b></span>
              </a>
              <div class="collapse " id="ordersExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'order_list' %}">
                      <span class="sidenav-mini-icon text-xs"> O </span>
                      <span class="sidenav-normal"> Order List </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'order_details' %}">
                      <span class="sidenav-mini-icon text-xs"> O </span>
                      <span class="sidenav-normal"> Order Details </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " href="{% url 'referral' %}">
                <span class="sidenav-mini-icon"> R </span>
                <span class="sidenav-normal"> Referral </span>
              </a>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#authExamples" class="nav-link " aria-controls="authExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg width="12px" height="12px" viewBox="0 0 40 44" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>document</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1870.000000, -591.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(154.000000, 300.000000)">
                      <path class="color-background" d="M40,40 L36.3636364,40 L36.3636364,3.63636364 L5.45454545,3.63636364 L5.45454545,0 L38.1818182,0 C39.1854545,0 40,0.814545455 40,1.81818182 L40,40 Z" opacity="0.603585379"></path>
                      <path class="color-background" d="M30.9090909,7.27272727 L1.81818182,7.27272727 C0.814545455,7.27272727 0,8.08727273 0,9.09090909 L0,41.8181818 C0,42.8218182 0.814545455,43.6363636 1.81818182,43.6363636 L30.9090909,43.6363636 C31.9127273,43.6363636 32.7272727,42.8218182 32.7272727,41.8181818 L32.7272727,9.09090909 C32.7272727,8.08727273 31.9127273,7.27272727 30.9090909,7.27272727 Z M18.1818182,34.5454545 L7.27272727,34.5454545 L7.27272727,30.9090909 L18.1818182,30.9090909 L18.1818182,34.5454545 Z M25.4545455,27.2727273 L7.27272727,27.2727273 L7.27272727,23.6363636 L25.4545455,23.6363636 L25.4545455,27.2727273 Z M25.4545455,20 L7.27272727,20 L7.27272727,16.3636364 L25.4545455,16.3636364 L25.4545455,20 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Authentication</span>
        </a>
        <div class="collapse " id="authExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signinExample">
                <span class="sidenav-mini-icon"> S </span>
                <span class="sidenav-normal"> Sign In <b class="caret"></b></span>
              </a>
              <div class="collapse " id="signinExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'basic_login' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Basic </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'cover_login' %}">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> Cover </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'illustration_login' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Illustration </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#signupExample">
                <span class="sidenav-mini-icon"> S </span>
                <span class="sidenav-normal"> Sign Up <b class="caret"></b></span>
              </a>
              <div class="collapse " id="signupExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'basic_register' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Basic </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'cover_register' %}">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> Cover </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'illustration_register' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Illustration </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#resetExample">
                <span class="sidenav-mini-icon"> R </span>
                <span class="sidenav-normal"> Reset Password <b class="caret"></b></span>
              </a>
              <div class="collapse " id="resetExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'basic_reset' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Basic </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'cover_reset' %}">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> Cover </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'illustration_reset' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Illustration </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#lockExample">
                <span class="sidenav-mini-icon"> L </span>
                <span class="sidenav-normal"> Lock <b class="caret"></b></span>
              </a>
              <div class="collapse " id="lockExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'basic_lock' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Basic </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'cover_lock' %}">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> Cover </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'illustration_lock' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Illustration </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#StepExample">
                <span class="sidenav-mini-icon"> 2 </span>
                <span class="sidenav-normal"> 2-Step Verification <b class="caret"></b></span>
              </a>
              <div class="collapse " id="StepExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'basic_verification' %}">
                      <span class="sidenav-mini-icon text-xs"> B </span>
                      <span class="sidenav-normal"> Basic </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'cover_verification' %}">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> Cover </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'illustration_verification' %}">
                      <span class="sidenav-mini-icon text-xs"> I </span>
                      <span class="sidenav-normal"> Illustration </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#errorExample">
                <span class="sidenav-mini-icon"> E </span>
                <span class="sidenav-normal"> Error <b class="caret"></b></span>
              </a>
              <div class="collapse " id="errorExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'error_404' %}">
                      <span class="sidenav-mini-icon text-xs"> E </span>
                      <span class="sidenav-normal"> Error 404 </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="{% url 'error_500' %}">
                      <span class="sidenav-mini-icon text-xs"> E </span>
                      <span class="sidenav-normal"> Error 500 </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <hr class="horizontal dark" />
        <h6 class="ps-4 me-4 text-uppercase text-xs font-weight-bolder opacity-6">DOCS</h6>
      </li>
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#basicExamples" class="nav-link " aria-controls="basicExamples" role="button" aria-expanded="false">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center d-flex align-items-center justify-content-center ms-2">
            <svg width="12px" height="20px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>spaceship</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-1720.000000, -592.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(4.000000, 301.000000)">
                      <path class="color-background" d="M39.3,0.706666667 C38.9660984,0.370464027 38.5048767,0.192278529 38.0316667,0.216666667 C14.6516667,1.43666667 6.015,22.2633333 5.93166667,22.4733333 C5.68236407,23.0926189 5.82664679,23.8009159 6.29833333,24.2733333 L15.7266667,33.7016667 C16.2013871,34.1756798 16.9140329,34.3188658 17.535,34.065 C17.7433333,33.98 38.4583333,25.2466667 39.7816667,1.97666667 C39.8087196,1.50414529 39.6335979,1.04240574 39.3,0.706666667 Z M25.69,19.0233333 C24.7367525,19.9768687 23.3029475,20.2622391 22.0572426,19.7463614 C20.8115377,19.2304837 19.9992882,18.0149658 19.9992882,16.6666667 C19.9992882,15.3183676 20.8115377,14.1028496 22.0572426,13.5869719 C23.3029475,13.0710943 24.7367525,13.3564646 25.69,14.31 C26.9912731,15.6116662 26.9912731,17.7216672 25.69,19.0233333 L25.69,19.0233333 Z"></path>
                      <path class="color-background" d="M1.855,31.4066667 C3.05106558,30.2024182 4.79973884,29.7296005 6.43969145,30.1670277 C8.07964407,30.6044549 9.36054508,31.8853559 9.7979723,33.5253085 C10.2353995,35.1652612 9.76258177,36.9139344 8.55833333,38.11 C6.70666667,39.9616667 0,40 0,40 C0,40 0,33.2566667 1.855,31.4066667 Z"></path>
                      <path class="color-background" d="M17.2616667,3.90166667 C12.4943643,3.07192755 7.62174065,4.61673894 4.20333333,8.04166667 C3.31200265,8.94126033 2.53706177,9.94913142 1.89666667,11.0416667 C1.5109569,11.6966059 1.61721591,12.5295394 2.155,13.0666667 L5.47,16.3833333 C8.55036617,11.4946947 12.5559074,7.25476565 17.2616667,3.90166667 L17.2616667,3.90166667 Z" opacity="0.598539807"></path>
                      <path class="color-background" d="M36.0983333,22.7383333 C36.9280725,27.5056357 35.3832611,32.3782594 31.9583333,35.7966667 C31.0587397,36.6879974 30.0508686,37.4629382 28.9583333,38.1033333 C28.3033941,38.4890431 27.4704606,38.3827841 26.9333333,37.845 L23.6166667,34.53 C28.5053053,31.4496338 32.7452344,27.4440926 36.0983333,22.7383333 L36.0983333,22.7383333 Z" opacity="0.598539807"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Basic</span>
        </a>
        <div class="collapse " id="basicExamples">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item ">
              <a class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="#gettingStartedExample">
                <span class="sidenav-mini-icon"> G </span>
                <span class="sidenav-normal"> Getting Started <b class="caret"></b></span>
              </a>
              <div class="collapse " id="gettingStartedExample">
                <ul class="nav nav-sm flex-column">
                  <li class="nav-item">
                    <a class="nav-link " href="https://github.com/app-generator/django-soft-ui-dashboard-pro" target="_blank">
                      <span class="sidenav-mini-icon text-xs"> Q </span>
                      <span class="sidenav-normal"> Quick Start </span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link " href="https://www.creative-tim.com/learning-lab/bootstrap/overview/soft-ui-dashboard?AFFILIATE=128200" target="_blank">
                      <span class="sidenav-mini-icon text-xs"> C </span>
                      <span class="sidenav-normal"> UI Components </span>
                    </a>
                  </li>
                </ul>
              </div>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="https://github.com/app-generator/django-soft-ui-dashboard-pro/blob/main/CHANGELOG.md" target="_blank">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center ms-2 d-flex align-items-center justify-content-center">
            <svg width="12px" height="12px" viewBox="0 0 43 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
              <title>credit-card</title>
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g transform="translate(-2169.000000, -745.000000)" fill="#FFFFFF" fill-rule="nonzero">
                  <g transform="translate(1716.000000, 291.000000)">
                    <g transform="translate(453.000000, 454.000000)">
                      <path class="color-background" d="M43,10.7482083 L43,3.58333333 C43,1.60354167 41.3964583,0 39.4166667,0 L3.58333333,0 C1.60354167,0 0,1.60354167 0,3.58333333 L0,10.7482083 L43,10.7482083 Z" opacity="0.593633743"></path>
                      <path class="color-background" d="M0,16.125 L0,32.25 C0,34.2297917 1.60354167,35.8333333 3.58333333,35.8333333 L39.4166667,35.8333333 C41.3964583,35.8333333 43,34.2297917 43,32.25 L43,16.125 L0,16.125 Z M19.7083333,26.875 L7.16666667,26.875 L7.16666667,23.2916667 L19.7083333,23.2916667 L19.7083333,26.875 Z M35.8333333,26.875 L28.6666667,26.875 L28.6666667,23.2916667 L35.8333333,23.2916667 L35.8333333,26.875 Z"></path>
                    </g>
                  </g>
                </g>
              </g>
            </svg>
          </div>
          <span class="nav-link-text me-1">Changelog</span>
        </a>
      </li>
    </ul>
  </div>
  <div class="sidenav-footer mx-3 mt-3 pt-3">
    <div class="card card-background shadow-none card-background-mask-secondary" id="sidenavCard">
      <div class="full-background" style="background-image: url('{% static 'assets/img/curved-images/white-curved.jpg' %}')"></div>
      <div class="card-body text-start p-3 w-100">
        <div class="icon icon-shape icon-sm bg-white shadow text-center mb-3 d-flex align-items-center justify-content-center border-radius-md">
          <i class="ni ni-diamond text-dark text-gradient text-lg top-0" aria-hidden="true" id="sidenavCardIcon"></i>
        </div>
        <div class="docs-info">
          <h6 class="text-white up mb-0 text-end">تحتاج مساعدة?</h6>
          <p class="text-xs font-weight-bold text-end">يرجى التحقق من مستنداتنا</p>
          <a href="https://github.com/app-generator/django-soft-ui-dashboard-pro" target="_blank" class="btn btn-white btn-sm w-100 mb-0">توثيق</a>
        </div>
      </div>
    </div>
  </div>
</aside>

================
File: templates/includes/sidebar.html
================
{% load static %}

<aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3 " id="sidenav-main">
  <div class="sidenav-header">
    <i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute end-0 top-0 d-none d-xl-none" aria-hidden="true" id="iconSidenav"></i>
    <a class="navbar-brand m-0" href="/">
      <img src="{% static 'assets/neuralami/logos/NeuralamiLogo51x51.png' %}" class="navbar-brand-img h-100" alt="main_logo">
      <span class="ms-1 font-weight-bold">Neuralami Control Center</span>
    </a>
  </div>
  <hr class="horizontal dark mt-0">
  <div class="collapse navbar-collapse w-auto" id="sidenav-collapse-main">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#dashboardSubmenu" class="nav-link {% if request.resolver_match.url_name == 'dashboard' or request.resolver_match.url_name == 'llm-dashboard' %}active{% endif %}" aria-controls="dashboardSubmenu" role="button" aria-expanded="{% if request.resolver_match.url_name == 'dashboard' or request.resolver_match.url_name == 'llm-dashboard' %}true{% else %}false{% endif %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-tv-2 text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Dashboard</span>
        </a>
        <div class="collapse {% if request.resolver_match.url_name == 'dashboard' or request.resolver_match.url_name == 'llm-dashboard' %}show{% endif %}" id="dashboardSubmenu">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'dashboard' %}active{% endif %}" href="{% url 'seo_manager:dashboard' %}">
                <span class="sidenav-mini-icon"> O </span>
                <span class="sidenav-normal"> Overview </span>
              </a>
            </li>
            {% if request.user.is_staff %}
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'llm-dashboard' %}active{% endif %}" href="{% url 'llm-dashboard' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-chart-bar-32 text-info"></i> </span>
                <span class="sidenav-normal"> LLM Analytics </span>
              </a>
            </li>
            {% endif %}
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'client_list' %}active{% endif %}" href="{% url 'seo_manager:client_list' %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-briefcase-24 text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Clients</span>
        </a>
      </li>
      <!-- Agent Crews section with submenu -->
      <li class="nav-item">
        <a data-bs-toggle="collapse" href="#agentCrewsSubmenu" class="nav-link {% if 'agents' in request.resolver_match.app_name %}active{% endif %}" aria-controls="agentCrewsSubmenu" role="button" aria-expanded="{% if 'agents' in request.resolver_match.app_name %}true{% else %}false{% endif %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-spaceship text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Agent Crews</span>
        </a>
        <div class="collapse {% if 'agents' in request.resolver_match.app_name %}show{% endif %}" id="agentCrewsSubmenu">
          <ul class="nav ms-4 ps-3">
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'crewai_home' %}active{% endif %}" href="{% url 'agents:crewai_home' %}">
                <span class="sidenav-mini-icon"> O </span>
                <span class="sidenav-normal"> Overview </span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'manage_agents' %}active{% endif %}" href="{% url 'agents:manage_agents_card_view' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-single-02 text-info"></i> </span>
                <span class="sidenav-normal"> Manage Agents </span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'manage_tasks' %}active{% endif %}" href="{% url 'agents:manage_tasks' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-bullet-list-67 text-primary"></i> </span>
                <span class="sidenav-normal"> Manage Tasks </span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'manage_tools' %}active{% endif %}" href="{% url 'agents:manage_tools' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-settings text-warning"></i> </span>
                <span class="sidenav-normal"> Manage Tools </span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'manage_crews' %}active{% endif %}" href="{% url 'agents:manage_crews_card_view' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-circle-08 text-success"></i> </span>
                <span class="sidenav-normal"> Manage Crews </span>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link {% if request.resolver_match.url_name == 'manage_pipelines' %}active{% endif %}" href="{% url 'agents:manage_pipelines' %}">
                <span class="sidenav-mini-icon"> <i class="ni ni-atom text-danger"></i> </span>
                <span class="sidenav-normal"> Manage Pipelines </span>
              </a>
            </li>
          </ul>
        </div>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'activity_log' %}active{% endif %}" href="{% url 'seo_manager:activity_log' %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-calendar-grid-58 text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Activity Log</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'crawl_website' %}active{% endif %}" href="{% url 'crawl_website:index' %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-world-2 text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Crawl Website</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'summarize' %}active{% endif %}" href="{% url 'seo_manager:summarize_view' %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-scissors text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Summarize</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'file_manager' %}active{% endif %}" href="{% url 'file_manager' %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-folder-17 text-primary text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">File Manager</span>
        </a>
      </li>
      
      {% if client %}
      <li class="nav-item mt-3">
        <h6 class="ps-4 ms-2 text-uppercase text-xs font-weight-bolder opacity-6">Client: {{ client.name }}</h6>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'client_detail' %}active{% endif %}" href="{% url 'seo_manager:client_detail' client.id %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-single-02 text-dark text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Overview</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link {% if request.resolver_match.url_name == 'client_analytics' %}active{% endif %}" href="{% url 'seo_manager:client_analytics' client.id %}">
          <div class="icon icon-shape icon-sm shadow border-radius-md bg-white text-center me-2 d-flex align-items-center justify-content-center">
            <i class="ni ni-chart-bar-32 text-info text-sm opacity-10"></i>
          </div>
          <span class="nav-link-text ms-1">Analytics</span>
        </a>
      </li>
      {% endif %} 
    </ul>
  </div>
  <div class="collapse navbar-collapse  w-auto h-auto" id="sidenav-collapse-main">
    {% include 'includes/menu-list.html' %}
  </div>
</aside>

================
File: templates/includes/subdirectories.html
================
{% load static %}
{% load file_manager_extras %}

{% for item, content in directory.items %}
    {% if content.type == 'directory' %}
        <li class="folder-item" data-path="{{ item }}">
            <div class="folder-content d-flex align-items-center">
                <i class="fas fa-chevron-down me-2"></i>
                <i class="fas fa-folder text-warning me-2"></i>
                <a href="{% url 'file_manager' item|urlencode %}" class="text-truncate">{{ item|basename }}</a>
            </div>
            <ul class="list-unstyled ps-3 folder-contents">
                {% include "includes/subdirectories.html" with directory=content.contents %}
            </ul>
        </li>
    {% endif %}
{% endfor %}

================
File: templates/layouts/base-fullscreen.html
================
<!--
=========================================================
* Material Dashboard 2 PRO - v3.0.5
=========================================================

* Product Page:  https://www.creative-tim.com/product/material-dashboard-pro 
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-->
<!DOCTYPE html>
<html lang="en">

<head>
  
  {% include 'includes/head.html' %}

  {% block extrastyle %}{% endblock extrastyle %}

</head>

<body class="g-sidenav-show  bg-gray-100 {% block body %}{% endblock body %}">
    {% block header %}
      {% include 'includes/navigation-fullscreen.html' %}
    {% endblock header %}

    {% block content %}{% endblock content %}

    {% block footer %}
      {% include 'includes/footer-fullscreen.html' %}
    {% endblock footer %}

    {% block fixed_plugin %} 
      {% include 'includes/fixed-plugin.html' %}
    {% endblock fixed_plugin %}

    {% include 'includes/scripts.html' %}
  
    {% block extra_js %}{% endblock extra_js %}


</body>

</html>

================
File: templates/layouts/base-general.html
================
<!--
=========================================================
* Soft UI Dashboard PRO - v1.1.1
=========================================================

* Product Page:  https://www.creative-tim.com/product/soft-ui-dashboard-pro 
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-->
{% load i18n static admin_soft %}
{% get_current_language as LANGUAGE_CODE %}
{% get_current_language_bidi as LANGUAGE_BIDI %}
{% get_direction as direction %}
{% get_admin_setting as admin_setting %}

<!DOCTYPE html>
<html lang="en">

<head>
  {% include 'includes/head.html' %}
  {% block extrahead %}{% endblock extrahead %}
  {% block extrastyle %}{% endblock extrastyle %}
</head>

<body class="g-sidenav-show bg-gray-100 {% block body %}{% endblock body %}">

  {% block sidebar %}
    {% include 'includes/sidebar-general.html' %}
  {% endblock sidebar %}

  <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
    {% block header %}
      {% include 'includes/navigation.html' %}
    {% endblock header %}
    {% block content %}{% endblock content %}
  </main>

  {% block fixed_plugin %}
    {% include 'includes/fixed-plugin.html' %}
  {% endblock fixed_plugin %}

  {% include 'includes/scripts.html' %}
  {% block extra_js %}{% endblock extra_js %}

  <script src="{% static "assets/js/dark-theme.js" %}"></script>
  <script>
    if ('{{ request.user.profile.dark_mode }}' === 'True') {
      document.addEventListener('DOMContentLoaded', function() {
        initialDarkMode();
      });
    }
  </script>
  

</body>
</html>

================
File: templates/layouts/base-rtl.html
================
<!--
=========================================================
* Material Dashboard 2 PRO - v3.0.5
=========================================================

* Product Page:  https://www.creative-tim.com/product/material-dashboard-pro 
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-->
<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
  
  {% include 'includes/head.html' %}

  {% block extrastyle %}{% endblock extrastyle %}
</head>

<body class="g-sidenav-show rtl bg-gray-100 {% block body %}{% endblock body %}">

  {% block sidebar %}
    {% include 'includes/sidebar-rtl.html' %}
  {% endblock sidebar %}

  <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg overflow-x-hidden">
    {% block header %}
      {% include 'includes/navigation-rtl.html' %}
    {% endblock header %}

    {% block content %}{% endblock content %}
  </main>

  {% include 'includes/fixed-plugin.html' %}

  {% include 'includes/scripts.html' %}

  {% block extra_js %}{% endblock extra_js %}

</body>
</html>

================
File: templates/layouts/base-shadow.html
================
<!--
=========================================================
* Material Dashboard 2 PRO - v3.0.5
=========================================================

* Product Page:  https://www.creative-tim.com/product/material-dashboard-pro 
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-->
<!DOCTYPE html>
<html lang="en">

<head>
  
  {% include 'includes/head.html' %}

  {% block extrastyle %}{% endblock extrastyle %}

</head>

<body class="{% block body %}{% endblock body %}">
  {% comment %} <div class="container position-sticky z-index-sticky top-0">
    <div class="row">
      <div class="col-12">
        {% block header %}
          {% include 'includes/navigation-shadow.html' %}
        {% endblock header %}
      </div>
    </div>
  </div> {% endcomment %}

  {% block content %}{% endblock content %}

  {% block footer %}
    {% include 'includes/footer-fullscreen.html' %}
  {% endblock footer %}

  {% block fixed_plugin %} 
    {% include 'includes/fixed-plugin.html' %}
  {% endblock fixed_plugin %}

  {% include 'includes/scripts.html' %}

  {% block extra_js %}{% endblock extra_js %}


</body>

</html>

================
File: templates/layouts/base.html
================
<!--
=========================================================
* Soft UI Dashboard PRO - v1.1.1
=========================================================

* Product Page:  https://www.creative-tim.com/product/soft-ui-dashboard-pro 
* Copyright 2022 Creative Tim (https://www.creative-tim.com)
* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-->
{% load i18n static admin_soft %}
{% get_current_language as LANGUAGE_CODE %}
{% get_current_language_bidi as LANGUAGE_BIDI %}
{% get_direction as direction %}
{% get_admin_setting as admin_setting %}

<!DOCTYPE html>
<html lang="en">

<head>
  {% include 'includes/head.html' %}
  <!-- Add Sweet Alert CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
  {% block extrahead %}{% endblock extrahead %}
  {% block extrastyle %}{% endblock extrastyle %}
</head>

<body class="g-sidenav-show bg-gray-100 {% block body %}{% endblock body %}">

  {% block sidebar %}
    {% include 'includes/sidebar.html' %}
  {% endblock sidebar %}

  <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
    {% block header %}
      {% include 'includes/navigation.html' %}
    {% endblock header %}
    {% block content %}{% endblock content %}
  </main>

  {% block fixed_plugin %}
    {% include 'includes/fixed-plugin.html' %}
  {% endblock fixed_plugin %}

  <!-- Toast Container -->
  {% comment %}
  {% if messages %}
  <div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-fixed top-0 end-0 p-3">
      {% for message in messages %}
      <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body {{ message.tags }}">
          {{ message|safe }}
        </div>
      </div>
      {% endfor %}
    </div>
  </div>
  {% endif %}
  {% endcomment %}

  {% include 'includes/scripts.html' %}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <!-- Add Sweet Alert JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
  
  {% block extra_js %}{% endblock extra_js %}

  <script src="{% static "assets/js/dark-theme.js" %}"></script>
  <script>
    if ('{{ request.user.profile.dark_mode }}' === 'True') {
      document.addEventListener('DOMContentLoaded', function() {
        initialDarkMode();
      });
      // Fix typo in request
      console.log('{{ request.user.profile.dark_mode }}');  // Fixed typo from reqest to request
    }
  </script>
  <!-- Initialize and show toasts -->
  {% comment %}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var toastElList = [].slice.call(document.querySelectorAll('.toast'));
      var toastList = toastElList.map(function(toastEl) {
        return new bootstrap.Toast(toastEl, {
          autohide: true,
          delay: 5000
        });
      });
      toastList.forEach(toast => toast.show());
    });
  </script>
  {% endcomment %}

</body>
</html>

================
File: templates/registration/logged_out.html
================
{% extends 'layouts/base-fullscreen.html' %}
{% load i18n static %}

{% block header %}{% endblock header %}

{% block title %} Sign OUT {% endblock %}

{% block content %}
    <main>
        <section class="vh-lg-100 mt-5 mt-lg-0 bg-soft d-flex align-items-center">
            <div class="container">
                <div class="row justify-content-center form-bg-image">
                    <div class="col-12 d-flex align-items-center justify-content-center">
                        <div class="bg-white shadow border-0 rounded p-4 p-lg-5 w-100 fmxw-500">
                            <div class="text-center text-md-center mb-4 mt-md-0">
                                <h1 class="h3">{% trans 'Log in' %}</h1>
                                <p class="text-gray">{% trans "Thanks for spending some quality time with us today." %}</p>
                            </div>
                            <div class="mt-5">
                                <div class="d-grid mt-3">
                                    <a href="{% url 'illustration_login' %}" class="btn btn-gray-800">{% trans 'Log in again' %}</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}

{% block footer %}{% endblock footer %}

{% block extrascript %}
    <script type="application/javascript">
        notification.info("<p class='{{ direction.panel }}'>" + "{% trans "Thanks for spending some quality time with us    today." %}" + "</p>", 'top', '{{ direction.notify }}');
    </script>
{% endblock %}

================
File: templates/registration/password_change_done.html
================
{% extends "layouts/base.html" %}
{% load static i18n %}

{% block overlay %}
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
{% endblock overlay %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% block userlinks %}
    {% url 'django-admindocs-docroot' as docsroot %}

    {% if docsroot %}
        <a href="{{ docsroot }}">{% trans 'Documentation' %}</a> /
    {% endif %}

    {% trans 'Change password' %} /
    <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>
{% endblock %}

{% block breadcrumbs %}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
        <div class="d-block mb-4 mb-md-0">
            <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                    <li class="breadcrumb-item">
                        <a href="{% url 'admin:index' %}">
                            <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                            </svg>
                        </a>
                    </li>
                    <li class="breadcrumb-item">{% trans 'Password change' %}</li>
                </ol>
            </nav>
        </div>
    </div>
{% endblock %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
    <div class="row mt-5">
        <div class="col-md-12">
            <div class="card mx-3 mt-5">
                <div class="card-header">
                    <h5 class="title">{% trans 'Your password was changed.' %}</h5>
                </div>
                <div class="card-body">
                    <a href="{% url 'admin:index' %}" class="btn btn-fill btn-primary">
                        <i class="fa fa-home"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extrascript %}
    <script type="application/javascript">
        notification.info("<p class='{{ direction.panel }}'>" + "{% trans 'Your password was changed.' %}" + "</p>", 'top', '{{ direction.notify }}');
    </script>
{% endblock %}

================
File: templates/registration/password_change_form.html
================
{% extends "layouts/base.html" %}
{% load i18n static %}

{% block overlay %}
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
{% endblock overlay %}

{% block extrastyle %}
    <link rel="stylesheet" type="text/css" href="{% static "assets/css/forms.css" %}">
{% endblock %}

{% block breadcrumbs %}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
        <div class="d-block mb-4 mb-md-0">
            <nav aria-label="breadcrumb" class="d-none d-md-inline-block">
                <ol class="breadcrumb breadcrumb-dark breadcrumb-transparent">
                    <li class="breadcrumb-item">
                        <a href="{% url 'admin:index' %}">
                            <svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                            </svg>
                        </a>
                    </li>
                    <li class="breadcrumb-item">{% trans 'Password change' %}</li>
                </ol>
            </nav>
        </div>
    </div>
{% endblock %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
    <div class="row mt-5">
        <div class="col-md-12">
            <div class="card mx-3">
                <div class="card-header">
                    <div class="title">
                        {% trans "Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly." %}
                    </div>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}

                        <div class="form-group">
                            {{ form.old_password.errors }}
                            {{ form.old_password.label_tag }} {{ form.old_password }}
                        </div>

                        <div class="form-group">
                            {{ form.new_password1.errors }}
                            {{ form.new_password1.label_tag }} {{ form.new_password1 }}
                            {% if form.new_password1.help_text %}
                                <div class="help">{{ form.new_password1.help_text|safe }}</div>
                            {% endif %}
                        </div>

                        <div class="form-group">
                            {{ form.new_password2.errors }}
                            {{ form.new_password2.label_tag }} {{ form.new_password2 }}
                            {% if form.new_password2.help_text %}
                                <div class="help">{{ form.new_password2.help_text|safe }}</div>
                            {% endif %}
                        </div>

                        <div class="card submit_btn">
                            <div class="card-body">
                                <button type="submit" class="btn btn-sm btn-primary">
                                    {% trans 'Change my password' %}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extrascript %}
    <script type="application/javascript">
        {% if form.errors %}
            notification.danger("{% trans "Please correct the errors below." %}", 'top', 'right');
        {% endif %}
    </script>
{% endblock %}

================
File: add_dependencies.py
================
# add_dependencies.py
import subprocess

# Read the requirements.in file
with open('requirements.in', 'r') as f:
    lines = f.readlines()

# Filter out comments and empty lines
dependencies = [line.strip() for line in lines if line.strip() and not line.startswith('#')]

# Add each dependency using Poetry
for dep in dependencies:
    print(f"Adding dependency: {dep}")
    subprocess.run(f'poetry add {dep}', shell=True)

================
File: docker-compose.yml
================
version: "3.8"
services:
  appseed-app:
    container_name: appseed-app
    restart: always
    build:
      context: .
    networks:
      - db_network
      - web_network
  nginx:
    container_name: nginx
    restart: always
    image: "nginx:latest"
    ports:
      - "5085:5085"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      - web_network
    depends_on:
      - appseed-app
  redis:
    image: redis:7.0.12
    container_name: redis
    command: ["redis-server", "--port", "6379", "--slave-read-only", "no"]
    restart: always
    ports:
      - 6379:6379
    networks:
      - db_network
  celery:
    container_name: celery
    restart: always
    build:
      context: .
    networks:
      - db_network
    environment:
      DJANGO_SETTINGS_MODULE: "core.settings"
    command: "celery -A apps.tasks worker -l info -B"
    depends_on:
      - appseed-app

networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge

================
File: package.json
================
{
    "name": "appseed-generic",
    "version": "1.0.0",
    "description": "Generic tooling by AppSeed",
    "main": "gulpfile.js",
    "author": "AppSeed",
    "keywords": [
        "css",
        "sass",
        "gulp",
        "web"
    ],
    "homepage": "https://appseed.us",
    "bugs": {
        "email": "support@appseed.us"
    },
    "license": "MIT License",
    "devDependencies": {
        "browser-sync": "^2.27.4",
        "del": "^6.0.0",
        "gulp": "^4.0.2",
        "gulp-autoprefixer": "^8.0.0",
        "gulp-clean-css": "^4.3.0",
        "gulp-cssbeautify": "^3.0.0",
        "node-sass": "^6.0.1",
        "gulp-file-include": "^2.3.0",
        "gulp-header": "^2.0.9",
        "gulp-htmlmin": "^5.0.1",
        "gulp-npm-dist": "^1.0.3",
        "gulp-plumber": "^1.2.1",
        "gulp-rename": "^2.0.0",
        "gulp-sass": "^5.0.0",
        "gulp-sourcemaps": "^3.0.0",
        "gulp-uglify": "^3.0.2",
        "gulp-wait": "^0.0.2",
        "merge-stream": "^2.0.0"
    }
}
